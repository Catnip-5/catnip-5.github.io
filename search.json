[{"title":"前端待学技术","url":"/%E5%89%8D%E7%AB%AF/%E5%BE%85%E5%AD%A6%E6%8A%80%E6%9C%AF/","content":"<p>框架：<br>    Vue、React：首选<br>    Next.js：全栈<br>    Svelte：性能<br>    Angular：企业级<br>编程语言：<br>    JavaScript (ECMAScript)：小型项目（说明：ECMAScript是规范，是JavaScript 的标准，新特性）<br>    TypeScript：大型、复杂项目，标配<br>样式方案：<br>    Tailwind CSS：快速开发<br>    SCSS：传统项目<br>    PostCSS：CSS 优化<br>    CSS-in-JS (Styled-Components, Emotion)：React 项目组件化动态样式，（说明：CSS-in-JS技术范式，Styled-Components 和 Emotion 是其实现）<br>数据请求：<br>    Axios：基于 Promise 的 HTTP 库，跨框架或复杂请求<br>    Fetch API：浏览器内置的 HTTP 请求 API，对比Axios更轻量且无依赖，替代 XMLHttpRequest<br>    React Query：React 项目复杂数据管理<br>    SWR：React 项目简单数据获取<br>构建工具：<br>    Vite：新项目，开发体验和速度优于 Webpack<br>    Webpack：复杂或老项目<br>    esbuild：性能优先，但需其他工具配合<br>服务：<br>    Node：运行时环境<br>代码规范：组合使用<br>    ESLint：代码检查工具<br>    Prettier：自动格式化代码<br>全局状态管理：<br>    Redux：大型 React 项目<br>    Zustand：中小型 React 项目<br>    Pinia：Vue 3 标配，取代 Vuex<br>测试与工具：<br>    Vitest：基于 Vite 的单元测试框架，取代 Jest<br>    Cypress：易用的 E2E 测试，调试体验优秀<br>    Playwright：强大的 E2E 测试，跨浏览器支持</p>\n<p>组件库与 UI 框架：<br>    Material-UI (MUI)：React 的 UI 组件库<br>    Ant Design：React 的企业级 UI 组件库<br>    Chakra UI：React 的轻量 UI 组件库<br>    Headless UI：自定义 UI，Tailwind 配合<br>    Element Plus：Vue 3 企业后台<br>    Vuetify：Material 风格 Vue 应用<br>动画与交互：<br>    Chart.js：图表库<br>    GSAP：动画库<br>    Framer Motion：React 专用的动画库<br>    Three.js：3D库<br>    D3.js：SVG 操作数据，专注 2D 数据可视化<br>国际化：<br>    i18next：JavaScript 国际化框架<br>    React Intl：React 专用的国际化库<br>性能优化与监控：<br>    Lighthouse：Google 提供的 Web 性能和 SEO 审计工具<br>    Sentry：错误监控和性能追踪平台</p>\n<hr>\n<p>待学顺序：<br>JavaScript (ECMAScript): 这是前端的基石，先打好基础。<br>HTML5 和 CSS3: 学习网页结构和样式。<br>任选一个前端框架 (Vue 或 React): 建议先掌握一个框架的核心概念。<br>TypeScript: 在掌握 JavaScript 基础上学习 TypeScript。<br>样式方案 (Tailwind CSS, SCSS, PostCSS): 学习 CSS 预处理器和工具。<br>数据请求 (Axios 或 Fetch API): 学习如何从服务器获取数据。<br>构建工具 (Vite 或 Webpack): 学习如何打包和构建你的代码。<br>代码规范 (ESLint, Prettier): 学习如何保持代码风格一致。<br>Next.js: 在掌握 React 基础上学习 Next.js。</p>\n","categories":["前端"],"tags":["前端","待学"]},{"title":"MCP","url":"/AI/MCP/","content":"<h2 id=\"MCP\"><a href=\"#MCP\" class=\"headerlink\" title=\"MCP\"></a>MCP</h2><ul>\n<li><code>MCP 是一种用于将通用 Tools 模块化、外部化的协议方案</code>。将AI应用中常用的 Tools 从各个应用中提取出来，构建为一个<code>可独立部署、可分布式扩展的外部工具服务</code>，从而降低AI应用中工具开发的重复工作，解决信息孤岛问题。</li>\n<li>通过 MCP 协议，外部的工具服务以 JSON 数据格式，向各类 AI应用声明其可用 Tools，应用仅需基于 MCP 提供的接口信息，使用传统的 Tools 参数结构，即可与基础大模型对话式调用。</li>\n<li><code>MCP 仅作用于应用层，大模型层依然是传统 Tools 方式。</code></li>\n</ul>\n<img src=\"/AI/MCP/MCP.png\" class=\"\" title=\"MCP\">\n\n<span id=\"more\"></span>\n\n<h2 id=\"MCP-SpringAI\"><a href=\"#MCP-SpringAI\" class=\"headerlink\" title=\"MCP SpringAI\"></a>MCP SpringAI</h2><h3 id=\"MCP-Server\"><a href=\"#MCP-Server\" class=\"headerlink\" title=\"MCP Server\"></a>MCP Server</h3><figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.ai<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-ai-mcp-server-webflux-spring-boot-starter<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight yml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">server:</span></span><br><span class=\"line\">  <span class=\"attr\">port:</span> <span class=\"number\">8001</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">ai:</span></span><br><span class=\"line\">    <span class=\"attr\">mcp:</span></span><br><span class=\"line\">      <span class=\"attr\">server:</span></span><br><span class=\"line\">        <span class=\"attr\">name:</span> <span class=\"string\">my-mcp-server</span></span><br><span class=\"line\">        <span class=\"attr\">version:</span> <span class=\"number\">1.0</span><span class=\"number\">.0</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.time.LocalDate;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.time.format.DateTimeFormatter;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.fasterxml.jackson.annotation.JsonIgnoreProperties;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.fasterxml.jackson.annotation.JsonProperty;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.ai.tool.annotation.Tool;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.ai.tool.annotation.ToolParam;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.stereotype.Service;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.client.RestClient;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.client.RestClientException;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 利用OpenMeteo的免费天气API提供天气服务</span></span><br><span class=\"line\"><span class=\"comment\"> * 该API无需API密钥，可以直接使用</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Service</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">OpenMeteoService</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// OpenMeteo免费天气API基础URL</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">String</span> <span class=\"variable\">BASE_URL</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;https://api.open-meteo.com/v1&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> RestClient restClient;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">OpenMeteoService</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.restClient = RestClient.builder()</span><br><span class=\"line\">                .baseUrl(BASE_URL)</span><br><span class=\"line\">                .defaultHeader(<span class=\"string\">&quot;Accept&quot;</span>, <span class=\"string\">&quot;application/json&quot;</span>)</span><br><span class=\"line\">                .defaultHeader(<span class=\"string\">&quot;User-Agent&quot;</span>, <span class=\"string\">&quot;OpenMeteoClient/1.0&quot;</span>)</span><br><span class=\"line\">                .build();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// OpenMeteo天气数据模型</span></span><br><span class=\"line\">    <span class=\"meta\">@JsonIgnoreProperties(ignoreUnknown = true)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">record</span> <span class=\"title class_\">WeatherData</span><span class=\"params\">(</span></span><br><span class=\"line\"><span class=\"params\">            @JsonProperty(&quot;latitude&quot;)</span> Double latitude,</span><br><span class=\"line\">            <span class=\"meta\">@JsonProperty(&quot;longitude&quot;)</span> Double longitude,</span><br><span class=\"line\">            <span class=\"meta\">@JsonProperty(&quot;timezone&quot;)</span> String timezone,</span><br><span class=\"line\">            <span class=\"meta\">@JsonProperty(&quot;current&quot;)</span> CurrentWeather current,</span><br><span class=\"line\">            <span class=\"meta\">@JsonProperty(&quot;daily&quot;)</span> DailyForecast daily,</span><br><span class=\"line\">            <span class=\"meta\">@JsonProperty(&quot;current_units&quot;)</span> CurrentUnits currentUnits) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@JsonIgnoreProperties(ignoreUnknown = true)</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">record</span> <span class=\"title class_\">CurrentWeather</span><span class=\"params\">(</span></span><br><span class=\"line\"><span class=\"params\">                @JsonProperty(&quot;time&quot;)</span> String time,</span><br><span class=\"line\">                <span class=\"meta\">@JsonProperty(&quot;temperature_2m&quot;)</span> Double temperature,</span><br><span class=\"line\">                <span class=\"meta\">@JsonProperty(&quot;apparent_temperature&quot;)</span> Double feelsLike,</span><br><span class=\"line\">                <span class=\"meta\">@JsonProperty(&quot;relative_humidity_2m&quot;)</span> Integer humidity,</span><br><span class=\"line\">                <span class=\"meta\">@JsonProperty(&quot;precipitation&quot;)</span> Double precipitation,</span><br><span class=\"line\">                <span class=\"meta\">@JsonProperty(&quot;weather_code&quot;)</span> Integer weatherCode,</span><br><span class=\"line\">                <span class=\"meta\">@JsonProperty(&quot;wind_speed_10m&quot;)</span> Double windSpeed,</span><br><span class=\"line\">                <span class=\"meta\">@JsonProperty(&quot;wind_direction_10m&quot;)</span> Integer windDirection) &#123;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@JsonIgnoreProperties(ignoreUnknown = true)</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">record</span> <span class=\"title class_\">CurrentUnits</span><span class=\"params\">(</span></span><br><span class=\"line\"><span class=\"params\">                @JsonProperty(&quot;time&quot;)</span> String timeUnit,</span><br><span class=\"line\">                <span class=\"meta\">@JsonProperty(&quot;temperature_2m&quot;)</span> String temperatureUnit,</span><br><span class=\"line\">                <span class=\"meta\">@JsonProperty(&quot;relative_humidity_2m&quot;)</span> String humidityUnit,</span><br><span class=\"line\">                <span class=\"meta\">@JsonProperty(&quot;wind_speed_10m&quot;)</span> String windSpeedUnit) &#123;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@JsonIgnoreProperties(ignoreUnknown = true)</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">record</span> <span class=\"title class_\">DailyForecast</span><span class=\"params\">(</span></span><br><span class=\"line\"><span class=\"params\">                @JsonProperty(&quot;time&quot;)</span> List&lt;String&gt; time,</span><br><span class=\"line\">                <span class=\"meta\">@JsonProperty(&quot;temperature_2m_max&quot;)</span> List&lt;Double&gt; tempMax,</span><br><span class=\"line\">                <span class=\"meta\">@JsonProperty(&quot;temperature_2m_min&quot;)</span> List&lt;Double&gt; tempMin,</span><br><span class=\"line\">                <span class=\"meta\">@JsonProperty(&quot;precipitation_sum&quot;)</span> List&lt;Double&gt; precipitationSum,</span><br><span class=\"line\">                <span class=\"meta\">@JsonProperty(&quot;weather_code&quot;)</span> List&lt;Integer&gt; weatherCode,</span><br><span class=\"line\">                <span class=\"meta\">@JsonProperty(&quot;wind_speed_10m_max&quot;)</span> List&lt;Double&gt; windSpeedMax,</span><br><span class=\"line\">                <span class=\"meta\">@JsonProperty(&quot;wind_direction_10m_dominant&quot;)</span> List&lt;Integer&gt; windDirection) &#123;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 获取天气代码对应的描述</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String <span class=\"title function_\">getWeatherDescription</span><span class=\"params\">(<span class=\"type\">int</span> code)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">switch</span> (code) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"number\">0</span> -&gt; <span class=\"string\">&quot;晴朗&quot;</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span> -&gt; <span class=\"string\">&quot;多云&quot;</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"number\">45</span>, <span class=\"number\">48</span> -&gt; <span class=\"string\">&quot;雾&quot;</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"number\">51</span>, <span class=\"number\">53</span>, <span class=\"number\">55</span> -&gt; <span class=\"string\">&quot;毛毛雨&quot;</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"number\">56</span>, <span class=\"number\">57</span> -&gt; <span class=\"string\">&quot;冻雨&quot;</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"number\">61</span>, <span class=\"number\">63</span>, <span class=\"number\">65</span> -&gt; <span class=\"string\">&quot;雨&quot;</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"number\">66</span>, <span class=\"number\">67</span> -&gt; <span class=\"string\">&quot;冻雨&quot;</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"number\">71</span>, <span class=\"number\">73</span>, <span class=\"number\">75</span> -&gt; <span class=\"string\">&quot;雪&quot;</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"number\">77</span> -&gt; <span class=\"string\">&quot;雪粒&quot;</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"number\">80</span>, <span class=\"number\">81</span>, <span class=\"number\">82</span> -&gt; <span class=\"string\">&quot;阵雨&quot;</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"number\">85</span>, <span class=\"number\">86</span> -&gt; <span class=\"string\">&quot;阵雪&quot;</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"number\">95</span> -&gt; <span class=\"string\">&quot;雷暴&quot;</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"number\">96</span>, <span class=\"number\">99</span> -&gt; <span class=\"string\">&quot;雷暴伴有冰雹&quot;</span>;</span><br><span class=\"line\">            <span class=\"keyword\">default</span> -&gt; <span class=\"string\">&quot;未知天气&quot;</span>;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 获取风向描述</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String <span class=\"title function_\">getWindDirection</span><span class=\"params\">(<span class=\"type\">int</span> degrees)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (degrees &gt;= <span class=\"number\">337.5</span> || degrees &lt; <span class=\"number\">22.5</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">&quot;北风&quot;</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (degrees &gt;= <span class=\"number\">22.5</span> &amp;&amp; degrees &lt; <span class=\"number\">67.5</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">&quot;东北风&quot;</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (degrees &gt;= <span class=\"number\">67.5</span> &amp;&amp; degrees &lt; <span class=\"number\">112.5</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">&quot;东风&quot;</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (degrees &gt;= <span class=\"number\">112.5</span> &amp;&amp; degrees &lt; <span class=\"number\">157.5</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">&quot;东南风&quot;</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (degrees &gt;= <span class=\"number\">157.5</span> &amp;&amp; degrees &lt; <span class=\"number\">202.5</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">&quot;南风&quot;</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (degrees &gt;= <span class=\"number\">202.5</span> &amp;&amp; degrees &lt; <span class=\"number\">247.5</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">&quot;西南风&quot;</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (degrees &gt;= <span class=\"number\">247.5</span> &amp;&amp; degrees &lt; <span class=\"number\">292.5</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">&quot;西风&quot;</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;西北风&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 获取指定经纬度的天气预报</span></span><br><span class=\"line\"><span class=\"comment\">     * </span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> latitude  纬度</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> longitude 经度</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 指定位置的天气预报</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@throws</span> RestClientException 如果请求失败</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Tool(description = &quot;获取指定经纬度的天气预报&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">getWeatherForecastByLocation</span><span class=\"params\">(<span class=\"type\">double</span> latitude, <span class=\"type\">double</span> longitude)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 获取天气数据（当前和未来7天）</span></span><br><span class=\"line\">        <span class=\"type\">var</span> <span class=\"variable\">weatherData</span> <span class=\"operator\">=</span> restClient.get()</span><br><span class=\"line\">                .uri(<span class=\"string\">&quot;/forecast?latitude=&#123;latitude&#125;&amp;longitude=&#123;longitude&#125;&amp;current=temperature_2m,apparent_temperature,relative_humidity_2m,precipitation,weather_code,wind_speed_10m,wind_direction_10m&amp;daily=temperature_2m_max,temperature_2m_min,precipitation_sum,weather_code,wind_speed_10m_max,wind_direction_10m_dominant&amp;timezone=auto&amp;forecast_days=7&quot;</span>,</span><br><span class=\"line\">                        latitude, longitude)</span><br><span class=\"line\">                .retrieve()</span><br><span class=\"line\">                .body(WeatherData.class);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 拼接天气信息</span></span><br><span class=\"line\">        <span class=\"type\">StringBuilder</span> <span class=\"variable\">weatherInfo</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">StringBuilder</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 添加当前天气信息</span></span><br><span class=\"line\">        WeatherData.<span class=\"type\">CurrentWeather</span> <span class=\"variable\">current</span> <span class=\"operator\">=</span> weatherData.current();</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">temperatureUnit</span> <span class=\"operator\">=</span> weatherData.currentUnits() != <span class=\"literal\">null</span> ? weatherData.currentUnits().temperatureUnit() : <span class=\"string\">&quot;°C&quot;</span>;</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">windSpeedUnit</span> <span class=\"operator\">=</span> weatherData.currentUnits() != <span class=\"literal\">null</span> ? weatherData.currentUnits().windSpeedUnit() : <span class=\"string\">&quot;km/h&quot;</span>;</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">humidityUnit</span> <span class=\"operator\">=</span> weatherData.currentUnits() != <span class=\"literal\">null</span> ? weatherData.currentUnits().humidityUnit() : <span class=\"string\">&quot;%&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        weatherInfo.append(String.format(<span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">                当前天气:</span></span><br><span class=\"line\"><span class=\"string\">                温度: %.1f%s (体感温度: %.1f%s)</span></span><br><span class=\"line\"><span class=\"string\">                天气: %s</span></span><br><span class=\"line\"><span class=\"string\">                风向: %s (%.1f %s)</span></span><br><span class=\"line\"><span class=\"string\">                湿度: %d%s</span></span><br><span class=\"line\"><span class=\"string\">                降水量: %.1f 毫米</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">                &quot;&quot;&quot;</span>,</span><br><span class=\"line\">                current.temperature(),</span><br><span class=\"line\">                temperatureUnit,</span><br><span class=\"line\">                current.feelsLike(),</span><br><span class=\"line\">                temperatureUnit,</span><br><span class=\"line\">                getWeatherDescription(current.weatherCode()),</span><br><span class=\"line\">                getWindDirection(current.windDirection()),</span><br><span class=\"line\">                current.windSpeed(),</span><br><span class=\"line\">                windSpeedUnit,</span><br><span class=\"line\">                current.humidity(),</span><br><span class=\"line\">                humidityUnit,</span><br><span class=\"line\">                current.precipitation()));</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 添加未来天气预报</span></span><br><span class=\"line\">        weatherInfo.append(<span class=\"string\">&quot;未来天气预报:\\n&quot;</span>);</span><br><span class=\"line\">        WeatherData.<span class=\"type\">DailyForecast</span> <span class=\"variable\">daily</span> <span class=\"operator\">=</span> weatherData.daily();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; daily.time().size(); i++) &#123;</span><br><span class=\"line\">            <span class=\"type\">String</span> <span class=\"variable\">date</span> <span class=\"operator\">=</span> daily.time().get(i);</span><br><span class=\"line\">            <span class=\"type\">double</span> <span class=\"variable\">tempMin</span> <span class=\"operator\">=</span> daily.tempMin().get(i);</span><br><span class=\"line\">            <span class=\"type\">double</span> <span class=\"variable\">tempMax</span> <span class=\"operator\">=</span> daily.tempMax().get(i);</span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">weatherCode</span> <span class=\"operator\">=</span> daily.weatherCode().get(i);</span><br><span class=\"line\">            <span class=\"type\">double</span> <span class=\"variable\">windSpeed</span> <span class=\"operator\">=</span> daily.windSpeedMax().get(i);</span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">windDir</span> <span class=\"operator\">=</span> daily.windDirection().get(i);</span><br><span class=\"line\">            <span class=\"type\">double</span> <span class=\"variable\">precip</span> <span class=\"operator\">=</span> daily.precipitationSum().get(i);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// 格式化日期</span></span><br><span class=\"line\">            <span class=\"type\">LocalDate</span> <span class=\"variable\">localDate</span> <span class=\"operator\">=</span> LocalDate.parse(date);</span><br><span class=\"line\">            <span class=\"type\">String</span> <span class=\"variable\">formattedDate</span> <span class=\"operator\">=</span> localDate.format(DateTimeFormatter.ofPattern(<span class=\"string\">&quot;yyyy-MM-dd (EEE)&quot;</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">            weatherInfo.append(String.format(<span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">                    %s:</span></span><br><span class=\"line\"><span class=\"string\">                    温度: %.1f%s ~ %.1f%s</span></span><br><span class=\"line\"><span class=\"string\">                    天气: %s</span></span><br><span class=\"line\"><span class=\"string\">                    风向: %s (%.1f %s)</span></span><br><span class=\"line\"><span class=\"string\">                    降水量: %.1f 毫米</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">                    &quot;&quot;&quot;</span>,</span><br><span class=\"line\">                    formattedDate,</span><br><span class=\"line\">                    tempMin, temperatureUnit,</span><br><span class=\"line\">                    tempMax, temperatureUnit,</span><br><span class=\"line\">                    getWeatherDescription(weatherCode),</span><br><span class=\"line\">                    getWindDirection(windDir),</span><br><span class=\"line\">                    windSpeed, windSpeedUnit,</span><br><span class=\"line\">                    precip));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> weatherInfo.toString();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 获取指定位置的空气质量信息 (使用备用模拟数据)</span></span><br><span class=\"line\"><span class=\"comment\">     * 注意：由于OpenMeteo的空气质量API可能需要额外配置或不可用，这里提供备用数据</span></span><br><span class=\"line\"><span class=\"comment\">     * </span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> latitude  纬度</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> longitude 经度</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 空气质量信息</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Tool(description = &quot;获取指定位置的空气质量信息（模拟数据）&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">getAirQuality</span><span class=\"params\">(<span class=\"meta\">@ToolParam(description = &quot;纬度&quot;)</span> <span class=\"type\">double</span> latitude,</span></span><br><span class=\"line\"><span class=\"params\">            <span class=\"meta\">@ToolParam(description = &quot;经度&quot;)</span> <span class=\"type\">double</span> longitude)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 从天气数据中获取基本信息</span></span><br><span class=\"line\">            <span class=\"type\">var</span> <span class=\"variable\">weatherData</span> <span class=\"operator\">=</span> restClient.get()</span><br><span class=\"line\">                    .uri(<span class=\"string\">&quot;/forecast?latitude=&#123;latitude&#125;&amp;longitude=&#123;longitude&#125;&amp;current=temperature_2m&amp;timezone=auto&quot;</span>,</span><br><span class=\"line\">                            latitude, longitude)</span><br><span class=\"line\">                    .retrieve()</span><br><span class=\"line\">                    .body(WeatherData.class);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// 模拟空气质量数据 - 实际情况下应该从真实API获取</span></span><br><span class=\"line\">            <span class=\"comment\">// 根据经纬度生成一些随机但相对合理的数据</span></span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">europeanAqi</span> <span class=\"operator\">=</span> (<span class=\"type\">int</span>) (Math.random() * <span class=\"number\">100</span>) + <span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">usAqi</span> <span class=\"operator\">=</span> (<span class=\"type\">int</span>) (europeanAqi * <span class=\"number\">1.5</span>);</span><br><span class=\"line\">            <span class=\"type\">double</span> <span class=\"variable\">pm10</span> <span class=\"operator\">=</span> Math.random() * <span class=\"number\">50</span> + <span class=\"number\">5</span>;</span><br><span class=\"line\">            <span class=\"type\">double</span> <span class=\"variable\">pm25</span> <span class=\"operator\">=</span> Math.random() * <span class=\"number\">25</span> + <span class=\"number\">2</span>;</span><br><span class=\"line\">            <span class=\"type\">double</span> <span class=\"variable\">co</span> <span class=\"operator\">=</span> Math.random() * <span class=\"number\">500</span> + <span class=\"number\">100</span>;</span><br><span class=\"line\">            <span class=\"type\">double</span> <span class=\"variable\">no2</span> <span class=\"operator\">=</span> Math.random() * <span class=\"number\">40</span> + <span class=\"number\">5</span>;</span><br><span class=\"line\">            <span class=\"type\">double</span> <span class=\"variable\">so2</span> <span class=\"operator\">=</span> Math.random() * <span class=\"number\">20</span> + <span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"type\">double</span> <span class=\"variable\">o3</span> <span class=\"operator\">=</span> Math.random() * <span class=\"number\">80</span> + <span class=\"number\">20</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"type\">String</span> <span class=\"variable\">aqiLevel</span> <span class=\"operator\">=</span> getAqiLevel(europeanAqi);</span><br><span class=\"line\">            <span class=\"type\">String</span> <span class=\"variable\">usAqiLevel</span> <span class=\"operator\">=</span> getUsAqiLevel(usAqi);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// 构建空气质量信息字符串</span></span><br><span class=\"line\">            <span class=\"type\">String</span> <span class=\"variable\">aqiInfo</span> <span class=\"operator\">=</span> String.format(<span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">                    空气质量信息 (纬度: %.4f, 经度: %.4f, 时区: %s):</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">                    欧洲空气质量指数 (EAQI): %d (%s)</span></span><br><span class=\"line\"><span class=\"string\">                    美国空气质量指数 (US AQI): %d (%s)</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">                    详细污染物信息:</span></span><br><span class=\"line\"><span class=\"string\">                    PM10: %.1f μg/m³</span></span><br><span class=\"line\"><span class=\"string\">                    PM2.5: %.1f μg/m³</span></span><br><span class=\"line\"><span class=\"string\">                    一氧化碳 (CO): %.1f μg/m³</span></span><br><span class=\"line\"><span class=\"string\">                    二氧化氮 (NO2): %.1f μg/m³</span></span><br><span class=\"line\"><span class=\"string\">                    二氧化硫 (SO2): %.1f μg/m³</span></span><br><span class=\"line\"><span class=\"string\">                    臭氧 (O3): %.1f μg/m³</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">                    注意：以上是模拟数据，仅供示例。</span></span><br><span class=\"line\"><span class=\"string\">                    &quot;&quot;&quot;</span>,</span><br><span class=\"line\">                    latitude, longitude, weatherData.timezone(),</span><br><span class=\"line\">                    europeanAqi, aqiLevel,</span><br><span class=\"line\">                    usAqi, usAqiLevel,</span><br><span class=\"line\">                    pm10, pm25, co, no2, so2, o3);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">return</span> aqiInfo;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">&quot;无法获取空气质量信息: &quot;</span> + e.getMessage();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 获取欧洲AQI等级描述</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String <span class=\"title function_\">getAqiLevel</span><span class=\"params\">(Integer aqi)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (aqi &lt;= <span class=\"number\">20</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">&quot;优 (0-20): 空气质量非常好&quot;</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (aqi &lt;= <span class=\"number\">40</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">&quot;良 (20-40): 空气质量良好&quot;</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (aqi &lt;= <span class=\"number\">60</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">&quot;中等 (40-60): 对敏感人群可能有影响&quot;</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (aqi &lt;= <span class=\"number\">80</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">&quot;较差 (60-80): 对所有人群健康有影响&quot;</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (aqi &lt;= <span class=\"number\">100</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">&quot;差 (80-100): 可能对所有人群健康造成损害&quot;</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">&quot;非常差 (&gt;100): 对所有人群健康有严重影响&quot;</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 获取美国AQI等级描述</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String <span class=\"title function_\">getUsAqiLevel</span><span class=\"params\">(Integer aqi)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (aqi &lt;= <span class=\"number\">50</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">&quot;优 (0-50): 空气质量令人满意，污染风险很低&quot;</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (aqi &lt;= <span class=\"number\">100</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">&quot;良 (51-100): 空气质量尚可，对极少数敏感人群可能有影响&quot;</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (aqi &lt;= <span class=\"number\">150</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">&quot;对敏感人群不健康 (101-150): 敏感人群可能会经历健康影响&quot;</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (aqi &lt;= <span class=\"number\">200</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">&quot;不健康 (151-200): 所有人可能开始经历健康影响&quot;</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (aqi &lt;= <span class=\"number\">300</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">&quot;非常不健康 (201-300): 健康警告，所有人可能经历更严重的健康影响&quot;</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">&quot;危险 (&gt;300): 健康警报，所有人更可能受到影响&quot;</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">OpenMeteoService</span> <span class=\"variable\">service</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">OpenMeteoService</span>();</span><br><span class=\"line\">        <span class=\"comment\">// 测试北京的天气预报</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;北京天气预报:&quot;</span>);</span><br><span class=\"line\">        System.out.println(service.getWeatherForecastByLocation(<span class=\"number\">39.9042</span>, <span class=\"number\">116.4074</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 测试北京的空气质量</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;北京空气质量:&quot;</span>);</span><br><span class=\"line\">        System.out.println(service.getAirQuality(<span class=\"number\">39.9042</span>, <span class=\"number\">116.4074</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Bean</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> ToolCallbackProvider <span class=\"title function_\">weatherTools</span><span class=\"params\">(OpenMeteoService openMeteoService)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> MethodToolCallbackProvider.builder().toolObjects(openMeteoService).build();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"MCP-Client\"><a href=\"#MCP-Client\" class=\"headerlink\" title=\"MCP Client\"></a>MCP Client</h3><figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.ai<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-ai-mcp-client-webflux-spring-boot-starter<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight yml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">ai:</span></span><br><span class=\"line\">    <span class=\"attr\">mcp:</span></span><br><span class=\"line\">      <span class=\"attr\">client:</span></span><br><span class=\"line\">        <span class=\"attr\">enabled:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">        <span class=\"attr\">name:</span> <span class=\"string\">my-mcp-client</span></span><br><span class=\"line\">        <span class=\"attr\">version:</span> <span class=\"number\">1.0</span><span class=\"number\">.0</span></span><br><span class=\"line\">        <span class=\"attr\">request-timeout:</span> <span class=\"string\">30s</span></span><br><span class=\"line\">        <span class=\"attr\">type:</span> <span class=\"string\">ASYNC</span>  <span class=\"comment\"># or SYNC</span></span><br><span class=\"line\">        <span class=\"attr\">sse:</span></span><br><span class=\"line\">          <span class=\"attr\">connections:</span></span><br><span class=\"line\">            <span class=\"attr\">server1:</span></span><br><span class=\"line\">              <span class=\"attr\">url:</span> <span class=\"string\">http://localhost:8001</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> ChatClient chatClient;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"title function_\">ChatController</span><span class=\"params\">(ChatClient.Builder builder, ToolCallbackProvider mcpTools)</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.chatClient = builder.defaultSystem(<span class=\"string\">&quot;你是小A，是一个人工智能助手。&quot;</span>)</span><br><span class=\"line\">            .defaultTools(mcpTools)</span><br><span class=\"line\">            .build();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@GetMapping(&quot;/chat&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> String <span class=\"title function_\">chat</span><span class=\"params\">(<span class=\"meta\">@RequestParam(defaultValue = &quot;根据当前经纬度39.9042,116.4074查天气预报&quot;)</span> String msg)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> chatClient.prompt()</span><br><span class=\"line\">            .user(msg)</span><br><span class=\"line\">            .call()</span><br><span class=\"line\">            .content();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"MCP-Stdio\"><a href=\"#MCP-Stdio\" class=\"headerlink\" title=\"MCP Stdio\"></a>MCP Stdio</h2><h3 id=\"公共-MCP\"><a href=\"#公共-MCP\" class=\"headerlink\" title=\"公共 MCP\"></a>公共 MCP</h3><h4 id=\"MCP-Client-1\"><a href=\"#MCP-Client-1\" class=\"headerlink\" title=\"MCP Client\"></a>MCP Client</h4><figure class=\"highlight json\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;mcpServers&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;baidu-map&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;command&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;cmd&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;args&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">        <span class=\"string\">&quot;/c&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"string\">&quot;npx&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"string\">&quot;-y&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"string\">&quot;@baidumap/mcp-server-baidu-map&quot;</span></span><br><span class=\"line\">      <span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;env&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;BAIDU_MAP_API_KEY&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;&lt;API_KEY&gt;&quot;</span></span><br><span class=\"line\">      <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">ai:</span></span><br><span class=\"line\">    <span class=\"attr\">mcp:</span></span><br><span class=\"line\">      <span class=\"attr\">client:</span></span><br><span class=\"line\">        <span class=\"attr\">stdio:</span></span><br><span class=\"line\">          <span class=\"attr\">servers-configuration:</span> <span class=\"string\">classpath:/map-servers-config.json</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"自定义-MCP\"><a href=\"#自定义-MCP\" class=\"headerlink\" title=\"自定义 MCP\"></a>自定义 MCP</h3><h4 id=\"MCP-Server-1\"><a href=\"#MCP-Server-1\" class=\"headerlink\" title=\"MCP Server\"></a>MCP Server</h4><figure class=\"highlight yml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">main:</span></span><br><span class=\"line\">    <span class=\"comment\"># 禁用web启动 和 banner</span></span><br><span class=\"line\">    <span class=\"attr\">web-application-type:</span> <span class=\"string\">none</span></span><br><span class=\"line\">    <span class=\"attr\">banner-mode:</span> <span class=\"string\">off</span></span><br><span class=\"line\">  <span class=\"attr\">ai:</span></span><br><span class=\"line\">    <span class=\"attr\">mcp:</span></span><br><span class=\"line\">      <span class=\"attr\">server:</span></span><br><span class=\"line\">        <span class=\"attr\">name:</span> <span class=\"string\">my-mcp-server</span></span><br><span class=\"line\">        <span class=\"attr\">version:</span> <span class=\"number\">1.0</span><span class=\"number\">.0</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"MCP-Client-2\"><a href=\"#MCP-Client-2\" class=\"headerlink\" title=\"MCP Client\"></a>MCP Client</h4><figure class=\"highlight json\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;mcpServers&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;my-mcp-server&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;command&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;java&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;args&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">        <span class=\"string\">&quot;-Dspring.ai.mcp.server.stdio=true&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"string\">&quot;-Dlogging.pattern.console=&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"string\">&quot;-jar&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"string\">&quot;D:/mcp-server.jar&quot;</span></span><br><span class=\"line\">      <span class=\"punctuation\">]</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">ai:</span></span><br><span class=\"line\">    <span class=\"attr\">mcp:</span></span><br><span class=\"line\">      <span class=\"attr\">client:</span></span><br><span class=\"line\">        <span class=\"attr\">stdio:</span></span><br><span class=\"line\">          <span class=\"attr\">servers-configuration:</span> <span class=\"string\">classpath:/map-servers-config.json</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"MCP-权限\"><a href=\"#MCP-权限\" class=\"headerlink\" title=\"MCP 权限\"></a>MCP 权限</h2><img src=\"/AI/MCP/MCP%E6%9D%83%E9%99%90.jpg\" class=\"\" title=\"MCP权限\">\n\n<h3 id=\"MCP-Server-2\"><a href=\"#MCP-Server-2\" class=\"headerlink\" title=\"MCP Server\"></a>MCP Server</h3><figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-oauth2-resource-server<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-oauth2-authorization-server<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">security:</span></span><br><span class=\"line\">    <span class=\"attr\">oauth2:</span></span><br><span class=\"line\">      <span class=\"attr\">authorizationserver:</span></span><br><span class=\"line\">        <span class=\"attr\">client:</span></span><br><span class=\"line\">          <span class=\"attr\">oidc-client:</span></span><br><span class=\"line\">            <span class=\"attr\">registration:</span></span><br><span class=\"line\">              <span class=\"attr\">client-id:</span> <span class=\"string\">admin</span></span><br><span class=\"line\">              <span class=\"attr\">client-secret:</span> &#123;<span class=\"string\">noop</span>&#125;<span class=\"string\">secret</span></span><br><span class=\"line\">              <span class=\"attr\">client-authentication-methods:</span> <span class=\"string\">client_secret_basic</span></span><br><span class=\"line\">              <span class=\"attr\">authorization-grant-types:</span> <span class=\"string\">client_credentials</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> jakarta.annotation.PostConstruct;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Bean;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Configuration;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.security.config.Customizer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.security.config.annotation.web.builders.HttpSecurity;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.security.config.annotation.web.configurers.CsrfConfigurer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.security.core.context.SecurityContextHolder;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.security.web.SecurityFilterChain;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"keyword\">static</span> org.springframework.security.oauth2.server.authorization.config.annotation.web.configurers.OAuth2AuthorizationServerConfigurer.authorizationServer;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"meta\">@EnableWebSecurity</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">SecurityConfiguration</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@PostConstruct</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">init</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 设置SecurityContextHolder策略为MODE_INHERITABLETHREADLOCAL</span></span><br><span class=\"line\">\t\tSecurityContextHolder.setStrategyName(SecurityContextHolder.MODE_INHERITABLETHREADLOCAL);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"meta\">@Bean</span></span><br><span class=\"line\">\tSecurityFilterChain <span class=\"title function_\">securityFilterChain</span><span class=\"params\">(HttpSecurity http)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> http.authorizeHttpRequests(auth -&gt; auth.anyRequest().authenticated())</span><br><span class=\"line\">\t\t\t.with(authorizationServer(), Customizer.withDefaults())</span><br><span class=\"line\">\t\t\t.oauth2ResourceServer(resource -&gt; resource.jwt(Customizer.withDefaults()))</span><br><span class=\"line\">\t\t\t.csrf(CsrfConfigurer::disable)</span><br><span class=\"line\">\t\t\t.cors(Customizer.withDefaults())</span><br><span class=\"line\">\t\t\t.build();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 客户端第一次MCP请求，返回401</span></span><br><span class=\"line\">curl http://localhost:8080/sse --fail-with-body</span><br><span class=\"line\"><span class=\"comment\"># curl: (22) The requested URL returned error: 401</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># GET /authorize</span></span><br><span class=\"line\">curl -XPOST http://localhost:8080/oauth2/token --data grant_type=client_credentials --user admin:secret</span><br><span class=\"line\"><span class=\"comment\">#&#123;&quot;access_token&quot;:&quot;eyJraWQiOiI3ZjI3MDk3MC0xYjcyLTQ1NzMtYmE5Ni04YTJhMWZjYjgxYzgiLCJhbGciOiJSUzI1NiJ9.eyJzdWIiOiJ4dXNodSIsImF1ZCI6Inh1c2h1IiwibmJmIjoxNzUwNzUzMDU5LCJpc3MiOiJodHRwOi8vbG9jYWxob3N0OjgwODAiLCJleHAiOjE3NTA3NTMzNTksImlhdCI6MTc1MDc1MzA1OSwianRpIjoiMGZkZThiZjgtNjg1OC00NzJmLWJjOWYtZDg3YTI1YzdkZWFjIn0.t9hIcalb15FaMyJEjhwTkycaky1VrEQvP1KnZ5GF5WIokz8BDFr0S5hff8Mco80WaqlCNaCP_vTNMD6vXgbtOHh78wJaQDd_AEOJmchQWotedWtDN9CVwYMEAyEOpb418gwM21uB5OvJy3BEduCk5zaqT-wB_baqThG6qxHE8QWVxB5tn5tu9eMVmCXUr-cwTPBOK-l0_s5LyCdBPgSorfRrtAI8VT3pVHtt9d5NLmA4EBZYZ-awKkmsjrU0MdLwaIWIdjDdg7DkfVUKEOkPh3vezGX8MMy965UDYYDbrNwTrk_j3VbG_4j954bmhzwcQ0VrtGKvbXflVae5NhtW0w&quot;,&quot;token_type&quot;:&quot;Bearer&quot;,&quot;expires_in&quot;:299&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 再次MCP请求</span></span><br><span class=\"line\">curl http://localhost:8080/sse -H<span class=\"string\">&quot;Authorization: Bearer eyJraWQiOiI3ZjI3MDk3MC0xYjcyLTQ1NzMtYmE5Ni04YTJhMWZjYjgxYzgiLCJhbGciOiJSUzI1NiJ9.eyJzdWIiOiJ4dXNodSIsImF1ZCI6Inh1c2h1IiwibmJmIjoxNzUwNzUzMDU5LCJpc3MiOiJodHRwOi8vbG9jYWxob3N0OjgwODAiLCJleHAiOjE3NTA3NTMzNTksImlhdCI6MTc1MDc1MzA1OSwianRpIjoiMGZkZThiZjgtNjg1OC00NzJmLWJjOWYtZDg3YTI1YzdkZWFjIn0.t9hIcalb15FaMyJEjhwTkycaky1VrEQvP1KnZ5GF5WIokz8BDFr0S5hff8Mco80WaqlCNaCP_vTNMD6vXgbtOHh78wJaQDd_AEOJmchQWotedWtDN9CVwYMEAyEOpb418gwM21uB5OvJy3BEduCk5zaqT-wB_baqThG6qxHE8QWVxB5tn5tu9eMVmCXUr-cwTPBOK-l0_s5LyCdBPgSorfRrtAI8VT3pVHtt9d5NLmA4EBZYZ-awKkmsjrU0MdLwaIWIdjDdg7DkfVUKEOkPh3vezGX8MMy965UDYYDbrNwTrk_j3VbG_4j954bmhzwcQ0VrtGKvbXflVae5NhtW0w&quot;</span></span><br><span class=\"line\"><span class=\"comment\">#id:2c6f1149-6d77-4fd3-a253-34c63b02f284</span></span><br><span class=\"line\"><span class=\"comment\">#event:endpoint</span></span><br><span class=\"line\"><span class=\"comment\">#data:/mcp/message?sessionId=2c6f1149-6d77-4fd3-a253-34c63b02f284</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"MCP-Client-3\"><a href=\"#MCP-Client-3\" class=\"headerlink\" title=\"MCP Client\"></a>MCP Client</h3><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Bean</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> WebClientCustomizer <span class=\"title function_\">webClientCustomizer</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 认证 mcp server  /oauth?username:password   --&gt; access_token</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> (builder) -&gt; &#123;</span><br><span class=\"line\">        builder.defaultHeader(<span class=\"string\">&quot;Authorization&quot;</span>,<span class=\"string\">&quot;Bearer eyJraWQiOiI3ZjI3MDk3MC0xYjcyLTQ1NzMtYmE5Ni04YTJhMWZjYjgxYzgiLCJhbGciOiJSUzI1NiJ9.eyJzdWIiOiJ4dXNodSIsImF1ZCI6Inh1c2h1IiwibmJmIjoxNzUwNzUzMDU5LCJpc3MiOiJodHRwOi8vbG9jYWxob3N0OjgwODAiLCJleHAiOjE3NTA3NTMzNTksImlhdCI6MTc1MDc1MzA1OSwianRpIjoiMGZkZThiZjgtNjg1OC00NzJmLWJjOWYtZDg3YTI1YzdkZWFjIn0.t9hIcalb15FaMyJEjhwTkycaky1VrEQvP1KnZ5GF5WIokz8BDFr0S5hff8Mco80WaqlCNaCP_vTNMD6vXgbtOHh78wJaQDd_AEOJmchQWotedWtDN9CVwYMEAyEOpb418gwM21uB5OvJy3BEduCk5zaqT-wB_baqThG6qxHE8QWVxB5tn5tu9eMVmCXUr-cwTPBOK-l0_s5LyCdBPgSorfRrtAI8VT3pVHtt9d5NLmA4EBZYZ-awKkmsjrU0MdLwaIWIdjDdg7DkfVUKEOkPh3vezGX8MMy965UDYYDbrNwTrk_j3VbG_4j954bmhzwcQ0VrtGKvbXflVae5NhtW0w&quot;</span>);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><ul>\n<li><a href=\"https://mcp.so/zh\">MCP.so</a></li>\n</ul>\n","categories":["AI"],"tags":["AI"]},{"title":"LangChain4j","url":"/AI/LangChain4j/","content":"<h2 id=\"会话模型\"><a href=\"#会话模型\" class=\"headerlink\" title=\"会话模型\"></a>会话模型</h2><h3 id=\"简单对话\"><a href=\"#简单对话\" class=\"headerlink\" title=\"简单对话\"></a>简单对话</h3><figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>dev.langchain4j<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>langchain4j-community-dashscope-spring-boot-starter<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependencyManagement</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>dev.langchain4j<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>langchain4j-community-bom<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.0.0-beta1<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">type</span>&gt;</span>pom<span class=\"tag\">&lt;/<span class=\"name\">type</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>import<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependencyManagement</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<span id=\"more\"></span>\n\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">langchain4j:</span></span><br><span class=\"line\">  <span class=\"attr\">community:</span></span><br><span class=\"line\">    <span class=\"attr\">dashscope:</span></span><br><span class=\"line\">      <span class=\"attr\">chat-model:</span></span><br><span class=\"line\">        <span class=\"attr\">api-key:</span> <span class=\"string\">&lt;API-KEY&gt;</span></span><br><span class=\"line\">        <span class=\"attr\">model-name:</span> <span class=\"string\">qwen-max</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Autowired</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> QwenChatModel chatModel;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping(&quot;/chat&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> String <span class=\"title function_\">chat</span><span class=\"params\">(<span class=\"meta\">@RequestParam(defaultValue = &quot;你是谁&quot;)</span> String message)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> chatModel.chat(message);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"流式输出\"><a href=\"#流式输出\" class=\"headerlink\" title=\"流式输出\"></a>流式输出</h3><figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-webflux<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">langchain4j:</span></span><br><span class=\"line\">  <span class=\"attr\">community:</span></span><br><span class=\"line\">    <span class=\"attr\">dashscope:</span></span><br><span class=\"line\">      <span class=\"attr\">streaming-chat-model:</span></span><br><span class=\"line\">        <span class=\"attr\">api-key:</span> <span class=\"string\">&lt;API-KEY&gt;</span></span><br><span class=\"line\">        <span class=\"attr\">model-name:</span> <span class=\"string\">qwen-max</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Autowired</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> QwenStreamingChatModel streamChatModel;</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"meta\">@RequestMapping(value = &quot;/stream&quot;, produces = &quot;text/html;charset=UTF-8&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> Flux&lt;String&gt; <span class=\"title function_\">stream</span><span class=\"params\">(<span class=\"meta\">@RequestParam(defaultValue = &quot;你是谁&quot;)</span> String message)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> Flux.create(fluxSink -&gt; &#123;</span><br><span class=\"line\">        streamChatModel.chat(message, <span class=\"keyword\">new</span> <span class=\"title class_\">StreamingChatResponseHandler</span>() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onPartialResponse</span><span class=\"params\">(String s)</span> &#123;</span><br><span class=\"line\">                fluxSink.next(s);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onCompleteResponse</span><span class=\"params\">(ChatResponse chatResponse)</span> &#123;</span><br><span class=\"line\">                fluxSink.complete();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onError</span><span class=\"params\">(Throwable throwable)</span> &#123;</span><br><span class=\"line\">                fluxSink.error(throwable);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"会话记忆\"><a href=\"#会话记忆\" class=\"headerlink\" title=\"会话记忆\"></a>会话记忆</h2><h3 id=\"ChatMemory\"><a href=\"#ChatMemory\" class=\"headerlink\" title=\"ChatMemory\"></a>ChatMemory</h3><figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-webflux<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>dev.langchain4j<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>langchain4j<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;langchain4j.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>dev.langchain4j<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>langchain4j-community-dashscope-spring-boot-starter<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependencyManagement</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>dev.langchain4j<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>langchain4j-community-bom<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;langchain4j.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">type</span>&gt;</span>pom<span class=\"tag\">&lt;/<span class=\"name\">type</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>import<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependencyManagement</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AiConfig</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">Assistant</span> &#123;</span><br><span class=\"line\">        String <span class=\"title function_\">chat</span><span class=\"params\">(String userMessage)</span>;</span><br><span class=\"line\">        TokenStream <span class=\"title function_\">stream</span><span class=\"params\">(String userMessage)</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Assistant <span class=\"title function_\">assistant</span><span class=\"params\">(ChatLanguageModel chatModel, StreamingChatLanguageModel streamChatModel)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 为 Assistant 创建动态代理对象</span></span><br><span class=\"line\">        <span class=\"comment\">// chat -&gt; 对话内容存储ChatMemory -&gt; 聊天记录ChatMemory取出来 -&gt; 放入到当前对话中</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> AiServices.builder(Assistant.class)</span><br><span class=\"line\">                .chatLanguageModel(chatModel)</span><br><span class=\"line\">                .streamingChatLanguageModel(streamChatModel)</span><br><span class=\"line\">                .chatMemory(MessageWindowChatMemory.withMaxMessages(<span class=\"number\">10</span>))</span><br><span class=\"line\">                .build();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Autowired</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> AiConfig.Assistant assistant;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping(&quot;/memory_chat&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> String <span class=\"title function_\">memoryChat</span><span class=\"params\">(<span class=\"meta\">@RequestParam(defaultValue = &quot;我叫小明&quot;)</span> String message)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> assistant.chat(message);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping(value = &quot;/memory_stream&quot;, produces = &quot;text/html;charset=UTF-8&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> Flux&lt;String&gt; <span class=\"title function_\">memoryStream</span><span class=\"params\">(<span class=\"meta\">@RequestParam(defaultValue = &quot;我是谁&quot;)</span> String message)</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">TokenStream</span> <span class=\"variable\">stream</span> <span class=\"operator\">=</span> assistant.stream(message);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> Flux.create(sink -&gt;</span><br><span class=\"line\">        stream.onPartialResponse(sink::next)</span><br><span class=\"line\">                .onCompleteResponse(s -&gt; sink.complete())</span><br><span class=\"line\">                .onError(sink::error)</span><br><span class=\"line\">                .start());</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"会话隔离\"><a href=\"#会话隔离\" class=\"headerlink\" title=\"会话隔离\"></a>会话隔离</h3><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">AssistantUnique</span> &#123;</span><br><span class=\"line\">    String <span class=\"title function_\">chat</span><span class=\"params\">(<span class=\"meta\">@MemoryId</span> <span class=\"type\">int</span> memoryId, <span class=\"meta\">@UserMessage</span> String userMessage)</span>;</span><br><span class=\"line\">    TokenStream <span class=\"title function_\">stream</span><span class=\"params\">(<span class=\"meta\">@MemoryId</span> <span class=\"type\">int</span> memoryId, <span class=\"meta\">@UserMessage</span> String userMessage)</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Bean</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> AssistantUnique <span class=\"title function_\">assistantUnique</span><span class=\"params\">(ChatLanguageModel chatModel, StreamingChatLanguageModel streamChatModel)</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 为 Assistant 创建动态代理对象</span></span><br><span class=\"line\">    <span class=\"comment\">// chat -&gt; 对话内容存储ChatMemory -&gt; 聊天记录ChatMemory取出来 -&gt; 放入到当前对话中</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> AiServices.builder(AssistantUnique.class)</span><br><span class=\"line\">            .chatLanguageModel(chatModel)</span><br><span class=\"line\">            .streamingChatLanguageModel(streamChatModel)</span><br><span class=\"line\">            .chatMemoryProvider(memoryId -&gt; MessageWindowChatMemory.builder()</span><br><span class=\"line\">                    .maxMessages(<span class=\"number\">10</span>)</span><br><span class=\"line\">                    .id(memoryId)</span><br><span class=\"line\">                    .build())</span><br><span class=\"line\">            .build();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Autowired</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> AiConfig.AssistantUnique assistantUnique;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping(&quot;/memory_chat&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> String <span class=\"title function_\">memoryChat</span><span class=\"params\">(Integer userId, <span class=\"meta\">@RequestParam(defaultValue = &quot;我叫小明&quot;)</span> String message)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> assistantUnique.chat(userId, message);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping(value = &quot;/memory_stream&quot;, produces = &quot;text/html;charset=UTF-8&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> Flux&lt;String&gt; <span class=\"title function_\">memoryStream</span><span class=\"params\">(Integer userId, <span class=\"meta\">@RequestParam(defaultValue = &quot;我是谁&quot;)</span> String message)</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">TokenStream</span> <span class=\"variable\">stream</span> <span class=\"operator\">=</span> assistantUnique.stream(userId, message);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> Flux.create(sink -&gt;</span><br><span class=\"line\">            stream.onPartialResponse(sink::next)</span><br><span class=\"line\">                    .onCompleteResponse(s -&gt; sink.complete())</span><br><span class=\"line\">                    .onError(sink::error)</span><br><span class=\"line\">                    .start());</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"会话记忆持久化\"><a href=\"#会话记忆持久化\" class=\"headerlink\" title=\"会话记忆持久化\"></a>会话记忆持久化</h3><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Bean</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> AssistantUnique <span class=\"title function_\">assistantUnique</span><span class=\"params\">(ChatLanguageModel chatModel, StreamingChatLanguageModel streamChatModel)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> AiServices.builder(AssistantUnique.class)</span><br><span class=\"line\">            .chatLanguageModel(chatModel)</span><br><span class=\"line\">            .streamingChatLanguageModel(streamChatModel)</span><br><span class=\"line\">            .chatMemoryProvider(memoryId -&gt; MessageWindowChatMemory.builder()</span><br><span class=\"line\">                    .maxMessages(<span class=\"number\">10</span>)</span><br><span class=\"line\">                    .id(memoryId)</span><br><span class=\"line\">                    .chatMemoryStore(<span class=\"keyword\">new</span> <span class=\"title class_\">PersistentChatMemoryStore</span>())</span><br><span class=\"line\">                    .build())</span><br><span class=\"line\">            .build();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 自定义持久化（数据库、redis等等）</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">PersistentChatMemoryStore</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">ChatMemoryStore</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> List&lt;ChatMessage&gt; <span class=\"title function_\">getMessages</span><span class=\"params\">(Object o)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">updateMessages</span><span class=\"params\">(Object o, List&lt;ChatMessage&gt; list)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">deleteMessages</span><span class=\"params\">(Object o)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Function-call（Tools）\"><a href=\"#Function-call（Tools）\" class=\"headerlink\" title=\"Function-call（Tools）\"></a>Function-call（Tools）</h2><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Service</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ToolsService</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Tool(&quot;某个城市有多少个名字的&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Integer <span class=\"title function_\">cityNameCount</span><span class=\"params\">(<span class=\"meta\">@P(&quot;城市&quot;)</span> String city, <span class=\"meta\">@P(&quot;姓名&quot;)</span> String name)</span> &#123;</span><br><span class=\"line\">        System.out.println(city + <span class=\"string\">&quot;-&quot;</span> + name);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">10</span>; <span class=\"comment\">// 假数据</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Bean</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> AssistantUnique <span class=\"title function_\">assistantUnique</span><span class=\"params\">(ChatLanguageModel chatModel, StreamingChatLanguageModel streamChatModel, </span></span><br><span class=\"line\"><span class=\"params\">                                       ToolsService toolsService)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> AiServices.builder(AssistantUnique.class)</span><br><span class=\"line\">            .tools(toolsService)</span><br><span class=\"line\">            .chatLanguageModel(chatModel)</span><br><span class=\"line\">            .streamingChatLanguageModel(streamChatModel)</span><br><span class=\"line\">            .chatMemoryProvider(memoryId -&gt; MessageWindowChatMemory.builder()</span><br><span class=\"line\">                    .maxMessages(<span class=\"number\">10</span>)</span><br><span class=\"line\">                    .id(memoryId)</span><br><span class=\"line\">                    .chatMemoryStore(<span class=\"keyword\">new</span> <span class=\"title class_\">PersistentChatMemoryStore</span>())</span><br><span class=\"line\">                    .build())</span><br><span class=\"line\">            .build();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"提示词（预设角色）\"><a href=\"#提示词（预设角色）\" class=\"headerlink\" title=\"提示词（预设角色）\"></a>提示词（预设角色）</h2><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">AssistantUnique</span> &#123;</span><br><span class=\"line\">    String <span class=\"title function_\">chat</span><span class=\"params\">(<span class=\"meta\">@MemoryId</span> <span class=\"type\">int</span> memoryId, <span class=\"meta\">@UserMessage</span> String userMessage)</span>;</span><br><span class=\"line\">    TokenStream <span class=\"title function_\">stream</span><span class=\"params\">(<span class=\"meta\">@MemoryId</span> <span class=\"type\">int</span> memoryId, <span class=\"meta\">@UserMessage</span> String userMessage)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@SystemMessage(&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"meta\">            您是航空公司的客户聊天支持代理。请以友好、乐于助人且愉快的方式来回复。</span></span><br><span class=\"line\"><span class=\"meta\">            您正在通过在线聊天系统与客户互动。</span></span><br><span class=\"line\"><span class=\"meta\">            在提供有关预订或取消预订的信息之前，您必须始终从用户处获取以下信息：预订号、客户姓名。</span></span><br><span class=\"line\"><span class=\"meta\">            请讲中文。</span></span><br><span class=\"line\"><span class=\"meta\">            今天的日期是 &#123;&#123;current_date&#125;&#125;.</span></span><br><span class=\"line\"><span class=\"meta\">            &quot;&quot;&quot;)</span></span><br><span class=\"line\">    TokenStream <span class=\"title function_\">stream</span><span class=\"params\">(<span class=\"meta\">@MemoryId</span> <span class=\"type\">int</span> memoryId, <span class=\"meta\">@UserMessage</span> String message, <span class=\"meta\">@V(&quot;current_date&quot;)</span> String currentDate)</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"RAG\"><a href=\"#RAG\" class=\"headerlink\" title=\"RAG\"></a>RAG</h2><h3 id=\"RAG-原理\"><a href=\"#RAG-原理\" class=\"headerlink\" title=\"RAG 原理\"></a>RAG 原理</h3><ul>\n<li><strong>文本转向量</strong><img src=\"/AI/LangChain4j/RAG_%E6%96%87%E6%9C%AC%E8%BD%AC%E5%90%91%E9%87%8F.png\" class=\"\" title=\"文本转向量\"></li>\n<li><strong>文本检索</strong><img src=\"/AI/LangChain4j/RAG_%E6%96%87%E6%9C%AC%E6%A3%80%E7%B4%A2.png\" class=\"\" title=\"文本检索\"></li>\n</ul>\n<h3 id=\"Document\"><a href=\"#Document\" class=\"headerlink\" title=\"Document\"></a>Document</h3><h4 id=\"Document-Loaders-文档读取器\"><a href=\"#Document-Loaders-文档读取器\" class=\"headerlink\" title=\"Document Loaders 文档读取器\"></a>Document Loaders 文档读取器</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Document</span> <span class=\"variable\">document</span> <span class=\"operator\">=</span> ClassPathDocumentLoader.loadDocument(<span class=\"string\">&quot;rag/terms-of-service.txt&quot;</span>, <span class=\"keyword\">new</span> <span class=\"title class_\">TextDocumentParser</span>());</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Document-Parser-文档解析器\"><a href=\"#Document-Parser-文档解析器\" class=\"headerlink\" title=\"Document Parser 文档解析器\"></a>Document Parser 文档解析器</h4><ul>\n<li><code>TextDocumentParser</code> 解析纯文本格式文件。</li>\n<li><code>ApachePdfBoxDocumentParser</code> 解析 PDF 文件。</li>\n<li><code>ApachePoiDocumentParser</code> 解析微软 Office 格式文件（如：DOC、PPT、XLS）。</li>\n<li><code>ApacheTikaDocumentParser</code> （默认）几乎可以解析所有格式的文件。</li>\n</ul>\n<h4 id=\"Document-Splitter-文档拆分器\"><a href=\"#Document-Splitter-文档拆分器\" class=\"headerlink\" title=\"Document Splitter 文档拆分器\"></a>Document Splitter 文档拆分器</h4><ul>\n<li><code>DocumentSplitters.recursive(..)</code> （默认）递归分割器，优先段落分割，再按行分割，再按句子分割，再按单词分割</li>\n<li><code>DocumentByCharacterSplitter</code> 字符，使用场景：代码、任意文本、递归拆分</li>\n<li><code>DocumentByRegexSplitter</code> 正则表达式，使用场景：Markdown、结构化文本</li>\n<li><code>DocumentByParagraphSplitter</code> 段落，使用场景：文章、书籍、网页</li>\n<li><code>DocumentByLineSplitter</code> 行，使用场景：代码、日志、诗歌</li>\n<li><code>DocumentByWordSplitter</code> 单词，使用场景：短文、关键词提取</li>\n<li><code>DocumentBySentenceSplitter</code> 句子，使用场景：文章、对话、法律文档</li>\n</ul>\n<h3 id=\"文本向量化\"><a href=\"#文本向量化\" class=\"headerlink\" title=\"文本向量化\"></a>文本向量化</h3><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">QwenEmbeddingModel embeddingModel= QwenEmbeddingModel.builder()</span><br><span class=\"line\">        .apiKey(<span class=\"string\">&quot;&lt;API-KEY&gt;&quot;</span>)</span><br><span class=\"line\">        .build();</span><br><span class=\"line\"></span><br><span class=\"line\">Response&lt;Embedding&gt; embed = embeddingModel.embed(<span class=\"string\">&quot;Hello World&quot;</span>);</span><br><span class=\"line\">System.out.println(embed.content().toString());</span><br><span class=\"line\">System.out.println(embed.content().vector().length);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"向量数据库\"><a href=\"#向量数据库\" class=\"headerlink\" title=\"向量数据库\"></a>向量数据库</h3><ul>\n<li><a href=\"https://docs.langchain4j.dev/integrations/embedding-stores/\">向量数据库</a></li>\n</ul>\n<h3 id=\"匹配向量\"><a href=\"#匹配向量\" class=\"headerlink\" title=\"匹配向量\"></a>匹配向量</h3><figure class=\"highlight text\"><table><tr><td class=\"code\"><pre><span class=\"line\">本服务条款适用于您对 Funnair 的体验。预订航班，即表示您同意这些条款。</span><br><span class=\"line\">1. 预订航班</span><br><span class=\"line\">- 通过我们的网站或移动应用程序预订。</span><br><span class=\"line\">- 预订时需要全额付款。</span><br><span class=\"line\">- 确保个人信息（姓名、ID 等）的准确性，因为更正可能会产生 25 的费用。</span><br><span class=\"line\">2. 更改预订</span><br><span class=\"line\">- 允许在航班起飞前 24 小时更改。</span><br><span class=\"line\">- 通过在线更改或联系我们的支持人员。</span><br><span class=\"line\">- 改签费：经济舱 50，豪华经济舱 30，商务舱免费。</span><br><span class=\"line\">3. 取消预订</span><br><span class=\"line\">- 最晚在航班起飞前 48 小时取消。</span><br><span class=\"line\">- 取消费用：经济舱 75 美元，豪华经济舱 50 美元，商务舱 25 美元。</span><br><span class=\"line\">- 退款将在 7 个工作日内处理。</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 读取</span></span><br><span class=\"line\"><span class=\"type\">Path</span> <span class=\"variable\">path</span> <span class=\"operator\">=</span> Paths.get(Test.class.getClassLoader().getResource(<span class=\"string\">&quot;terms-of-service.txt&quot;</span>).toURI());</span><br><span class=\"line\"><span class=\"type\">Document</span> <span class=\"variable\">document</span> <span class=\"operator\">=</span> FileSystemDocumentLoader.loadDocument(path, <span class=\"keyword\">new</span> <span class=\"title class_\">TextDocumentParser</span>());</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 拆分</span></span><br><span class=\"line\"><span class=\"type\">DocumentByRegexSplitter</span> <span class=\"variable\">splitter</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">DocumentByRegexSplitter</span>(<span class=\"string\">&quot;\\\\n\\\\d+\\\\.&quot;</span>, <span class=\"string\">&quot;\\n&quot;</span>, <span class=\"number\">80</span>, <span class=\"number\">20</span>,</span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">DocumentByCharacterSplitter</span>(<span class=\"number\">100</span>, <span class=\"number\">1</span>));</span><br><span class=\"line\">List&lt;TextSegment&gt; segments = splitter.split(document);</span><br><span class=\"line\"></span><br><span class=\"line\">QwenEmbeddingModel embeddingModel= QwenEmbeddingModel.builder()</span><br><span class=\"line\">        .apiKey(<span class=\"string\">&quot;&lt;API-KEY&gt;&quot;</span>)</span><br><span class=\"line\">        .build();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 向量化</span></span><br><span class=\"line\">List&lt;Embedding&gt; embeddings = embeddingModel.embedAll(segments).content();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 向量化存储</span></span><br><span class=\"line\">InMemoryEmbeddingStore&lt;TextSegment&gt; embeddingStore = <span class=\"keyword\">new</span> <span class=\"title class_\">InMemoryEmbeddingStore</span>&lt;&gt;();</span><br><span class=\"line\">embeddingStore.addAll(embeddings,segments);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 向量化检索</span></span><br><span class=\"line\"><span class=\"type\">Embedding</span> <span class=\"variable\">embed</span> <span class=\"operator\">=</span> embeddingModel.embed(<span class=\"string\">&quot;退费费用&quot;</span>).content();</span><br><span class=\"line\"><span class=\"type\">EmbeddingSearchRequest</span> <span class=\"variable\">build</span> <span class=\"operator\">=</span> EmbeddingSearchRequest.builder().queryEmbedding(embed).build();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 查询</span></span><br><span class=\"line\">EmbeddingSearchResult&lt;TextSegment&gt; results = embeddingStore.search(build);</span><br><span class=\"line\"><span class=\"keyword\">for</span> (EmbeddingMatch&lt;TextSegment&gt; match : results.matches()) &#123;</span><br><span class=\"line\">    System.out.println(match.embedded().text() + <span class=\"string\">&quot;\\n分数：&quot;</span> + match.score()+ <span class=\"string\">&quot;\\n\\n&quot;</span> );</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ---------------------------- 对话阶段 -------------------------------------</span></span><br><span class=\"line\"><span class=\"type\">ChatLanguageModel</span> <span class=\"variable\">model</span> <span class=\"operator\">=</span> QwenChatModel</span><br><span class=\"line\">        .builder()</span><br><span class=\"line\">        .apiKey(<span class=\"string\">&quot;&lt;API-KEY&gt;&quot;</span>)</span><br><span class=\"line\">        .modelName(<span class=\"string\">&quot;qwen-max&quot;</span>)</span><br><span class=\"line\">        .build();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">ContentRetriever</span> <span class=\"variable\">retriever</span> <span class=\"operator\">=</span> EmbeddingStoreContentRetriever.builder()</span><br><span class=\"line\">        .embeddingStore(embeddingStore)</span><br><span class=\"line\">        .embeddingModel(embeddingModel)</span><br><span class=\"line\">        .maxResults(<span class=\"number\">5</span>) <span class=\"comment\">// 最相似的5个结果</span></span><br><span class=\"line\">        .minScore(<span class=\"number\">0.6</span>) <span class=\"comment\">// 只找相似度在0.6以上的内容</span></span><br><span class=\"line\">        .build();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 为Assistant动态代理对象</span></span><br><span class=\"line\"><span class=\"type\">Assistant</span> <span class=\"variable\">assistant</span> <span class=\"operator\">=</span> AiServices.builder(Assistant.class)</span><br><span class=\"line\">        .chatLanguageModel(model)</span><br><span class=\"line\">        .contentRetriever(retriever)</span><br><span class=\"line\">        .build();</span><br><span class=\"line\"></span><br><span class=\"line\">System.out.println(assistant.chat(<span class=\"string\">&quot;退费费用&quot;</span>));</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"MCP\"><a href=\"#MCP\" class=\"headerlink\" title=\"MCP\"></a>MCP</h2><ul>\n<li><code>function-call</code> 的一种<code>外部调用</code>的方式</li>\n</ul>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>dev.langchain4j<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>langchain4j-mcp<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;langchain4j.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 1.构建模型</span></span><br><span class=\"line\">    <span class=\"type\">ChatLanguageModel</span> <span class=\"variable\">model</span> <span class=\"operator\">=</span> QwenChatModel</span><br><span class=\"line\">            .builder()</span><br><span class=\"line\">            .apiKey(<span class=\"string\">&quot;&lt;API-KEY&gt;&quot;</span>)</span><br><span class=\"line\">            .modelName(<span class=\"string\">&quot;qwen-max&quot;</span>)</span><br><span class=\"line\">            .build();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 2.构建MCP服务传输方式  有sse和stdio两种， 这里演示的是stdio</span></span><br><span class=\"line\">    <span class=\"type\">McpTransport</span> <span class=\"variable\">transport</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">StdioMcpTransport</span>.Builder()</span><br><span class=\"line\">            .command(List.of(<span class=\"string\">&quot;cmd&quot;</span>,</span><br><span class=\"line\">                    <span class=\"string\">&quot;/c&quot;</span>,</span><br><span class=\"line\">                    <span class=\"string\">&quot;npx&quot;</span>,</span><br><span class=\"line\">                    <span class=\"string\">&quot;-y&quot;</span>,</span><br><span class=\"line\">                    <span class=\"string\">&quot;@baidumap/mcp-server-baidu-map&quot;</span>,</span><br><span class=\"line\">                    <span class=\"string\">&quot;mcp/github&quot;</span>))</span><br><span class=\"line\">            .environment(Map.of(<span class=\"string\">&quot;BAIDU_MAP_API_KEY&quot;</span>, <span class=\"string\">&quot;&lt;BAIDU_MAP_API_KEY&gt;&quot;</span>))</span><br><span class=\"line\">            .logEvents(<span class=\"literal\">true</span>)</span><br><span class=\"line\">            .build();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 3.构建MCP客户端， 指定传输方式</span></span><br><span class=\"line\">    <span class=\"type\">McpClient</span> <span class=\"variable\">mcpClient</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">DefaultMcpClient</span>.Builder()</span><br><span class=\"line\">            .transport(transport)</span><br><span class=\"line\">            .build();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 4.构建MCP工具提供者， 指定MCP客户端</span></span><br><span class=\"line\">    <span class=\"type\">ToolProvider</span> <span class=\"variable\">toolProvider</span> <span class=\"operator\">=</span> McpToolProvider.builder()</span><br><span class=\"line\">            .mcpClients(List.of(mcpClient))</span><br><span class=\"line\">            .build();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 5.构建服务代理， 指定模型和工具提供者</span></span><br><span class=\"line\">    <span class=\"type\">Bot</span> <span class=\"variable\">bot</span> <span class=\"operator\">=</span> AiServices.builder(Bot.class)</span><br><span class=\"line\">            .chatLanguageModel(model)</span><br><span class=\"line\">            .toolProvider(toolProvider)</span><br><span class=\"line\">            .build();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 对话请求</span></span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">response</span> <span class=\"operator\">=</span> bot.chat(<span class=\"string\">&quot;规划长沙到武汉骑行路线&quot;</span>);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;RESPONSE: &quot;</span> + response);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">        mcpClient.close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">Bot</span> &#123;</span><br><span class=\"line\">    String <span class=\"title function_\">chat</span><span class=\"params\">(String userMessage)</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><ul>\n<li><a href=\"https://docs.langchain4j.info/\">LangChain4j 官网</a></li>\n<li><a href=\"https://mcp.so/zh/servers\">MCP</a></li>\n</ul>\n","categories":["AI"],"tags":["AI"]},{"title":"SpringAI","url":"/AI/SpringAI/","content":"<h2 id=\"SpringAI-主要功能\"><a href=\"#SpringAI-主要功能\" class=\"headerlink\" title=\"SpringAI 主要功能\"></a>SpringAI 主要功能</h2><ul>\n<li>对主流 AI 大模型供应商提供了支持，比如：OpenAI、DeepSeek、Microsoft、Ollama、Amazon、Google HuggingFace等。</li>\n<li>支持AI大模型类型包括：聊天、文本到图像、文本到声音等。</li>\n<li>支持主流的Embedding Models（嵌入模型）和向量数据库，比如：Azure Vector Search、Chroma、Milvus、Neo4j、Redis、PineCone、PostgreSQL&#x2F;PGVector 等。</li>\n<li>把 AI 大模型输出映射到简单的 Java 对象（POJOs）上。</li>\n<li>支持了函数调用（Function calling）功能。</li>\n<li>为数据工程提供 ETL（数据抽取、转换和加载）框架。</li>\n<li>支持 Spring Boot 自动配置和快速启动，便于运行 AI 模型和管理向量库。</li>\n</ul>\n<span id=\"more\"></span>\n\n<h2 id=\"SpringAI-OpenAI\"><a href=\"#SpringAI-OpenAI\" class=\"headerlink\" title=\"SpringAI OpenAI\"></a>SpringAI OpenAI</h2><figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.ai<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-ai-openai-spring-boot-starter<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependencyManagement</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.ai<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-ai-bom<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.0.0-M6<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">type</span>&gt;</span>pom<span class=\"tag\">&lt;/<span class=\"name\">type</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>import<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependencyManagement</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">ai:</span></span><br><span class=\"line\">    <span class=\"attr\">openai:</span></span><br><span class=\"line\">      <span class=\"attr\">api-key:</span> <span class=\"string\">&lt;API-KEY&gt;</span></span><br><span class=\"line\">        <span class=\"attr\">base-url:</span> <span class=\"string\">https://api.deepseek.com</span></span><br><span class=\"line\">        <span class=\"attr\">chat:</span></span><br><span class=\"line\">          <span class=\"attr\">options:</span></span><br><span class=\"line\">            <span class=\"attr\">model:</span> <span class=\"string\">deepseek-chat</span></span><br><span class=\"line\">            <span class=\"attr\">temperature:</span> <span class=\"number\">0.7</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"聊天模型\"><a href=\"#聊天模型\" class=\"headerlink\" title=\"聊天模型\"></a>聊天模型</h3><h4 id=\"ChatClient\"><a href=\"#ChatClient\" class=\"headerlink\" title=\"ChatClient\"></a>ChatClient</h4><h5 id=\"简单对话\"><a href=\"#简单对话\" class=\"headerlink\" title=\"简单对话\"></a>简单对话</h5><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> ChatClient chatClient;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"title function_\">ChatController</span><span class=\"params\">(ChatClient.Builder builder)</span> &#123;</span><br><span class=\"line\">\t<span class=\"built_in\">this</span>.chatClient = builder.build();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@GetMapping(&quot;/chat&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> String <span class=\"title function_\">chat</span><span class=\"params\">(<span class=\"meta\">@RequestParam(defaultValue = &quot;给我讲个笑话&quot;)</span> String msg)</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> chatClient.prompt()  <span class=\"comment\">//提示词</span></span><br><span class=\"line\">\t\t\t.user(msg)  <span class=\"comment\">//用户输入信息</span></span><br><span class=\"line\">\t\t\t.call()  <span class=\"comment\">//请求大模型</span></span><br><span class=\"line\">\t\t\t.content();  <span class=\"comment\">//返回文本</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"角色预设\"><a href=\"#角色预设\" class=\"headerlink\" title=\"角色预设\"></a>角色预设</h5><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> ChatClient chatClient;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"title function_\">ChatController</span><span class=\"params\">(ChatClient.Builder builder)</span> &#123;</span><br><span class=\"line\">\t<span class=\"built_in\">this</span>.chatClient = builder.defaultSystem(<span class=\"string\">&quot;你是小A，是一个人工智能助手。&quot;</span>).build();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@GetMapping(&quot;/chat&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> String <span class=\"title function_\">chat</span><span class=\"params\">(<span class=\"meta\">@RequestParam(defaultValue = &quot;你是谁&quot;)</span> String msg)</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> chatClient.prompt()</span><br><span class=\"line\">\t\t\t.user(msg) </span><br><span class=\"line\">\t\t\t.call() </span><br><span class=\"line\">\t\t\t.content(); </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"流水响应\"><a href=\"#流水响应\" class=\"headerlink\" title=\"流水响应\"></a>流水响应</h5><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@GetMapping(value = &quot;/chatStream&quot;,produces = &quot;text/html;charset=UTF-8&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> Flux&lt;String&gt; <span class=\"title function_\">chatStream</span><span class=\"params\">(<span class=\"meta\">@RequestParam(defaultValue = &quot;你是谁&quot;)</span> String msg)</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> chatClient.prompt()</span><br><span class=\"line\">\t\t\t.user(msg)</span><br><span class=\"line\">\t\t\t.stream()</span><br><span class=\"line\">\t\t\t.content();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"ChatModel\"><a href=\"#ChatModel\" class=\"headerlink\" title=\"ChatModel\"></a>ChatModel</h4><h5 id=\"简单对话-1\"><a href=\"#简单对话-1\" class=\"headerlink\" title=\"简单对话\"></a>简单对话</h5><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Autowired</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> ChatModel chatModel;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// String call(String message)</span></span><br><span class=\"line\"><span class=\"meta\">@GetMapping(&quot;/chat&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> String <span class=\"title function_\">chat</span><span class=\"params\">(<span class=\"meta\">@RequestParam(defaultValue = &quot;你是谁&quot;)</span> String msg)</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> chatModel.call(msg);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ChatResponse call(Prompt prompt);</span></span><br><span class=\"line\"><span class=\"meta\">@GetMapping(&quot;/chat2&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> String <span class=\"title function_\">chat2</span><span class=\"params\">(<span class=\"meta\">@RequestParam(defaultValue = &quot;你是谁&quot;)</span> String msg)</span> &#123;</span><br><span class=\"line\">\t<span class=\"type\">ChatResponse</span> <span class=\"variable\">chatResponse</span> <span class=\"operator\">=</span> chatModel.call(</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">new</span> <span class=\"title class_\">Prompt</span>(msg, OpenAiChatOptions.builder()</span><br><span class=\"line\">\t\t\t\t\t\t\t.model(<span class=\"string\">&quot;deepseek-chat&quot;</span>)</span><br><span class=\"line\">\t\t\t\t\t\t\t.temperature(<span class=\"number\">0.8</span>)</span><br><span class=\"line\">\t\t\t\t\t\t\t.build())</span><br><span class=\"line\">\t);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> chatResponse.getResult().getOutput().getText();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"提示词\"><a href=\"#提示词\" class=\"headerlink\" title=\"提示词\"></a>提示词</h5><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 提示词操作</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> name 名字</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> voice 习惯</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@GetMapping(&quot;/prompt&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> String <span class=\"title function_\">prompt</span><span class=\"params\">(String name, String voice)</span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 设置用户输入信息</span></span><br><span class=\"line\">\t<span class=\"type\">String</span> <span class=\"variable\">userText</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">\t\t给我推荐北京的至少三种美食</span></span><br><span class=\"line\"><span class=\"string\">\t\t&quot;&quot;&quot;</span>;</span><br><span class=\"line\">\t<span class=\"type\">UserMessage</span> <span class=\"variable\">userMessage</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">UserMessage</span>(userText);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 设置系统提示信息</span></span><br><span class=\"line\">\tString systemText= <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">\t\t你是一个美食咨询助手，可以帮助人们查询美食信息。</span></span><br><span class=\"line\"><span class=\"string\">\t\t你的名字是&#123;name&#125;,</span></span><br><span class=\"line\"><span class=\"string\">\t\t你应该用你的名字和&#123;voice&#125;的饮食习惯回复用户的请求。</span></span><br><span class=\"line\"><span class=\"string\">\t\t&quot;&quot;&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"type\">Message</span> <span class=\"variable\">systemMessage</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">SystemPromptTemplate</span>(systemText)</span><br><span class=\"line\">\t\t\t.createMessage(Map.of(<span class=\"string\">&quot;name&quot;</span>, name, <span class=\"string\">&quot;voice&quot;</span>, voice));</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"type\">Prompt</span> <span class=\"variable\">prompt</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Prompt</span>(List.of(userMessage, systemMessage));</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"type\">ChatResponse</span> <span class=\"variable\">response</span> <span class=\"operator\">=</span> chatModel.call(prompt);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> response.getResults()</span><br><span class=\"line\">\t\t\t.stream()</span><br><span class=\"line\">\t\t\t.map(x-&gt;x.getOutput().getText())</span><br><span class=\"line\">\t\t\t.collect(Collectors.joining(<span class=\"string\">&quot;&quot;</span>));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"函数调用\"><a href=\"#函数调用\" class=\"headerlink\" title=\"函数调用\"></a>函数调用</h3><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">CalculatorService</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// record 定义类</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">record</span> <span class=\"title class_\">AddOperation</span><span class=\"params\">(<span class=\"type\">int</span> a, <span class=\"type\">int</span> b)</span> &#123; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">record</span> <span class=\"title class_\">MulOperation</span><span class=\"params\">(<span class=\"type\">int</span> m, <span class=\"type\">int</span> n)</span> &#123; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"meta\">@Description(&quot;加法运算&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Function&lt;AddOperation,Integer&gt; <span class=\"title function_\">addOperation</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> request -&gt; request.a + request.b;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"meta\">@Description(&quot;乘法运算&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Function&lt;MulOperation,Integer&gt; <span class=\"title function_\">mulOperation</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> request -&gt; request.m * request.n;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">FunctionController</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> ChatModel chatModel;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@GetMapping(value = &quot;/function&quot;, produces = MediaType.APPLICATION_NDJSON_VALUE)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">function01</span><span class=\"params\">(<span class=\"meta\">@RequestParam(defaultValue = &quot;2加3等于多少&quot;)</span> String userMessage)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ChatClient.builder(chatModel)</span><br><span class=\"line\">                .build().prompt()</span><br><span class=\"line\">                .system(<span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">                    您是算术计算器的代理。</span></span><br><span class=\"line\"><span class=\"string\">                    您能够支持加法运算、乘法运算等操作，其余功能将在后续版本中添加，如果用户问的问题不支持请告知详情。</span></span><br><span class=\"line\"><span class=\"string\">                    在提供加法运算、乘法运算等操作之前，您必须从用户处获取如下信息：两个数字，运算类型。</span></span><br><span class=\"line\"><span class=\"string\">                    请调用自定义函数执行加法运算、乘法运算。</span></span><br><span class=\"line\"><span class=\"string\">                    请讲中文。</span></span><br><span class=\"line\"><span class=\"string\">                    &quot;&quot;&quot;</span>)</span><br><span class=\"line\">                .user(userMessage)</span><br><span class=\"line\">                .tools(<span class=\"string\">&quot;addOperation&quot;</span>, <span class=\"string\">&quot;mulOperation&quot;</span>)</span><br><span class=\"line\">                .call()</span><br><span class=\"line\">                .content();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"SpringAI-Ollama\"><a href=\"#SpringAI-Ollama\" class=\"headerlink\" title=\"SpringAI Ollama\"></a>SpringAI Ollama</h2><figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.ai<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-ai-ollama-spring-boot-starter<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependencyManagement</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.ai<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-ai-bom<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.0.0-M6<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">type</span>&gt;</span>pom<span class=\"tag\">&lt;/<span class=\"name\">type</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>import<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependencyManagement</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">ai:</span></span><br><span class=\"line\">    <span class=\"attr\">ollama:</span></span><br><span class=\"line\">      <span class=\"attr\">base-url:</span> <span class=\"string\">http://localhost:11434</span></span><br><span class=\"line\">      <span class=\"attr\">chat:</span></span><br><span class=\"line\">        <span class=\"attr\">options:</span></span><br><span class=\"line\">          <span class=\"attr\">model:</span> <span class=\"string\">deepseek-r1:1.5b</span></span><br><span class=\"line\">          <span class=\"attr\">temperature:</span> <span class=\"number\">0.7</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"简单对话-2\"><a href=\"#简单对话-2\" class=\"headerlink\" title=\"简单对话\"></a>简单对话</h3><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> ChatClient chatClient;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"title function_\">ChatController</span><span class=\"params\">(OllamaChatModel model)</span> &#123;</span><br><span class=\"line\">    chatClient = ChatClient</span><br><span class=\"line\">            .builder(model)</span><br><span class=\"line\">            .defaultSystem(<span class=\"string\">&quot;你是一个热心的AI助手，你的名字叫小A&quot;</span>)</span><br><span class=\"line\">            .build();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@GetMapping(&quot;/chat&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> String <span class=\"title function_\">chat</span><span class=\"params\">(<span class=\"meta\">@RequestParam(defaultValue = &quot;你是谁&quot;)</span> String msg)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> chatClient.prompt()</span><br><span class=\"line\">            .user(msg)</span><br><span class=\"line\">            .call()</span><br><span class=\"line\">            .content();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"会话日志\"><a href=\"#会话日志\" class=\"headerlink\" title=\"会话日志\"></a>会话日志</h3><figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">logging:</span></span><br><span class=\"line\">  <span class=\"attr\">level:</span></span><br><span class=\"line\">    <span class=\"attr\">org.springframework.ai.chat.client.advisor:</span> <span class=\"string\">debug</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> ChatClient chatClient;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"title function_\">ChatController</span><span class=\"params\">(OllamaChatModel model)</span> &#123;</span><br><span class=\"line\">    chatClient = ChatClient</span><br><span class=\"line\">            .builder(model)</span><br><span class=\"line\">            .defaultSystem(<span class=\"string\">&quot;你是一个热心的AI助手，你的名字叫小A&quot;</span>)</span><br><span class=\"line\">            .defaultAdvisors(<span class=\"keyword\">new</span> <span class=\"title class_\">SimpleLoggerAdvisor</span>())  <span class=\"comment\">// 会话日志</span></span><br><span class=\"line\">            .build();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"会话记忆\"><a href=\"#会话记忆\" class=\"headerlink\" title=\"会话记忆\"></a>会话记忆</h3><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Bean</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> ChatMemory <span class=\"title function_\">chatMemory</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">InMemoryChatMemory</span>();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Bean</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> ChatClient <span class=\"title function_\">chatClient</span><span class=\"params\">(OllamaChatModel model, ChatMemory chatMemory)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ChatClient.builder(model)</span><br><span class=\"line\">            .defaultSystem(<span class=\"string\">&quot;你是一个热心的AI助手，你的名字叫小A&quot;</span>)</span><br><span class=\"line\">            .defaultAdvisors(</span><br><span class=\"line\">                    <span class=\"keyword\">new</span> <span class=\"title class_\">SimpleLoggerAdvisor</span>(),  <span class=\"comment\">// 会话日志</span></span><br><span class=\"line\">                    <span class=\"keyword\">new</span> <span class=\"title class_\">MessageChatMemoryAdvisor</span>(chatMemory)  <span class=\"comment\">// 会话记忆</span></span><br><span class=\"line\">            )</span><br><span class=\"line\">            .build();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Autowired</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> ChatClient chatClient;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@GetMapping(&quot;/chat&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> String <span class=\"title function_\">chat</span><span class=\"params\">(<span class=\"meta\">@RequestParam(defaultValue = &quot;你是谁&quot;)</span> String msg, String chatId)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> chatClient.prompt()</span><br><span class=\"line\">            .user(msg)</span><br><span class=\"line\">            .advisors(a -&gt; a.param(AbstractChatMemoryAdvisor.CHAT_MEMORY_CONVERSATION_ID_KEY, chatId))</span><br><span class=\"line\">            .call()</span><br><span class=\"line\">            .content();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"SpringAI-Alibaba\"><a href=\"#SpringAI-Alibaba\" class=\"headerlink\" title=\"SpringAI Alibaba\"></a>SpringAI Alibaba</h2><figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.alibaba.cloud.ai<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-ai-alibaba-starter<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.0.0-M6.1<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">repositories</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">repository</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">id</span>&gt;</span>spring-milestones<span class=\"tag\">&lt;/<span class=\"name\">id</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>Spring Milestones<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">url</span>&gt;</span>https://repo.spring.io/milestone<span class=\"tag\">&lt;/<span class=\"name\">url</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">snapshots</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">enabled</span>&gt;</span>false<span class=\"tag\">&lt;/<span class=\"name\">enabled</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">snapshots</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">repository</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">repositories</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">ai:</span></span><br><span class=\"line\">    <span class=\"attr\">dashscope:</span></span><br><span class=\"line\">      <span class=\"attr\">api-key:</span> <span class=\"string\">&lt;API-KEY&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"对话模型\"><a href=\"#对话模型\" class=\"headerlink\" title=\"对话模型\"></a>对话模型</h3><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">String</span> <span class=\"variable\">DEFAULT_PROMPT</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;你是一个博学的智能聊天助手，请根据用户提问回答！&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> ChatClient dashScopeChatClient;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"title function_\">AlibabaController</span><span class=\"params\">(ChatClient.Builder builder)</span> &#123;</span><br><span class=\"line\">\t<span class=\"built_in\">this</span>.dashScopeChatClient = builder.defaultSystem(DEFAULT_PROMPT)</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 实现 Chat Memory 的 Advisor</span></span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 在使用 Chat Memory 时，需要指定对话 ID，以便 Spring AI 处理上下文。</span></span><br><span class=\"line\">\t\t\t.defaultAdvisors(<span class=\"keyword\">new</span> <span class=\"title class_\">MessageChatMemoryAdvisor</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">InMemoryChatMemory</span>()))</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 实现 Logger 的 Advisor</span></span><br><span class=\"line\">\t\t\t.defaultAdvisors(<span class=\"keyword\">new</span> <span class=\"title class_\">SimpleLoggerAdvisor</span>())</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 设置 ChatClient 中 ChatModel 的 Options 参数</span></span><br><span class=\"line\">\t\t\t.defaultOptions(DashScopeChatOptions.builder().withTopP(<span class=\"number\">0.7</span>).build())</span><br><span class=\"line\">\t\t\t.build();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@GetMapping(&quot;/chat&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> String <span class=\"title function_\">simpleChat</span><span class=\"params\">(<span class=\"meta\">@RequestParam(defaultValue = &quot;你是谁&quot;)</span> String msg)</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> dashScopeChatClient.prompt(msg).call().content();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"图像模型\"><a href=\"#图像模型\" class=\"headerlink\" title=\"图像模型\"></a>图像模型</h3><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Autowired</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> DashScopeImageModel imageModel;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@GetMapping(&quot;/image&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">getImage</span><span class=\"params\">(<span class=\"meta\">@RequestParam(defaultValue = &quot;生成一只小猫&quot;)</span> String msg, HttpServletResponse response)</span> &#123;</span><br><span class=\"line\">\t<span class=\"type\">ImageResponse</span> <span class=\"variable\">imageResponse</span> <span class=\"operator\">=</span> imageModel.call(</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">new</span> <span class=\"title class_\">ImagePrompt</span>(msg, DashScopeImageOptions.builder()</span><br><span class=\"line\">\t\t\t\t\t.withModel(DashScopeImageApi.DEFAULT_IMAGE_MODEL)</span><br><span class=\"line\">\t\t\t\t\t.withN(<span class=\"number\">1</span>)</span><br><span class=\"line\">\t\t\t\t\t.withHeight(<span class=\"number\">1024</span>)</span><br><span class=\"line\">\t\t\t\t\t.withWidth(<span class=\"number\">1024</span>)</span><br><span class=\"line\">\t\t\t\t\t.build()));</span><br><span class=\"line\">\t<span class=\"comment\">// 获取生成图像的地址</span></span><br><span class=\"line\">\t<span class=\"type\">String</span> <span class=\"variable\">imageUrl</span> <span class=\"operator\">=</span> imageResponse.getResult().getOutput().getUrl();</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">// 在浏览器输出</span></span><br><span class=\"line\">\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"type\">URL</span> <span class=\"variable\">url</span> <span class=\"operator\">=</span> URI.create(imageUrl).toURL();</span><br><span class=\"line\">\t\t<span class=\"type\">InputStream</span> <span class=\"variable\">in</span> <span class=\"operator\">=</span> url.openStream();</span><br><span class=\"line\">\t\tresponse.setHeader(<span class=\"string\">&quot;Content-Type&quot;</span>, MediaType.IMAGE_PNG_VALUE);</span><br><span class=\"line\">\t\tresponse.getOutputStream().write(in.readAllBytes());</span><br><span class=\"line\">\t\tresponse.getOutputStream().flush();</span><br><span class=\"line\">\t&#125;<span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">\t\te.printStackTrace();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"语音模型\"><a href=\"#语音模型\" class=\"headerlink\" title=\"语音模型\"></a>语音模型</h3><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">String</span> <span class=\"variable\">TEXT</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;床前明月光， 疑是地上霜。 举头望明月， 低头思故乡。&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Autowired</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> DashScopeSpeechSynthesisModel speechSynthesisModel;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@GetMapping(&quot;/tts&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">tts</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"type\">DashScopeSpeechSynthesisOptions</span> <span class=\"variable\">options</span> <span class=\"operator\">=</span></span><br><span class=\"line\">\t\t\tDashScopeSpeechSynthesisOptions.builder()</span><br><span class=\"line\">\t\t\t\t\t.withSpeed(<span class=\"number\">1.0</span>)</span><br><span class=\"line\">\t\t\t\t\t.withPitch(<span class=\"number\">0.9</span>)</span><br><span class=\"line\">\t\t\t\t\t.withVolume(<span class=\"number\">70</span>)</span><br><span class=\"line\">\t\t\t\t\t.build();</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"type\">SpeechSynthesisResponse</span> <span class=\"variable\">response</span> <span class=\"operator\">=</span> speechSynthesisModel.call(<span class=\"keyword\">new</span> <span class=\"title class_\">SpeechSynthesisPrompt</span>(TEXT, options));</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"type\">File</span> <span class=\"variable\">file</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">File</span>(<span class=\"string\">&quot;C:\\\\Users\\\\Admin\\\\Desktop\\\\output.mp3&quot;</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">try</span> (<span class=\"type\">FileOutputStream</span> <span class=\"variable\">outputStream</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">FileOutputStream</span>(file)) &#123;</span><br><span class=\"line\">\t\t<span class=\"type\">ByteBuffer</span> <span class=\"variable\">buffer</span> <span class=\"operator\">=</span> response.getResult().getOutput().getAudio();</span><br><span class=\"line\">\t\toutputStream.write(buffer.array());</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">\t   e.printStackTrace();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"RAG-检索增强生成\"><a href=\"#RAG-检索增强生成\" class=\"headerlink\" title=\"RAG 检索增强生成\"></a>RAG 检索增强生成</h3><h4 id=\"RAG-概述\"><a href=\"#RAG-概述\" class=\"headerlink\" title=\"RAG 概述\"></a>RAG 概述</h4><ul>\n<li><strong>目的：</strong><ul>\n<li>利用外部知识库。</li>\n<li>帮助大模型生成<code>更加准确、有依据、最新的回答</code>。</li>\n</ul>\n</li>\n<li><strong>解决：</strong><ul>\n<li><code>知识局限性</code>：LLM的知识被固定在训练数据中，无法知道最新消息。</li>\n<li><code>幻觉现象</code>：LLM有时候会编造出并不存在的答案。</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"RAG-示例\"><a href=\"#RAG-示例\" class=\"headerlink\" title=\"RAG 示例\"></a>RAG 示例</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">RagConfig</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    ChatClient <span class=\"title function_\">chatClient</span><span class=\"params\">(ChatClient.Builder builder)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> builder.defaultSystem(<span class=\"string\">&quot;你将作为一名Java开发语言的专家，对于用户的使用需求作出解答&quot;</span>).build();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    VectorStore <span class=\"title function_\">vectorStore</span><span class=\"params\">(EmbeddingModel model)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">SimpleVectorStore</span> <span class=\"variable\">store</span> <span class=\"operator\">=</span> SimpleVectorStore.builder(model).build();</span><br><span class=\"line\">        <span class=\"comment\">//生成说明文档向量化存储</span></span><br><span class=\"line\">        List&lt;Document&gt; documents = List.of(</span><br><span class=\"line\">                <span class=\"keyword\">new</span> <span class=\"title class_\">Document</span>(<span class=\"string\">&quot;产品说明:名称：Java开发语言\\n&quot;</span> +</span><br><span class=\"line\">                        <span class=\"string\">&quot;产品描述：Java是一种面向对象开发语言。\\n&quot;</span> +</span><br><span class=\"line\">                        <span class=\"string\">&quot;特性：\\n&quot;</span> +</span><br><span class=\"line\">                        <span class=\"string\">&quot;1. 封装\\n&quot;</span> +</span><br><span class=\"line\">                        <span class=\"string\">&quot;2. 继承\\n&quot;</span> +</span><br><span class=\"line\">                        <span class=\"string\">&quot;3. 多态\\n&quot;</span>));</span><br><span class=\"line\">        store.add(documents);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> store;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Autowired</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> ChatClient chatClient;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Autowired</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> VectorStore vectorStore;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@GetMapping(&quot;/rag&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> String <span class=\"title function_\">rag</span><span class=\"params\">(String input)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> chatClient.prompt()</span><br><span class=\"line\">            .user(input)</span><br><span class=\"line\">            .advisors(<span class=\"keyword\">new</span> <span class=\"title class_\">QuestionAnswerAdvisor</span>(vectorStore))</span><br><span class=\"line\">            .call()</span><br><span class=\"line\">            .content();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><ul>\n<li><a href=\"https://spring.io/projects/spring-ai\">SpringAI 官网</a></li>\n<li><a href=\"https://www.deepseek.com/\">DeepSeek 官网</a></li>\n<li><a href=\"https://ollama.com/\">Ollama 官网</a></li>\n<li><a href=\"https://java2ai.com/\">Spring AI Alibaba 官网</a></li>\n<li><a href=\"https://www.aliyun.com/product/bailian\">阿里云百炼 官网</a></li>\n</ul>\n","categories":["AI"],"tags":["AI"]},{"title":"Ollama","url":"/AI/Ollama/","content":"<h2 id=\"Ollama安装\"><a href=\"#Ollama安装\" class=\"headerlink\" title=\"Ollama安装\"></a>Ollama安装</h2><ul>\n<li><p>CMD命令设置安装目录</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">OllamaSetup.exe /DIR=D:\\Ollama</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>设置大模型系统环境变量</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">OLLAMA_MODELS=D:\\Ollama\\models</span><br></pre></td></tr></table></figure></li>\n</ul>\n<span id=\"more\"></span>\n\n<h2 id=\"Ollama常用命令\"><a href=\"#Ollama常用命令\" class=\"headerlink\" title=\"Ollama常用命令\"></a>Ollama常用命令</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 列出所有模型</span></span><br><span class=\"line\">ollama list</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 列出当前加载的模型</span></span><br><span class=\"line\">ollama ps</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 拉取模型</span></span><br><span class=\"line\">ollama pull deepseek-r1</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 删除模型</span></span><br><span class=\"line\">ollama <span class=\"built_in\">rm</span> deepseek-r1</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 显示模型信息</span></span><br><span class=\"line\">ollama show deepseek-r1</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 启动模型</span></span><br><span class=\"line\">ollama run deepseek-r1</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 停止模型</span></span><br><span class=\"line\">ollama stop deepseek-r1</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Ollama-WebUI安装\"><a href=\"#Ollama-WebUI安装\" class=\"headerlink\" title=\"Ollama WebUI安装\"></a>Ollama WebUI安装</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker run -d -p 3000:8080 \\</span><br><span class=\"line\">--add-host=host.docker.internal:host-gateway \\</span><br><span class=\"line\">-v D:\\Ollama\\ollama-web-ui:/app/backend/data \\</span><br><span class=\"line\">--name open-webui \\</span><br><span class=\"line\">--restart always ghcr.io/open-webui/open-webui:main</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><ul>\n<li><a href=\"https://ollama.com/\">Ollama 官网</a></li>\n<li><a href=\"https://github.com/ollama/ollama\">Ollama GitHub</a></li>\n<li><a href=\"https://github.com/open-webui/open-webui\">Ollama WebUI</a></li>\n</ul>\n","categories":["AI"],"tags":["AI"]},{"title":"大模型应用","url":"/AI/%E5%A4%A7%E6%A8%A1%E5%9E%8B%E5%BA%94%E7%94%A8/","content":"<h2 id=\"大模型介绍\"><a href=\"#大模型介绍\" class=\"headerlink\" title=\"大模型介绍\"></a>大模型介绍</h2><h3 id=\"AI的发展\"><a href=\"#AI的发展\" class=\"headerlink\" title=\"AI的发展\"></a>AI的发展</h3><img src=\"/AI/%E5%A4%A7%E6%A8%A1%E5%9E%8B%E5%BA%94%E7%94%A8/AI%E7%9A%84%E5%8F%91%E5%B1%95.png\" class=\"\" title=\"AI的发展\">\n\n<span id=\"more\"></span>\n\n<h3 id=\"大语言模型\"><a href=\"#大语言模型\" class=\"headerlink\" title=\"大语言模型\"></a>大语言模型</h3><img src=\"/AI/%E5%A4%A7%E6%A8%A1%E5%9E%8B%E5%BA%94%E7%94%A8/%E5%A4%A7%E8%AF%AD%E8%A8%80%E6%A8%A1%E5%9E%8B.png\" class=\"\" title=\"大语言模型\">\n\n<h3 id=\"传统程序和AI大模型\"><a href=\"#传统程序和AI大模型\" class=\"headerlink\" title=\"传统程序和AI大模型\"></a>传统程序和AI大模型</h3><img src=\"/AI/%E5%A4%A7%E6%A8%A1%E5%9E%8B%E5%BA%94%E7%94%A8/%E4%BC%A0%E7%BB%9F%E7%A8%8B%E5%BA%8F%E5%92%8CAI%E5%A4%A7%E6%A8%A1%E5%9E%8B.png\" class=\"\" title=\"传统程序和AI大模型\">\n\n<h3 id=\"Hybrid-AI大模型\"><a href=\"#Hybrid-AI大模型\" class=\"headerlink\" title=\"Hybrid AI大模型\"></a>Hybrid AI大模型</h3><ul>\n<li><strong>大模型应用</strong>是基于大模型的推理、分析、生成能力，<strong>结合传统编程</strong>能力，开发出的各种应用。</li>\n</ul>\n<img src=\"/AI/%E5%A4%A7%E6%A8%A1%E5%9E%8B%E5%BA%94%E7%94%A8/HybridAI%E5%A4%A7%E6%A8%A1%E5%9E%8B.png\" class=\"\" title=\"Hybrid AI大模型\">\n\n<h2 id=\"大模型应用\"><a href=\"#大模型应用\" class=\"headerlink\" title=\"大模型应用\"></a>大模型应用</h2><img src=\"/AI/%E5%A4%A7%E6%A8%A1%E5%9E%8B%E5%BA%94%E7%94%A8/%E5%A4%A7%E6%A8%A1%E5%9E%8B%E5%BA%94%E7%94%A8.png\" class=\"\" title=\"大模型应用\">\n\n<h2 id=\"大模型部署\"><a href=\"#大模型部署\" class=\"headerlink\" title=\"大模型部署\"></a>大模型部署</h2><h3 id=\"云服务\"><a href=\"#云服务\" class=\"headerlink\" title=\"云服务\"></a>云服务</h3><ul>\n<li><a href=\"https://www.aliyun.com/product/bailian\">阿里云百炼</a></li>\n<li><a href=\"https://cloud.tencent.com/product/ti\">腾讯云TI平台</a></li>\n<li><a href=\"https://cloud.baidu.com/product-s/qianfan_modelbuilder\">百度智能云千帆平台</a></li>\n<li><a href=\"https://www.volcengine.com/product/ark\">火山方舟</a></li>\n</ul>\n<h3 id=\"本地部署\"><a href=\"#本地部署\" class=\"headerlink\" title=\"本地部署\"></a>本地部署</h3><ul>\n<li><a href=\"https://ollama.com/\">Ollama</a></li>\n</ul>\n<h2 id=\"大模型调用\"><a href=\"#大模型调用\" class=\"headerlink\" title=\"大模型调用\"></a>大模型调用</h2><h3 id=\"请求数据\"><a href=\"#请求数据\" class=\"headerlink\" title=\"请求数据\"></a>请求数据</h3><img src=\"/AI/%E5%A4%A7%E6%A8%A1%E5%9E%8B%E5%BA%94%E7%94%A8/%E5%A4%A7%E6%A8%A1%E5%9E%8B%E8%B0%83%E7%94%A8_%E8%AF%B7%E6%B1%82%E6%95%B0%E6%8D%AE.png\" class=\"\" title=\"请求数据\">\n\n<h3 id=\"响应数据\"><a href=\"#响应数据\" class=\"headerlink\" title=\"响应数据\"></a>响应数据</h3><img src=\"/AI/%E5%A4%A7%E6%A8%A1%E5%9E%8B%E5%BA%94%E7%94%A8/%E5%A4%A7%E6%A8%A1%E5%9E%8B%E8%B0%83%E7%94%A8_%E5%93%8D%E5%BA%94%E6%95%B0%E6%8D%AE.png\" class=\"\" title=\"响应数据\">\n\n<h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> openai <span class=\"keyword\">import</span> OpenAI</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 1.初始化OpenAI客户端</span></span><br><span class=\"line\">client = OpenAI(api_key=<span class=\"string\">&quot;&lt;DeepSeek API Key&gt;&quot;</span>, base_url=<span class=\"string\">&quot;https://api.deepseek.com&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 2.发送http请求到大模型</span></span><br><span class=\"line\">response = client.chat.completions.create(</span><br><span class=\"line\">    model=<span class=\"string\">&quot;deepseek-r1&quot;</span>,</span><br><span class=\"line\">    messages=[</span><br><span class=\"line\">        &#123;<span class=\"string\">&quot;role&quot;</span>: <span class=\"string\">&quot;system&quot;</span>, <span class=\"string\">&quot;content&quot;</span>: <span class=\"string\">&quot;你是一个热心的AI助手，你的名字叫小A&quot;</span>&#125;,</span><br><span class=\"line\">        &#123;<span class=\"string\">&quot;role&quot;</span>: <span class=\"string\">&quot;user&quot;</span>, <span class=\"string\">&quot;content&quot;</span>: <span class=\"string\">&quot;你好，你是谁？&quot;</span>&#125;</span><br><span class=\"line\">    ],</span><br><span class=\"line\">    stream=<span class=\"literal\">False</span></span><br><span class=\"line\">) </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 3. 打印返回结果</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(response.choices[<span class=\"number\">0</span>].message.content)</span><br></pre></td></tr></table></figure>\n<ul>\n<li><strong>消息角色</strong></li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>角色</th>\n<th>描述</th>\n<th>示例</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>system</td>\n<td>优先于user指令之前的指令，也就是给大模型设定角色和任务背景的系统指令</td>\n<td>你是一个乐于助人的编程助手，你的名字叫小A，请以小A的风格来回答用户的问题</td>\n</tr>\n<tr>\n<td>user</td>\n<td>终端用户输入的指令（类似于你在ChatGPT聊天框输入的内容）</td>\n<td>你好，你是谁？</td>\n</tr>\n<tr>\n<td>assistant</td>\n<td>由大模型生成的消息，可能是上一轮对话生成的结果</td>\n<td>注意，用户可能与模型产生多轮对话，每轮对话模型都会生成不同结果</td>\n</tr>\n</tbody></table>\n<h2 id=\"AI应用开发技术架构\"><a href=\"#AI应用开发技术架构\" class=\"headerlink\" title=\"AI应用开发技术架构\"></a>AI应用开发技术架构</h2><img src=\"/AI/%E5%A4%A7%E6%A8%A1%E5%9E%8B%E5%BA%94%E7%94%A8/AI%E5%BA%94%E7%94%A8%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF%E6%9E%B6%E6%9E%84.png\" class=\"\" title=\"AI应用开发技术架构\">\n\n<h3 id=\"Prompt\"><a href=\"#Prompt\" class=\"headerlink\" title=\"Prompt\"></a>Prompt</h3><img src=\"/AI/%E5%A4%A7%E6%A8%A1%E5%9E%8B%E5%BA%94%E7%94%A8/Prompt.png\" class=\"\" title=\"Prompt\">\n\n<h3 id=\"FunctionCalling\"><a href=\"#FunctionCalling\" class=\"headerlink\" title=\"FunctionCalling\"></a>FunctionCalling</h3><img src=\"/AI/%E5%A4%A7%E6%A8%A1%E5%9E%8B%E5%BA%94%E7%94%A8/FunctionCalling.png\" class=\"\" title=\"FunctionCalling\">\n\n<h3 id=\"RAG\"><a href=\"#RAG\" class=\"headerlink\" title=\"RAG\"></a>RAG</h3><img src=\"/AI/%E5%A4%A7%E6%A8%A1%E5%9E%8B%E5%BA%94%E7%94%A8/RAG.png\" class=\"\" title=\"RAG\">\n\n<!--more-->\n\n<h2 id=\"SpringAI-VS-LangChain4j\"><a href=\"#SpringAI-VS-LangChain4j\" class=\"headerlink\" title=\"SpringAI VS LangChain4j\"></a>SpringAI VS LangChain4j</h2><table>\n<thead>\n<tr>\n<th></th>\n<th>SpringAI</th>\n<th>LangChain4j</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>‌技术栈绑定‌</td>\n<td>强依赖 Spring 生态</td>\n<td>无框架依赖，可独立使用</td>\n</tr>\n<tr>\n<td>适用场景</td>\n<td>SpringBoot应用快速接入单模型</td>\n<td>多模型（动态模型）平台</td>\n</tr>\n<tr>\n<td>Chat</td>\n<td>支持</td>\n<td>支持</td>\n</tr>\n<tr>\n<td>Function</td>\n<td>支持</td>\n<td>支持</td>\n</tr>\n<tr>\n<td>RAG</td>\n<td>支持</td>\n<td>支持</td>\n</tr>\n<tr>\n<td>对话模型</td>\n<td>15+</td>\n<td>15+</td>\n</tr>\n<tr>\n<td>向量模型</td>\n<td>10+</td>\n<td>15+</td>\n</tr>\n<tr>\n<td>向量数据库</td>\n<td>15+</td>\n<td>20+</td>\n</tr>\n<tr>\n<td>多模态模型</td>\n<td>5+</td>\n<td>1</td>\n</tr>\n<tr>\n<td>JDK</td>\n<td>17</td>\n<td>8</td>\n</tr>\n</tbody></table>\n","categories":["AI"],"tags":["AI"]},{"title":"微调","url":"/AI/%E5%BE%AE%E8%B0%83/","content":"<h2 id=\"微调步骤\"><a href=\"#微调步骤\" class=\"headerlink\" title=\"微调步骤\"></a>微调步骤</h2><ul>\n<li><code>安装LLaMA Factory</code> -&gt; <code>下载模型</code> -&gt; <code>准备数据集</code> -&gt; <code>微调</code> -&gt; <code>导出Ollama</code> -&gt; <code>SpringAI接入</code></li>\n</ul>\n<span id=\"more\"></span>\n\n<h2 id=\"环境准备\"><a href=\"#环境准备\" class=\"headerlink\" title=\"环境准备\"></a>环境准备</h2><h3 id=\"安装-python\"><a href=\"#安装-python\" class=\"headerlink\" title=\"安装 python\"></a>安装 python</h3><ul>\n<li><strong>下载 python：</strong> <ul>\n<li><a href=\"https://www.python.org/\">python 官网</a></li>\n</ul>\n</li>\n<li><strong>配置环境变量 Path：</strong><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">D:\\Python</span><br><span class=\"line\">D:\\Python\\Scripts</span><br></pre></td></tr></table></figure></li>\n<li><strong>验证 python：</strong><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">python --version</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"安装-pytorch\"><a href=\"#安装-pytorch\" class=\"headerlink\" title=\"安装 pytorch\"></a>安装 pytorch</h3><ul>\n<li><strong>下载 pytorch：</strong> <ul>\n<li><a href=\"https://pytorch.org/\">pytorch 官网</a></li>\n<li><code>PyTorch 与 CUDA 版本选择一致</code><img src=\"/AI/%E5%BE%AE%E8%B0%83/pytorch.png\" class=\"\" title=\"pytorch\"></li>\n</ul>\n</li>\n<li><strong>验证 pytorch：</strong><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 进入 Python 交互模式</span></span><br><span class=\"line\">python</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 逐行输入</span></span><br><span class=\"line\">import torch</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;PyTorch version:&quot;</span>, torch.__version__)</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"安装-CUDA\"><a href=\"#安装-CUDA\" class=\"headerlink\" title=\"安装 CUDA\"></a>安装 CUDA</h3><ul>\n<li><strong>下载 CUDA：</strong> <ul>\n<li><a href=\"https://developer.nvidia.com/cuda-toolkit-archive\">CUDA 版本</a></li>\n</ul>\n</li>\n<li><strong>验证 CUDA：</strong><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">nvcc --version</span><br></pre></td></tr></table></figure></li>\n<li><strong>验证 pytorch 和 CUDA 是否匹配成功：</strong><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 进入 Python 交互模式</span></span><br><span class=\"line\">python</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 逐行输入</span></span><br><span class=\"line\">import torch</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;CUDA available:&quot;</span>, torch.cuda.is_available())</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;CUDA version in PyTorch:&quot;</span>, torch.version.cuda)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;GPU数量:&quot;</span>, torch.cuda.device_count())</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;GPU名称:&quot;</span>, torch.cuda.get_device_name(0) <span class=\"keyword\">if</span> torch.cuda.is_available() <span class=\"keyword\">else</span> <span class=\"string\">&quot;无GPU&quot;</span>)</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"安装LLaMA-Factory\"><a href=\"#安装LLaMA-Factory\" class=\"headerlink\" title=\"安装LLaMA Factory\"></a>安装LLaMA Factory</h2><ul>\n<li><strong>下载 LLaMA Factory：</strong><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">clone</span> --depth 1 https://github.com/hiyouga/LLaMA-Factory.git</span><br><span class=\"line\"><span class=\"built_in\">cd</span> LLaMA-Factory  </span><br><span class=\"line\">pip install -e <span class=\"string\">&quot;.[torch,metrics]&quot;</span></span><br></pre></td></tr></table></figure>\n<img src=\"/AI/%E5%BE%AE%E8%B0%83/LLaMAFactory_Chat.png\" class=\"\" title=\"LLaMA Factory\"></li>\n</ul>\n<h2 id=\"下载模型\"><a href=\"#下载模型\" class=\"headerlink\" title=\"下载模型\"></a>下载模型</h2><ul>\n<li><a href=\"https://modelscope.cn/\">魔塔社区</a></li>\n<li><a href=\"https://modelers.cn/\">魔乐社区</a></li>\n<li><a href=\"https://huggingface.co/\">Hugging Face</a></li>\n<li><a href=\"https://aistudio.baidu.com/\">AI Studio</a></li>\n</ul>\n<h2 id=\"准备数据集\"><a href=\"#准备数据集\" class=\"headerlink\" title=\"准备数据集\"></a>准备数据集</h2><ul>\n<li><a href=\"https://github.com/hiyouga/LLaMA-Factory/blob/main/data/README_zh.md\">LLaMA Factory数据集格式</a></li>\n<li><strong>生成数据集：</strong><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@SpringBootTest</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">FineTuningData</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">generateData</span><span class=\"params\">(<span class=\"meta\">@Autowired</span> ChatClient.Builder builder,</span></span><br><span class=\"line\"><span class=\"params\">                             <span class=\"meta\">@Value(&quot;classpath:terms-of-service.txt&quot;)</span> Resource resource)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        <span class=\"type\">ChatClient</span> <span class=\"variable\">chatClient</span> <span class=\"operator\">=</span> builder.defaultSystem(</span><br><span class=\"line\">                        <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">                        你是一个数据处理专家，需要根据语义分隔成不同的问答片段，转换为Alpaca格式作为fine-turning使用:</span></span><br><span class=\"line\"><span class=\"string\">                        格式：</span></span><br><span class=\"line\"><span class=\"string\">                        [</span></span><br><span class=\"line\"><span class=\"string\">                          &#123;</span></span><br><span class=\"line\"><span class=\"string\">                            &quot;instruction&quot;: &quot;[片段内容指令问题]&quot;,</span></span><br><span class=\"line\"><span class=\"string\">                            &quot;input&quot;: &quot;[片段内容的简短问题]&quot;,</span></span><br><span class=\"line\"><span class=\"string\">                            &quot;output&quot;: &quot;[片段内容的回复]&quot;,</span></span><br><span class=\"line\"><span class=\"string\">                          &#125;,</span></span><br><span class=\"line\"><span class=\"string\">                        ]</span></span><br><span class=\"line\"><span class=\"string\">                        &quot;&quot;&quot;</span></span><br><span class=\"line\">                ).build();</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">text</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">TextReader</span>(resource).read().get(<span class=\"number\">0</span>).getText();</span><br><span class=\"line\"></span><br><span class=\"line\">        List&lt;JsonData&gt; list = chatClient</span><br><span class=\"line\">                .prompt()</span><br><span class=\"line\">                .user(text)</span><br><span class=\"line\">                .call()</span><br><span class=\"line\">                .entity(<span class=\"keyword\">new</span> <span class=\"title class_\">ParameterizedTypeReference</span>&lt;&gt;() &#123;&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">ObjectMapper</span>().writeValue(<span class=\"keyword\">new</span> <span class=\"title class_\">File</span>(<span class=\"string\">&quot;finetuningdata.json&quot;</span>), list);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">[</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;instruction&quot;</span>:<span class=\"string\">&quot;航空公司预订航班规则。&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;input&quot;</span>:<span class=\"string\">&quot;预定规则&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;output&quot;</span>:<span class=\"string\">&quot;1. 预订航班\\n- 通过我们的网站或移动应用程序预订。\\n- 预订时需要全额付款。\\n- 确保个人信息（姓名、ID 等）的准确性，因为更正可能会产生 25 的费用。&quot;</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;instruction&quot;</span>:<span class=\"string\">&quot;航空公司更改预订规则。&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;input&quot;</span>:<span class=\"string\">&quot;更改预订&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;output&quot;</span>:<span class=\"string\">&quot;允许在航班起飞前24小时内修改预订。可通过在线平台或联系客服来完成变更。不同舱位的改签费用分别为：经济舱50美元、豪华经济舱30美元、商务舱无需支付额外费用。&quot;</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;instruction&quot;</span>:<span class=\"string\">&quot;航空公司取消预订规则。&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;input&quot;</span>:<span class=\"string\">&quot;取消预订&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;output&quot;</span>:<span class=\"string\">&quot;必须在计划出发时间至少48小时前申请取消预订。取消费用按舱位等级收取：经济舱75美元、豪华经济舱50美元、商务舱25美元。提交取消请求后，退款通常会在7个工作日内返还给乘客。&quot;</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure></li>\n<li><strong>配置数据集：</strong></li>\n<li>将 <code>finetuningdata.json</code> 复制到 <code>LLaMA-Factory\\data\\</code> 文件夹</li>\n<li>在 <code>dataset_info.json</code> 中加入一组配置<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\">&quot;finetuningdata&quot;: &#123;</span><br><span class=\"line\">    &quot;file_name&quot;: &quot;finetuningdata.json&quot;,</span><br><span class=\"line\">    &quot;columns&quot;: &#123;</span><br><span class=\"line\">      &quot;prompt&quot;: &quot;instruction&quot;,</span><br><span class=\"line\">      &quot;query&quot;: &quot;input&quot;,</span><br><span class=\"line\">      &quot;response&quot;: &quot;output&quot;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<img src=\"/AI/%E5%BE%AE%E8%B0%83/LLaMAFactory_Train.png\" class=\"\" title=\"LLaMA Factory\"></li>\n</ul>\n<h2 id=\"导出Ollama\"><a href=\"#导出Ollama\" class=\"headerlink\" title=\"导出Ollama\"></a>导出Ollama</h2><img src=\"/AI/%E5%BE%AE%E8%B0%83/LLaMAFactory_Export.png\" class=\"\" title=\"LLaMA Factory\">\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">ollama create &lt;model-name&gt; -f &lt;model-file&gt;</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><ul>\n<li><a href=\"https://github.com/hiyouga/LLaMA-Factory\">LLaMA-Factory</a></li>\n</ul>\n","categories":["AI"],"tags":["AI"]},{"title":"Git：常用命令","url":"/Git/Git%EF%BC%9A%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/","content":"<h2 id=\"初始化配置\"><a href=\"#初始化配置\" class=\"headerlink\" title=\"初始化配置\"></a>初始化配置</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 查询配置信息</span></span><br><span class=\"line\">git config --list                                <span class=\"comment\"># 列出当前配置</span></span><br><span class=\"line\">git config --<span class=\"built_in\">local</span> --list                        <span class=\"comment\"># 列出仓库配置</span></span><br><span class=\"line\">git config --global --list                       <span class=\"comment\"># 列出全局配置</span></span><br><span class=\"line\">git config --system --list                       <span class=\"comment\"># 列出系统配置</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 配置用户信息</span></span><br><span class=\"line\">git config --global user.name &lt;user&gt;             <span class=\"comment\"># 配置用户名</span></span><br><span class=\"line\">git config --global user.email &lt;email&gt;           <span class=\"comment\"># 配置用户邮箱</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 其他配置</span></span><br><span class=\"line\">git config --global merge.tool vimdiff           <span class=\"comment\"># 配置解决冲突时使用哪种差异分析工具，比如要使用vimdiff</span></span><br><span class=\"line\">git config --global alias.co checkout    　　　   <span class=\"comment\"># 配置别名</span></span><br><span class=\"line\">git config --global color.ui auto    　　　　　　  <span class=\"comment\"># 配置git命令输出为彩色的</span></span><br><span class=\"line\">git config --global core.editor vi    　　　　　　 <span class=\"comment\"># 配置git使用的文本编辑器</span></span><br><span class=\"line\">git config --global credential.helper cache      <span class=\"comment\"># 配置到缓存 默认15分钟</span></span><br><span class=\"line\">git config --global credential.helper <span class=\"string\">&#x27;cache --timeout=3600&#x27;</span>      <span class=\"comment\"># 修改缓存时间</span></span><br></pre></td></tr></table></figure>\n\n<span id=\"more\"></span>\n\n<h2 id=\"基本操作\"><a href=\"#基本操作\" class=\"headerlink\" title=\"基本操作\"></a>基本操作</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 增加文件</span></span><br><span class=\"line\">git add .                                        <span class=\"comment\"># 添加当前目录的所有文件到暂存区</span></span><br><span class=\"line\">git add &lt;file&gt;...                                <span class=\"comment\"># 添加指定文件到暂存区</span></span><br><span class=\"line\">git add &lt;<span class=\"built_in\">dir</span>&gt;                                    <span class=\"comment\"># 添加指定目录到暂存区，包括子目录</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 删除文件</span></span><br><span class=\"line\">git <span class=\"built_in\">rm</span> &lt;file&gt;...                                 <span class=\"comment\"># 将工作区，暂存区文件删除</span></span><br><span class=\"line\">git <span class=\"built_in\">rm</span> --cached &lt;file&gt;                           <span class=\"comment\"># 将暂存区文件删除，工作区保留</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 提交文件</span></span><br><span class=\"line\">git commit -m &lt;message&gt;                          <span class=\"comment\"># 提交暂存区的所有文件到本地库</span></span><br><span class=\"line\">git commit &lt;file&gt;... -m &lt;message&gt;                <span class=\"comment\"># 提交暂存区的指定文件到本地库</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 撤销文件</span></span><br><span class=\"line\"><span class=\"comment\"># reset [&lt;mode&gt;] 参数说明：</span></span><br><span class=\"line\"><span class=\"comment\">#   - soft：在本地库移动 HEAD 指针</span></span><br><span class=\"line\"><span class=\"comment\">#   - mixed：在本地库移动 HEAD 指针, 重置暂存区</span></span><br><span class=\"line\"><span class=\"comment\">#   - hard：在本地库移动 HEAD 指针, 重置暂存区, 重置工作区</span></span><br><span class=\"line\">git reset --hard HEAD                            <span class=\"comment\"># 将暂存区文件恢复到工作区</span></span><br><span class=\"line\">git reset --hard &lt;<span class=\"built_in\">id</span>&gt;                            <span class=\"comment\"># 基于索引值, 可前进后退</span></span><br><span class=\"line\">git reset --hard HEAD^                           <span class=\"comment\"># 使用^符号：只能前进 (一个^表示前进一步，n 个表示前进 n 步)</span></span><br><span class=\"line\">git reset --hard HEAD~n                          <span class=\"comment\"># 使用~符号：只能前进 (表示前进 n 步)</span></span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"comment\"># 比较文件</span></span><br><span class=\"line\">git diff &lt;file&gt;                                  <span class=\"comment\"># 比较工作区和暂存区文件差异 </span></span><br><span class=\"line\">git diff &lt;<span class=\"built_in\">id</span>&gt; &lt;file&gt;                             <span class=\"comment\"># 比较工作区和本地库文件差异 </span></span><br><span class=\"line\">git diff &lt;id1&gt; &lt;id2&gt;                             <span class=\"comment\"># 比较本地库两个文件差异</span></span><br><span class=\"line\">git diff &lt;branch1&gt; &lt;branch2&gt;                     <span class=\"comment\"># 比较两个分支之间的文件差异</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 重命名文件  </span></span><br><span class=\"line\">git <span class=\"built_in\">mv</span> &lt;file&gt; &lt;renamefile&gt;                       <span class=\"comment\"># 重命名文件  </span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看工作区、暂存区状态</span></span><br><span class=\"line\">git status                                       <span class=\"comment\"># 查看所有文件状态</span></span><br><span class=\"line\">git status &lt;file&gt;                                <span class=\"comment\"># 查看指定文件状态</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看历史记录</span></span><br><span class=\"line\">git <span class=\"built_in\">log</span>                                          <span class=\"comment\"># 查看所有历史记录 (多屏显示控制方式：空格向下翻页, b 向上翻页, q 退出)    </span></span><br><span class=\"line\">git <span class=\"built_in\">log</span> &lt;file&gt;                                   <span class=\"comment\"># 查看指定文件历史记录  </span></span><br><span class=\"line\">git <span class=\"built_in\">log</span> &lt;<span class=\"built_in\">dir</span>&gt;                                    <span class=\"comment\"># 查看指定目录历史记录</span></span><br><span class=\"line\">git <span class=\"built_in\">log</span> --pretty=oneline                         <span class=\"comment\"># 每条记录只显示一行，只能查看之前历史记录</span></span><br><span class=\"line\">git <span class=\"built_in\">log</span> --oneline                                <span class=\"comment\"># 每条记录只显示一行，只能查看之前历史记录</span></span><br><span class=\"line\">git reflog                                       <span class=\"comment\"># 查看所有分支的所有操作记录</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"远程操作\"><a href=\"#远程操作\" class=\"headerlink\" title=\"远程操作\"></a>远程操作</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 创建远程库地址别名</span></span><br><span class=\"line\">git remote add &lt;remote&gt; &lt;url&gt;                    <span class=\"comment\"># 创建远程库url别名</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 修改远程库地址url</span></span><br><span class=\"line\">git remote set-url &lt;remote&gt; &lt;url&gt;                <span class=\"comment\"># 修改远程库url地址</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 删除远程库地址别名</span></span><br><span class=\"line\">git remote <span class=\"built_in\">rm</span> &lt;remote&gt;                           <span class=\"comment\"># 删除远程库url别名</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看远程库</span></span><br><span class=\"line\">git remote -v                                    <span class=\"comment\"># 查看所有远程库</span></span><br><span class=\"line\">git remote show &lt;remote&gt;                         <span class=\"comment\"># 查看某个远程仓库的信息</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 推送远程库</span></span><br><span class=\"line\">git push                                         <span class=\"comment\"># 推送本地所有分支到远程仓库</span></span><br><span class=\"line\">git push &lt;remote&gt; &lt;branch&gt;                       <span class=\"comment\"># 推送本地指定分支到远程仓库</span></span><br><span class=\"line\">git push &lt;remote&gt; &lt;local-branch&gt;:&lt;remote-branch&gt; <span class=\"comment\"># 推送本地指定分支到远程仓库指定分支</span></span><br><span class=\"line\">git push &lt;remote&gt; --force                        <span class=\"comment\"># 强行推送当前分支到远程仓库，即使有冲突</span></span><br><span class=\"line\">git push &lt;remote&gt; --all                          <span class=\"comment\"># 推送所有分支到远程仓库</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 克隆远程库</span></span><br><span class=\"line\">git <span class=\"built_in\">clone</span> &lt;url&gt;                                  <span class=\"comment\"># 克隆项目(1.完整的把远程库下载到本地; 2.创建&lt;remote&gt;远程地址别名; 3.初始化本地库)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 拉取远程库</span></span><br><span class=\"line\">git fetch &lt;remote&gt; &lt;branch&gt;                      <span class=\"comment\"># 从远程库拉取指定分支到本地库</span></span><br><span class=\"line\">git pull                                         <span class=\"comment\"># 从远程库拉取所有分支到本地库，并合并到工作区(pull = fetch + merge)</span></span><br><span class=\"line\">git pull &lt;remote&gt; &lt;branch&gt;                       <span class=\"comment\"># 从远程库拉取指定分支到本地库，并合并到工作区(pull = fetch + merge)</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"分支操作\"><a href=\"#分支操作\" class=\"headerlink\" title=\"分支操作\"></a>分支操作</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 查看分支</span></span><br><span class=\"line\">git branch                                       <span class=\"comment\"># 列出所有本地分支</span></span><br><span class=\"line\">git branch -r                                    <span class=\"comment\"># 列出所有远程分支</span></span><br><span class=\"line\">git branch -a                                    <span class=\"comment\"># 列出所有本地和远程分支</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 新建分支</span></span><br><span class=\"line\">git branch &lt;branch&gt;                              <span class=\"comment\"># 新建本地分支，但依然停留在当前分支</span></span><br><span class=\"line\">git checkout -b &lt;branch&gt;                         <span class=\"comment\"># 新建本地分支，并切换到该分支</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 删除分支</span></span><br><span class=\"line\">git branch -d &lt;branch&gt;                           <span class=\"comment\"># 删除本地分支</span></span><br><span class=\"line\">git branch -dr &lt;remote/branch&gt;                   <span class=\"comment\"># 删除远程分支</span></span><br><span class=\"line\">git push &lt;remote&gt; --delete &lt;branch&gt;              <span class=\"comment\"># 删除远程分支</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 切换分支</span></span><br><span class=\"line\">git checkout &lt;branch&gt;                            <span class=\"comment\"># 切换到指定分支</span></span><br><span class=\"line\">git checkout -                                   <span class=\"comment\"># 切换到上一个分支</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 合并分支</span></span><br><span class=\"line\">git merge &lt;branch&gt;                               <span class=\"comment\"># 合并指定分支到当前分支</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"版本操作\"><a href=\"#版本操作\" class=\"headerlink\" title=\"版本操作\"></a>版本操作</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 查看版本</span></span><br><span class=\"line\">git tag                                          <span class=\"comment\"># 查看本地库版本</span></span><br><span class=\"line\">git tag -r                                       <span class=\"comment\"># 查看远程库版本</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 创建版本</span></span><br><span class=\"line\">git tag &lt;tag&gt;                                    <span class=\"comment\"># 创建本地库版本</span></span><br><span class=\"line\">git tag -a &lt;tag&gt; -m &lt;message&gt;                    <span class=\"comment\"># 创建本地库版本(带注释)</span></span><br><span class=\"line\">git push &lt;remote&gt; &lt;tag&gt;                          <span class=\"comment\"># 创建远程库版本(本地库版本push到远程)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 删除版本</span></span><br><span class=\"line\">git tag -d &lt;name&gt;                                <span class=\"comment\"># 删除本地库版本</span></span><br><span class=\"line\">git push &lt;remote&gt; --delete tag &lt;tag&gt;             <span class=\"comment\"># 删除远程库版本</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 切换版本</span></span><br><span class=\"line\">git checkout &lt;tag&gt;                               <span class=\"comment\"># 切换版本</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 拉取远程版本</span></span><br><span class=\"line\">git pull &lt;remote&gt; --tags                         <span class=\"comment\"># 拉取远程库所有版本到本地</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 推送远程版本</span></span><br><span class=\"line\">git push &lt;remote&gt; &lt;tag&gt;                          <span class=\"comment\"># 推送本地库指定版本到远程</span></span><br><span class=\"line\">git push &lt;remote&gt; --tags                         <span class=\"comment\"># 推送本地库所有版本到远程</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"其他操作\"><a href=\"#其他操作\" class=\"headerlink\" title=\"其他操作\"></a>其他操作</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">help</span> &lt;<span class=\"built_in\">command</span>&gt;                               <span class=\"comment\"># 显示command的help</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><ul>\n<li><a href=\"https://git-scm.com/docs\">Git文档</a></li>\n<li><a href=\"https://gitee.com/progit/\">Pro Git 中文版</a></li>\n<li><a href=\"http://rogerdudler.github.io/git-guide/index.zh.html\">Git 简明指南</a></li>\n<li><a href=\"http://gitbook.liuhui998.com/index.html\">Git Community Book 中文版</a></li>\n<li><a href=\"http://marklodato.github.io/visual-git-guide/index-zh-cn.html\">图解Git</a></li>\n</ul>\n","categories":["Git"],"tags":["后端","版本控制","Git"]},{"title":"Docker","url":"/Docker/Docker/","content":"<h2 id=\"Docker简介\"><a href=\"#Docker简介\" class=\"headerlink\" title=\"Docker简介\"></a>Docker简介</h2><h3 id=\"Docker是什么\"><a href=\"#Docker是什么\" class=\"headerlink\" title=\"Docker是什么\"></a>Docker是什么</h3><ul>\n<li>解决了运行环境和配置问题软件容器，方便做持续集成并有助于整体发布的容器虚拟化技术</li>\n</ul>\n<span id=\"more\"></span>\n\n<h3 id=\"Docker理念\"><a href=\"#Docker理念\" class=\"headerlink\" title=\"Docker理念\"></a>Docker理念</h3><ul>\n<li>Docker的主要目标是“Build，Ship and Run Any App,Anywhere”，也就是通过对应用组件的封装、分发、部署、运行等生命周期的管理，使用户的APP（可以是一个WEB应用或数据库应用等等）及其运行环境能够做到<code>“一次封装，到处运行”</code></li>\n</ul>\n<h3 id=\"Docker作用\"><a href=\"#Docker作用\" class=\"headerlink\" title=\"Docker作用\"></a>Docker作用</h3><ul>\n<li>更高效的利用系统资源</li>\n<li>更快速的启动时间</li>\n<li>一致的运行环境</li>\n<li>持续交付和部署</li>\n<li>更轻松的迁移</li>\n<li>更轻松的维护和扩展</li>\n</ul>\n<h3 id=\"Docker与虚拟机对比\"><a href=\"#Docker与虚拟机对比\" class=\"headerlink\" title=\"Docker与虚拟机对比\"></a>Docker与虚拟机对比</h3><img src=\"/Docker/Docker/Docker%E4%B8%8E%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%AF%B9%E6%AF%94.png\" class=\"\" title=\"Docker与虚拟机对比\">\n\n<table>\n<thead>\n<tr>\n<th></th>\n<th>虚拟机（VM）</th>\n<th>Docker容器</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>操作系统</td>\n<td>宿主机OS上运行虚拟机OS</td>\n<td>与宿主机共享OS</td>\n</tr>\n<tr>\n<td>存储大小</td>\n<td>镜像庞大（vmdk,vdi等）</td>\n<td>硬件小，便于存储与传输</td>\n</tr>\n<tr>\n<td>运行性能</td>\n<td>操作系统额外的CPU,内存消耗</td>\n<td>几乎无额外性能损失</td>\n</tr>\n<tr>\n<td>移植性</td>\n<td>笨重，与虚拟机耦合度高</td>\n<td>轻便，灵活，适用于Linux</td>\n</tr>\n<tr>\n<td>硬件亲和性</td>\n<td>面向硬件运维者</td>\n<td>面向软件开发者</td>\n</tr>\n<tr>\n<td>部署速度</td>\n<td>较慢，10s以上</td>\n<td>快速，秒级</td>\n</tr>\n</tbody></table>\n<h2 id=\"Docker基本概念\"><a href=\"#Docker基本概念\" class=\"headerlink\" title=\"Docker基本概念\"></a>Docker基本概念</h2><ul>\n<li><code>镜像 (Image)</code> 镜像就是一个<code>只读</code>的模板。镜像可以用来创建 Docker 容器，<code>一个镜像可以创建很多容器</code></li>\n<li><code>容器 (Container)</code> Docker利用容器独立运行的一个或一组应用。<code>容器是用镜像创建的运行实例</code></li>\n<li><code>仓库 (Repository)</code> 仓库是<code>集中存放镜像</code>文件的场所</li>\n</ul>\n<h2 id=\"Docker安装\"><a href=\"#Docker安装\" class=\"headerlink\" title=\"Docker安装\"></a>Docker安装</h2><ul>\n<li><a href=\"https://docs.docker.com/install/linux/docker-ce/centos/\">Docker 安装</a></li>\n</ul>\n<h2 id=\"Docker镜像加速\"><a href=\"#Docker镜像加速\" class=\"headerlink\" title=\"Docker镜像加速\"></a>Docker镜像加速</h2><ul>\n<li><a href=\"https://yeasy.gitbooks.io/docker_practice/install/mirror.html\">Docker 镜像加速</a></li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo <span class=\"built_in\">mkdir</span> -p /etc/docker</span><br><span class=\"line\">sudo <span class=\"built_in\">tee</span> /etc/docker/daemon.json &lt;&lt;-<span class=\"string\">&#x27;EOF&#x27;</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">&quot;registry-mirrors&quot;</span>: [<span class=\"string\">&quot;https://registry.docker-cn.com&quot;</span>,<span class=\"string\">&quot;http://hub-mirror.c.163.com&quot;</span>]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">EOF</span><br><span class=\"line\">sudo systemctl daemon-reload</span><br><span class=\"line\">sudo systemctl restart docker</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Docker常用命令\"><a href=\"#Docker常用命令\" class=\"headerlink\" title=\"Docker常用命令\"></a>Docker常用命令</h2><img src=\"/Docker/Docker/Docker%E5%91%BD%E4%BB%A4.png\" class=\"\" title=\"Docker命令\">\n<h3 id=\"帮助命令\"><a href=\"#帮助命令\" class=\"headerlink\" title=\"帮助命令\"></a>帮助命令</h3><ul>\n<li><code>docker version</code> </li>\n<li><code>docker info</code> </li>\n<li><code>docker --help</code></li>\n</ul>\n<h3 id=\"镜像命令\"><a href=\"#镜像命令\" class=\"headerlink\" title=\"镜像命令\"></a>镜像命令</h3><h4 id=\"列出镜像\"><a href=\"#列出镜像\" class=\"headerlink\" title=\"列出镜像\"></a>列出镜像</h4><ul>\n<li>命令格式：<code>docker images [OPTIONS] [REPOSITORY[:TAG]]</code></li>\n<li>参数选项：<ul>\n<li><code>[OPTIONS] </code>：<ul>\n<li><strong>-a：</strong>列出本地所有镜像（含中间映像层）</li>\n<li><strong>-q：</strong>只显示镜像ID</li>\n<li><strong>–no-trunc：</strong>显示完整的镜像信息</li>\n<li><strong>–digests：</strong>显示镜像的摘要信息</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"搜索镜像\"><a href=\"#搜索镜像\" class=\"headerlink\" title=\"搜索镜像\"></a>搜索镜像</h4><ul>\n<li>命令格式：<code>docker search [OPTIONS] TERM</code> </li>\n<li>参数选项：<ul>\n<li><code>[OPTIONS] </code>：<ul>\n<li><strong>-s：</strong>列出收藏数不小于指定值的镜像</li>\n<li><strong>–no-trunc：</strong>显示完整的镜像信息</li>\n<li><strong>–automated：</strong>只列出automated build类型的镜像</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"拉取镜像\"><a href=\"#拉取镜像\" class=\"headerlink\" title=\"拉取镜像\"></a>拉取镜像</h4><ul>\n<li>命令格式：<code>docker pull [OPTIONS] NAME[:TAG|@DIGEST]</code> </li>\n<li>参数选项：<ul>\n<li><code>[OPTIONS] </code>：<ul>\n<li><strong>-a：</strong>拉取所有 tagged 镜像</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"删除镜像\"><a href=\"#删除镜像\" class=\"headerlink\" title=\"删除镜像\"></a>删除镜像</h4><ul>\n<li>命令格式：<code>docker rmi [OPTIONS] IMAGE [IMAGE...]</code> </li>\n<li>参数选项：<ul>\n<li><code>[OPTIONS] </code>：<ul>\n<li><strong>-f：</strong>强制删除</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>案例：<ul>\n<li><strong>docker rmi -f 镜像ID：</strong>删除单个</li>\n<li><strong>docker rmi -f 镜像1:TAG 镜像2:TAG：</strong>删除多个</li>\n<li><strong>docker rmi -f $(docker images -qa)：</strong>删除全部</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"容器生成新镜像\"><a href=\"#容器生成新镜像\" class=\"headerlink\" title=\"容器生成新镜像\"></a>容器生成新镜像</h4><ul>\n<li>命令格式：<code>docker commit [OPTIONS] CONTAINER [REPOSITORY[:TAG]]</code></li>\n<li>参数选项：<ul>\n<li><code>[OPTIONS] </code>：<ul>\n<li><strong>-a：</strong>提交的镜像作者</li>\n<li><strong>-m：</strong>提交时的说明文字</li>\n<li><strong>-p：</strong>在commit时，将容器暂停</li>\n<li><strong>-c：</strong>使用Dockerfile指令来创建镜像</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"DockerFile构建新镜像\"><a href=\"#DockerFile构建新镜像\" class=\"headerlink\" title=\"DockerFile构建新镜像\"></a>DockerFile构建新镜像</h4><ul>\n<li>命令格式：<code>docker build [OPTIONS] PATH | URL</code></li>\n<li>参数选项：<ul>\n<li><code>[OPTIONS] </code>：<ul>\n<li><strong>-f：</strong>指定Dockerfile文件路径</li>\n<li><strong>-t：</strong>设置镜像名字，镜像名[:TAG]</li>\n<li><strong>–build-arg&#x3D;[]：</strong>设置镜像创建时的变量</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"容器命令\"><a href=\"#容器命令\" class=\"headerlink\" title=\"容器命令\"></a>容器命令</h3><h4 id=\"新建并启动容器\"><a href=\"#新建并启动容器\" class=\"headerlink\" title=\"新建并启动容器\"></a>新建并启动容器</h4><ul>\n<li>命令格式：<code>docker run [OPTIONS] IMAGE [COMMAND] [ARG...]</code> </li>\n<li>参数选项：<ul>\n<li><code>[OPTIONS] </code>：<ul>\n<li><strong>-i：</strong>以交互模式运行容器，通常与 -t 同时使用</li>\n<li><strong>-t：</strong>为容器重新分配一个伪输入终端，通常与 -i 同时使用</li>\n<li><strong>-p：</strong>指定端口映射，格式为：主机端口:容器端口</li>\n<li><strong>-P：</strong>随机端口映射，容器内部端口随机映射到主机的高端口</li>\n<li><strong>-d：</strong>后台运行容器，并返回容器ID，也即启动守护式容器</li>\n<li><strong>-e：</strong>设置环境变量</li>\n<li><strong>-v：</strong>绑定数据卷，格式为：主机目录:容器目录</li>\n<li><strong>–privileged：</strong>授予权限</li>\n<li><strong>–volumes-from：</strong>绑定数据卷容器</li>\n<li><strong>–name&#x3D;”容器新名称”：</strong>为容器指定一个名称</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"列出容器\"><a href=\"#列出容器\" class=\"headerlink\" title=\"列出容器\"></a>列出容器</h4><ul>\n<li>命令格式：<code>docker ps [OPTIONS]</code> </li>\n<li>参数选项：<ul>\n<li><code>[OPTIONS] </code>：<ul>\n<li><strong>-a：</strong>显示所有的容器，包括未运行的</li>\n<li><strong>-l：</strong>显示最近创建的容器 </li>\n<li><strong>-n：</strong>列出最近创建的n个容器</li>\n<li><strong>-q：</strong>静默模式，只显示容器编号</li>\n<li><strong>–no-trunc：</strong>不截断输出</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"启动容器\"><a href=\"#启动容器\" class=\"headerlink\" title=\"启动容器\"></a>启动容器</h4><ul>\n<li>命令格式：<code>docker start [OPTIONS] CONTAINER [CONTAINER...]</code></li>\n</ul>\n<h4 id=\"重启容器\"><a href=\"#重启容器\" class=\"headerlink\" title=\"重启容器\"></a>重启容器</h4><ul>\n<li>命令格式：<code>docker restart [OPTIONS] CONTAINER [CONTAINER...]</code></li>\n</ul>\n<h4 id=\"停止容器\"><a href=\"#停止容器\" class=\"headerlink\" title=\"停止容器\"></a>停止容器</h4><ul>\n<li>命令格式：<code>docker stop [OPTIONS] CONTAINER [CONTAINER...]</code></li>\n</ul>\n<h4 id=\"强制停止容器\"><a href=\"#强制停止容器\" class=\"headerlink\" title=\"强制停止容器\"></a>强制停止容器</h4><ul>\n<li>命令格式：<code>docker kill [OPTIONS] CONTAINER [CONTAINER...]</code></li>\n</ul>\n<h4 id=\"删除容器\"><a href=\"#删除容器\" class=\"headerlink\" title=\"删除容器\"></a>删除容器</h4><ul>\n<li>命令格式：<code>docker rm [OPTIONS] CONTAINER [CONTAINER...]</code></li>\n<li>参数选项：<ul>\n<li><code>[OPTIONS] </code>：<ul>\n<li><strong>-f：</strong>通过SIGKILL信号强制删除一个运行中的容器</li>\n<li><strong>-l：</strong>移除容器间的网络连接，而非容器本身</li>\n<li><strong>-v：</strong>删除与容器关联的卷</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>案例：<ul>\n<li><strong>docker rm -f $(docker ps -qa)：</strong>删除全部</li>\n<li><strong>docker ps -qa | xargs docker rm：</strong>删除全部</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"进入容器\"><a href=\"#进入容器\" class=\"headerlink\" title=\"进入容器\"></a>进入容器</h4><ul>\n<li>命令格式：<code>docker attach [OPTIONS] CONTAINER</code>连接到正在运行中的容器</li>\n<li>命令格式：<code>docker exec [OPTIONS] CONTAINER COMMAND [ARG...]</code>在运行的容器中执行命令</li>\n<li>参数选项：<ul>\n<li><code>[OPTIONS] </code>：<ul>\n<li><strong>-i：</strong>即使没有附加也保持STDIN 打开</li>\n<li><strong>-t：</strong>分配一个伪终端</li>\n<li><strong>-d：</strong>分离模式: 在后台运行</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>案例：<ul>\n<li><strong>docker attach 容器ID：</strong>进入容器</li>\n<li><strong>docker exec -it 容器ID &#x2F;bin&#x2F;bash：</strong>进入容器</li>\n<li><strong>docker exec -it 容器ID ls：</strong>不进入容器，执行容器中命令</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"退出容器\"><a href=\"#退出容器\" class=\"headerlink\" title=\"退出容器\"></a>退出容器</h4><ul>\n<li>命令格式：<code>exit</code> 容器停止退出</li>\n<li>命令格式：<code>Ctrl + P + Q</code> 容器不停止退出</li>\n</ul>\n<h4 id=\"容器与主机之间的数据拷贝\"><a href=\"#容器与主机之间的数据拷贝\" class=\"headerlink\" title=\"容器与主机之间的数据拷贝\"></a>容器与主机之间的数据拷贝</h4><ul>\n<li>命令格式：<code>docker cp [OPTIONS] CONTAINER:SRC_PATH DEST_PATH</code>容器数据拷贝到主机</li>\n<li>命令格式：<code>docker cp [OPTIONS] SRC_PATH CONTAINER:DEST_PATH</code>主机数据拷贝到容器</li>\n</ul>\n<h4 id=\"查看容器日志\"><a href=\"#查看容器日志\" class=\"headerlink\" title=\"查看容器日志\"></a>查看容器日志</h4><ul>\n<li>命令格式：<code>docker logs [OPTIONS] CONTAINER</code></li>\n<li>参数选项：<ul>\n<li><code>[OPTIONS] </code>：<ul>\n<li><strong>-f：</strong>跟踪日志输出</li>\n<li><strong>-t：</strong>显示时间戳</li>\n<li><strong>–tail：</strong>仅列出最新N条容器日志</li>\n<li><strong>–since：</strong>显示某个开始时间的所有日志</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"查看容器中运行的进程\"><a href=\"#查看容器中运行的进程\" class=\"headerlink\" title=\"查看容器中运行的进程\"></a>查看容器中运行的进程</h4><ul>\n<li>命令格式：<code>docker top [OPTIONS] CONTAINER [ps OPTIONS]</code></li>\n</ul>\n<h4 id=\"查看容器内部细节\"><a href=\"#查看容器内部细节\" class=\"headerlink\" title=\"查看容器内部细节\"></a>查看容器内部细节</h4><ul>\n<li>命令格式：<code>docker inspect [OPTIONS] NAME|ID [NAME|ID...]</code></li>\n<li>参数选项：<ul>\n<li><code>[OPTIONS] </code>：<ul>\n<li><strong>-f：</strong>指定返回值的模板文件</li>\n<li><strong>-s：</strong>显示总的文件大小</li>\n<li><strong>–type：</strong>指定类型返回JSON</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Docker容器数据卷\"><a href=\"#Docker容器数据卷\" class=\"headerlink\" title=\"Docker容器数据卷\"></a>Docker容器数据卷</h2><h3 id=\"数据卷是什么\"><a href=\"#数据卷是什么\" class=\"headerlink\" title=\"数据卷是什么\"></a>数据卷是什么</h3><ul>\n<li>数据卷是一个可供一个或多个容器使用的特殊目录，它绕过 UFS，可以提供很多有用的特性：<ul>\n<li>数据卷 可以在容器之间共享和重用</li>\n<li>对 数据卷 的修改会立马生效</li>\n<li>对 数据卷 的更新，不会影响镜像</li>\n<li>数据卷 默认会一直存在，即使容器被删除</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"数据卷作用\"><a href=\"#数据卷作用\" class=\"headerlink\" title=\"数据卷作用\"></a>数据卷作用</h3><ul>\n<li>容器的持久化</li>\n<li>容器间继承 + 共享数据</li>\n</ul>\n<h3 id=\"数据卷（宿主机-容器）\"><a href=\"#数据卷（宿主机-容器）\" class=\"headerlink\" title=\"数据卷（宿主机&#x2F;容器）\"></a>数据卷（宿主机&#x2F;容器）</h3><h4 id=\"直接命令添加\"><a href=\"#直接命令添加\" class=\"headerlink\" title=\"直接命令添加\"></a>直接命令添加</h4><ul>\n<li><code>docker run -it -v /宿主机目录:/容器目录 镜像ID</code></li>\n</ul>\n<h4 id=\"DockerFile添加\"><a href=\"#DockerFile添加\" class=\"headerlink\" title=\"DockerFile添加\"></a>DockerFile添加</h4><ul>\n<li>编写DockerFile<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">FROM centos</span><br><span class=\"line\">VOLUME [<span class=\"string\">&quot;/dataVolumeContainer1&quot;</span>,<span class=\"string\">&quot;/dataVolumeContainer2&quot;</span>]</span><br><span class=\"line\">CMD /bin/bash</span><br></pre></td></tr></table></figure></li>\n<li>构建镜像<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker build -f /mydockerfile -t my/centos .</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"数据卷容器（容器-容器）\"><a href=\"#数据卷容器（容器-容器）\" class=\"headerlink\" title=\"数据卷容器（容器&#x2F;容器）\"></a>数据卷容器（容器&#x2F;容器）</h3><ul>\n<li><code>docker run -it --name 容器2 --volumes-from 容器1 镜像ID</code></li>\n</ul>\n<h2 id=\"Docker部署\"><a href=\"#Docker部署\" class=\"headerlink\" title=\"Docker部署\"></a>Docker部署</h2><h3 id=\"Mysql\"><a href=\"#Mysql\" class=\"headerlink\" title=\"Mysql\"></a>Mysql</h3><h4 id=\"单机版\"><a href=\"#单机版\" class=\"headerlink\" title=\"单机版\"></a>单机版</h4><ul>\n<li><strong>创建容器</strong><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker run -d -p 3306:3306 --privileged=<span class=\"literal\">true</span> \\</span><br><span class=\"line\">  -v /app/mysql/log:/var/log/mysql \\</span><br><span class=\"line\">  -v /app/mysql/data:/var/lib/mysql \\</span><br><span class=\"line\">  -v /app/mysql/conf/my.cnf:/etc/mysql/my.cnf \\</span><br><span class=\"line\">  -e MYSQL_ROOT_PASSWORD=123456 \\</span><br><span class=\"line\">  --name mysql \\</span><br><span class=\"line\">  mysql:8.0</span><br></pre></td></tr></table></figure></li>\n<li><strong>编辑容器 my.cnf 文件</strong><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[mysqld]</span><br><span class=\"line\">pid-file = /var/run/mysqld/mysqld.pid</span><br><span class=\"line\">socket = /var/run/mysqld/mysqld.sock</span><br><span class=\"line\">datadir\t= /var/lib/mysql</span><br><span class=\"line\">secure-file-priv = NULL</span><br><span class=\"line\">symbolic-links = 0</span><br><span class=\"line\"></span><br><span class=\"line\">default-time-zone = <span class=\"string\">&#x27;+08:00&#x27;</span></span><br><span class=\"line\">character-set-server = utf8mb4</span><br><span class=\"line\">collation-server = utf8mb4_general_ci</span><br><span class=\"line\"></span><br><span class=\"line\">[mysql]</span><br><span class=\"line\">default-character-set = utf8mb4</span><br><span class=\"line\"></span><br><span class=\"line\">[client]</span><br><span class=\"line\">default-character-set = utf8mb4</span><br></pre></td></tr></table></figure></li>\n<li><strong>开启远程连接</strong><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker <span class=\"built_in\">exec</span> -it mysql /bin/bash</span><br><span class=\"line\">mysql -uroot -p123456</span><br><span class=\"line\"></span><br><span class=\"line\">alter user <span class=\"string\">&#x27;root&#x27;</span>@<span class=\"string\">&#x27;%&#x27;</span> identified with mysql_native_password by <span class=\"string\">&#x27;123456&#x27;</span>;</span><br><span class=\"line\">grant all privileges on *.* to <span class=\"string\">&#x27;root&#x27;</span>@<span class=\"string\">&#x27;%&#x27;</span>;</span><br><span class=\"line\">flush privileges;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h4 id=\"主从复制\"><a href=\"#主从复制\" class=\"headerlink\" title=\"主从复制\"></a>主从复制</h4><ul>\n<li><strong>创建 Master 容器</strong><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker run -d -p 3307:3306 \\</span><br><span class=\"line\">  -v /app/mysql-master/log:/var/log/mysql \\</span><br><span class=\"line\">  -v /app/mysql-master/data:/var/lib/mysql \\</span><br><span class=\"line\">  -v /app/mysql-master/conf/my.cnf:/etc/mysql/my.cnf \\</span><br><span class=\"line\">  -e MYSQL_ROOT_PASSWORD=123456 \\</span><br><span class=\"line\">  --name mysql-master \\</span><br><span class=\"line\">  mysql:8.0</span><br></pre></td></tr></table></figure></li>\n<li><strong>编辑 Master 容器 my.cnf 文件</strong><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[mysqld]</span><br><span class=\"line\"><span class=\"comment\">## 设置server_id，同一局域网中需要唯一</span></span><br><span class=\"line\">server_id=101 </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## 指定不需要同步的数据库名称</span></span><br><span class=\"line\">binlog-ignore-db=mysql  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## 开启二进制日志功能</span></span><br><span class=\"line\">log-bin=mall-mysql-bin  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## 设置二进制日志使用内存大小（事务）</span></span><br><span class=\"line\">binlog_cache_size=1M  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## 设置使用的二进制日志格式（mixed,statement,row）</span></span><br><span class=\"line\">binlog_format=mixed  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## 二进制日志过期清理时间。默认值为0，表示不自动清理。</span></span><br><span class=\"line\">expire_logs_days=7  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## 跳过主从复制中遇到的所有错误或指定类型的错误，避免slave端复制中断。</span></span><br><span class=\"line\"><span class=\"comment\">## 如：1062错误是指一些主键重复，1032错误是因为主从数据库数据不一致</span></span><br><span class=\"line\">slave_skip_errors=1062</span><br></pre></td></tr></table></figure></li>\n<li><strong>创建数据同步用户</strong><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 重启进入 Master </span></span><br><span class=\"line\">docker restart mysql-master</span><br><span class=\"line\">docker <span class=\"built_in\">exec</span> -it mysql-master /bin/bash</span><br><span class=\"line\">mysql -uroot -p123456</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 创建数据同步用户</span></span><br><span class=\"line\">create user <span class=\"string\">&#x27;slave&#x27;</span>@<span class=\"string\">&#x27;%&#x27;</span> identified by <span class=\"string\">&#x27;123456&#x27;</span>;</span><br><span class=\"line\">grant REPLICATION SLAVE,REPLICATION CLIENT on *.* to <span class=\"string\">&#x27;slave&#x27;</span>@<span class=\"string\">&#x27;%&#x27;</span>;</span><br><span class=\"line\">flush privileges;</span><br><span class=\"line\">alter user <span class=\"string\">&#x27;slave&#x27;</span>@<span class=\"string\">&#x27;%&#x27;</span> identified with mysql_native_password by <span class=\"string\">&#x27;123456&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看主从同步状态 </span></span><br><span class=\"line\">show master status;</span><br></pre></td></tr></table></figure></li>\n<li><strong>创建 Slave 容器</strong><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker run -d -p 3308:3306 \\</span><br><span class=\"line\">  -v /app/mysql-slave/log:/var/log/mysql \\</span><br><span class=\"line\">  -v /app/mysql-slave/data:/var/lib/mysql \\</span><br><span class=\"line\">  -v /app/mysql-slave/conf/my.cnf:/etc/mysql/my.cnf \\</span><br><span class=\"line\">  -e MYSQL_ROOT_PASSWORD=123456 \\</span><br><span class=\"line\">  --name mysql-slave \\</span><br><span class=\"line\">  mysql:8.0</span><br></pre></td></tr></table></figure></li>\n<li><strong>编辑 Slave 容器 my.cnf 文件</strong><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[mysqld]</span><br><span class=\"line\"><span class=\"comment\">## 设置server_id，同一局域网中需要唯一</span></span><br><span class=\"line\">server_id=102</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## 指定不需要同步的数据库名称</span></span><br><span class=\"line\">binlog-ignore-db=mysql  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## 开启二进制日志功能，以备Slave作为其它数据库实例的Master时使用</span></span><br><span class=\"line\">log-bin=mall-mysql-slave1-bin  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## 设置二进制日志使用内存大小（事务）</span></span><br><span class=\"line\">binlog_cache_size=1M  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## 设置使用的二进制日志格式（mixed,statement,row）</span></span><br><span class=\"line\">binlog_format=mixed  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## 二进制日志过期清理时间。默认值为0，表示不自动清理。</span></span><br><span class=\"line\">expire_logs_days=7  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## 跳过主从复制中遇到的所有错误或指定类型的错误，避免slave端复制中断。</span></span><br><span class=\"line\"><span class=\"comment\">## 如：1062错误是指一些主键重复，1032错误是因为主从数据库数据不一致</span></span><br><span class=\"line\">slave_skip_errors=1062  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## relay_log配置中继日志</span></span><br><span class=\"line\">relay_log=mall-mysql-relay-bin  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## log_slave_updates表示slave将复制事件写进自己的二进制日志</span></span><br><span class=\"line\">log_slave_updates=1  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## slave设置为只读（具有super权限的用户除外）</span></span><br><span class=\"line\">read_only=1</span><br></pre></td></tr></table></figure></li>\n<li><strong>配置主从复制</strong><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 重启进入 Slave </span></span><br><span class=\"line\">docker restart mysql-slave</span><br><span class=\"line\">docker <span class=\"built_in\">exec</span> -it mysql-slave /bin/bash</span><br><span class=\"line\">mysql -uroot -p123456</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 配置主从复制 (Master库 show master status查看)</span></span><br><span class=\"line\"><span class=\"comment\"># master_log_file：指定从数据库要复制数据的日志文件，File参数</span></span><br><span class=\"line\"><span class=\"comment\"># master_log_pos：指定从数据库从哪个位置开始复制数据，Position参数</span></span><br><span class=\"line\"><span class=\"comment\"># master_connect_retry：连接失败重试的时间间隔，单位为秒</span></span><br><span class=\"line\">change master to master_host=<span class=\"string\">&#x27;&lt;Master IP&gt;&#x27;</span>, master_port=3307, master_user=<span class=\"string\">&#x27;slave&#x27;</span>, master_password=<span class=\"string\">&#x27;123456&#x27;</span>, master_log_file=<span class=\"string\">&#x27;&lt;File参数&gt;&#x27;</span>, master_log_pos=&lt;Position参数&gt;, master_connect_retry=30;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看主从同步状态</span></span><br><span class=\"line\"><span class=\"comment\"># Slave_IO_Running: No</span></span><br><span class=\"line\"><span class=\"comment\"># Slave_SQL_Running: No</span></span><br><span class=\"line\">show slave status \\G</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 开启主从同步</span></span><br><span class=\"line\"><span class=\"comment\"># Slave_IO_Running: Yes</span></span><br><span class=\"line\"><span class=\"comment\"># Slave_SQL_Running: Yes</span></span><br><span class=\"line\">start slave;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"Redis\"><a href=\"#Redis\" class=\"headerlink\" title=\"Redis\"></a>Redis</h3><h4 id=\"单机版-1\"><a href=\"#单机版-1\" class=\"headerlink\" title=\"单机版\"></a>单机版</h4><ul>\n<li><strong>创建容器</strong><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker run -d -p 6379:6379 --privileged=<span class=\"literal\">true</span> \\</span><br><span class=\"line\">  -v /app/redis/redis.conf:/etc/redis/redis.conf \\</span><br><span class=\"line\">  -v /app/redis/data:/data \\</span><br><span class=\"line\">  --name redis \\</span><br><span class=\"line\">  --restart=unless-stopped \\</span><br><span class=\"line\">  redis:7.0 \\</span><br><span class=\"line\">  redis-server /etc/redis/redis.conf</span><br></pre></td></tr></table></figure></li>\n<li><strong>编辑 redis.conf 文件</strong><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 允许远程连接</span></span><br><span class=\"line\"><span class=\"comment\">#bind 127.0.0.1 </span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#关闭 Redis 的保护模式</span></span><br><span class=\"line\">protected-mode no</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 持久化</span></span><br><span class=\"line\">appendonly <span class=\"built_in\">yes</span> </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 登录密码</span></span><br><span class=\"line\"><span class=\"comment\">#requirepass 123456</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<h4 id=\"集群版\"><a href=\"#集群版\" class=\"headerlink\" title=\"集群版\"></a>集群版</h4><ul>\n<li><strong>创建集群</strong><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 创建容器</span></span><br><span class=\"line\">docker run -d --privileged=<span class=\"literal\">true</span> -v /app/redis-cluster/redis-node1:/data --net host --name redis-node1 redis:7.0 --cluster-enabled <span class=\"built_in\">yes</span> -- appendonly <span class=\"built_in\">yes</span> --port 6381</span><br><span class=\"line\">docker run -d --privileged=<span class=\"literal\">true</span> -v /app/redis-cluster/redis-node2:/data --net host --name redis-node2 redis:7.0 --cluster-enabled <span class=\"built_in\">yes</span> -- appendonly <span class=\"built_in\">yes</span> --port 6382</span><br><span class=\"line\">docker run -d --privileged=<span class=\"literal\">true</span> -v /app/redis-cluster/redis-node3:/data --net host --name redis-node3 redis:7.0 --cluster-enabled <span class=\"built_in\">yes</span> -- appendonly <span class=\"built_in\">yes</span> --port 6383</span><br><span class=\"line\">docker run -d --privileged=<span class=\"literal\">true</span> -v /app/redis-cluster/redis-node4:/data --net host --name redis-node4 redis:7.0 --cluster-enabled <span class=\"built_in\">yes</span> -- appendonly <span class=\"built_in\">yes</span> --port 6384</span><br><span class=\"line\">docker run -d --privileged=<span class=\"literal\">true</span> -v /app/redis-cluster/redis-node5:/data --net host --name redis-node5 redis:7.0 --cluster-enabled <span class=\"built_in\">yes</span> -- appendonly <span class=\"built_in\">yes</span> --port 6385</span><br><span class=\"line\">docker run -d --privileged=<span class=\"literal\">true</span> -v /app/redis-cluster/redis-node6:/data --net host --name redis-node6 redis:7.0 --cluster-enabled <span class=\"built_in\">yes</span> -- appendonly <span class=\"built_in\">yes</span> --port 6386</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 创建集群</span></span><br><span class=\"line\">docker <span class=\"built_in\">exec</span> -it redis-node1 /bin/bash</span><br><span class=\"line\">redis-cli --cluster create &lt;宿主机IP&gt;:6381 &lt;宿主机IP&gt;:6382 &lt;宿主机IP&gt;:6383 &lt;宿主机IP&gt;:6384 &lt;宿主机IP&gt;:6385 &lt;宿主机IP&gt;:6386 --cluster-replicas 1</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看集群</span></span><br><span class=\"line\">redis-cli -p 6381 -c</span><br><span class=\"line\">cluster info</span><br><span class=\"line\">cluster nodes</span><br><span class=\"line\">redis-cli --cluster check &lt;宿主机IP&gt;:6381</span><br></pre></td></tr></table></figure></li>\n<li><strong>集群扩容</strong><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 创建容器</span></span><br><span class=\"line\">docker run -d --privileged=<span class=\"literal\">true</span> -v /app/redis-cluster/redis-node7:/data --net host --name redis-node7 redis:7.0 --cluster-enabled <span class=\"built_in\">yes</span> -- appendonly <span class=\"built_in\">yes</span> --port 6387</span><br><span class=\"line\">docker run -d --privileged=<span class=\"literal\">true</span> -v /app/redis-cluster/redis-node8:/data --net host --name redis-node8 redis:7.0 --cluster-enabled <span class=\"built_in\">yes</span> -- appendonly <span class=\"built_in\">yes</span> --port 6388</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 添加主节点</span></span><br><span class=\"line\">docker <span class=\"built_in\">exec</span> -it redis-node7 /bin/bash</span><br><span class=\"line\">redis-cli --cluster add-node &lt;宿主机IP&gt;:6387 &lt;宿主机IP&gt;:6381</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看集群 (后续需要新Master的ID编号)</span></span><br><span class=\"line\">redis-cli --cluster check &lt;宿主机IP&gt;:6381</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 重新分配槽位 （槽位数=16384/Master节点数；新Master的ID编号；all；yes）</span></span><br><span class=\"line\">redis-cli --cluster reshard &lt;宿主机IP&gt;:6381</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 添加从节点</span></span><br><span class=\"line\">redis-cli --cluster add-node &lt;宿主机IP&gt;:6388 &lt;宿主机IP&gt;:6387 --cluster-slave --cluster-master-id  &lt;新Master的ID编号&gt;</span><br></pre></td></tr></table></figure></li>\n<li><strong>集群缩容</strong><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 查看集群 (后续需要下线的主、从的ID编号)</span></span><br><span class=\"line\">redis-cli --cluster check &lt;宿主机IP&gt;:6381</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 移除从节点</span></span><br><span class=\"line\">redis-cli --cluster del-node &lt;宿主机IP&gt;:6388 &lt;需下线的Slave的ID编号&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 重新分配槽位，直接一次分配给第一个节点 （可分配的槽位数；接收槽位的节点的ID编号（6381的Master节点）；发送槽位的节点的ID编号（6387的Master节点）；done）</span></span><br><span class=\"line\">redis-cli --cluster reshard &lt;宿主机IP&gt;:6381</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 移除主节点</span></span><br><span class=\"line\">redis-cli --cluster del-node &lt;宿主机IP&gt;:6387 &lt;需下线的Master的ID编号&gt;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"DockerFile解析\"><a href=\"#DockerFile解析\" class=\"headerlink\" title=\"DockerFile解析\"></a>DockerFile解析</h2><h3 id=\"DockerFile是什么\"><a href=\"#DockerFile是什么\" class=\"headerlink\" title=\"DockerFile是什么\"></a>DockerFile是什么</h3><ul>\n<li>DockerFile是用来构建Docker镜像的构建文件，是由一系列命令和参数构成的脚本</li>\n</ul>\n<h3 id=\"DockerFile大致执行流程\"><a href=\"#DockerFile大致执行流程\" class=\"headerlink\" title=\"DockerFile大致执行流程\"></a>DockerFile大致执行流程</h3><ul>\n<li>1）Docker从基础镜像运行一个容器</li>\n<li>2）执行一条指令并对容器做出修改</li>\n<li>3）执行类似docker commit的操作提交一个新的镜像层</li>\n<li>4）Docker再基于刚提交的镜像运行一个新容器</li>\n<li>5）执行DockerFile中的下一条指令直到所有指令都执行完成</li>\n</ul>\n<h3 id=\"DockerFile体系结构（保留字指令）\"><a href=\"#DockerFile体系结构（保留字指令）\" class=\"headerlink\" title=\"DockerFile体系结构（保留字指令）\"></a>DockerFile体系结构（保留字指令）</h3><ul>\n<li><code>FROM</code> 基础镜像，当前新镜像是基于哪个镜像，scratch是源镜像</li>\n<li><code>MAINTAINER</code> 镜像维护者的姓名和邮箱地址</li>\n<li><code>RUN</code> 容器构建时需要运行的命令</li>\n<li><code>EXPOSE</code> 当前容器对外暴露的端口</li>\n<li><code>WORKDIR</code> 指容器启动后默认进来的目录</li>\n<li><code>USER</code> 指定该镜像以什么用户去执行，不指定默认为root</li>\n<li><code>ENV</code> 构建镜像过程中设置的环境变量</li>\n<li><code>ADD</code> 将宿主机目录下的文件拷贝进镜像且自动处理URL和解压缩（拷贝 + 解压缩）</li>\n<li><code>CORY</code> 将宿主机目录下的文件拷贝进镜像（拷贝）</li>\n<li><code>VOLUME</code> 绑定数据卷</li>\n<li><code>CMD</code> 指定一个容器启动时要运行的命令，如有多个CMD只有最后一个生效（替换方式）</li>\n<li><code>ENTRYPOINT</code> 指定一个容器启动时要运行的命令（追加方式）</li>\n<li><code>ONBUILD</code> 当构建一个被继承的DockerFile时运行命令，父镜像在被子继承后父镜像的onbuild被触发</li>\n</ul>\n<h3 id=\"DockerFile使用\"><a href=\"#DockerFile使用\" class=\"headerlink\" title=\"DockerFile使用\"></a>DockerFile使用</h3><ul>\n<li><strong>编写DockerFile文件</strong><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 指定基础镜像为 CentOS 7</span></span><br><span class=\"line\">FROM centos:7</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 设置维护者信息</span></span><br><span class=\"line\">MAINTAINER Your Name &lt;your.email@example.com&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 将 Java 8 安装包复制到容器中并自动解压</span></span><br><span class=\"line\">ADD jdk-8uXXX-linux-x64.tar.gz /opt/</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 设置 JAVA_HOME 环境变量</span></span><br><span class=\"line\">ENV JAVA_HOME /opt/jdk1.8.0_XXX</span><br><span class=\"line\">ENV PATH <span class=\"variable\">$JAVA_HOME</span>/bin:<span class=\"variable\">$PATH</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 设置工作目录 </span></span><br><span class=\"line\">WORKDIR /app</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 复制你的应用程序 JAR 文件 </span></span><br><span class=\"line\">COPY your-app.jar /app/your-app.jar</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 暴露应用程序监听的端口</span></span><br><span class=\"line\">EXPOSE 8080</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 定义容器启动时执行的命令，运行 Java 应用程序 </span></span><br><span class=\"line\">CMD [<span class=\"string\">&quot;java&quot;</span>, <span class=\"string\">&quot;-jar&quot;</span>, <span class=\"string\">&quot;/app/your-app.jar&quot;</span>]</span><br></pre></td></tr></table></figure></li>\n<li><strong>构建镜像</strong><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker build -t &lt;新镜像名称&gt;:TAG</span><br></pre></td></tr></table></figure></li>\n<li><strong>运行镜像</strong><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker run -it &lt;新镜像名称&gt;:TAG</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"Network网络\"><a href=\"#Network网络\" class=\"headerlink\" title=\"Network网络\"></a>Network网络</h2><h3 id=\"网络模式\"><a href=\"#网络模式\" class=\"headerlink\" title=\"网络模式\"></a>网络模式</h3><table>\n<thead>\n<tr>\n<th>网络模式</th>\n<th>隔离性</th>\n<th>IP分配</th>\n<th>通信方式</th>\n<th>适用场景</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Bridge</td>\n<td>高</td>\n<td>独立 IP</td>\n<td>端口映射或内网 IP</td>\n<td>通用场景，独立服务</td>\n</tr>\n<tr>\n<td>Host</td>\n<td>无</td>\n<td>宿主机 IP</td>\n<td>直接使用宿主机端口</td>\n<td>高性能网络需求</td>\n</tr>\n<tr>\n<td>None</td>\n<td>最高</td>\n<td>无 IP</td>\n<td>无网络通信</td>\n<td>无网络需求的隔离任务</td>\n</tr>\n<tr>\n<td>Container</td>\n<td>与目标容器共享</td>\n<td>共享目标容器 IP</td>\n<td>localhost 通信</td>\n<td>紧密协作的容器</td>\n</tr>\n<tr>\n<td>自定义网络</td>\n<td>可配置</td>\n<td>独立 IP</td>\n<td>容器名称通信，自动 DNS 解析</td>\n<td>多容器应用，微服务架构</td>\n</tr>\n</tbody></table>\n<h3 id=\"Bridge-网络（桥接网络）\"><a href=\"#Bridge-网络（桥接网络）\" class=\"headerlink\" title=\"Bridge 网络（桥接网络）\"></a>Bridge 网络（桥接网络）</h3><ul>\n<li><strong>特点：</strong> 默认网络模式。每个容器通过虚拟网桥（docker0）连接到宿主机的网络，容器拥有独立的网络命名空间。</li>\n<li><strong>IP 分配：</strong> 容器被分配一个独立的内网 IP 地址（通常是 172.17.x.x 范围）。</li>\n<li><strong>通信：</strong><ul>\n<li>容器之间通过内网 IP 通信。</li>\n<li>容器与外部通信需通过端口映射（-p）将容器端口映射到宿主机端口。</li>\n</ul>\n</li>\n<li><strong>适用场景：</strong> 适合需要隔离网络的独立容器运行场景，如运行多个独立服务。</li>\n<li><strong>示例：</strong><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker run -d --network bridge nginx</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"Host-网络（主机网络）\"><a href=\"#Host-网络（主机网络）\" class=\"headerlink\" title=\"Host 网络（主机网络）\"></a>Host 网络（主机网络）</h3><ul>\n<li><strong>特点：</strong> 容器直接使用宿主机的网络栈，没有独立的网络命名空间。</li>\n<li>**IP ** 分配：容器与宿主机共享 IP 和端口，直接使用宿主机的网络接口。</li>\n<li><strong>通信：</strong> 容器端口无需映射，性能较高，但端口可能冲突。</li>\n<li><strong>适用场景：</strong> 需要高网络性能或容器需直接使用宿主机网络的场景，如监控工具。</li>\n<li><strong>示例：</strong><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker run -d --network host nginx</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"None-网络（无网络）\"><a href=\"#None-网络（无网络）\" class=\"headerlink\" title=\"None 网络（无网络）\"></a>None 网络（无网络）</h3><ul>\n<li><strong>特点：</strong> 容器完全禁用网络功能，没有网络接口和 IP 地址。</li>\n<li><strong>通信：</strong> 无法与外部或其它容器通信，仅有本地回环接口（lo）。</li>\n<li><strong>适用场景：</strong> 运行不需要网络的隔离任务，如安全敏感的计算任务。</li>\n<li><strong>示例：</strong><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker run -d --network none busybox</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"Container-网络（共享容器网络）\"><a href=\"#Container-网络（共享容器网络）\" class=\"headerlink\" title=\"Container 网络（共享容器网络）\"></a>Container 网络（共享容器网络）</h3><ul>\n<li><strong>特点：</strong> 容器复用另一个运行中容器的网络命名空间，共享其 IP 和端口。</li>\n<li><strong>通信：</strong> 两个容器共享相同的网络配置，通信通过 localhost。</li>\n<li><strong>适用场景：</strong> 适合需要紧密协作的容器，如调试或日志收集容器。</li>\n<li><strong>示例：</strong><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker run -d --name container1 nginx</span><br><span class=\"line\">docker run -d --network container:container1 busybox</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"自定义网络（用户定义网络）\"><a href=\"#自定义网络（用户定义网络）\" class=\"headerlink\" title=\"自定义网络（用户定义网络）\"></a>自定义网络（用户定义网络）</h3><ul>\n<li><strong>特点：</strong> 用户通过 docker network create 创建的网络，支持 bridge、overlay 等类型。</li>\n<li><strong>IP 分配：</strong> 容器分配独立的 IP，支持自动 DNS 解析（容器可通过名称通信）。</li>\n<li><strong>通信：</strong><ul>\n<li>容器在同一自定义网络内可通过容器名称直接通信，无需端口映射。</li>\n<li>跨主机通信可使用 overlay 网络（需 Docker Swarm 或其他集群管理工具）。</li>\n</ul>\n</li>\n<li><strong>适用场景：</strong> 多容器应用（如微服务架构）需要简化通信和隔离。</li>\n<li><strong>示例：</strong><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker network create my_network</span><br><span class=\"line\">docker run -d --network my_network --name web nginx</span><br><span class=\"line\">docker run -d --network my_network --name db mysql</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"Compose编排\"><a href=\"#Compose编排\" class=\"headerlink\" title=\"Compose编排\"></a>Compose编排</h2><h3 id=\"Compose核心概念\"><a href=\"#Compose核心概念\" class=\"headerlink\" title=\"Compose核心概念\"></a>Compose核心概念</h3><ul>\n<li><strong>一文件：</strong> <code>docker-compose.yml</code></li>\n<li><strong>两要素：</strong><ul>\n<li><strong>服务（service）：</strong> 一个个应用容器实例，比如订单微服务、库存微服务、mysql容器、nginx容器或者redis容器等。</li>\n<li><strong>工程（project）：</strong> 由一组关联的应用容器组成的一个完整业务单元，在docker-compose.yml文件中定义</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"Compose常用命令\"><a href=\"#Compose常用命令\" class=\"headerlink\" title=\"Compose常用命令\"></a>Compose常用命令</h3><ul>\n<li><strong>基本命令</strong><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 启动 Compose 文件中定义的所有服务，构建镜像（如果需要），创建并启动容器，加 -d 参数可在后台运行。</span></span><br><span class=\"line\">docker-compose up</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 停止并删除 Compose 文件中定义的容器、网络、卷（默认不删除镜像）。加 --volumes 删除卷，--rmi all 删除镜像。</span></span><br><span class=\"line\">docker-compose down</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 启动已创建但停止的容器。</span></span><br><span class=\"line\">docker-compose start</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 停止运行中的容器，但不删除。</span></span><br><span class=\"line\">docker-compose stop</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 重启服务中的容器。</span></span><br><span class=\"line\">docker-compose restart</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 暂停或恢复服务中的容器。</span></span><br><span class=\"line\">docker-compose pause / docker-compose unpause</span><br></pre></td></tr></table></figure></li>\n<li><strong>构建与镜像管理</strong><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 构建或重新构建 Compose 文件中定义的服务镜像。加 --no-cache 忽略缓存。</span></span><br><span class=\"line\">docker-compose build</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 拉取 Compose 文件中定义的镜像（不启动容器）。</span></span><br><span class=\"line\">docker-compose pull</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 列出 Compose 项目中使用的镜像。</span></span><br><span class=\"line\">docker-compose images</span><br></pre></td></tr></table></figure></li>\n<li><strong>容器管理</strong><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 列出当前 Compose 项目中容器的状态。加 -a 显示所有容器（包括停止的）。</span></span><br><span class=\"line\">docker-compose ps</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看服务容器的日志输出。加 -f 实时跟踪日志，--tail=N 查看最后 N 行。</span></span><br><span class=\"line\">docker-compose logs</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 在运行中的服务容器中执行命令（如 docker-compose exec web bash）。</span></span><br><span class=\"line\">docker-compose <span class=\"built_in\">exec</span> &lt;service&gt; &lt;<span class=\"built_in\">command</span>&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 运行一次性命令，启动新容器（如 docker-compose run web python manage.py migrate）。</span></span><br><span class=\"line\">docker-compose run &lt;service&gt; &lt;<span class=\"built_in\">command</span>&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 删除停止的容器。加 -f 强制删除，--volumes 删除卷。</span></span><br><span class=\"line\">docker-compose <span class=\"built_in\">rm</span></span><br></pre></td></tr></table></figure></li>\n<li><strong>配置与信息</strong><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 验证并显示 Compose 文件的配置。加 --services 列出服务名，--volumes 列出卷。</span></span><br><span class=\"line\">docker-compose config</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 实时显示 Compose 项目的容器事件。</span></span><br><span class=\"line\">docker-compose events</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 显示 Docker Compose 的版本信息。</span></span><br><span class=\"line\">docker-compose version</span><br></pre></td></tr></table></figure></li>\n<li><strong>高级选项</strong><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 设置指定服务的容器实例数（如 docker-compose scale web=3）。注意：已逐渐被 replicas 配置取代。</span></span><br><span class=\"line\">docker-compose scale &lt;service&gt;=&lt;num&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 显示运行中容器的进程信息。</span></span><br><span class=\"line\">docker-compose top</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 显示服务容器某个私有端口映射的公共端口。</span></span><br><span class=\"line\">docker-compose port &lt;service&gt; &lt;private_port&gt;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"Compose使用\"><a href=\"#Compose使用\" class=\"headerlink\" title=\"Compose使用\"></a>Compose使用</h3><ul>\n<li>docker-compose.yml<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 版本 docker-compose --version</span></span><br><span class=\"line\"><span class=\"attr\">version:</span> <span class=\"string\">&#x27;3.8&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">services:</span></span><br><span class=\"line\">  <span class=\"comment\"># Nginx</span></span><br><span class=\"line\">  <span class=\"attr\">web:</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">nginx:latest</span></span><br><span class=\"line\">    <span class=\"attr\">ports:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">&quot;8080:80&quot;</span> </span><br><span class=\"line\">    <span class=\"attr\">volumes:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">./html:/usr/share/nginx/html</span> </span><br><span class=\"line\">    <span class=\"attr\">depends_on:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">db</span></span><br><span class=\"line\">    <span class=\"attr\">networks:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">app-network</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"># MySQL</span></span><br><span class=\"line\">  <span class=\"attr\">db:</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">mysql:8.0</span></span><br><span class=\"line\">    <span class=\"attr\">environment:</span>  </span><br><span class=\"line\">      <span class=\"attr\">MYSQL_ROOT_PASSWORD:</span> <span class=\"number\">123456</span></span><br><span class=\"line\">      <span class=\"attr\">MYSQL_DATABASE:</span> <span class=\"string\">myapp</span></span><br><span class=\"line\">      <span class=\"attr\">MYSQL_USER:</span> <span class=\"string\">user</span></span><br><span class=\"line\">      <span class=\"attr\">MYSQL_PASSWORD:</span> <span class=\"string\">password</span></span><br><span class=\"line\">    <span class=\"attr\">volumes:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">/app/mysql/log:/var/log/mysql</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">/app/mysql/data:/var/lib/mysql</span> </span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">/app/mysql/conf/my.cnf:/etc/mysql/my.cnf</span></span><br><span class=\"line\">    <span class=\"attr\">networks:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">app-network</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 自定义网络</span></span><br><span class=\"line\"><span class=\"attr\">networks:</span></span><br><span class=\"line\">  <span class=\"attr\">app-network:</span></span><br><span class=\"line\">    <span class=\"attr\">driver:</span> <span class=\"string\">bridge</span> </span><br></pre></td></tr></table></figure></li>\n<li>启动服务<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 验证docker-compose.yml</span></span><br><span class=\"line\">docker-compose config -q</span><br><span class=\"line\"><span class=\"comment\"># 启动服务</span></span><br><span class=\"line\">docker-compose up -d</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><ul>\n<li><a href=\"https://www.docker.com/\">Docker 官网</a></li>\n<li><a href=\"https://hub.docker.com/\">Docker Hub 仓库</a></li>\n<li><a href=\"http://www.docker.org.cn/index.html\">Docker 中文社区</a></li>\n<li><a href=\"https://yeasy.gitbooks.io/docker_practice/introduction/what.html\">Docker 从入门到实践</a></li>\n<li><a href=\"https://jiajially.gitbooks.io/dockerguide/content/index.html\">Docker 简明教程</a></li>\n</ul>\n","categories":["Docker"],"tags":["后端","Docker"]},{"title":"Git：配置多个SSH-Key","url":"/Git/Git%EF%BC%9A%E9%85%8D%E7%BD%AE%E5%A4%9A%E4%B8%AASSH-Key/","content":"<h2 id=\"生成多个网站使用的SSH-Key\"><a href=\"#生成多个网站使用的SSH-Key\" class=\"headerlink\" title=\"生成多个网站使用的SSH-Key\"></a>生成多个网站使用的SSH-Key</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">ssh-keygen -t rsa -C <span class=\"string\">&quot;github&quot;</span> -f ~/.ssh/id_rsa_github</span><br><span class=\"line\">ssh-keygen -t rsa -C <span class=\"string\">&quot;gitee&quot;</span> -f ~/.ssh/id_rsa_gitee</span><br><span class=\"line\">ssh-keygen -t rsa -C <span class=\"string\">&quot;gitlab&quot;</span> -f ~/.ssh/id_rsa_gitlab</span><br></pre></td></tr></table></figure>\n\n<span id=\"more\"></span>\n\n<h2 id=\"添加私钥\"><a href=\"#添加私钥\" class=\"headerlink\" title=\"添加私钥\"></a>添加私钥</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">ssh-add ~/.ssh/id_rsa_github</span><br><span class=\"line\">ssh-add ~/.ssh/id_rsa_gitee</span><br><span class=\"line\">ssh-add ~/.ssh/id_rsa_gitlab</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#注：</span></span><br><span class=\"line\"><span class=\"comment\">#执行ssh-add时提示”Could not open a connection to your authentication agent”，先执行ssh-agent bash</span></span><br><span class=\"line\"><span class=\"comment\">#ssh-add -l 查询私钥列表</span></span><br><span class=\"line\"><span class=\"comment\">#ssh-add -D 清空私钥列表</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"添加配置文件\"><a href=\"#添加配置文件\" class=\"headerlink\" title=\"添加配置文件\"></a>添加配置文件</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># .ssh目录下创建config文件，添加以下内容(Host、HostName 填写git服务器的域名,  IdentityFile指定私钥的路径)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># github</span></span><br><span class=\"line\">Host github.com</span><br><span class=\"line\">HostName ssh.github.com</span><br><span class=\"line\">PreferredAuthentications publickey</span><br><span class=\"line\">IdentityFile ~/.ssh/id_rsa_github</span><br><span class=\"line\">Port 443</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># gitee </span></span><br><span class=\"line\">Host gitee.com</span><br><span class=\"line\">HostName gitee.com </span><br><span class=\"line\">PreferredAuthentications publickey </span><br><span class=\"line\">IdentityFile ~/.ssh/id_rsa_gitee</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># gitlab</span></span><br><span class=\"line\">Host gitlab.com</span><br><span class=\"line\">HostName gitlab.com  </span><br><span class=\"line\">PreferredAuthentications publickey</span><br><span class=\"line\">IdentityFile ~/.ssh/id_rsa_gitlab</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">ssh -T git@github.com</span><br><span class=\"line\">ssh -T git@gitee.com</span><br><span class=\"line\">ssh -T git@gitlab.com</span><br></pre></td></tr></table></figure>\n\n\n","categories":["Git"],"tags":["后端","版本控制","Git"]},{"title":"Gradle","url":"/Gradle/Gradle/","content":"<h2 id=\"Gradle-配置环境\"><a href=\"#Gradle-配置环境\" class=\"headerlink\" title=\"Gradle 配置环境\"></a>Gradle 配置环境</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">GRADLE_HOME=D:\\app\\gradle</span><br><span class=\"line\">GRADLE_USER_HOME=D:\\app\\gradle\\repository</span><br><span class=\"line\">Path=%GRADLE_HOME%\\bin;....</span><br></pre></td></tr></table></figure>\n\n<span id=\"more\"></span>\n\n<h2 id=\"Gradle-镜像源\"><a href=\"#Gradle-镜像源\" class=\"headerlink\" title=\"Gradle 镜像源\"></a>Gradle 镜像源</h2><ul>\n<li><p><strong>镜像源</strong></p>\n<ul>\n<li><strong>阿里云：</strong> <a href=\"https://maven.aliyun.com/repository/public\">https://maven.aliyun.com/repository/public</a></li>\n<li><strong>中央仓库：</strong> <a href=\"https://repo1.maven.org/maven2\">https://repo1.maven.org/maven2</a></li>\n<li><strong>Apache：</strong> <a href=\"https://repo.maven.apache.org/maven2\">https://repo.maven.apache.org/maven2</a></li>\n</ul>\n</li>\n<li><p><code>gradle\\init.d</code> 目录下新增 <code>.gradle</code> 结尾的配置文件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">allprojects &#123;</span><br><span class=\"line\">    // 项目代码依赖</span><br><span class=\"line\">    repositories &#123;</span><br><span class=\"line\">        // Maven 本地仓库，需系统环境变量已配置Maven</span><br><span class=\"line\">        mavenLocal()  </span><br><span class=\"line\">        maven &#123; url <span class=\"string\">&#x27;https://maven.aliyun.com/repository/public&#x27;</span> &#125;</span><br><span class=\"line\">        maven &#123; url <span class=\"string\">&#x27;https://repo1.maven.org/maven2&#x27;</span> &#125;</span><br><span class=\"line\">        // Maven 中央仓库（可选，作为备用）</span><br><span class=\"line\">        mavenCentral()  </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    // 构建脚本（如插件）依赖</span><br><span class=\"line\">    buildscript &#123;</span><br><span class=\"line\">        repositories &#123;</span><br><span class=\"line\">            maven &#123; url <span class=\"string\">&#x27;https://maven.aliyun.com/repository/public&#x27;</span> &#125;</span><br><span class=\"line\">            maven &#123; url <span class=\"string\">&#x27;https://repo1.maven.org/maven2&#x27;</span> &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"Gradle-项目结构\"><a href=\"#Gradle-项目结构\" class=\"headerlink\" title=\"Gradle 项目结构\"></a>Gradle 项目结构</h2><img src=\"/Gradle/Gradle/Gradle%E9%A1%B9%E7%9B%AE%E7%BB%93%E6%9E%84.png\" class=\"\" title=\"Gradle项目结构\">\n\n<h2 id=\"Gradle-常用命令\"><a href=\"#Gradle-常用命令\" class=\"headerlink\" title=\"Gradle 常用命令\"></a>Gradle 常用命令</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 构建项目</span></span><br><span class=\"line\">gradle build</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 跳过测试构建项目</span></span><br><span class=\"line\">gradle build -x <span class=\"built_in\">test</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 编译业务代码和配置文件</span></span><br><span class=\"line\">gradle classes</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 清除 build 目录</span></span><br><span class=\"line\">gradle clean</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 运行所有单元测试，生成测试报告</span></span><br><span class=\"line\">gradle <span class=\"built_in\">test</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 列出项目依赖树</span></span><br><span class=\"line\">gradle dependencies</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 列出可用任务</span></span><br><span class=\"line\">gradle tasks</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 编译并打包，不运行测试</span></span><br><span class=\"line\">gradle assemble</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 运行项目（需配置 application 插件）</span></span><br><span class=\"line\">gradle run</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Wrapper-包装器\"><a href=\"#Wrapper-包装器\" class=\"headerlink\" title=\"Wrapper 包装器\"></a>Wrapper 包装器</h2><h3 id=\"作用\"><a href=\"#作用\" class=\"headerlink\" title=\"作用\"></a>作用</h3><ul>\n<li><strong>版本控制：</strong> 通过 <code>gradlew</code>（Linux&#x2F;Mac）或 <code>gradlew.bat</code>（Windows）脚本，项目可以锁定特定 Gradle 版本，无需手动安装 Gradle。</li>\n<li><strong>环境无关：</strong> 开发者无需在本地安装 Gradle，Wrapper 会自动下载指定的 Gradle 版本。</li>\n<li><strong>一致性：</strong> 保证团队成员和 CI&#x2F;CD 环境使用相同的 Gradle 版本，避免构建问题。</li>\n</ul>\n<h3 id=\"主要文件\"><a href=\"#主要文件\" class=\"headerlink\" title=\"主要文件\"></a>主要文件</h3><ul>\n<li>位于项目根目录的 <code>gradle/wrapper/</code> 文件夹中<ul>\n<li><code>gradlew</code> Linux&#x2F;Mac 的可执行脚本。</li>\n<li><code>gradlew.bat</code> Windows 的批处理脚本。</li>\n<li><code>gradle-wrapper.jar</code> Wrapper 的核心逻辑，负责下载和运行 Gradle。</li>\n<li><code>gradle-wrapper.properties</code> 配置文件，指定 Gradle 版本和下载地址。</li>\n</ul>\n</li>\n<li><code>gradle-wrapper.properties</code> 文件<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">// 解压缩后的目录</span><br><span class=\"line\">distributionBase=GRADLE_USER_HOME</span><br><span class=\"line\">distributionPath=wrapper/dists</span><br><span class=\"line\"></span><br><span class=\"line\">// 指定的 Gradle 版本下载地址</span><br><span class=\"line\">distributionUrl=https\\://services.gradle.org/distributions/gradle-7.1-bin.zip</span><br><span class=\"line\"></span><br><span class=\"line\">// 压缩包目录</span><br><span class=\"line\">zipStoreBase=GRADLE_USER_HOME</span><br><span class=\"line\">zipStorePath=wrapper/dists</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 指定 Gradle 版本，生成 Wrapper 文件</span></span><br><span class=\"line\">gradle wrapper --gradle-version 8.10（替换为所需版本）</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 运行构建</span></span><br><span class=\"line\">./gradlew build（Linux/Mac）或 gradlew.bat build（Windows）</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"build-gradle-文件\"><a href=\"#build-gradle-文件\" class=\"headerlink\" title=\"build.gradle 文件\"></a>build.gradle 文件</h2><h3 id=\"plugins-插件\"><a href=\"#plugins-插件\" class=\"headerlink\" title=\"plugins 插件\"></a>plugins 插件</h3><h4 id=\"插件作用\"><a href=\"#插件作用\" class=\"headerlink\" title=\"插件作用\"></a>插件作用</h4><ul>\n<li><strong>自动化任务：</strong> 插件可以定义构建、测试、打包等任务。</li>\n<li><strong>约定配置：</strong> 提供默认设置，例如 Java 项目的目录结构。</li>\n<li><strong>扩展功能：</strong> 支持特定技术栈，如 Android、Spring、Docker 等。</li>\n</ul>\n<h4 id=\"插件类型\"><a href=\"#插件类型\" class=\"headerlink\" title=\"插件类型\"></a>插件类型</h4><ul>\n<li><strong>脚本插件</strong><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">apply from: <span class=\"string\">&#x27;custom.gradle&#x27;</span></span><br></pre></td></tr></table></figure></li>\n<li><strong>二进制插件</strong><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">plugins &#123;</span><br><span class=\"line\">    <span class=\"built_in\">id</span> <span class=\"string\">&#x27;java&#x27;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h4 id=\"声明插件\"><a href=\"#声明插件\" class=\"headerlink\" title=\"声明插件\"></a>声明插件</h4><ul>\n<li><strong>使用 plugins 块</strong>（推荐，声明式语法）<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">plugins &#123;</span><br><span class=\"line\">    <span class=\"built_in\">id</span> <span class=\"string\">&#x27;java&#x27;</span> // 核心插件，无需版本</span><br><span class=\"line\">    <span class=\"built_in\">id</span> <span class=\"string\">&#x27;org.springframework.boot&#x27;</span> version <span class=\"string\">&#x27;3.3.4&#x27;</span> // 第三方插件</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><strong>使用 apply 方法</strong>（传统方式）<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">apply plugin: <span class=\"string\">&#x27;java&#x27;</span></span><br></pre></td></tr></table></figure></li>\n<li><strong>应用脚本插件</strong><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">apply from: <span class=\"string\">&#x27;other.gradle&#x27;</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<h4 id=\"常见插件\"><a href=\"#常见插件\" class=\"headerlink\" title=\"常见插件\"></a>常见插件</h4><ul>\n<li><p><strong>Java 插件</strong>（<code>id &#39;java&#39;</code>）</p>\n<ul>\n<li>提供 Java 项目支持，包括编译、测试和打包（JAR）。</li>\n<li>默认目录：<code>src/main/java</code>, <code>src/test/java</code>。</li>\n</ul>\n</li>\n<li><p><strong>Application 插件</strong>（<code>id &#39;application&#39;</code>）</p>\n<ul>\n<li>扩展 Java 插件，添加运行和分发的任务（如 run）。</li>\n<li>配置主类:<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">application &#123;</span><br><span class=\"line\">    mainClass = <span class=\"string\">&#x27;com.example.App&#x27;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li><p><strong>Spring Boot 插件</strong>（<code>id &#39;org.springframework.boot&#39;</code>）</p>\n<ul>\n<li>简化 Spring Boot 项目构建，支持可执行 JAR&#x2F;WAR。</li>\n<li>示例:<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">plugins &#123;</span><br><span class=\"line\">    <span class=\"built_in\">id</span> <span class=\"string\">&#x27;org.springframework.boot&#x27;</span> version <span class=\"string\">&#x27;3.3.4&#x27;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li><p><strong>Maven Publish 插件</strong>（<code>id &#39;maven-publish&#39;</code>）</p>\n<ul>\n<li>用于发布构件到 Maven 仓库。</li>\n<li>示例:<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">publishing &#123;</span><br><span class=\"line\">    publications &#123;</span><br><span class=\"line\">        maven(MavenPublication) &#123;</span><br><span class=\"line\">            from components.java</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li><p><strong>Checkstyle 插件</strong>（<code>id &#39;checkstyle&#39;</code>）</p>\n<ul>\n<li>集成代码风格检查。</li>\n<li>示例:<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">plugins &#123;</span><br><span class=\"line\">    <span class=\"built_in\">id</span> <span class=\"string\">&#x27;checkstyle&#x27;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"repositories-仓库\"><a href=\"#repositories-仓库\" class=\"headerlink\" title=\"repositories 仓库\"></a>repositories 仓库</h3><ul>\n<li><strong>中央仓库</strong><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">repositories &#123;</span><br><span class=\"line\">    mavenCentral()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><strong>自定义仓库</strong><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">repositories &#123;</span><br><span class=\"line\">    maven &#123; url <span class=\"string\">&#x27;https://repo.mycompany.com&#x27;</span> &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"dependencies-依赖\"><a href=\"#dependencies-依赖\" class=\"headerlink\" title=\"dependencies 依赖\"></a>dependencies 依赖</h3><h4 id=\"依赖类型\"><a href=\"#依赖类型\" class=\"headerlink\" title=\"依赖类型\"></a>依赖类型</h4><ul>\n<li><code>implementation</code> 用于项目的实现代码，编译和运行时需要。依赖不会暴露给其他模块，减少传递性依赖冲突</li>\n<li><code>api</code> 用于库项目的公共 API，编译和运行时需要。依赖会暴露给使用该库的其他模块（传递性）</li>\n<li><code>compileOnly</code> 仅在编译时需要，运行时不需要（例如注解处理器）</li>\n<li><code>runtimeOnly</code> 仅在运行时需要，编译时不需要（例如数据库驱动）</li>\n<li><code>testImplementation</code> 用于测试代码的编译和运行（如 JUnit）</li>\n<li><code>testCompileOnly</code> &#x2F; <code>testRuntimeOnly</code> 类似 compileOnly 和 runtimeOnly，但仅用于测试</li>\n</ul>\n<h4 id=\"依赖方式\"><a href=\"#依赖方式\" class=\"headerlink\" title=\"依赖方式\"></a>依赖方式</h4><ul>\n<li><strong>外部库依赖</strong> 从 Maven Central、JCenter 或其他仓库（如 Google）下载的库<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">implementation group:<span class=\"string\">&#x27;org.springframework&#x27;</span>, name:<span class=\"string\">&#x27;spring-core&#x27;</span>, version: <span class=\"string\">&#x27;6.1.14&#x27;</span></span><br><span class=\"line\">implementation <span class=\"string\">&#x27;org.springframework:spring-core:6.1.14&#x27;</span>  <span class=\"comment\"># 简写</span></span><br></pre></td></tr></table></figure></li>\n<li><strong>本地文件依赖</strong> 使用本地 JAR 文件或目录<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">implementation files(<span class=\"string\">&#x27;libs/mysql.jar&#x27;</span>, <span class=\"string\">&#x27;lib/log4j.jar&#x27;</span>)</span><br><span class=\"line\">implementation fileTree(<span class=\"string\">&#x27;dir&#x27;</span>:<span class=\"string\">&#x27;lib&#x27;</span>, includes:[<span class=\"string\">&#x27;*.jar&#x27;</span>], excludes:[<span class=\"string\">&#x27;xxx2.jar&#x27;</span>])</span><br></pre></td></tr></table></figure></li>\n<li><strong>项目依赖</strong> 依赖同一多模块项目中的其他模块<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">implementation project(<span class=\"string\">&#x27;:my-other-module&#x27;</span>)</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h4 id=\"动态版本\"><a href=\"#动态版本\" class=\"headerlink\" title=\"动态版本\"></a>动态版本</h4><ul>\n<li><strong>固定版本：</strong> 如 1.2.3。</li>\n<li><strong>动态版本：</strong> 使用 +（如 1.2.+）或范围（如 [1.0,2.0)）。<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">implementation <span class=\"string\">&#x27;com.example:library:1.0.+&#x27;</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><ul>\n<li><a href=\"https://gradle.org/\">Gradle 官网</a></li>\n</ul>\n","categories":["Gradle"],"tags":["后端","Gradle"]},{"title":"Http特殊字符","url":"/Http/Http%E7%89%B9%E6%AE%8A%E5%AD%97%E7%AC%A6/","content":"<img src=\"/Http/Http%E7%89%B9%E6%AE%8A%E5%AD%97%E7%AC%A6/Http%E7%89%B9%E6%AE%8A%E5%AD%97%E7%AC%A6.png\" class=\"\" title=\"Http特殊字符\">\n\n\n","categories":["Http"],"tags":["后端","Http"]},{"title":"JDK10：新特性","url":"/JDK/JDK10%EF%BC%9A%E6%96%B0%E7%89%B9%E6%80%A7/","content":"<h2 id=\"局部变量类型推断\"><a href=\"#局部变量类型推断\" class=\"headerlink\" title=\"局部变量类型推断\"></a>局部变量类型推断</h2><ul>\n<li>引入 <code>var</code> 关键字自动推断局部变量的类型，仅适用于 <strong>局部变量</strong>、<strong>增强 for 循环</strong> 和 <strong>try-with-resources</strong> 中的变量<br><strong>使用示例：</strong><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">var</span> <span class=\"variable\">num</span> <span class=\"operator\">=</span> <span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"type\">var</span> <span class=\"variable\">list</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br></pre></td></tr></table></figure>\n<strong>错误使用场景：</strong><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 1. 没有初始化的局部变量，不能实现类型推断</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> num;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 2. lambda 表达式，左边函数式接口不能声明为 var</span></span><br><span class=\"line\"><span class=\"comment\">//Supplier&lt;Double&gt; sup = () -&gt; Math.random();</span></span><br><span class=\"line\"><span class=\"type\">var</span> <span class=\"variable\">sup</span> <span class=\"operator\">=</span> () -&gt; Math.random();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 3. 方法引用，左边函数式接口不能声明为 var</span></span><br><span class=\"line\"><span class=\"comment\">//Consumer&lt;String&gt; con = System.out::println;</span></span><br><span class=\"line\"><span class=\"type\">var</span> <span class=\"variable\">con</span> <span class=\"operator\">=</span> System.out::println;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 4. 数组的静态初始化</span></span><br><span class=\"line\"><span class=\"comment\">//int[] arr = &#123;1, 2, 3&#125;;</span></span><br><span class=\"line\"><span class=\"type\">var</span> <span class=\"variable\">arr</span> <span class=\"operator\">=</span> &#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 5. 方法返回类型和参数类型</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">var</span> <span class=\"title function_\">method</span><span class=\"params\">(<span class=\"keyword\">var</span> x1, <span class=\"keyword\">var</span> x2)</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 6. 类属性</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">User</span> &#123;</span><br><span class=\"line\">\t<span class=\"type\">var</span> <span class=\"variable\">name</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;张三&quot;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 7.catch块</span></span><br><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> (<span class=\"keyword\">var</span> e) &#123;</span><br><span class=\"line\">\te.printStackTrace();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n","categories":["JDK"],"tags":["后端","JDK"]},{"title":"JDK11：新特性","url":"/JDK/JDK11%EF%BC%9A%E6%96%B0%E7%89%B9%E6%80%A7/","content":"<h2 id=\"增强-局部变量类型推断-增强Lambda参数\"><a href=\"#增强-局部变量类型推断-增强Lambda参数\" class=\"headerlink\" title=\"增强 局部变量类型推断(增强Lambda参数)\"></a>增强 局部变量类型推断(增强Lambda参数)</h2><ul>\n<li>扩展 JDK 10 引入的 <code>var</code> 类型推断，允许在 Lambda 表达式的参数中使用 <code>var</code>，从而减少显式类型声明。<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// JDK 10 之前</span></span><br><span class=\"line\">BiFunction&lt;String, Integer, String&gt; func1 = (String s, Integer i) -&gt; s + i;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// JDK 11 使用 var</span></span><br><span class=\"line\">BiFunction&lt;String, Integer, String&gt; func2 = (<span class=\"keyword\">var</span> s, <span class=\"keyword\">var</span> i) -&gt; s + i;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 带注解</span></span><br><span class=\"line\">BiFunction&lt;String, Integer, String&gt; func3 = (<span class=\"meta\">@Nonnull</span> <span class=\"keyword\">var</span> s, <span class=\"meta\">@Positive</span> <span class=\"keyword\">var</span> i) -&gt; s + i;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<span id=\"more\"></span>\n\n<h2 id=\"HTTP-客户端标准化\"><a href=\"#HTTP-客户端标准化\" class=\"headerlink\" title=\"HTTP 客户端标准化\"></a>HTTP 客户端标准化</h2><ul>\n<li>全新的 Http 客户端 API，替代老旧的 <code>HttpURLConnection</code>。</li>\n<li>完全异步，非阻塞 I&#x2F;O，基于 <code>CompletableFuture</code>，支持同步和异步请求、连接池、响应体处理器。<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">HttpClient</span> <span class=\"variable\">client</span> <span class=\"operator\">=</span> HttpClient.newHttpClient();</span><br><span class=\"line\"><span class=\"type\">HttpRequest</span> <span class=\"variable\">req</span> <span class=\"operator\">=</span> HttpRequest.newBuilder(URI.create(<span class=\"string\">&quot;https://www.baidu.com/&quot;</span>)).GET().build();</span><br><span class=\"line\">HttpResponse&lt;String&gt; rep = client.send(req, HttpResponse.BodyHandlers.ofString());</span><br><span class=\"line\">System.out.println(rep.body());</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"Nest-Based-Access-Control-嵌套访问控制\"><a href=\"#Nest-Based-Access-Control-嵌套访问控制\" class=\"headerlink\" title=\"Nest-Based Access Control 嵌套访问控制\"></a>Nest-Based Access Control 嵌套访问控制</h2><ul>\n<li>优化 JVM 对嵌套类（内部类、匿名类等）的访问控制，解决反射访问私有成员的限制<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Outer</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">String</span> <span class=\"variable\">privateField</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;Private&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">class</span> <span class=\"title class_\">Inner</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">void</span> <span class=\"title function_\">access</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">            System.out.println(privateField); <span class=\"comment\">// 直接访问，无需反射</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"增强-String-字符串\"><a href=\"#增强-String-字符串\" class=\"headerlink\" title=\"增强 String 字符串\"></a>增强 String 字符串</h2><ul>\n<li>新增方法：<code>isBlank()</code>、<code>lines()</code>、<code>strip()</code>、<code>stripLeading()/stripTrailing()</code>、<code>repeat(int)</code><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// isBlank：检查字符串是否为空或仅包含空白字符</span></span><br><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">text</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;  Hello\\nWorld  &quot;</span>;</span><br><span class=\"line\">System.out.println(text.isBlank());         <span class=\"comment\">// false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// lines：将字符串按行分割为 Stream&lt;String&gt;</span></span><br><span class=\"line\">text.lines().forEach(System.out::println);  <span class=\"comment\">// Hello, World</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// strip：移除首尾 Unicode 空白字符（比 trim() 更通用）</span></span><br><span class=\"line\">System.out.println(text.strip());           <span class=\"comment\">// &quot;Hello\\nWorld&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// stripLeading/stripTrailing：移除首/尾空白</span></span><br><span class=\"line\">System.out.println(text.stripLeading());    <span class=\"comment\">// Hello\\nWorld  </span></span><br><span class=\"line\">System.out.println(text.stripTrailing());   <span class=\"comment\">//   Hello\\nWorld</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// repeat：重复字符串指定次数</span></span><br><span class=\"line\">System.out.println(<span class=\"string\">&quot;Hi&quot;</span>.repeat(<span class=\"number\">3</span>));         <span class=\"comment\">// HiHiHi</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"单文件源码运行\"><a href=\"#单文件源码运行\" class=\"headerlink\" title=\"单文件源码运行\"></a>单文件源码运行</h2><ul>\n<li>允许直接运行单个 Java 文件，无需显式编译<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">java HelloWorld.java</span><br></pre></td></tr></table></figure></li>\n</ul>\n","categories":["JDK"],"tags":["后端","JDK"]},{"title":"JDK12：新特性","url":"/JDK/JDK12%EF%BC%9A%E6%96%B0%E7%89%B9%E6%80%A7/","content":"<h2 id=\"正式特性\"><a href=\"#正式特性\" class=\"headerlink\" title=\"正式特性\"></a>正式特性</h2><h3 id=\"JVM-常量-API\"><a href=\"#JVM-常量-API\" class=\"headerlink\" title=\"JVM 常量 API\"></a>JVM 常量 API</h3><ul>\n<li>引入 <code>java.lang.constant</code> 包，提供 API 以程序化方式描述和操作 JVM 常量池中的常量（如类、方法、字段）。<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.lang.constant.*;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">ClassDesc</span> <span class=\"variable\">stringDesc</span> <span class=\"operator\">=</span> ClassDesc.of(<span class=\"string\">&quot;java.lang.String&quot;</span>);</span><br><span class=\"line\">System.out.println(stringDesc.displayName()); <span class=\"comment\">// java.lang.String</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<span id=\"more\"></span>\n\n<h3 id=\"支持压缩数字格式化\"><a href=\"#支持压缩数字格式化\" class=\"headerlink\" title=\"支持压缩数字格式化\"></a>支持压缩数字格式化</h3><ul>\n<li>紧凑数字格式，以简洁的方式表示大数字<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">var</span> <span class=\"variable\">cnf</span> <span class=\"operator\">=</span> NumberFormat.getCompactNumberInstance(Locale.CHINA, NumberFormat.Style.SHORT);</span><br><span class=\"line\">System.out.println(cnf.format(<span class=\"number\">1_0000</span>));     <span class=\"comment\">// 1万</span></span><br><span class=\"line\">System.out.println(cnf.format(<span class=\"number\">1_9200</span>));     <span class=\"comment\">// 2万</span></span><br><span class=\"line\">System.out.println(cnf.format(<span class=\"number\">1_000_000</span>));  <span class=\"comment\">// 100万</span></span><br><span class=\"line\">System.out.println(cnf.format(<span class=\"number\">1L</span> &lt;&lt; <span class=\"number\">30</span>));   <span class=\"comment\">// 11亿</span></span><br><span class=\"line\">System.out.println(cnf.format(<span class=\"number\">1L</span> &lt;&lt; <span class=\"number\">40</span>));   <span class=\"comment\">// 1万亿</span></span><br><span class=\"line\">System.out.println(cnf.format(<span class=\"number\">1L</span> &lt;&lt; <span class=\"number\">50</span>));   <span class=\"comment\">// 1126万亿</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"增强-String-字符串\"><a href=\"#增强-String-字符串\" class=\"headerlink\" title=\"增强 String 字符串\"></a>增强 String 字符串</h3><ul>\n<li>新增方法：<code>indent()</code>、<code>transform()</code><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// transform：应用转换函数</span></span><br><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">str</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;hello&quot;</span>.transform(d -&gt; d + <span class=\"string\">&quot;world &quot;</span>)</span><br><span class=\"line\">\t.transform(String::toUpperCase)</span><br><span class=\"line\">\t.transform(String::trim);</span><br><span class=\"line\">System.out.println(str); <span class=\"comment\">// HELLOWORLD</span></span><br><span class=\"line\">\t</span><br><span class=\"line\"><span class=\"comment\">// indent：调整缩进。正值加空格；负值减空格；0规范化</span></span><br><span class=\"line\">System.out.println(<span class=\"string\">&quot;Hello\\nWorld&quot;</span>.indent(<span class=\"number\">4</span>));</span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">\tHello</span></span><br><span class=\"line\"><span class=\"comment\">\tWorld</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"预览特性\"><a href=\"#预览特性\" class=\"headerlink\" title=\"预览特性\"></a>预览特性</h2><h3 id=\"增强-Switch-表达式-1\"><a href=\"#增强-Switch-表达式-1\" class=\"headerlink\" title=\"增强 Switch 表达式 [1]\"></a>增强 Switch 表达式 [1]</h3><ul>\n<li>使用 <code>-&gt;</code> 替代 <code>break</code>，自动跳出分支。<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 传统 switch 语句</span></span><br><span class=\"line\">String result;</span><br><span class=\"line\"><span class=\"keyword\">switch</span> (day) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> MONDAY, FRIDAY, SUNDAY:</span><br><span class=\"line\">        result = <span class=\"string\">&quot;Work hard&quot;</span>;</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> TUESDAY:</span><br><span class=\"line\">        result = <span class=\"string\">&quot;Meeting day&quot;</span>;</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">default</span>:</span><br><span class=\"line\">        result = <span class=\"string\">&quot;Relax&quot;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// JDK 12 switch 表达式</span></span><br><span class=\"line\"><span class=\"type\">var</span> <span class=\"variable\">result</span> <span class=\"operator\">=</span> <span class=\"keyword\">switch</span> (day) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> MONDAY, FRIDAY, SUNDAY -&gt; <span class=\"string\">&quot;Work hard&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> TUESDAY -&gt; <span class=\"string\">&quot;Meeting day&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">default</span> -&gt; <span class=\"string\">&quot;Relax&quot;</span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></li>\n</ul>\n","categories":["JDK"],"tags":["后端","JDK"]},{"title":"JDK13：新特性","url":"/JDK/JDK13%EF%BC%9A%E6%96%B0%E7%89%B9%E6%80%A7/","content":"<h2 id=\"预览特性\"><a href=\"#预览特性\" class=\"headerlink\" title=\"预览特性\"></a>预览特性</h2><h3 id=\"增强-Switch-表达式-2\"><a href=\"#增强-Switch-表达式-2\" class=\"headerlink\" title=\"增强 Switch 表达式 [2]\"></a>增强 Switch 表达式 [2]</h3><ul>\n<li>添加 <code>yield</code> 关键字，<code>yield</code> 用于在块中返回值，替代 <code>break</code>。<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// JDK 12 switch 表达式</span></span><br><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">result</span> <span class=\"operator\">=</span> <span class=\"keyword\">switch</span> (day) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> MONDAY, FRIDAY, SUNDAY -&gt; <span class=\"string\">&quot;Work hard&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> TUESDAY -&gt; <span class=\"string\">&quot;Meeting day&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">default</span> -&gt; <span class=\"string\">&quot;Relax&quot;</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// JDK 13 增强（使用 yield）</span></span><br><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">result</span> <span class=\"operator\">=</span> <span class=\"keyword\">switch</span> (day) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> MONDAY, FRIDAY, SUNDAY -&gt; <span class=\"string\">&quot;Work hard&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> TUESDAY: &#123;</span><br><span class=\"line\">        <span class=\"keyword\">yield</span> <span class=\"string\">&quot;Meeting day&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">default</span>: &#123;</span><br><span class=\"line\">        <span class=\"keyword\">yield</span> <span class=\"string\">&quot;Relax&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<span id=\"more\"></span>\n\n<h3 id=\"文本块-1\"><a href=\"#文本块-1\" class=\"headerlink\" title=\"文本块 [1]\"></a>文本块 [1]</h3><ul>\n<li>使用三重引号（<code>&quot;&quot;&quot;</code>）定义，自动处理换行和缩进。减少转义字符（如 <code>\\n</code>、<code>\\t</code>）的使用。<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 传统字符串</span></span><br><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">json</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;&#123;\\n&quot;</span> +</span><br><span class=\"line\">              <span class=\"string\">&quot;  \\&quot;name\\&quot;: \\&quot;John\\&quot;,\\n&quot;</span> +</span><br><span class=\"line\">              <span class=\"string\">&quot;  \\&quot;age\\&quot;: 30\\n&quot;</span> +</span><br><span class=\"line\">              <span class=\"string\">&quot;&#125;&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// JDK 13 文本块</span></span><br><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">textBlock</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">                   &#123;</span></span><br><span class=\"line\"><span class=\"string\">                     &quot;name&quot;: &quot;John&quot;,</span></span><br><span class=\"line\"><span class=\"string\">                     &quot;age&quot;: 30</span></span><br><span class=\"line\"><span class=\"string\">                   &#125;</span></span><br><span class=\"line\"><span class=\"string\">                   &quot;&quot;&quot;</span>;</span><br><span class=\"line\">System.out.println(textBlock);</span><br></pre></td></tr></table></figure></li>\n</ul>\n","categories":["JDK"],"tags":["后端","JDK"]},{"title":"JDK14：新特性","url":"/JDK/JDK14%EF%BC%9A%E6%96%B0%E7%89%B9%E6%80%A7/","content":"<h2 id=\"正式特性\"><a href=\"#正式特性\" class=\"headerlink\" title=\"正式特性\"></a>正式特性</h2><h3 id=\"增强-Switch-表达式\"><a href=\"#增强-Switch-表达式\" class=\"headerlink\" title=\"增强 Switch 表达式\"></a>增强 Switch 表达式</h3><ul>\n<li>增强 Switch 语句，简化语法。</li>\n<li>使用 <code>-&gt;</code> 替代传统的 <code>:</code>，不需要 <code>break</code>。</li>\n<li>当代码块 <code>&#123;&#125;</code> 包含多行语句时，<code>yield</code> 关键字用于返回值的方式。<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">result</span> <span class=\"operator\">=</span> <span class=\"keyword\">switch</span> (day) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> MONDAY, FRIDAY, SUNDAY -&gt; <span class=\"string\">&quot;Work hard&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> TUESDAY -&gt; <span class=\"string\">&quot;Meeting day&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">default</span> -&gt; &#123;</span><br><span class=\"line\">        <span class=\"keyword\">yield</span> <span class=\"string\">&quot;Relax&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">System.out.println(result);</span><br></pre></td></tr></table></figure></li>\n</ul>\n<span id=\"more\"></span>\n\n<h2 id=\"预览特性\"><a href=\"#预览特性\" class=\"headerlink\" title=\"预览特性\"></a>预览特性</h2><h3 id=\"文本块-2\"><a href=\"#文本块-2\" class=\"headerlink\" title=\"文本块 [2]\"></a>文本块 [2]</h3><ul>\n<li>新增两个转义序列：<code>\\</code>（防止自动换行）和 <code>\\s</code>（保留尾随空格）。<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">text</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">              Line 1 \\</span></span><br><span class=\"line\"><span class=\"string\">              Line 2\\s</span></span><br><span class=\"line\"><span class=\"string\">              Line 3</span></span><br><span class=\"line\"><span class=\"string\">              &quot;&quot;&quot;</span>;</span><br><span class=\"line\">System.out.println(text);</span><br><span class=\"line\"><span class=\"comment\">// 输出：</span></span><br><span class=\"line\"><span class=\"comment\">// Line 1 Line 2 </span></span><br><span class=\"line\"><span class=\"comment\">// Line 3</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"模式匹配-instanceof-1\"><a href=\"#模式匹配-instanceof-1\" class=\"headerlink\" title=\"模式匹配 instanceof [1]\"></a>模式匹配 instanceof [1]</h3><ul>\n<li>增强 <code>instanceof</code> 操作符，支持类型模式匹配，自动完成类型转换并绑定变量。<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (obj <span class=\"keyword\">instanceof</span> String s) &#123;</span><br><span class=\"line\">    System.out.println(s.toUpperCase());</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;Not a string&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"Records-1\"><a href=\"#Records-1\" class=\"headerlink\" title=\"Records [1]\"></a>Records [1]</h3><ul>\n<li>简化数据类定义，自动生成构造器、<code>getter()</code>、<code>equals()</code>、<code>hashCode()</code> 和 <code>toString()</code>。<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">record</span> <span class=\"title class_\">Point</span><span class=\"params\">(<span class=\"type\">double</span> x, <span class=\"type\">double</span> y)</span> &#123;&#125;</span><br><span class=\"line\"><span class=\"type\">Point</span> <span class=\"variable\">p</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Point</span>(<span class=\"number\">1.0</span>, <span class=\"number\">2.0</span>);</span><br><span class=\"line\">System.out.println(p.x()); <span class=\"comment\">// 1.0</span></span><br><span class=\"line\">System.out.println(p);     <span class=\"comment\">// Point[x=1.0, y=2.0]</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n","categories":["JDK"],"tags":["后端","JDK"]},{"title":"JDK15：新特性","url":"/JDK/JDK15%EF%BC%9A%E6%96%B0%E7%89%B9%E6%80%A7/","content":"<h2 id=\"正式特性\"><a href=\"#正式特性\" class=\"headerlink\" title=\"正式特性\"></a>正式特性</h2><h3 id=\"文本块\"><a href=\"#文本块\" class=\"headerlink\" title=\"文本块\"></a>文本块</h3><ul>\n<li>引入文本块，简化多行字符串的编写，特别适合嵌入 JSON、XML、SQL 等。</li>\n<li>三重引号（<code>&quot;&quot;&quot;</code>）定义，自动处理换行和缩进。</li>\n<li><code>\\</code>（防止自动换行）和 <code>\\s</code>（保留尾随空格）。<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 传统字符串</span></span><br><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">json</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;&#123;\\n&quot;</span> +</span><br><span class=\"line\">              <span class=\"string\">&quot;  \\&quot;name\\&quot;: \\&quot;John\\&quot;,\\n&quot;</span> +</span><br><span class=\"line\">              <span class=\"string\">&quot;  \\&quot;age\\&quot;: 30\\n&quot;</span> +</span><br><span class=\"line\">              <span class=\"string\">&quot;&#125;&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 文本块</span></span><br><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">textBlock</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">                   &#123;</span></span><br><span class=\"line\"><span class=\"string\">                     &quot;name&quot;: &quot;John&quot;,</span></span><br><span class=\"line\"><span class=\"string\">                     &quot;age&quot;: 30</span></span><br><span class=\"line\"><span class=\"string\">                   &#125;</span></span><br><span class=\"line\"><span class=\"string\">                   &quot;&quot;&quot;</span>;</span><br><span class=\"line\">System.out.println(textBlock);</span><br></pre></td></tr></table></figure></li>\n</ul>\n<span id=\"more\"></span>\n\n<h2 id=\"隐藏类\"><a href=\"#隐藏类\" class=\"headerlink\" title=\"隐藏类\"></a>隐藏类</h2><ul>\n<li>引入隐藏类，一种不可被其他类直接发现的类，专为动态生成字节码的框架设计，不可序列化，生命周期短暂。<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.lang.invoke.*;</span><br><span class=\"line\">MethodHandles.<span class=\"type\">Lookup</span> <span class=\"variable\">lookup</span> <span class=\"operator\">=</span> MethodHandles.lookup();</span><br><span class=\"line\"><span class=\"type\">byte</span>[] classBytes = <span class=\"comment\">// 动态生成的字节码</span></span><br><span class=\"line\">Class&lt;?&gt; hiddenClass = lookup.defineHiddenClass(classBytes, <span class=\"literal\">true</span>).lookupClass();</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"EdDSA-签名算法\"><a href=\"#EdDSA-签名算法\" class=\"headerlink\" title=\"EdDSA 签名算法\"></a>EdDSA 签名算法</h2><ul>\n<li>在 <code>java.security</code> 包中添加 Edwards-Curve 数字签名算法（EdDSA）。适用于 TLS、JWT、区块链。<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.security.*;</span><br><span class=\"line\"><span class=\"type\">KeyPairGenerator</span> <span class=\"variable\">kpg</span> <span class=\"operator\">=</span> KeyPairGenerator.getInstance(<span class=\"string\">&quot;Ed25519&quot;</span>);</span><br><span class=\"line\"><span class=\"type\">KeyPair</span> <span class=\"variable\">keyPair</span> <span class=\"operator\">=</span> kpg.generateKeyPair();</span><br><span class=\"line\"><span class=\"type\">Signature</span> <span class=\"variable\">sig</span> <span class=\"operator\">=</span> Signature.getInstance(<span class=\"string\">&quot;Ed25519&quot;</span>);</span><br><span class=\"line\">sig.initSign(keyPair.getPrivate());</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"预览特性\"><a href=\"#预览特性\" class=\"headerlink\" title=\"预览特性\"></a>预览特性</h2><h3 id=\"模式匹配-instanceof-2\"><a href=\"#模式匹配-instanceof-2\" class=\"headerlink\" title=\"模式匹配 instanceof [2]\"></a>模式匹配 instanceof [2]</h3><ul>\n<li>语义增强，增强对 <code>&amp;&amp;</code>、<code>||</code> 逻辑表达式的支持。<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Object</span> <span class=\"variable\">obj</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;Hello&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (obj <span class=\"keyword\">instanceof</span> String s &amp;&amp; s.length() &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    System.out.println(s);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"Records-2\"><a href=\"#Records-2\" class=\"headerlink\" title=\"Records [2]\"></a>Records [2]</h3><ul>\n<li>新增支持局部记录，增强反射和序列化支持。<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">record</span> <span class=\"title class_\">Point</span><span class=\"params\">(<span class=\"type\">int</span> x, <span class=\"type\">int</span> y)</span> &#123;&#125;</span><br><span class=\"line\"><span class=\"type\">Point</span> <span class=\"variable\">p</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Point</span>(<span class=\"number\">1</span>, <span class=\"number\">2</span>);</span><br><span class=\"line\">System.out.println(p); <span class=\"comment\">// Point[x=1, y=2]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 局部记录</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"title function_\">process</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">record</span> <span class=\"title class_\">Temp</span><span class=\"params\">(String name)</span> &#123;&#125;</span><br><span class=\"line\">    <span class=\"type\">Temp</span> <span class=\"variable\">temp</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Temp</span>(<span class=\"string\">&quot;Test&quot;</span>);</span><br><span class=\"line\">    System.out.println(temp);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"Sealed-密封类-1\"><a href=\"#Sealed-密封类-1\" class=\"headerlink\" title=\"Sealed 密封类 [1]\"></a>Sealed 密封类 [1]</h3><ul>\n<li>引入 <code>sealed</code> 修饰符，限制类的继承，明确指定允许的子类。</li>\n<li>使用 <code>sealed</code> 定义类，配合 <code>permits</code> 指定子类。子类必须声明为 <code>final</code>、<code>sealed</code> 或 <code>non-sealed</code>。<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">sealed</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">Shape</span> <span class=\"keyword\">permits</span> Circle, Rectangle &#123;&#125;</span><br><span class=\"line\"><span class=\"keyword\">final</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Circle</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Shape</span> &#123;&#125;</span><br><span class=\"line\"><span class=\"keyword\">final</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Rectangle</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Shape</span> &#123;&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n","categories":["JDK"],"tags":["后端","JDK"]},{"title":"JDK16：新特性","url":"/JDK/JDK16%EF%BC%9A%E6%96%B0%E7%89%B9%E6%80%A7/","content":"<h2 id=\"正式特性\"><a href=\"#正式特性\" class=\"headerlink\" title=\"正式特性\"></a>正式特性</h2><h3 id=\"模式匹配-instanceof\"><a href=\"#模式匹配-instanceof\" class=\"headerlink\" title=\"模式匹配 instanceof\"></a>模式匹配 instanceof</h3><ul>\n<li>支持类型模式匹配，自动完成类型转换并绑定变量。</li>\n<li>语义增强，增强对 <code>&amp;&amp;</code>、<code>||</code> 逻辑表达式的支持。<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Object</span> <span class=\"variable\">obj</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;Hello&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (obj <span class=\"keyword\">instanceof</span> String s &amp;&amp; s.length() &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    System.out.println(s);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<span id=\"more\"></span>\n\n<h3 id=\"Records\"><a href=\"#Records\" class=\"headerlink\" title=\"Records\"></a>Records</h3><ul>\n<li>简化数据类定义，自动生成构造器、<code>getter()</code>、<code>equals()</code>、<code>hashCode()</code> 和 <code>toString()</code>。</li>\n<li>新增支持局部记录，增强反射和序列化支持。<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">record</span> <span class=\"title class_\">Point</span><span class=\"params\">(<span class=\"type\">int</span> x, <span class=\"type\">int</span> y)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> Point &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (x &lt; <span class=\"number\">0</span> || y &lt; <span class=\"number\">0</span>) <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">IllegalArgumentException</span>(<span class=\"string\">&quot;Negative coordinates&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Main</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Point</span> <span class=\"variable\">p</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Point</span>(<span class=\"number\">1</span>, <span class=\"number\">2</span>);</span><br><span class=\"line\">        System.out.println(p); <span class=\"comment\">// Point[x=1, y=2]</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"增强-Stream-API\"><a href=\"#增强-Stream-API\" class=\"headerlink\" title=\"增强 Stream API\"></a>增强 Stream API</h3><ul>\n<li>新增 <code>Stream.toList()</code> 方法，比 <code>collect(Collectors.toList())</code> 更简洁<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">List&lt;String&gt; list = Stream.of(<span class=\"string\">&quot;a&quot;</span>, <span class=\"string\">&quot;b&quot;</span>, <span class=\"string\">&quot;c&quot;</span>).toList();</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"预览特性\"><a href=\"#预览特性\" class=\"headerlink\" title=\"预览特性\"></a>预览特性</h2><h3 id=\"Sealed-密封类-2\"><a href=\"#Sealed-密封类-2\" class=\"headerlink\" title=\"Sealed 密封类 [2]\"></a>Sealed 密封类 [2]</h3><ul>\n<li>增加了限制，防止创建作为密封类子类的局部类，类似于不能创建密封类的匿名类。<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">sealed</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">Shape</span> <span class=\"keyword\">permits</span> Circle, Rectangle &#123;&#125;</span><br><span class=\"line\"><span class=\"keyword\">final</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Circle</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Shape</span> &#123;&#125;</span><br><span class=\"line\"><span class=\"keyword\">final</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Rectangle</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Shape</span> &#123;&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n","categories":["JDK"],"tags":["后端","JDK"]},{"title":"JDK17：新特性","url":"/JDK/JDK17%EF%BC%9A%E6%96%B0%E7%89%B9%E6%80%A7/","content":"<h2 id=\"正式特性\"><a href=\"#正式特性\" class=\"headerlink\" title=\"正式特性\"></a>正式特性</h2><h3 id=\"Foreign-Function-Memory-API（外部函数和内存）\"><a href=\"#Foreign-Function-Memory-API（外部函数和内存）\" class=\"headerlink\" title=\"Foreign Function &amp; Memory API（外部函数和内存）\"></a>Foreign Function &amp; Memory API（外部函数和内存）</h3><ul>\n<li>合并孵化模块<code>Foreign-Memory Access API</code> 和 <code>Foreign Linker API</code>。</li>\n<li>提供标准化的堆外内存和本地函数调用接口。</li>\n<li>安全的堆外内存操作（<code>MemorySegment</code>, <code>MemoryAddress</code>）。</li>\n<li>纯 Java 的本地函数调用，替代 JNI，性能接近 JNI，安全性更高。<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.lang.foreign.*;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.invoke.MethodHandle;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">StrLen</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Throwable &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> (<span class=\"type\">Arena</span> <span class=\"variable\">arena</span> <span class=\"operator\">=</span> Arena.ofConfined()) &#123;</span><br><span class=\"line\">            <span class=\"type\">MemorySegment</span> <span class=\"variable\">str</span> <span class=\"operator\">=</span> arena.allocateUtf8String(<span class=\"string\">&quot;Hello&quot;</span>);</span><br><span class=\"line\">            <span class=\"type\">MethodHandle</span> <span class=\"variable\">strlen</span> <span class=\"operator\">=</span> Linker.nativeLinker().downcallHandle(</span><br><span class=\"line\">                Linker.nativeLinker().defaultLookup().find(<span class=\"string\">&quot;strlen&quot;</span>).get(),</span><br><span class=\"line\">                FunctionDescriptor.of(ValueLayout.JAVA_LONG, ValueLayout.ADDRESS)</span><br><span class=\"line\">            );</span><br><span class=\"line\">            <span class=\"type\">long</span> <span class=\"variable\">len</span> <span class=\"operator\">=</span> (<span class=\"type\">long</span>) strlen.invoke(str);</span><br><span class=\"line\">            System.out.println(len); <span class=\"comment\">// 5</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><strong>孵化版本</strong>：<ul>\n<li><strong>JDK 14</strong>：引入 <code>Foreign-Memory Access API</code>，提供 <code>MemorySegment</code>、<code>MemoryLayout</code> 等核心功能，支持本地内存操作，替代 <code>Unsafe</code>。</li>\n<li><strong>JDK 15</strong>：优化 API，引入 <code>MemorySession</code>，增强布局、语义与生命周期控制。</li>\n<li><strong>JDK 16</strong>：引入 <code>Foreign Linker API</code>，支持本地函数调用；增强 <code>MemorySession</code>（支持并发），优化布局和性能，稳定 API 设计。</li>\n</ul>\n</li>\n</ul>\n<span id=\"more\"></span>\n\n<h3 id=\"Sealed-密封类\"><a href=\"#Sealed-密封类\" class=\"headerlink\" title=\"Sealed 密封类\"></a>Sealed 密封类</h3><ul>\n<li>使用 <code>sealed</code> 和 <code>permits</code> 限制继承或实现。子类必须声明为 <code>final</code>、<code>sealed</code> 或 <code>non-sealed</code>。</li>\n<li>结合 <code>record</code> 和 <code>instanceof</code> 模式匹配，简化代数数据类型（ADT）建模。<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">sealed</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">Shape</span> <span class=\"keyword\">permits</span> Circle, Rectangle &#123;&#125;</span><br><span class=\"line\"><span class=\"keyword\">final</span> <span class=\"keyword\">record</span> <span class=\"title class_\">Circle</span><span class=\"params\">(<span class=\"type\">double</span> radius)</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Shape</span> &#123;&#125;</span><br><span class=\"line\"><span class=\"keyword\">final</span> <span class=\"keyword\">record</span> <span class=\"title class_\">Rectangle</span><span class=\"params\">(<span class=\"type\">double</span> width, <span class=\"type\">double</span> height)</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Shape</span> &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Main</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Shape</span> <span class=\"variable\">shape</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Circle</span>(<span class=\"number\">5.0</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (shape <span class=\"keyword\">instanceof</span> Circle c) &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;Area: &quot;</span> + Math.PI * c.radius() * c.radius());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"增强的伪随机数生成器\"><a href=\"#增强的伪随机数生成器\" class=\"headerlink\" title=\"增强的伪随机数生成器\"></a>增强的伪随机数生成器</h3><ul>\n<li>引入新的伪随机数生成器（PRNG）接口和实现，替代 <code>java.util.Random</code><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.random.RandomGenerator;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">RandomGenerator</span> <span class=\"variable\">rng</span> <span class=\"operator\">=</span> RandomGenerator.of(<span class=\"string\">&quot;L64X128MixRandom&quot;</span>);</span><br><span class=\"line\">System.out.println(rng.nextInt(<span class=\"number\">100</span>)); <span class=\"comment\">// 随机数 0-99</span></span><br><span class=\"line\">rng.ints(<span class=\"number\">5</span>, <span class=\"number\">1</span>, <span class=\"number\">10</span>).forEach(System.out::println); <span class=\"comment\">// 5 个随机数 1-9</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"上下文特定的反序列化过滤器\"><a href=\"#上下文特定的反序列化过滤器\" class=\"headerlink\" title=\"上下文特定的反序列化过滤器\"></a>上下文特定的反序列化过滤器</h3><ul>\n<li>允许每个反序列化调用设置过滤器，检查类、数组大小等，通过 <code>ObjectInputFilter</code> 实现动态控制<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.io.*;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">ObjectInputFilter</span> <span class=\"variable\">filter</span> <span class=\"operator\">=</span> ObjectInputFilter.Config.createFilter(<span class=\"string\">&quot;java.lang.String;!*&quot;</span>);</span><br><span class=\"line\"><span class=\"type\">ObjectInputStream</span> <span class=\"variable\">ois</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ObjectInputStream</span>(inputStream);</span><br><span class=\"line\">ois.setObjectInputFilter(filter);</span><br><span class=\"line\"><span class=\"type\">Object</span> <span class=\"variable\">obj</span> <span class=\"operator\">=</span> ois.readObject(); <span class=\"comment\">// 只允许 String 类</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"预览特性\"><a href=\"#预览特性\" class=\"headerlink\" title=\"预览特性\"></a>预览特性</h2><h3 id=\"模式匹配-Switch-1\"><a href=\"#模式匹配-Switch-1\" class=\"headerlink\" title=\"模式匹配 Switch [1]\"></a>模式匹配 Switch [1]</h3><ul>\n<li>支持 <code>instanceof</code> 模式（如 <code>case String s</code>），引入 <code>null</code> 处理和守卫子句（<code>when</code>）。</li>\n<li>简化复杂条件逻辑，减少嵌套 <code>if-else</code>。<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Object</span> <span class=\"variable\">obj</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;Hello&quot;</span>;</span><br><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">result</span> <span class=\"operator\">=</span> <span class=\"keyword\">switch</span> (obj) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> String s when s.length() &gt; <span class=\"number\">3</span> -&gt; s.toUpperCase();</span><br><span class=\"line\">    <span class=\"keyword\">case</span> String s -&gt; s;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"literal\">null</span> -&gt; <span class=\"string\">&quot;Null&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">default</span> -&gt; <span class=\"string\">&quot;Other&quot;</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">System.out.println(result); <span class=\"comment\">// HELLO</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n","categories":["JDK"],"tags":["后端","JDK"]},{"title":"JDK18：新特性","url":"/JDK/JDK18%EF%BC%9A%E6%96%B0%E7%89%B9%E6%80%A7/","content":"<h2 id=\"正式特性\"><a href=\"#正式特性\" class=\"headerlink\" title=\"正式特性\"></a>正式特性</h2><h3 id=\"UTF-8-作为默认字符集\"><a href=\"#UTF-8-作为默认字符集\" class=\"headerlink\" title=\"UTF-8 作为默认字符集\"></a>UTF-8 作为默认字符集</h3><ul>\n<li>将 UTF-8 设置为标准 Java API 的默认字符集，确保跨平台一致性，API（如 <code>String</code>、<code>File</code>）行为统一<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// JDK 18 之前，字符集依赖环境</span></span><br><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">s</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">String</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">byte</span>[]&#123;(<span class=\"type\">byte</span>)<span class=\"number\">0xE2</span>, (<span class=\"type\">byte</span>)<span class=\"number\">0x82</span>, (<span class=\"type\">byte</span>)<span class=\"number\">0xAC</span>&#125;, StandardCharsets.UTF_8); <span class=\"comment\">// €</span></span><br><span class=\"line\"><span class=\"comment\">// JDK 18，默认 UTF-8，无需显式指定</span></span><br><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">s</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">String</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">byte</span>[]&#123;(<span class=\"type\">byte</span>)<span class=\"number\">0xE2</span>, (<span class=\"type\">byte</span>)<span class=\"number\">0x82</span>, (<span class=\"type\">byte</span>)<span class=\"number\">0xAC</span>&#125;);</span><br></pre></td></tr></table></figure></li>\n</ul>\n<span id=\"more\"></span>\n\n<h3 id=\"简单-Web-服务器\"><a href=\"#简单-Web-服务器\" class=\"headerlink\" title=\"简单 Web 服务器\"></a>简单 Web 服务器</h3><ul>\n<li>引入 <code>jwebserver</code> 命令行工具和 API，提供轻量级静态文件 Web 服务器<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"># 启动服务器，服务当前目录，端口 <span class=\"number\">8000</span></span><br><span class=\"line\">jwebserver -p <span class=\"number\">8000</span></span><br><span class=\"line\"># 访问 http:<span class=\"comment\">//localhost:8000/</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> com.sun.net.httpserver.SimpleFileServer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.nio.file.Path;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">WebServer</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">var</span> <span class=\"variable\">server</span> <span class=\"operator\">=</span> SimpleFileServer.createFileServer(</span><br><span class=\"line\">            Path.of(<span class=\"string\">&quot;/path/to/files&quot;</span>), <span class=\"number\">8000</span>);</span><br><span class=\"line\">        server.start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"Deprecate-Finalization-for-Removal\"><a href=\"#Deprecate-Finalization-for-Removal\" class=\"headerlink\" title=\"Deprecate Finalization for Removal\"></a>Deprecate Finalization for Removal</h3><ul>\n<li>标记 <code>Object.finalize()</code> 为废弃（for removal），解决 <code>finalize()</code> 的不可预测性和性能问题<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 旧方式：不推荐</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Resource</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_\">finalize</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Throwable &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;Finalized&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 新方式：try-with-resources</span></span><br><span class=\"line\"><span class=\"keyword\">try</span> (<span class=\"type\">var</span> <span class=\"variable\">resource</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">AutoCloseableResource</span>()) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 使用资源</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"预览特性\"><a href=\"#预览特性\" class=\"headerlink\" title=\"预览特性\"></a>预览特性</h2><h3 id=\"模式匹配-Switch-2\"><a href=\"#模式匹配-Switch-2\" class=\"headerlink\" title=\"模式匹配 Switch [2]\"></a>模式匹配 Switch [2]</h3><ul>\n<li>支持 <code>instanceof</code> 模式（如 <code>case String s</code>），引入 <code>null</code> 处理和守卫子句（<code>when</code>）。</li>\n<li>简化复杂条件逻辑，减少嵌套 <code>if-else</code>。<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Object</span> <span class=\"variable\">obj</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;Hello&quot;</span>;</span><br><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">result</span> <span class=\"operator\">=</span> <span class=\"keyword\">switch</span> (obj) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> String s when s.length() &gt; <span class=\"number\">3</span> -&gt; s.toUpperCase();</span><br><span class=\"line\">    <span class=\"keyword\">case</span> String s -&gt; s;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"literal\">null</span> -&gt; <span class=\"string\">&quot;Null&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">default</span> -&gt; <span class=\"string\">&quot;Other&quot;</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">System.out.println(result); <span class=\"comment\">// HELLO</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n","categories":["JDK"],"tags":["后端","JDK"]},{"title":"JDK19：新特性","url":"/JDK/JDK19%EF%BC%9A%E6%96%B0%E7%89%B9%E6%80%A7/","content":"<h2 id=\"预览特性\"><a href=\"#预览特性\" class=\"headerlink\" title=\"预览特性\"></a>预览特性</h2><h3 id=\"虚拟线程-1\"><a href=\"#虚拟线程-1\" class=\"headerlink\" title=\"虚拟线程 [1]\"></a>虚拟线程 [1]</h3><ul>\n<li>轻量级线程，由 JVM 管理，运行在少量平台线程上，支持百万级并发。</li>\n<li>阻塞操作（如 I&#x2F;O）不占用平台线程，简化高并发编程。</li>\n<li>兼容现有 <code>Thread</code> API 和 <code>ExecutorService</code>。<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span> (<span class=\"type\">var</span> <span class=\"variable\">executor</span> <span class=\"operator\">=</span> Executors.newVirtualThreadPerTaskExecutor()) &#123;</span><br><span class=\"line\">    executor.submit(() -&gt; System.out.println(<span class=\"string\">&quot;Task 1: &quot;</span> + Thread.currentThread()));</span><br><span class=\"line\">    executor.submit(() -&gt; System.out.println(<span class=\"string\">&quot;Task 2: &quot;</span> + Thread.currentThread()));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<span id=\"more\"></span>\n\n<h3 id=\"模式匹配-Switch-3\"><a href=\"#模式匹配-Switch-3\" class=\"headerlink\" title=\"模式匹配 Switch [3]\"></a>模式匹配 Switch [3]</h3><ul>\n<li>支持 <code>instanceof</code> 模式（如 <code>case String s</code>），引入 <code>null</code> 处理和守卫子句（<code>when</code>）。</li>\n<li>简化复杂条件逻辑，减少嵌套 <code>if-else</code>。<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Object</span> <span class=\"variable\">obj</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;Hello&quot;</span>;</span><br><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">result</span> <span class=\"operator\">=</span> <span class=\"keyword\">switch</span> (obj) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> String s when s.length() &gt; <span class=\"number\">3</span> -&gt; s.toUpperCase();</span><br><span class=\"line\">    <span class=\"keyword\">case</span> String s -&gt; s;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"literal\">null</span> -&gt; <span class=\"string\">&quot;Null&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">default</span> -&gt; <span class=\"string\">&quot;Other&quot;</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">System.out.println(result); <span class=\"comment\">// HELLO</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"模式匹配-Record-1\"><a href=\"#模式匹配-Record-1\" class=\"headerlink\" title=\"模式匹配 Record [1]\"></a>模式匹配 Record [1]</h3><ul>\n<li>支持在 <code>instanceof</code> 和 <code>switch</code> 中解构 <code>record</code> 组件。</li>\n<li>允许直接访问 <code>record</code> 的组件，减少手动 getter 调用。<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">record</span> <span class=\"title class_\">Point</span><span class=\"params\">(<span class=\"type\">int</span> x, <span class=\"type\">int</span> y)</span> &#123;&#125;</span><br><span class=\"line\"><span class=\"type\">Object</span> <span class=\"variable\">obj</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Point</span>(<span class=\"number\">3</span>, <span class=\"number\">4</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// instanceof 模式解构</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (obj <span class=\"keyword\">instanceof</span> <span class=\"title function_\">Point</span><span class=\"params\">(<span class=\"type\">int</span> x, <span class=\"type\">int</span> y)</span>) &#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;Point at (&quot;</span> + x + <span class=\"string\">&quot;, &quot;</span> + y + <span class=\"string\">&quot;)&quot;</span>); <span class=\"comment\">// Point at (3, 4)</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// switch 模式解构</span></span><br><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">result</span> <span class=\"operator\">=</span> <span class=\"keyword\">switch</span> (obj) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"title function_\">Point</span><span class=\"params\">(<span class=\"type\">int</span> x, <span class=\"type\">int</span> y)</span> when x == y -&gt; <span class=\"string\">&quot;Diagonal&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"title function_\">Point</span><span class=\"params\">(<span class=\"type\">int</span> x, <span class=\"type\">int</span> y)</span> -&gt; <span class=\"string\">&quot;Point(&quot;</span> + x + <span class=\"string\">&quot;, &quot;</span> + y + <span class=\"string\">&quot;)&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">default</span> -&gt; <span class=\"string\">&quot;Other&quot;</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">System.out.println(result); <span class=\"comment\">// Point(3, 4)</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"Foreign-Function-Memory-API（外部函数和内存）-1\"><a href=\"#Foreign-Function-Memory-API（外部函数和内存）-1\" class=\"headerlink\" title=\"Foreign Function &amp; Memory API（外部函数和内存） [1]\"></a>Foreign Function &amp; Memory API（外部函数和内存） [1]</h3><ul>\n<li>新增符号查找 API（<code>SymbolLookup</code>），简化库加载。支持动态内存分配（<code>SegmentAllocator</code>）。<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.lang.foreign.*;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">try</span> (<span class=\"type\">var</span> <span class=\"variable\">arena</span> <span class=\"operator\">=</span> Arena.ofConfined()) &#123;</span><br><span class=\"line\">    <span class=\"type\">var</span> <span class=\"variable\">str</span> <span class=\"operator\">=</span> arena.allocateUtf8String(<span class=\"string\">&quot;Hello&quot;</span>);</span><br><span class=\"line\">    <span class=\"type\">var</span> <span class=\"variable\">strlen</span> <span class=\"operator\">=</span> Linker.nativeLinker().downcallHandle(</span><br><span class=\"line\">        SymbolLookup.loaderLookup().find(<span class=\"string\">&quot;strlen&quot;</span>).get(),</span><br><span class=\"line\">        FunctionDescriptor.of(ValueLayout.JAVA_LONG, ValueLayout.ADDRESS));</span><br><span class=\"line\">    <span class=\"type\">long</span> <span class=\"variable\">len</span> <span class=\"operator\">=</span> (<span class=\"type\">long</span>) strlen.invoke(str);</span><br><span class=\"line\">    System.out.println(len); <span class=\"comment\">// 5</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n","categories":["JDK"],"tags":["后端","JDK"]},{"title":"JDK20：新特性","url":"/JDK/JDK20%EF%BC%9A%E6%96%B0%E7%89%B9%E6%80%A7/","content":"<h2 id=\"预览特性\"><a href=\"#预览特性\" class=\"headerlink\" title=\"预览特性\"></a>预览特性</h2><h3 id=\"虚拟线程-2\"><a href=\"#虚拟线程-2\" class=\"headerlink\" title=\"虚拟线程 [2]\"></a>虚拟线程 [2]</h3><ul>\n<li>轻量级线程，由 JVM 管理，运行在少量平台线程上，支持百万级并发。</li>\n<li>阻塞操作（如 I&#x2F;O）不占用平台线程，简化高并发编程。</li>\n<li>兼容现有 <code>Thread</code> API 和 <code>ExecutorService</code>。<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span> (<span class=\"type\">var</span> <span class=\"variable\">executor</span> <span class=\"operator\">=</span> Executors.newVirtualThreadPerTaskExecutor()) &#123;</span><br><span class=\"line\">    executor.submit(() -&gt; System.out.println(<span class=\"string\">&quot;Task 1: &quot;</span> + Thread.currentThread()));</span><br><span class=\"line\">    executor.submit(() -&gt; System.out.println(<span class=\"string\">&quot;Task 2: &quot;</span> + Thread.currentThread()));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<span id=\"more\"></span>\n\n<h3 id=\"模式匹配-Switch-4\"><a href=\"#模式匹配-Switch-4\" class=\"headerlink\" title=\"模式匹配 Switch [4]\"></a>模式匹配 Switch [4]</h3><ul>\n<li>支持 <code>instanceof</code> 模式（如 <code>case String s</code>），引入 <code>null</code> 处理和守卫子句（<code>when</code>）。</li>\n<li>简化复杂条件逻辑，减少嵌套 <code>if-else</code>。<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Object</span> <span class=\"variable\">obj</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;Hello&quot;</span>;</span><br><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">result</span> <span class=\"operator\">=</span> <span class=\"keyword\">switch</span> (obj) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> String s when s.length() &gt; <span class=\"number\">3</span> -&gt; s.toUpperCase();</span><br><span class=\"line\">    <span class=\"keyword\">case</span> String s -&gt; s;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"literal\">null</span> -&gt; <span class=\"string\">&quot;Null&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">default</span> -&gt; <span class=\"string\">&quot;Other&quot;</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">System.out.println(result); <span class=\"comment\">// HELLO</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"模式匹配-Record-2\"><a href=\"#模式匹配-Record-2\" class=\"headerlink\" title=\"模式匹配 Record [2]\"></a>模式匹配 Record [2]</h3><ul>\n<li>支持在 <code>instanceof</code> 和 <code>switch</code> 中解构 <code>record</code> 组件。</li>\n<li>允许直接访问 <code>record</code> 的组件，减少手动 getter 调用。<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">record</span> <span class=\"title class_\">Point</span><span class=\"params\">(<span class=\"type\">int</span> x, <span class=\"type\">int</span> y)</span> &#123;&#125;</span><br><span class=\"line\"><span class=\"type\">Object</span> <span class=\"variable\">obj</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Point</span>(<span class=\"number\">3</span>, <span class=\"number\">4</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// instanceof 模式解构</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (obj <span class=\"keyword\">instanceof</span> <span class=\"title function_\">Point</span><span class=\"params\">(<span class=\"type\">int</span> x, <span class=\"type\">int</span> y)</span>) &#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;Point at (&quot;</span> + x + <span class=\"string\">&quot;, &quot;</span> + y + <span class=\"string\">&quot;)&quot;</span>); <span class=\"comment\">// Point at (3, 4)</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// switch 模式解构</span></span><br><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">result</span> <span class=\"operator\">=</span> <span class=\"keyword\">switch</span> (obj) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"title function_\">Point</span><span class=\"params\">(<span class=\"type\">int</span> x, <span class=\"type\">int</span> y)</span> when x == y -&gt; <span class=\"string\">&quot;Diagonal&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"title function_\">Point</span><span class=\"params\">(<span class=\"type\">int</span> x, <span class=\"type\">int</span> y)</span> -&gt; <span class=\"string\">&quot;Point(&quot;</span> + x + <span class=\"string\">&quot;, &quot;</span> + y + <span class=\"string\">&quot;)&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">default</span> -&gt; <span class=\"string\">&quot;Other&quot;</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">System.out.println(result); <span class=\"comment\">// Point(3, 4)</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"Foreign-Function-Memory-API（外部函数和内存）-2\"><a href=\"#Foreign-Function-Memory-API（外部函数和内存）-2\" class=\"headerlink\" title=\"Foreign Function &amp; Memory API（外部函数和内存） [2]\"></a>Foreign Function &amp; Memory API（外部函数和内存） [2]</h3><ul>\n<li>统一 <code>MemorySegment</code> 和 <code>MemoryAddress</code> 抽象。</li>\n<li>改进 <code>MemoryLayout</code> 密封层次结构，支持模式匹配。</li>\n<li>分离 <code>MemorySession</code> 为 <code>Arena</code> 和 <code>SegmentScope</code>。<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.lang.foreign.*;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">try</span> (<span class=\"type\">var</span> <span class=\"variable\">arena</span> <span class=\"operator\">=</span> Arena.ofConfined()) &#123;</span><br><span class=\"line\">    <span class=\"type\">var</span> <span class=\"variable\">str</span> <span class=\"operator\">=</span> arena.allocateUtf8String(<span class=\"string\">&quot;Hello&quot;</span>);</span><br><span class=\"line\">    <span class=\"type\">var</span> <span class=\"variable\">strlen</span> <span class=\"operator\">=</span> Linker.nativeLinker().downcallHandle(</span><br><span class=\"line\">        SymbolLookup.loaderLookup().find(<span class=\"string\">&quot;strlen&quot;</span>).get(),</span><br><span class=\"line\">        FunctionDescriptor.of(ValueLayout.JAVA_LONG, ValueLayout.ADDRESS));</span><br><span class=\"line\">    <span class=\"type\">long</span> <span class=\"variable\">len</span> <span class=\"operator\">=</span> (<span class=\"type\">long</span>) strlen.invoke(str);</span><br><span class=\"line\">    System.out.println(len); <span class=\"comment\">// 5</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n","categories":["JDK"],"tags":["后端","JDK"]},{"title":"JDK21：新特性","url":"/JDK/JDK21%EF%BC%9A%E6%96%B0%E7%89%B9%E6%80%A7/","content":"<h2 id=\"正式特性\"><a href=\"#正式特性\" class=\"headerlink\" title=\"正式特性\"></a>正式特性</h2><h3 id=\"虚拟线程\"><a href=\"#虚拟线程\" class=\"headerlink\" title=\"虚拟线程\"></a>虚拟线程</h3><ul>\n<li>轻量级线程，由 JVM 管理，运行在少量平台线程上，支持百万级并发。</li>\n<li>阻塞操作（如 I&#x2F;O）不占用平台线程，简化高并发编程。</li>\n<li>兼容现有 <code>Thread</code> API 和 <code>ExecutorService</code>。<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span> (<span class=\"type\">var</span> <span class=\"variable\">executor</span> <span class=\"operator\">=</span> Executors.newVirtualThreadPerTaskExecutor()) &#123;</span><br><span class=\"line\">    executor.submit(() -&gt; System.out.println(<span class=\"string\">&quot;Task 1: &quot;</span> + Thread.currentThread()));</span><br><span class=\"line\">    executor.submit(() -&gt; System.out.println(<span class=\"string\">&quot;Task 2: &quot;</span> + Thread.currentThread()));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<span id=\"more\"></span>\n<h3 id=\"模式匹配-Switch\"><a href=\"#模式匹配-Switch\" class=\"headerlink\" title=\"模式匹配 Switch\"></a>模式匹配 Switch</h3><ul>\n<li>支持 <code>instanceof</code> 模式（如 <code>case String s</code>），引入 <code>null</code> 处理和守卫子句（<code>when</code>）。</li>\n<li>简化复杂条件逻辑，减少嵌套 <code>if-else</code>。<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Object</span> <span class=\"variable\">obj</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;Hello&quot;</span>;</span><br><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">result</span> <span class=\"operator\">=</span> <span class=\"keyword\">switch</span> (obj) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> String s when s.length() &gt; <span class=\"number\">3</span> -&gt; s.toUpperCase();</span><br><span class=\"line\">    <span class=\"keyword\">case</span> String s -&gt; s;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"literal\">null</span> -&gt; <span class=\"string\">&quot;Null&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">default</span> -&gt; <span class=\"string\">&quot;Other&quot;</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">System.out.println(result); <span class=\"comment\">// HELLO</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"模式匹配-Record\"><a href=\"#模式匹配-Record\" class=\"headerlink\" title=\"模式匹配 Record\"></a>模式匹配 Record</h3><ul>\n<li>支持在 <code>instanceof</code> 和 <code>switch</code> 中解构 <code>record</code> 组件，访问字段。</li>\n<li>支持嵌套记录模式、泛型记录和增强型 <code>for</code> 循环。</li>\n<li>简化复杂数据结构处理，减少样板代码。<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">record</span> <span class=\"title class_\">Point</span><span class=\"params\">(<span class=\"type\">int</span> x, <span class=\"type\">int</span> y)</span> &#123;&#125;</span><br><span class=\"line\"><span class=\"type\">Object</span> <span class=\"variable\">obj</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Point</span>(<span class=\"number\">3</span>, <span class=\"number\">4</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// instanceof 模式解构</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (obj <span class=\"keyword\">instanceof</span> <span class=\"title function_\">Point</span><span class=\"params\">(<span class=\"type\">int</span> x, <span class=\"type\">int</span> y)</span>) &#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;Point at (&quot;</span> + x + <span class=\"string\">&quot;, &quot;</span> + y + <span class=\"string\">&quot;)&quot;</span>); <span class=\"comment\">// Point at (3, 4)</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// switch 模式解构</span></span><br><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">result</span> <span class=\"operator\">=</span> <span class=\"keyword\">switch</span> (obj) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"title function_\">Point</span><span class=\"params\">(<span class=\"type\">int</span> x, <span class=\"type\">int</span> y)</span> when x == y -&gt; <span class=\"string\">&quot;Diagonal&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"title function_\">Point</span><span class=\"params\">(<span class=\"type\">int</span> x, <span class=\"type\">int</span> y)</span> -&gt; <span class=\"string\">&quot;Point(&quot;</span> + x + <span class=\"string\">&quot;, &quot;</span> + y + <span class=\"string\">&quot;)&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">default</span> -&gt; <span class=\"string\">&quot;Other&quot;</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">System.out.println(result); <span class=\"comment\">// Point(3, 4)</span></span><br></pre></td></tr></table></figure></li>\n<li><strong>与 instanceof 和 switch 模式匹配的关系</strong>：<ul>\n<li><strong>JDK 16</strong>：模式匹配 <code>instanceof</code>，支持 <code>if (obj instanceof String s)</code></li>\n<li><strong>JDK 17-21</strong>：模式匹配 <code>switch</code>，支持类型匹配和 <code>when</code>，支持 <code>record</code> 解构，增强类型推断和 <code>for</code> 循环支持</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"Sequenced-Collections\"><a href=\"#Sequenced-Collections\" class=\"headerlink\" title=\"Sequenced Collections\"></a>Sequenced Collections</h3><ul>\n<li>引入 <code>SequencedCollection</code>、<code>SequencedSet</code> 和 <code>SequencedMap</code> 接口，统一有序集合操作。<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.*;</span><br><span class=\"line\"></span><br><span class=\"line\">SequencedCollection&lt;String&gt; list = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;(List.of(<span class=\"string\">&quot;b&quot;</span>, <span class=\"string\">&quot;c&quot;</span>));</span><br><span class=\"line\">list.addFirst(<span class=\"string\">&quot;a&quot;</span>);</span><br><span class=\"line\">list.addLast(<span class=\"string\">&quot;d&quot;</span>);</span><br><span class=\"line\">System.out.println(list); <span class=\"comment\">// [a, b, c, d]</span></span><br><span class=\"line\">System.out.println(list.reversed()); <span class=\"comment\">// [d, c, b, a]</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"密钥封装机制-API\"><a href=\"#密钥封装机制-API\" class=\"headerlink\" title=\"密钥封装机制 API\"></a>密钥封装机制 API</h3><ul>\n<li>支持后量子密码学，支持 DHKEM（Diffie-Hellman KEM）算法，适用于安全通信、TLS、VPN。<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> javax.crypto.*;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">KeyPairGenerator</span> <span class=\"variable\">kpg</span> <span class=\"operator\">=</span> KeyPairGenerator.getInstance(<span class=\"string\">&quot;DHKEM&quot;</span>);</span><br><span class=\"line\"><span class=\"type\">KeyPair</span> <span class=\"variable\">kp</span> <span class=\"operator\">=</span> kpg.generateKeyPair();</span><br><span class=\"line\"><span class=\"type\">KEM</span> <span class=\"variable\">kem</span> <span class=\"operator\">=</span> KEM.getInstance(<span class=\"string\">&quot;DHKEM&quot;</span>);</span><br><span class=\"line\">KEM.<span class=\"type\">Encapsulated</span> <span class=\"variable\">enc</span> <span class=\"operator\">=</span> kem.encapsulate(kp.getPublic());</span><br><span class=\"line\">System.out.println(enc.key()); <span class=\"comment\">// 共享密钥</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"预览特性\"><a href=\"#预览特性\" class=\"headerlink\" title=\"预览特性\"></a>预览特性</h2><h3 id=\"结构化并发-API-1\"><a href=\"#结构化并发-API-1\" class=\"headerlink\" title=\"结构化并发 API [1]\"></a>结构化并发 API [1]</h3><ul>\n<li>简化多线程任务的协调和管理，使用 <code>StructuredTaskScope</code> 组织子任务，确保任务完成或失败时统一处理。<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.*;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">try</span> (<span class=\"type\">var</span> <span class=\"variable\">scope</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">StructuredTaskScope</span>.ShutdownOnFailure()) &#123;</span><br><span class=\"line\">    <span class=\"type\">var</span> <span class=\"variable\">task1</span> <span class=\"operator\">=</span> scope.fork(() -&gt; <span class=\"string\">&quot;Result 1&quot;</span>);</span><br><span class=\"line\">    <span class=\"type\">var</span> <span class=\"variable\">task2</span> <span class=\"operator\">=</span> scope.fork(() -&gt; <span class=\"string\">&quot;Result 2&quot;</span>);</span><br><span class=\"line\">    scope.join().throwIfFailed();</span><br><span class=\"line\">    System.out.println(task1.get() + <span class=\"string\">&quot;, &quot;</span> + task2.get()); <span class=\"comment\">// Result 1, Result 2</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"Scoped-Values-1\"><a href=\"#Scoped-Values-1\" class=\"headerlink\" title=\"Scoped Values [1]\"></a>Scoped Values [1]</h3><ul>\n<li>提供不可变数据在线程间的安全共享，替代 <code>ThreadLocal</code>，适合虚拟线程场景。</li>\n<li>数据绑定到作用域，自动清理，防止内存泄漏；提供只读访问，确保线程安全性。<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.StructuredTaskScope;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ScopedValueExample</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> ScopedValue&lt;String&gt; USER = ScopedValue.newInstance();</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        ScopedValue.runWhere(USER, <span class=\"string\">&quot;Alice&quot;</span>, () -&gt; &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;User: &quot;</span> + USER.get()); <span class=\"comment\">// User: Alice</span></span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"Foreign-Function-Memory-API（外部函数和内存）-3\"><a href=\"#Foreign-Function-Memory-API（外部函数和内存）-3\" class=\"headerlink\" title=\"Foreign Function &amp; Memory API（外部函数和内存） [3]\"></a>Foreign Function &amp; Memory API（外部函数和内存） [3]</h3><ul>\n<li>改进异常处理，添加 <code>Linker.Option</code> 捕获异常。</li>\n<li>优化 <code>Arena API</code>，支持异步关闭。</li>\n<li>增强内存布局模式匹配。<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.lang.foreign.*;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">try</span> (<span class=\"type\">var</span> <span class=\"variable\">arena</span> <span class=\"operator\">=</span> Arena.ofConfined()) &#123;</span><br><span class=\"line\">    <span class=\"type\">var</span> <span class=\"variable\">str</span> <span class=\"operator\">=</span> arena.allocateUtf8String(<span class=\"string\">&quot;Hello&quot;</span>);</span><br><span class=\"line\">    <span class=\"type\">var</span> <span class=\"variable\">strlen</span> <span class=\"operator\">=</span> Linker.nativeLinker().downcallHandle(</span><br><span class=\"line\">        SymbolLookup.loaderLookup().find(<span class=\"string\">&quot;strlen&quot;</span>).get(),</span><br><span class=\"line\">        FunctionDescriptor.of(ValueLayout.JAVA_LONG, ValueLayout.ADDRESS));</span><br><span class=\"line\">    <span class=\"type\">long</span> <span class=\"variable\">len</span> <span class=\"operator\">=</span> (<span class=\"type\">long</span>) strlen.invoke(str);</span><br><span class=\"line\">    System.out.println(len); <span class=\"comment\">// 5</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"未命名模式和变量-1\"><a href=\"#未命名模式和变量-1\" class=\"headerlink\" title=\"未命名模式和变量 [1]\"></a>未命名模式和变量 [1]</h3><ul>\n<li>引入未命名模式和变量（<code>_</code>），忽略无关字段。在 <code>instanceof</code>、<code>switch</code> 和 <code>catch</code> 中忽略未使用变量。<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">record</span> <span class=\"title class_\">Pair</span><span class=\"params\">(Object left, Object right)</span> &#123;&#125;</span><br><span class=\"line\"><span class=\"type\">Object</span> <span class=\"variable\">obj</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Pair</span>(<span class=\"string\">&quot;A&quot;</span>, <span class=\"string\">&quot;B&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (obj <span class=\"keyword\">instanceof</span> <span class=\"title function_\">Pair</span><span class=\"params\">(_, <span class=\"keyword\">var</span> right)</span>) &#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;Right: &quot;</span> + right); <span class=\"comment\">// Right: B</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    Integer.parseInt(<span class=\"string\">&quot;123&quot;</span>);</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> (NumberFormatException _) &#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;Invalid number&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"字符串模板-1\"><a href=\"#字符串模板-1\" class=\"headerlink\" title=\"字符串模板 [1]\"></a>字符串模板 [1]</h3><ul>\n<li>简化字符串插值和格式化，使用 <code>STR</code> 处理器进行插值，支持嵌入表达式，可扩展为 JSON、SQL 等专用处理器。<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">name</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;Alice&quot;</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"variable\">age</span> <span class=\"operator\">=</span> <span class=\"number\">30</span>;</span><br><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">message</span> <span class=\"operator\">=</span> STR.<span class=\"string\">&quot;Hello, \\&#123;name&#125;! You are \\&#123;age&#125; years old.&quot;</span>;</span><br><span class=\"line\">System.out.println(message); <span class=\"comment\">// Hello, Alice! You are 30 years old.</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n","categories":["JDK"],"tags":["后端","JDK"]},{"title":"JDK22：新特性","url":"/JDK/JDK22%EF%BC%9A%E6%96%B0%E7%89%B9%E6%80%A7/","content":"<h2 id=\"正式特性\"><a href=\"#正式特性\" class=\"headerlink\" title=\"正式特性\"></a>正式特性</h2><h3 id=\"Foreign-Function-Memory-API（外部函数和内存）\"><a href=\"#Foreign-Function-Memory-API（外部函数和内存）\" class=\"headerlink\" title=\"Foreign Function &amp; Memory API（外部函数和内存）\"></a>Foreign Function &amp; Memory API（外部函数和内存）</h3><ul>\n<li>提供高效的本地函数调用和堆外内存管理，替代 JNI。</li>\n<li>新增支持任意字符集、C 函数描述符动态构建、<code>Enable-Native-Access</code> JAR 清单属性。</li>\n<li>支持向本地函数传递堆内存段。<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.lang.foreign.*;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.invoke.MethodHandle;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">try</span> (<span class=\"type\">var</span> <span class=\"variable\">arena</span> <span class=\"operator\">=</span> Arena.ofConfined()) &#123;</span><br><span class=\"line\">    <span class=\"type\">var</span> <span class=\"variable\">str</span> <span class=\"operator\">=</span> arena.allocateUtf8String(<span class=\"string\">&quot;Hello&quot;</span>);</span><br><span class=\"line\">    <span class=\"type\">var</span> <span class=\"variable\">strlen</span> <span class=\"operator\">=</span> Linker.nativeLinker().downcallHandle(</span><br><span class=\"line\">        SymbolLookup.loaderLookup().find(<span class=\"string\">&quot;strlen&quot;</span>).orElseThrow(),</span><br><span class=\"line\">        FunctionDescriptor.of(ValueLayout.JAVA_LONG, ValueLayout.ADDRESS));</span><br><span class=\"line\">    <span class=\"type\">long</span> <span class=\"variable\">len</span> <span class=\"operator\">=</span> (<span class=\"type\">long</span>) strlen.invoke(str);</span><br><span class=\"line\">    System.out.println(len); <span class=\"comment\">// 5</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<span id=\"more\"></span>\n\n<h3 id=\"未命名模式和变量\"><a href=\"#未命名模式和变量\" class=\"headerlink\" title=\"未命名模式和变量\"></a>未命名模式和变量</h3><ul>\n<li>引入未命名模式和变量（<code>_</code>），忽略无关字段。在 <code>instanceof</code>、<code>switch</code> 和 <code>catch</code> 中忽略未使用变量。<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">record</span> <span class=\"title class_\">Pair</span><span class=\"params\">(Object left, Object right)</span> &#123;&#125;</span><br><span class=\"line\"><span class=\"type\">Object</span> <span class=\"variable\">obj</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Pair</span>(<span class=\"string\">&quot;A&quot;</span>, <span class=\"string\">&quot;B&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (obj <span class=\"keyword\">instanceof</span> <span class=\"title function_\">Pair</span><span class=\"params\">(_, <span class=\"keyword\">var</span> right)</span>) &#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;Right: &quot;</span> + right); <span class=\"comment\">// Right: B</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    Integer.parseInt(<span class=\"string\">&quot;123&quot;</span>);</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> (NumberFormatException _) &#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;Invalid number&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"启动多文件源代码程序\"><a href=\"#启动多文件源代码程序\" class=\"headerlink\" title=\"启动多文件源代码程序\"></a>启动多文件源代码程序</h3><ul>\n<li>允许 <code>java</code> 命令直接运行包含多个源文件的程序。<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"># 目录包含 Main.java 和 Helper.java</span><br><span class=\"line\">java Main.java</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"预览特性\"><a href=\"#预览特性\" class=\"headerlink\" title=\"预览特性\"></a>预览特性</h2><h3 id=\"结构化并发-API-2\"><a href=\"#结构化并发-API-2\" class=\"headerlink\" title=\"结构化并发 API [2]\"></a>结构化并发 API [2]</h3><ul>\n<li>简化多线程任务的协调和管理，使用 <code>StructuredTaskScope</code> 组织子任务，确保任务完成或失败时统一处理。<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.*;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">try</span> (<span class=\"type\">var</span> <span class=\"variable\">scope</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">StructuredTaskScope</span>.ShutdownOnFailure()) &#123;</span><br><span class=\"line\">    <span class=\"type\">var</span> <span class=\"variable\">task1</span> <span class=\"operator\">=</span> scope.fork(() -&gt; <span class=\"string\">&quot;Result 1&quot;</span>);</span><br><span class=\"line\">    <span class=\"type\">var</span> <span class=\"variable\">task2</span> <span class=\"operator\">=</span> scope.fork(() -&gt; <span class=\"string\">&quot;Result 2&quot;</span>);</span><br><span class=\"line\">    scope.join().throwIfFailed();</span><br><span class=\"line\">    System.out.println(task1.get() + <span class=\"string\">&quot;, &quot;</span> + task2.get()); <span class=\"comment\">// Result 1, Result 2</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"Scoped-Values-2\"><a href=\"#Scoped-Values-2\" class=\"headerlink\" title=\"Scoped Values [2]\"></a>Scoped Values [2]</h3><ul>\n<li>提供不可变数据在线程间的安全共享，替代 <code>ThreadLocal</code>，适合虚拟线程场景。</li>\n<li>数据绑定到作用域，自动清理，防止内存泄漏；提供只读访问，确保线程安全性。<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.*;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ScopedValueExample</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> ScopedValue&lt;String&gt; USER = ScopedValue.newInstance();</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        ScopedValue.runWhere(USER, <span class=\"string\">&quot;Alice&quot;</span>, () -&gt; &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;User: &quot;</span> + USER.get()); <span class=\"comment\">// User: Alice</span></span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"增强-构造函数主体-1\"><a href=\"#增强-构造函数主体-1\" class=\"headerlink\" title=\"增强 构造函数主体 [1]\"></a>增强 构造函数主体 [1]</h3><ul>\n<li>允许在构造函数中 <code>super(...)</code> 之前执行不引用实例的语句。<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Parent</span> &#123;</span><br><span class=\"line\">    Parent() &#123; System.out.println(<span class=\"string\">&quot;Parent init&quot;</span>); &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Child</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Parent</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> value;</span><br><span class=\"line\">    Child(<span class=\"type\">int</span> value) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (value &lt; <span class=\"number\">0</span>) <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">IllegalArgumentException</span>(<span class=\"string\">&quot;Negative value&quot;</span>);</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.value = value;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"增强-Main方法-1\"><a href=\"#增强-Main方法-1\" class=\"headerlink\" title=\"增强 Main方法 [1]\"></a>增强 Main方法 [1]</h3><ul>\n<li>允许无显式类声明和 <code>main</code> 方法。<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;Hello, World!&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"增强-Stream-API-1\"><a href=\"#增强-Stream-API-1\" class=\"headerlink\" title=\"增强 Stream API [1]\"></a>增强 Stream API [1]</h3><ul>\n<li>新增 <code>gather</code>方法，把原始流切片成若干个 List。<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">var</span> <span class=\"variable\">result</span> <span class=\"operator\">=</span> Stream.of(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>)</span><br><span class=\"line\">    .gather(Gatherers.windowFixed(<span class=\"number\">2</span>))\t<span class=\"comment\">// 按 每两项一组 的方式输出[[1,2][3,4]]</span></span><br><span class=\"line\">    .map(window -&gt; window.stream().mapToInt(Integer::intValue).sum())</span><br><span class=\"line\">    .toList();</span><br><span class=\"line\">System.out.println(result); <span class=\"comment\">// [3, 7]</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"Class-File-API-1\"><a href=\"#Class-File-API-1\" class=\"headerlink\" title=\"Class-File API [1]\"></a>Class-File API [1]</h3><ul>\n<li>引入 <code>java.lang.classfile</code> 包，提供解析、生成和转换类文件的 API。<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.lang.classfile.*;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">ClassModel</span> <span class=\"variable\">classModel</span> <span class=\"operator\">=</span> ClassFile.of().parse(MyClass.class.getResourceAsStream(<span class=\"string\">&quot;MyClass.class&quot;</span>));</span><br><span class=\"line\">System.out.println(classModel.className()); <span class=\"comment\">// MyClass</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"字符串模板-2\"><a href=\"#字符串模板-2\" class=\"headerlink\" title=\"字符串模板 [2]\"></a>字符串模板 [2]</h3><ul>\n<li>简化字符串插值和格式化，使用 <code>STR</code> 处理器进行插值，支持嵌入表达式，可扩展为 JSON、SQL 等专用处理器。<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">name</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;Alice&quot;</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"variable\">age</span> <span class=\"operator\">=</span> <span class=\"number\">30</span>;</span><br><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">message</span> <span class=\"operator\">=</span> STR.<span class=\"string\">&quot;Hello, \\&#123;name&#125;! You are \\&#123;age&#125; years old.&quot;</span>;</span><br><span class=\"line\">System.out.println(message); <span class=\"comment\">// Hello, Alice! You are 30 years old.</span></span><br></pre></td></tr></table></figure></li>\n<li><strong>注意</strong>：JDK 23 因设计问题<strong>移除</strong>，计划重新设计。</li>\n</ul>\n","categories":["JDK"],"tags":["后端","JDK"]},{"title":"JDK23：新特性","url":"/JDK/JDK23%EF%BC%9A%E6%96%B0%E7%89%B9%E6%80%A7/","content":"<h2 id=\"正式特性\"><a href=\"#正式特性\" class=\"headerlink\" title=\"正式特性\"></a>正式特性</h2><h3 id=\"Markdown文档注释\"><a href=\"#Markdown文档注释\" class=\"headerlink\" title=\"Markdown文档注释\"></a>Markdown文档注释</h3><ul>\n<li>支持在 <code>JavaDoc</code> 中使用 <code>Markdown</code> 格式，支持 <code>Markdown</code> 列表、表格、代码块等，替代 <code>HTML</code> 和 <code>@tag</code>，简化文档编写<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * # Example Class</span></span><br><span class=\"line\"><span class=\"comment\"> * This class demonstrates Markdown in JavaDoc.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * - Item 1</span></span><br><span class=\"line\"><span class=\"comment\"> * - Item 2</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * ```java</span></span><br><span class=\"line\"><span class=\"comment\"> * System.out.println(&quot;Hello&quot;);</span></span><br><span class=\"line\"><span class=\"comment\"> * ``</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Example</span> &#123;&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<span id=\"more\"></span>\n\n<h2 id=\"预览特性\"><a href=\"#预览特性\" class=\"headerlink\" title=\"预览特性\"></a>预览特性</h2><h3 id=\"结构化并发-API-3\"><a href=\"#结构化并发-API-3\" class=\"headerlink\" title=\"结构化并发 API [3]\"></a>结构化并发 API [3]</h3><ul>\n<li>简化多线程任务的协调和管理，使用 <code>StructuredTaskScope</code> 组织子任务，确保任务完成或失败时统一处理<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.*;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">try</span> (<span class=\"type\">var</span> <span class=\"variable\">scope</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">StructuredTaskScope</span>.ShutdownOnFailure()) &#123;</span><br><span class=\"line\">    <span class=\"type\">var</span> <span class=\"variable\">task1</span> <span class=\"operator\">=</span> scope.fork(() -&gt; <span class=\"string\">&quot;Result 1&quot;</span>);</span><br><span class=\"line\">    <span class=\"type\">var</span> <span class=\"variable\">task2</span> <span class=\"operator\">=</span> scope.fork(() -&gt; <span class=\"string\">&quot;Result 2&quot;</span>);</span><br><span class=\"line\">    scope.join().throwIfFailed();</span><br><span class=\"line\">    System.out.println(task1.get() + <span class=\"string\">&quot;, &quot;</span> + task2.get()); <span class=\"comment\">// Result 1, Result 2</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"Scoped-Values-3\"><a href=\"#Scoped-Values-3\" class=\"headerlink\" title=\"Scoped Values [3]\"></a>Scoped Values [3]</h3><ul>\n<li>提供不可变数据在线程间的安全共享，替代 <code>ThreadLocal</code>，适合虚拟线程场景。</li>\n<li>数据绑定到作用域，自动清理，防止内存泄漏；提供只读访问，确保线程安全性。<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.*;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ScopedValueExample</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> ScopedValue&lt;String&gt; USER = ScopedValue.newInstance();</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        ScopedValue.runWhere(USER, <span class=\"string\">&quot;Alice&quot;</span>, () -&gt; &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;User: &quot;</span> + USER.get()); <span class=\"comment\">// User: Alice</span></span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"增强-构造函数主体-2\"><a href=\"#增强-构造函数主体-2\" class=\"headerlink\" title=\"增强 构造函数主体 [2]\"></a>增强 构造函数主体 [2]</h3><ul>\n<li>允许构造函数在 <code>super()</code> 或 <code>this()</code> 之前执行不引用实例的语句。<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Parent</span> &#123;</span><br><span class=\"line\">    Parent() &#123; System.out.println(<span class=\"string\">&quot;Parent init&quot;</span>); &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Child</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Parent</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> value;</span><br><span class=\"line\">    Child(<span class=\"type\">int</span> value) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (value &lt; <span class=\"number\">0</span>) <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">IllegalArgumentException</span>(<span class=\"string\">&quot;Negative value&quot;</span>);</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.value = value;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"增强-Main方法-2\"><a href=\"#增强-Main方法-2\" class=\"headerlink\" title=\"增强 Main方法 [2]\"></a>增强 Main方法 [2]</h3><ul>\n<li>支持无 <code>class</code> 声明的顶级程序。</li>\n<li>自动导入 <code>java.base</code> 的所有导出包和三个静态 I&#x2F;O 方法（print、println、printf）。<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    println(<span class=\"string\">&quot;Hello, World!&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"增强-Stream-API-2\"><a href=\"#增强-Stream-API-2\" class=\"headerlink\" title=\"增强 Stream API [2]\"></a>增强 Stream API [2]</h3><ul>\n<li>新增 <code>gather</code>方法，把原始流切片成若干个 List。<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">var</span> <span class=\"variable\">result</span> <span class=\"operator\">=</span> Stream.of(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>)</span><br><span class=\"line\">    .gather(Gatherers.windowFixed(<span class=\"number\">2</span>))\t<span class=\"comment\">// 按 每两项一组 的方式输出[[1,2][3,4]]</span></span><br><span class=\"line\">    .map(window -&gt; window.stream().mapToInt(Integer::intValue).sum())</span><br><span class=\"line\">    .toList();</span><br><span class=\"line\">System.out.println(result); <span class=\"comment\">// [3, 7]</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"Class-File-API-2\"><a href=\"#Class-File-API-2\" class=\"headerlink\" title=\"Class-File API [2]\"></a>Class-File API [2]</h3><ul>\n<li>引入 <code>java.lang.classfile</code> 包，提供解析、生成和转换类文件的 API。<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.lang.classfile.*;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">ClassModel</span> <span class=\"variable\">classModel</span> <span class=\"operator\">=</span> ClassFile.of().parse(MyClass.class.getResourceAsStream(<span class=\"string\">&quot;MyClass.class&quot;</span>));</span><br><span class=\"line\">System.out.println(classModel.className()); <span class=\"comment\">// MyClass</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"增强-模式匹配-1\"><a href=\"#增强-模式匹配-1\" class=\"headerlink\" title=\"增强 模式匹配 [1]\"></a>增强 模式匹配 [1]</h3><ul>\n<li>允许所有原始类型（<code>byte、short、int、long、float、double、char、boolean</code>）在 <code>instanceof</code> 和 <code>switch</code> 中使用。</li>\n<li>提供安全类型转换，消除不安全转换的风险。<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Object</span> <span class=\"variable\">obj</span> <span class=\"operator\">=</span> <span class=\"number\">42</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// instanceof 模式匹配</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (obj <span class=\"keyword\">instanceof</span> <span class=\"type\">int</span> i) &#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;Integer: &quot;</span> + i); <span class=\"comment\">// Integer: 42</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// switch 模式匹配</span></span><br><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">result</span> <span class=\"operator\">=</span> <span class=\"keyword\">switch</span> (obj) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"type\">int</span> i when i &gt; <span class=\"number\">0</span> -&gt; <span class=\"string\">&quot;Positive int: &quot;</span> + i;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"type\">int</span> i -&gt; <span class=\"string\">&quot;Non-positive int: &quot;</span> + i;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"type\">long</span> l -&gt; <span class=\"string\">&quot;Long: &quot;</span> + l;</span><br><span class=\"line\">    <span class=\"keyword\">default</span> -&gt; <span class=\"string\">&quot;Other&quot;</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">System.out.println(result); <span class=\"comment\">// Positive int: 42</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"模块导入声明-1\"><a href=\"#模块导入声明-1\" class=\"headerlink\" title=\"模块导入声明 [1]\"></a>模块导入声明 [1]</h3><ul>\n<li>使用 <code>import module &lt;module-name&gt;;</code> 导入模块（如 <code>java.base</code>）的所有导出包。<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"keyword\">module</span> java.base;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Example</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        List&lt;String&gt; list = Arrays.asList(<span class=\"string\">&quot;a&quot;</span>, <span class=\"string\">&quot;b&quot;</span>);</span><br><span class=\"line\">        System.out.println(list); <span class=\"comment\">// [a, b]</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n","categories":["JDK"],"tags":["后端","JDK"]},{"title":"JDK24：新特性","url":"/JDK/JDK24%EF%BC%9A%E6%96%B0%E7%89%B9%E6%80%A7/","content":"<h2 id=\"正式特性\"><a href=\"#正式特性\" class=\"headerlink\" title=\"正式特性\"></a>正式特性</h2><h3 id=\"增强-Stream-API\"><a href=\"#增强-Stream-API\" class=\"headerlink\" title=\"增强 Stream API\"></a>增强 Stream API</h3><ul>\n<li>新增 <code>gather</code>方法，把原始流切片成若干个 List。<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">var</span> <span class=\"variable\">result</span> <span class=\"operator\">=</span> Stream.of(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>)</span><br><span class=\"line\">    .gather(Gatherers.windowFixed(<span class=\"number\">2</span>))\t<span class=\"comment\">// 按 每两项一组 的方式输出[[1,2][3,4]]</span></span><br><span class=\"line\">    .map(window -&gt; window.stream().mapToInt(Integer::intValue).sum())</span><br><span class=\"line\">    .toList();</span><br><span class=\"line\">System.out.println(result); <span class=\"comment\">// [3, 7]</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<span id=\"more\"></span>\n\n<h3 id=\"Class-File-API\"><a href=\"#Class-File-API\" class=\"headerlink\" title=\"Class-File API\"></a>Class-File API</h3><ul>\n<li>引入 <code>java.lang.classfile</code> 包，提供解析、生成和转换类文件的 API，适用于字节码操作、框架开发（如 Spring、Hibernate）。<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.lang.classfile.*;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">ClassModel</span> <span class=\"variable\">classModel</span> <span class=\"operator\">=</span> ClassFile.of().parse(MyClass.class.getResourceAsStream(<span class=\"string\">&quot;MyClass.class&quot;</span>));</span><br><span class=\"line\">System.out.println(classModel.className()); <span class=\"comment\">// MyClass</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"提前类加载和链接\"><a href=\"#提前类加载和链接\" class=\"headerlink\" title=\"提前类加载和链接\"></a>提前类加载和链接</h3><ul>\n<li>提前加载和链接类，缓存结果以加速 JVM 启动。<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"># 首次运行生成缓存</span><br><span class=\"line\">java -XX:+UseAOTClassCache -jar app.jar</span><br><span class=\"line\"># 后续运行使用缓存</span><br><span class=\"line\">java -XX:+UseAOTClassCache -jar app.jar</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"Key-Derivation-Function-API\"><a href=\"#Key-Derivation-Function-API\" class=\"headerlink\" title=\"Key Derivation Function API\"></a>Key Derivation Function API</h3><ul>\n<li>引入 <code>javax.crypto.KDF</code> 类，支持密钥派生函数（KDF），支持 HMAC-based（HKDF-SHA256）和 Argon2 算法。<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> javax.crypto.*;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">byte</span>[] password = <span class=\"string\">&quot;secret&quot;</span>.getBytes();</span><br><span class=\"line\"><span class=\"type\">byte</span>[] salt = <span class=\"keyword\">new</span> <span class=\"title class_\">byte</span>[<span class=\"number\">16</span>];</span><br><span class=\"line\"><span class=\"type\">KDF</span> <span class=\"variable\">kdf</span> <span class=\"operator\">=</span> KDF.getInstance(<span class=\"string\">&quot;HKDF-SHA256&quot;</span>);</span><br><span class=\"line\"><span class=\"type\">SecretKey</span> <span class=\"variable\">key</span> <span class=\"operator\">=</span> kdf.deriveKey(password, salt, <span class=\"literal\">null</span>, <span class=\"number\">256</span>);</span><br><span class=\"line\">System.out.println(key.getAlgorithm()); <span class=\"comment\">// AES</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"量子抗性数字签名算法\"><a href=\"#量子抗性数字签名算法\" class=\"headerlink\" title=\"量子抗性数字签名算法\"></a>量子抗性数字签名算法</h3><ul>\n<li>实现量子抗性数字签名算法 ML-DSA。</li>\n<li>通过 <code>KeyPairGenerator</code>、<code>Signature</code> 和 <code>KeyFactory</code> 提供 ML-DSA 实现，防御未来量子计算攻击。<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.security.*;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">KeyPairGenerator</span> <span class=\"variable\">kpg</span> <span class=\"operator\">=</span> KeyPairGenerator.getInstance(<span class=\"string\">&quot;ML-DSA&quot;</span>);</span><br><span class=\"line\"><span class=\"type\">KeyPair</span> <span class=\"variable\">kp</span> <span class=\"operator\">=</span> kpg.generateKeyPair();</span><br><span class=\"line\"><span class=\"type\">Signature</span> <span class=\"variable\">sig</span> <span class=\"operator\">=</span> Signature.getInstance(<span class=\"string\">&quot;ML-DSA&quot;</span>);</span><br><span class=\"line\">sig.initSign(kp.getPrivate());</span><br><span class=\"line\">sig.update(<span class=\"string\">&quot;data&quot;</span>.getBytes());</span><br><span class=\"line\"><span class=\"type\">byte</span>[] signature = sig.sign();</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"量子抗性密钥封装机制\"><a href=\"#量子抗性密钥封装机制\" class=\"headerlink\" title=\"量子抗性密钥封装机制\"></a>量子抗性密钥封装机制</h3><ul>\n<li>实现量子抗性密钥封装机制 ML-KEM。</li>\n<li>使用公钥加密保护对称密钥，与 ML-DSA 共同提升后量子加密。<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> javax.crypto.*;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">KeyPairGenerator</span> <span class=\"variable\">kpg</span> <span class=\"operator\">=</span> KeyPairGenerator.getInstance(<span class=\"string\">&quot;ML-KEM&quot;</span>);</span><br><span class=\"line\"><span class=\"type\">KeyPair</span> <span class=\"variable\">kp</span> <span class=\"operator\">=</span> kpg.generateKeyPair();</span><br><span class=\"line\"><span class=\"type\">KEM</span> <span class=\"variable\">kem</span> <span class=\"operator\">=</span> KEM.getInstance(<span class=\"string\">&quot;ML-KEM&quot;</span>);</span><br><span class=\"line\">KEM.<span class=\"type\">Encapsulated</span> <span class=\"variable\">enc</span> <span class=\"operator\">=</span> kem.encapsulate(kp.getPublic());</span><br><span class=\"line\">System.out.println(enc.key()); <span class=\"comment\">// 共享密钥</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"链接没有jmod的运行时映像\"><a href=\"#链接没有jmod的运行时映像\" class=\"headerlink\" title=\"链接没有jmod的运行时映像\"></a>链接没有jmod的运行时映像</h3><ul>\n<li><code>jlink</code> 支持无 JMOD 文件创建运行时镜像，减少 JDK 大小约 25%，优化云部署，减少镜像体积。<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">jlink --add-modules java.base --output custom-jdk</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"预览特性\"><a href=\"#预览特性\" class=\"headerlink\" title=\"预览特性\"></a>预览特性</h2><h3 id=\"结构化并发-API-4\"><a href=\"#结构化并发-API-4\" class=\"headerlink\" title=\"结构化并发 API [4]\"></a>结构化并发 API [4]</h3><ul>\n<li>简化多线程任务的协调和管理，使用 <code>StructuredTaskScope</code> 组织子任务，确保任务完成或失败时统一处理。<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.*;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">try</span> (<span class=\"type\">var</span> <span class=\"variable\">scope</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">StructuredTaskScope</span>.ShutdownOnFailure()) &#123;</span><br><span class=\"line\">    <span class=\"type\">var</span> <span class=\"variable\">task1</span> <span class=\"operator\">=</span> scope.fork(() -&gt; <span class=\"string\">&quot;Result 1&quot;</span>);</span><br><span class=\"line\">    <span class=\"type\">var</span> <span class=\"variable\">task2</span> <span class=\"operator\">=</span> scope.fork(() -&gt; <span class=\"string\">&quot;Result 2&quot;</span>);</span><br><span class=\"line\">    scope.join().throwIfFailed();</span><br><span class=\"line\">    System.out.println(task1.get() + <span class=\"string\">&quot;, &quot;</span> + task2.get()); <span class=\"comment\">// Result 1, Result 2</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"Scoped-Values-4\"><a href=\"#Scoped-Values-4\" class=\"headerlink\" title=\"Scoped Values [4]\"></a>Scoped Values [4]</h3><ul>\n<li>提供不可变数据在线程间的安全共享，替代 <code>ThreadLocal</code>，适合虚拟线程场景。</li>\n<li>数据绑定到作用域，自动清理，防止内存泄漏；提供只读访问，确保线程安全性。<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.*;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ScopedValueExample</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> ScopedValue&lt;String&gt; USER = ScopedValue.newInstance();</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        ScopedValue.runWhere(USER, <span class=\"string\">&quot;Alice&quot;</span>, () -&gt; &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;User: &quot;</span> + USER.get()); <span class=\"comment\">// User: Alice</span></span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"增强-构造函数主体-3\"><a href=\"#增强-构造函数主体-3\" class=\"headerlink\" title=\"增强 构造函数主体 [3]\"></a>增强 构造函数主体 [3]</h3><ul>\n<li>允许构造函数在 <code>super()</code> 或 <code>this()</code> 之前执行不引用实例的语句。<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Parent</span> &#123;</span><br><span class=\"line\">    Parent() &#123; System.out.println(<span class=\"string\">&quot;Parent init&quot;</span>); &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Child</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Parent</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> value;</span><br><span class=\"line\">    Child(<span class=\"type\">int</span> value) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (value &lt; <span class=\"number\">0</span>) <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">IllegalArgumentException</span>(<span class=\"string\">&quot;Negative value&quot;</span>);</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.value = value;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"增强-Main方法-3\"><a href=\"#增强-Main方法-3\" class=\"headerlink\" title=\"增强 Main方法 [3]\"></a>增强 Main方法 [3]</h3><ul>\n<li>支持无 <code>class</code> 声明的顶级程序。</li>\n<li>自动导入 <code>java.base</code> 的所有导出包和三个静态 I&#x2F;O 方法（print、println、printf）。<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    println(<span class=\"string\">&quot;Hello, World!&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"增强-模式匹配-2\"><a href=\"#增强-模式匹配-2\" class=\"headerlink\" title=\"增强 模式匹配 [2]\"></a>增强 模式匹配 [2]</h3><ul>\n<li>允许所有原始类型（<code>byte、short、int、long、float、double、char、boolean</code>）在 <code>instanceof</code> 和 <code>switch</code> 中使用。</li>\n<li>提供安全类型转换，消除不安全转换的风险。<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Object</span> <span class=\"variable\">obj</span> <span class=\"operator\">=</span> <span class=\"number\">42</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// instanceof 模式匹配</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (obj <span class=\"keyword\">instanceof</span> <span class=\"type\">int</span> i) &#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;Integer: &quot;</span> + i); <span class=\"comment\">// Integer: 42</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// switch 模式匹配</span></span><br><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">result</span> <span class=\"operator\">=</span> <span class=\"keyword\">switch</span> (obj) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"type\">int</span> i when i &gt; <span class=\"number\">0</span> -&gt; <span class=\"string\">&quot;Positive int: &quot;</span> + i;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"type\">int</span> i -&gt; <span class=\"string\">&quot;Non-positive int: &quot;</span> + i;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"type\">long</span> l -&gt; <span class=\"string\">&quot;Long: &quot;</span> + l;</span><br><span class=\"line\">    <span class=\"keyword\">default</span> -&gt; <span class=\"string\">&quot;Other&quot;</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">System.out.println(result); <span class=\"comment\">// Positive int: 42</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"模块导入声明-2\"><a href=\"#模块导入声明-2\" class=\"headerlink\" title=\"模块导入声明 [2]\"></a>模块导入声明 [2]</h3><ul>\n<li>使用 <code>import module &lt;module-name&gt;;</code> 导入模块（如 <code>java.base</code>）的所有导出包。</li>\n<li>简化模块化库使用，无需导入代码本身在模块中。<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"keyword\">module</span> java.base;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Example</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        List&lt;String&gt; list = Arrays.asList(<span class=\"string\">&quot;a&quot;</span>, <span class=\"string\">&quot;b&quot;</span>);</span><br><span class=\"line\">        System.out.println(list); <span class=\"comment\">// [a, b]</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n","categories":["JDK"],"tags":["后端","JDK"]},{"title":"JDK8：Optional容器类","url":"/JDK/JDK8%EF%BC%9AOptional%E5%AE%B9%E5%99%A8%E7%B1%BB/","content":"<h2 id=\"传统方式处理null\"><a href=\"#传统方式处理null\" class=\"headerlink\" title=\"传统方式处理null\"></a>传统方式处理null</h2><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TestOptional1</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * null-安全的第一种尝试：深层质疑</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> person</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">getCarInsuranceName1</span><span class=\"params\">(Person person)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (person != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"type\">Car</span> <span class=\"variable\">car</span> <span class=\"operator\">=</span> person.getCar();</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (car != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                <span class=\"type\">Insurance</span> <span class=\"variable\">insurance</span> <span class=\"operator\">=</span> car.getInsurance();</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (insurance != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> insurance.getName();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;Unknown&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * null-安全的第二种尝试：过多的退出语句</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> person</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">getCarInsuranceName2</span><span class=\"params\">(Person person)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (person == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">&quot;Unknown&quot;</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">Car</span> <span class=\"variable\">car</span> <span class=\"operator\">=</span> person.getCar();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (car == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">&quot;Unknown&quot;</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">Insurance</span> <span class=\"variable\">insurance</span> <span class=\"operator\">=</span> car.getInsurance();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (insurance == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">&quot;Unknown&quot;</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> insurance.getName();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Person</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Car car;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> Car <span class=\"title function_\">getCar</span><span class=\"params\">()</span> &#123; <span class=\"keyword\">return</span> car; &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Car</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Insurance insurance;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> Insurance <span class=\"title function_\">getInsurance</span><span class=\"params\">()</span> &#123; <span class=\"keyword\">return</span> insurance; &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Insurance</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">getName</span><span class=\"params\">()</span> &#123; <span class=\"keyword\">return</span> name; &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<span id=\"more\"></span>\n\n<h2 id=\"Optional容器类避免null\"><a href=\"#Optional容器类避免null\" class=\"headerlink\" title=\"Optional容器类避免null\"></a>Optional容器类避免null</h2><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.Optional;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Optional类方法</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * empty         返回一个空的 Optional 实例</span></span><br><span class=\"line\"><span class=\"comment\"> * filter        如果值存在且满足提供的谓词，就返回包含该值的 Optional 对象；否则返回一个空的Optional 对象</span></span><br><span class=\"line\"><span class=\"comment\"> * flatMap       如果值存在，就对该值执行 mapping 函数调用，返回一个 Optional 类型值，否则就返回一个空的 Optional 对象</span></span><br><span class=\"line\"><span class=\"comment\"> * get           如果该值存在，将该值用 Optional 封装返回，否则抛出一个 NoSuchElementException 异常</span></span><br><span class=\"line\"><span class=\"comment\"> * ifPresent     如果值存在，就执行使用该值的方法调用，否则什么也不做</span></span><br><span class=\"line\"><span class=\"comment\"> * isPresent     如果值存在就返回 true，否则返回 false</span></span><br><span class=\"line\"><span class=\"comment\"> * map           如果值存在，就对该值执行提供的 mapping 函数调用</span></span><br><span class=\"line\"><span class=\"comment\"> * of            将指定值用 Optional 封装之后返回，如果该值为 null，则抛出一个 NullPointerException异常</span></span><br><span class=\"line\"><span class=\"comment\"> * ofNullable    将指定值用 Optional 封装之后返回，如果该值为 null，则返回一个空的 Optional 对象</span></span><br><span class=\"line\"><span class=\"comment\"> * orElse        如果有值则将其返回，否则返回一个默认值</span></span><br><span class=\"line\"><span class=\"comment\"> * orElseGet     如果有值则将其返回，否则返回一个由指定的 Supplier 接口生成的值</span></span><br><span class=\"line\"><span class=\"comment\"> * orElseThrow   如果有值则将其返回，否则抛出一个由指定的 Supplier 接口生成的异常</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TestOptional2</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">getCarInsuranceName</span><span class=\"params\">(Optional&lt;Person&gt; person)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> person.flatMap(Person::getCar)</span><br><span class=\"line\">                .flatMap(Car::getInsurance)</span><br><span class=\"line\">                .map(Insurance::getName)</span><br><span class=\"line\">                .orElse(<span class=\"string\">&quot;Unknown&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Person</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Optional&lt;Car&gt; car;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> Optional&lt;Car&gt; <span class=\"title function_\">getCar</span><span class=\"params\">()</span> &#123; <span class=\"keyword\">return</span> car; &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Car</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Optional&lt;Insurance&gt; insurance;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> Optional&lt;Insurance&gt; <span class=\"title function_\">getInsurance</span><span class=\"params\">()</span> &#123; <span class=\"keyword\">return</span> insurance; &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Insurance</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">getName</span><span class=\"params\">()</span> &#123; <span class=\"keyword\">return</span> name; &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":["JDK"],"tags":["后端","JDK"]},{"title":"JDK8：函数式接口","url":"/JDK/JDK8%EF%BC%9A%E5%87%BD%E6%95%B0%E5%BC%8F%E6%8E%A5%E5%8F%A3/","content":"<h2 id=\"函数式接口\"><a href=\"#函数式接口\" class=\"headerlink\" title=\"函数式接口\"></a>函数式接口</h2><ul>\n<li>函数式接口就是只有一个抽象方法的接口，如<code>Runnable</code>、<code>Callable</code>、<code>Comparable</code>都称作函数式接口。</li>\n<li>java8专门新增 <code>FunctionalInterface</code> 注解, 防止破坏函数式接口的定义； <code>默认方法</code>和<code>静态方法</code>不会破坏函数式接口的定义。</li>\n</ul>\n<span id=\"more\"></span>\n\n<h2 id=\"内置函数式接口\"><a href=\"#内置函数式接口\" class=\"headerlink\" title=\"内置函数式接口\"></a>内置函数式接口</h2><table>\n<thead>\n<tr>\n<th>名称</th>\n<th>一元接口</th>\n<th>说明</th>\n<th>二元接口</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>函数类接口</td>\n<td>Function&lt;T, R&gt;</td>\n<td>接收T值，返回R值</td>\n<td>BiFunction&lt;T, U, R&gt;</td>\n<td>接收T, U值，返回R值</td>\n</tr>\n<tr>\n<td>操作类接口</td>\n<td>UnaryOperator&lt;T&gt;</td>\n<td>接收T值，返回T值</td>\n<td>BinaryOperator&lt;T&gt;</td>\n<td>接收T, T值，返回T值</td>\n</tr>\n<tr>\n<td>断言类接口</td>\n<td>Predicate&lt;T&gt;</td>\n<td>接收T值，返回boolean值</td>\n<td>BiPredicate&lt;T, U&gt;</td>\n<td>接收T, U值，返回boolean值</td>\n</tr>\n<tr>\n<td>消费类接口</td>\n<td>Consumer&lt;T&gt;</td>\n<td>接收T值，无返回值</td>\n<td>BiConsumer&lt;T, U&gt;</td>\n<td>接收T, U值，无返回值</td>\n</tr>\n<tr>\n<td>生产类接口</td>\n<td>Supplier&lt;T&gt;</td>\n<td>无接收值，返回T值</td>\n<td>-</td>\n<td>-</td>\n</tr>\n</tbody></table>\n<h2 id=\"自定义函数式接口\"><a href=\"#自定义函数式接口\" class=\"headerlink\" title=\"自定义函数式接口\"></a>自定义函数式接口</h2><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 1. 函数式接口只有一个抽象方法</span></span><br><span class=\"line\"><span class=\"comment\"> * 2. default、static方法不是抽象方法</span></span><br><span class=\"line\"><span class=\"comment\"> * 3. java.lang.Object中的方法不是抽象方法</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@FunctionalInterface</span> <span class=\"comment\">// 用于编译级错误检查</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">Fun</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">method</span><span class=\"params\">()</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">default</span> <span class=\"keyword\">void</span> <span class=\"title function_\">defaultMethod</span><span class=\"params\">()</span> &#123; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">staticMethod</span><span class=\"params\">()</span> &#123; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"type\">boolean</span> <span class=\"title function_\">equals</span><span class=\"params\">(Object target)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":["JDK"],"tags":["后端","JDK"]},{"title":"JDK8：新时间日期API","url":"/JDK/JDK8%EF%BC%9A%E6%96%B0%E6%97%B6%E9%97%B4%E6%97%A5%E6%9C%9FAPI/","content":"<h2 id=\"API使用\"><a href=\"#API使用\" class=\"headerlink\" title=\"API使用\"></a>API使用</h2><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.time.DayOfWeek;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.time.Duration;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.time.Instant;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.time.LocalDate;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.time.LocalDateTime;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.time.OffsetDateTime;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.time.Period;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.time.ZoneId;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.time.ZoneOffset;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.time.ZonedDateTime;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.time.format.DateTimeFormatter;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.time.temporal.TemporalAdjusters;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Set;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.junit.Test;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TestLocalDateTime</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * LocalDate、LocalTime、LocalDateTime</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * from     依据传入的 Temporal 对象创建对象实例</span></span><br><span class=\"line\"><span class=\"comment\">     * now      依据系统时钟创建 Temporal 对象</span></span><br><span class=\"line\"><span class=\"comment\">     * of       由 Temporal 对象的某个部分创建该对象的实例</span></span><br><span class=\"line\"><span class=\"comment\">     * parse    由字符串创建 Temporal 对象的实例</span></span><br><span class=\"line\"><span class=\"comment\">     * atOffset 将 Temporal 对象和某个时区偏移相结合</span></span><br><span class=\"line\"><span class=\"comment\">     * atZone   将 Temporal 对象和某个时区相结合</span></span><br><span class=\"line\"><span class=\"comment\">     * format   使用某个指定的格式器将Temporal对象转换为字符串（Instant类不提供该方法）</span></span><br><span class=\"line\"><span class=\"comment\">     * get      读取 Temporal 对象的某一部分的值</span></span><br><span class=\"line\"><span class=\"comment\">     * minus    创建 Temporal 对象的一个副本，通过将当前 Temporal 对象的值减去一定的时长创建该副本</span></span><br><span class=\"line\"><span class=\"comment\">     * plus     创建 Temporal 对象的一个副本，通过将当前 Temporal 对象的值加上一定的时长创建该副本</span></span><br><span class=\"line\"><span class=\"comment\">     * with     以该 Temporal 对象为模板，对某些状态进行修改创建该对象的副本</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test1</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 获取时间</span></span><br><span class=\"line\">        <span class=\"type\">LocalDateTime</span> <span class=\"variable\">ldt</span> <span class=\"operator\">=</span> LocalDateTime.now();</span><br><span class=\"line\">        System.out.println(ldt);</span><br><span class=\"line\">        System.out.println(ldt.getYear());</span><br><span class=\"line\">        System.out.println(ldt.getMonthValue());</span><br><span class=\"line\">        System.out.println(ldt.getDayOfMonth());</span><br><span class=\"line\">        System.out.println(ldt.getHour());</span><br><span class=\"line\">        System.out.println(ldt.getMinute());</span><br><span class=\"line\">        System.out.println(ldt.getSecond());</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 指定时间</span></span><br><span class=\"line\">        <span class=\"type\">LocalDateTime</span> <span class=\"variable\">ldt2</span> <span class=\"operator\">=</span> LocalDateTime.of(<span class=\"number\">2020</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">8</span>, <span class=\"number\">10</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">        System.out.println(ldt2);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 加上时间</span></span><br><span class=\"line\">        <span class=\"type\">LocalDateTime</span> <span class=\"variable\">ldt3</span> <span class=\"operator\">=</span> ldt2.plusYears(<span class=\"number\">20</span>);</span><br><span class=\"line\">        System.out.println(ldt3);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 减去时间</span></span><br><span class=\"line\">        <span class=\"type\">LocalDateTime</span> <span class=\"variable\">ldt4</span> <span class=\"operator\">=</span> ldt2.minusMonths(<span class=\"number\">2</span>);</span><br><span class=\"line\">        System.out.println(ldt4);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * TemporalAdjuster 时间校正器</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * TemporalAdjusters工具类方法：</span></span><br><span class=\"line\"><span class=\"comment\">     *   dayOfWeekInMonth           创建一个新的日期，它的值为同一个月中每一周的第几天</span></span><br><span class=\"line\"><span class=\"comment\">     *   firstDayOfMonth            创建一个新的日期，它的值为当月的第一天</span></span><br><span class=\"line\"><span class=\"comment\">     *   firstDayOfNextMonth        创建一个新的日期，它的值为下月的第一天</span></span><br><span class=\"line\"><span class=\"comment\">     *   firstDayOfNextYear         创建一个新的日期，它的值为明年的第一天</span></span><br><span class=\"line\"><span class=\"comment\">     *   firstDayOfYear             创建一个新的日期，它的值为当年的第一天</span></span><br><span class=\"line\"><span class=\"comment\">     *   firstInMonth               创建一个新的日期，它的值为同一个月中，第一个符合星期几要求的值</span></span><br><span class=\"line\"><span class=\"comment\">     *   lastDayOfMonth             创建一个新的日期，它的值为当月的最后一天</span></span><br><span class=\"line\"><span class=\"comment\">     *   lastDayOfNextMonth         创建一个新的日期，它的值为下月的最后一天</span></span><br><span class=\"line\"><span class=\"comment\">     *   lastDayOfNextYear          创建一个新的日期，它的值为明年的最后一天</span></span><br><span class=\"line\"><span class=\"comment\">     *   lastDayOfYear              创建一个新的日期，它的值为今年的最后一天</span></span><br><span class=\"line\"><span class=\"comment\">     *   lastInMonth                创建一个新的日期，它的值为同一个月中，最后一个符合星期几要求的值</span></span><br><span class=\"line\"><span class=\"comment\">     *   next/previous              创建一个新的日期，并将其值设定为日期调整后或者调整前，第一个符合指定星期几要求的日期</span></span><br><span class=\"line\"><span class=\"comment\">     *   nextOrSame/previousOrSame  创建一个新的日期，并将其值设定为日期调整后或者调整前，第一个符合指定星期几要求的日期，如果该日期已经符合要求，直接返回该对象</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test2</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 获取时间</span></span><br><span class=\"line\">        <span class=\"type\">LocalDateTime</span> <span class=\"variable\">ldt</span> <span class=\"operator\">=</span> LocalDateTime.now();</span><br><span class=\"line\">        System.out.println(ldt);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 修改时间</span></span><br><span class=\"line\">        <span class=\"type\">LocalDateTime</span> <span class=\"variable\">ldt2</span> <span class=\"operator\">=</span> ldt.withDayOfMonth(<span class=\"number\">10</span>);</span><br><span class=\"line\">        System.out.println(ldt2);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">LocalDateTime</span> <span class=\"variable\">ldt3</span> <span class=\"operator\">=</span> ldt.with(TemporalAdjusters.next(DayOfWeek.SUNDAY));</span><br><span class=\"line\">        System.out.println(ldt3);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 自定义时间：下一个工作日</span></span><br><span class=\"line\">        <span class=\"type\">LocalDateTime</span> <span class=\"variable\">ldt5</span> <span class=\"operator\">=</span> ldt.with((l) -&gt; &#123;</span><br><span class=\"line\">            <span class=\"type\">LocalDateTime</span> <span class=\"variable\">ldt4</span> <span class=\"operator\">=</span> (LocalDateTime) l;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"type\">DayOfWeek</span> <span class=\"variable\">dow</span> <span class=\"operator\">=</span> ldt4.getDayOfWeek();</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(dow.equals(DayOfWeek.FRIDAY))&#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> ldt4.plusDays(<span class=\"number\">3</span>);</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(dow.equals(DayOfWeek.SATURDAY))&#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> ldt4.plusDays(<span class=\"number\">2</span>);</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> ldt4.plusDays(<span class=\"number\">1</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        System.out.println(ldt5);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Instant 时间戳（使用 Unix 元年  1970年1月1日 00:00:00 所经历的毫秒值）</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test3</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 默认使用 UTC 时区</span></span><br><span class=\"line\">        <span class=\"type\">Instant</span> <span class=\"variable\">ins1</span> <span class=\"operator\">=</span> Instant.now();</span><br><span class=\"line\">        System.out.println(ins1);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 设置时区偏移量</span></span><br><span class=\"line\">        <span class=\"type\">OffsetDateTime</span> <span class=\"variable\">odt</span> <span class=\"operator\">=</span> ins1.atOffset(ZoneOffset.ofHours(<span class=\"number\">8</span>));</span><br><span class=\"line\">        System.out.println(odt);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 获取秒值</span></span><br><span class=\"line\">        System.out.println(ins1.getEpochSecond());</span><br><span class=\"line\">        System.out.println(ins1.toEpochMilli());</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 设置秒值</span></span><br><span class=\"line\">        <span class=\"type\">Instant</span> <span class=\"variable\">ins2</span> <span class=\"operator\">=</span> Instant.ofEpochSecond(<span class=\"number\">5</span>);</span><br><span class=\"line\">        System.out.println(ins2);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Duration 用于计算两个“时间”间隔</span></span><br><span class=\"line\"><span class=\"comment\">     * Period   用于计算两个“日期”间隔</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test4</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 计算两个“时间”间隔</span></span><br><span class=\"line\">        <span class=\"type\">Instant</span> <span class=\"variable\">ins1</span> <span class=\"operator\">=</span> Instant.now();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            Thread.sleep(<span class=\"number\">1000</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">Instant</span> <span class=\"variable\">ins2</span> <span class=\"operator\">=</span> Instant.now();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">Duration</span> <span class=\"variable\">duration</span> <span class=\"operator\">=</span> Duration.between(ins1, ins2);</span><br><span class=\"line\">        System.out.println(duration);</span><br><span class=\"line\">        System.out.println(duration.getSeconds());</span><br><span class=\"line\">        System.out.println(duration.toMillis());</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;----------------------------------&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 计算两个“日期”间隔</span></span><br><span class=\"line\">        <span class=\"type\">LocalDate</span> <span class=\"variable\">ld1</span> <span class=\"operator\">=</span> LocalDate.of(<span class=\"number\">2018</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"type\">LocalDate</span> <span class=\"variable\">ld2</span> <span class=\"operator\">=</span> LocalDate.now();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">Period</span> <span class=\"variable\">pe</span> <span class=\"operator\">=</span> Period.between(ld1, ld2);</span><br><span class=\"line\">        System.out.println(pe.getYears());</span><br><span class=\"line\">        System.out.println(pe.getMonths());</span><br><span class=\"line\">        System.out.println(pe.getDays());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * DateTimeFormatter 解析和格式化日期或时间</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test5</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//DateTimeFormatter dtf = DateTimeFormatter.ISO_DATE;</span></span><br><span class=\"line\">        <span class=\"type\">DateTimeFormatter</span> <span class=\"variable\">dtf</span> <span class=\"operator\">=</span> DateTimeFormatter.ofPattern(<span class=\"string\">&quot;yyyy年MM月dd日 HH:mm:ss E&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">LocalDateTime</span> <span class=\"variable\">ldt</span> <span class=\"operator\">=</span> LocalDateTime.now();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">date</span> <span class=\"operator\">=</span> ldt.format(dtf);</span><br><span class=\"line\">        System.out.println(date);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">LocalDateTime</span> <span class=\"variable\">ldt2</span> <span class=\"operator\">=</span> ldt.parse(date, dtf);</span><br><span class=\"line\">        System.out.println(ldt2);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 获取所有可用时区</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test6</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        Set&lt;String&gt; set = ZoneId.getAvailableZoneIds();</span><br><span class=\"line\">        set.forEach(System.out::println);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * ZonedDate、ZonedTime、ZonedDateTime 带时区的时间或日期</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test7</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"type\">LocalDateTime</span> <span class=\"variable\">ldt</span> <span class=\"operator\">=</span> LocalDateTime.now(ZoneId.of(<span class=\"string\">&quot;Asia/Shanghai&quot;</span>));</span><br><span class=\"line\">        System.out.println(ldt);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">ZonedDateTime</span> <span class=\"variable\">zdt</span> <span class=\"operator\">=</span> ZonedDateTime.now(ZoneId.of(<span class=\"string\">&quot;US/Pacific&quot;</span>));</span><br><span class=\"line\">        System.out.println(zdt);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<span id=\"more\"></span>\n\n<h2 id=\"传统日期转换\"><a href=\"#传统日期转换\" class=\"headerlink\" title=\"传统日期转换\"></a>传统日期转换</h2><table>\n<thead>\n<tr>\n<th>类</th>\n<th>To 遗留类</th>\n<th>From 遗留类</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>java.time.Instant<br/>java.util.Date</td>\n<td>Date.from(instant)</td>\n<td>date.toInstant()</td>\n</tr>\n<tr>\n<td>java.time.Instant<br/>java.sql.Timestamp</td>\n<td>Timestamp.from(instant)</td>\n<td>timestamp.toInstant()</td>\n</tr>\n<tr>\n<td>java.time.ZonedDateTime<br/>java.util.GregorianCalendar</td>\n<td>GregorianCalendar.from(zonedDateTime)</td>\n<td>cal.toZonedDateTime()</td>\n</tr>\n<tr>\n<td>java.time.LocalDate<br/>java.sql.Time</td>\n<td>Date.valueOf(localDate)</td>\n<td>date.toLocalDate()</td>\n</tr>\n<tr>\n<td>java.time.LocalTime<br/>java.sql.Time</td>\n<td>Date.valueOf(localDate)</td>\n<td>date.toLocalTime()</td>\n</tr>\n<tr>\n<td>java.time.LocalDateTime<br/>java.sql.Timestamp</td>\n<td>Timestamp.valueOf(localDateTime)</td>\n<td>timestamp.toLocalDateTime()</td>\n</tr>\n<tr>\n<td>java.time.ZoneId<br/>java.util.TimeZone</td>\n<td>Timezone.getTimeZone(id)</td>\n<td>timeZone.toZoneId()</td>\n</tr>\n<tr>\n<td>java.time.format.DateTimeFormatter<br/>java.text.DateFormat</td>\n<td>formatter.toFormat()</td>\n<td>无</td>\n</tr>\n</tbody></table>\n","categories":["JDK"],"tags":["后端","JDK"]},{"title":"JDK：版本","url":"/JDK/JDK%EF%BC%9A%E7%89%88%E6%9C%AC/","content":"<table>\n<thead>\n<tr>\n<th>Java 版本</th>\n<th>开发代号</th>\n<th>发行日期</th>\n<th>最终支持日期</th>\n<th>最终版本</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Pre 1.0</td>\n<td>Oak(橡树)</td>\n<td>1995-05-23</td>\n<td>-</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Java 1.0 (LTS)</td>\n<td>-</td>\n<td>1996-01-23</td>\n<td>1996-05-07</td>\n<td>1.0.2</td>\n</tr>\n<tr>\n<td>Java 1.1 (LTS)</td>\n<td>-</td>\n<td>1997-02-18</td>\n<td>2002-10-09</td>\n<td>1.1.8_16</td>\n</tr>\n<tr>\n<td>Java 1.2 (LTS)</td>\n<td>Playground(运动场)</td>\n<td>1998-12-04</td>\n<td>2003-10-02</td>\n<td>1.2.2_017</td>\n</tr>\n<tr>\n<td>Java 1.3 (LTS)</td>\n<td>Kestrel(美洲红隼)</td>\n<td>2000-05-08</td>\n<td>2010-10-12</td>\n<td>1.3.1_29</td>\n</tr>\n<tr>\n<td>Java 1.4 (LTS)</td>\n<td>Merlin(灰背隼)</td>\n<td>2002-02-13</td>\n<td>2013-02-19</td>\n<td>1.4.2_30</td>\n</tr>\n<tr>\n<td>Java 5 (LTS)</td>\n<td>Tiger(老虎)</td>\n<td>2004-09-29</td>\n<td>2015-04-15</td>\n<td>5.0u22</td>\n</tr>\n<tr>\n<td>Java 6 (LTS)</td>\n<td>Mustang(野马)</td>\n<td>2006-12-12</td>\n<td>2018-10-16</td>\n<td>6u45</td>\n</tr>\n<tr>\n<td>Java 7 (LTS)</td>\n<td>Dolphin(海豚)</td>\n<td>2011-07-11</td>\n<td>2021-07-20</td>\n<td>7u80</td>\n</tr>\n<tr>\n<td>Java 8 (LTS)</td>\n<td>Spider(蜘蛛)</td>\n<td>2014-03-18</td>\n<td>2026-11</td>\n<td>8u451</td>\n</tr>\n<tr>\n<td>Java 9</td>\n<td>-</td>\n<td>2017-09-21</td>\n<td>2018-03-20</td>\n<td>9.0.4</td>\n</tr>\n<tr>\n<td>Java 10</td>\n<td>-</td>\n<td>2018-03-20</td>\n<td>2018-09-25</td>\n<td>10.0.2</td>\n</tr>\n<tr>\n<td>Java 11 (LTS)</td>\n<td>-</td>\n<td>2018-09-25</td>\n<td>2027-10</td>\n<td>11.0.27</td>\n</tr>\n<tr>\n<td>Java 12</td>\n<td>-</td>\n<td>2019-03-19</td>\n<td>2019-09-17</td>\n<td>12.0.2</td>\n</tr>\n<tr>\n<td>Java 13</td>\n<td>-</td>\n<td>2019-09-17</td>\n<td>2020-03-17</td>\n<td>13.0.2</td>\n</tr>\n<tr>\n<td>Java 14</td>\n<td>-</td>\n<td>2020-03-17</td>\n<td>2020-09-15</td>\n<td>14.0.2</td>\n</tr>\n<tr>\n<td>Java 15</td>\n<td>-</td>\n<td>2020-09-15</td>\n<td>2021-03-15</td>\n<td>15.0.2</td>\n</tr>\n<tr>\n<td>Java 16</td>\n<td>-</td>\n<td>2021-03-15</td>\n<td>2021-09-14</td>\n<td>16.0.2</td>\n</tr>\n<tr>\n<td>Java 17 (LTS)</td>\n<td>-</td>\n<td>2021-09-14</td>\n<td>2027-10</td>\n<td>17.0.15</td>\n</tr>\n<tr>\n<td>Java 18</td>\n<td>-</td>\n<td>2022-03-22</td>\n<td>2022-09-20</td>\n<td>18.0.2.1</td>\n</tr>\n<tr>\n<td>Java 19</td>\n<td>-</td>\n<td>2022-09-20</td>\n<td>2023-03-21</td>\n<td>19.0.2</td>\n</tr>\n<tr>\n<td>Java 20</td>\n<td>-</td>\n<td>2023-03-21</td>\n<td>2023-09-19</td>\n<td>20.0.2</td>\n</tr>\n<tr>\n<td>Java 21 (LTS)</td>\n<td>-</td>\n<td>2023-09-19</td>\n<td>2029-12</td>\n<td>21.0.7</td>\n</tr>\n<tr>\n<td>Java 22</td>\n<td>-</td>\n<td>2024-03-19</td>\n<td>2024-09-17</td>\n<td>22.0.2</td>\n</tr>\n<tr>\n<td>Java 23</td>\n<td>-</td>\n<td>2024-09-17</td>\n<td>2025-03-18</td>\n<td>23.0.2</td>\n</tr>\n<tr>\n<td>Java 24</td>\n<td>-</td>\n<td>2025-03-18</td>\n<td>2025-09</td>\n<td>24.0.1</td>\n</tr>\n<tr>\n<td>Java 25 (LTS)</td>\n<td>-</td>\n<td>2025-09-16</td>\n<td>2030-09</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Java 26</td>\n<td>-</td>\n<td>2026-03-17</td>\n<td>2026-09</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Java 27</td>\n<td>-</td>\n<td>2026-09-15</td>\n<td>-</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Java 28</td>\n<td>-</td>\n<td>2027-03-23</td>\n<td>-</td>\n<td>-</td>\n</tr>\n</tbody></table>\n<span id=\"more\"></span>\n\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><ul>\n<li><a href=\"https://www.java.com/releases/\">JDK版本</a></li>\n<li><a href=\"https://www.oracle.com/java/technologies/javase/jdk-relnotes-index.html\">JDK发行说明</a></li>\n<li><a href=\"https://www.oracle.com/au/java/technologies/java-se-support-roadmap.html\">JDK支持线路图</a></li>\n<li><a href=\"https://javaalmanac.io/\">JDK版本年历</a></li>\n<li><a href=\"https://javaalmanac.io/jdk/download/\">JDK全版本下载</a></li>\n<li><a href=\"https://www.oracle.com/java/technologies/downloads/archive/\">JDK历史版本下载</a></li>\n<li><a href=\"https://javaalmanac.io/bytecode/\">Java字节码</a></li>\n<li><a href=\"https://javaalmanac.io/features/\">Java新特性</a></li>\n</ul>\n","categories":["JDK"],"tags":["后端","JDK"]},{"title":"JDK9：新特性","url":"/JDK/JDK9%EF%BC%9A%E6%96%B0%E7%89%B9%E6%80%A7/","content":"<h2 id=\"模块化系统\"><a href=\"#模块化系统\" class=\"headerlink\" title=\"模块化系统\"></a>模块化系统</h2><ul>\n<li>通过 module-info.java 定义模块。模块声明依赖 <code>requires</code> 和导出 <code>exports</code><img src=\"/JDK/JDK9%EF%BC%9A%E6%96%B0%E7%89%B9%E6%80%A7/%E6%A8%A1%E5%9D%97%E5%8C%96%E7%B3%BB%E7%BB%9F.png\" class=\"\" title=\"模块化系统\"></li>\n</ul>\n<span id=\"more\"></span>\n\n<h2 id=\"jShell-交互式命令\"><a href=\"#jShell-交互式命令\" class=\"headerlink\" title=\"jShell 交互式命令\"></a>jShell 交互式命令</h2><ul>\n<li><strong>CMD命令：</strong> <code>jshell</code><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 直接输出</span></span><br><span class=\"line\">jshell&gt; System.out.println(<span class=\"string\">&quot;hello&quot;</span>);</span><br><span class=\"line\">hello</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 定义变量</span></span><br><span class=\"line\">jshell&gt; int i = 10;</span><br><span class=\"line\">jshell&gt; System.out.println(i);</span><br><span class=\"line\">10</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 定义方法</span></span><br><span class=\"line\">jshell&gt; public void add(int i, int j) &#123;</span><br><span class=\"line\">        \tSystem.out.println(i + j);</span><br><span class=\"line\">    \t&#125;</span><br><span class=\"line\">jshell&gt; add(1, 2);</span><br><span class=\"line\">3</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 导入包</span></span><br><span class=\"line\">jshell&gt; import java.util.*;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 默认指令</span></span><br><span class=\"line\">jshell&gt; / \t\t\t<span class=\"comment\"># 列出所有默认指令</span></span><br><span class=\"line\">jshell&gt; /imports \t<span class=\"comment\"># 列出当前所有导入的包</span></span><br><span class=\"line\">jshell&gt; /list \t\t<span class=\"comment\"># 列出当前所有的操作</span></span><br><span class=\"line\">jshell&gt; /vars \t\t<span class=\"comment\"># 列出当前所有的变量</span></span><br><span class=\"line\">jshell&gt; /methods \t<span class=\"comment\"># 列出当前所有的方法</span></span><br><span class=\"line\">jshell&gt; /edit \t\t<span class=\"comment\"># 打开新窗口编辑修改操作</span></span><br><span class=\"line\">jshell&gt; /open \t\t<span class=\"comment\"># 运行写好的java类</span></span><br><span class=\"line\">jshell&gt; /exit \t\t<span class=\"comment\"># 退出jshell</span></span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"接口私有方法\"><a href=\"#接口私有方法\" class=\"headerlink\" title=\"接口私有方法\"></a>接口私有方法</h2><ul>\n<li>允许接口定义 <code>private</code> 方法，增强代码复用<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">MyInterface</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// JDK7：声明全局常量(public static final) 和 抽象方法(public abstract)</span></span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">method1</span><span class=\"params\">()</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// JDK8：声明静态方法 和 默认方法</span></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">method2</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;method2&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">default</span> <span class=\"keyword\">void</span> <span class=\"title function_\">method3</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;method3&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// JDK9：声明私有方法</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">method4</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;method4&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"集合工厂方法\"><a href=\"#集合工厂方法\" class=\"headerlink\" title=\"集合工厂方法\"></a>集合工厂方法</h2><ul>\n<li>创建不可变集合，线程安全。比 <code>Collections.unmodifiableList</code> 等更简洁<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">List&lt;Integer&gt; list = List.of(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>);</span><br><span class=\"line\">Set&lt;Integer&gt; set = Set.of(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>);</span><br><span class=\"line\">Map&lt;String, String&gt; map = Map.of(<span class=\"string\">&quot;k1&quot;</span>, <span class=\"string\">&quot;v1&quot;</span>, <span class=\"string\">&quot;k2&quot;</span>, <span class=\"string\">&quot;v2&quot;</span>);</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"增强-try-with-resources\"><a href=\"#增强-try-with-resources\" class=\"headerlink\" title=\"增强 try-with-resources\"></a>增强 try-with-resources</h2><ul>\n<li>改进 <code>try-with-resources</code>，允许在 <code>try</code> 外声明资源变量（只需 <code>final</code> 或有效 <code>final</code>）<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// JDK8</span></span><br><span class=\"line\"><span class=\"keyword\">try</span> (<span class=\"type\">InputStreamReader</span> <span class=\"variable\">reader</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">InputStreamReader</span>(System.in);</span><br><span class=\"line\">\t <span class=\"type\">OutputStreamWriter</span> <span class=\"variable\">writer</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">OutputStreamWriter</span>(System.out)) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">\te.printStackTrace();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// JDK9</span></span><br><span class=\"line\"><span class=\"type\">InputStreamReader</span> <span class=\"variable\">reader</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">InputStreamReader</span>(System.in);</span><br><span class=\"line\"><span class=\"type\">OutputStreamWriter</span> <span class=\"variable\">writer</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">OutputStreamWriter</span>(System.out);</span><br><span class=\"line\"><span class=\"keyword\">try</span> (reader; writer) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">\te.printStackTrace();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"增强-钻石操作符\"><a href=\"#增强-钻石操作符\" class=\"headerlink\" title=\"增强 钻石操作符\"></a>增强 钻石操作符</h2><ul>\n<li>扩展钻石操作符 <code>&lt;&gt;</code> 到匿名内部类，支持更灵活的类型推断<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// JDK8：需要显式类型声明</span></span><br><span class=\"line\">Set&lt;String&gt; set = <span class=\"keyword\">new</span> <span class=\"title class_\">HashSet</span>&lt;String&gt;()&#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// JDK9：减少显式类型声明</span></span><br><span class=\"line\">Set&lt;String&gt; set = <span class=\"keyword\">new</span> <span class=\"title class_\">HashSet</span>&lt;&gt;()&#123;&#125;;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"增强-Stream-API\"><a href=\"#增强-Stream-API\" class=\"headerlink\" title=\"增强 Stream API\"></a>增强 Stream API</h2><ul>\n<li>新增 <code>takeWhile</code>、<code>dropWhile</code> 和 <code>iterate</code> 重载方法<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">List&lt;Integer&gt; list = List.of(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">10</span>, <span class=\"number\">4</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// takeWhile：从流的开头截取元素，直到遇到第一个不满足指定条件的元素为止</span></span><br><span class=\"line\">list.stream().takeWhile(d -&gt; d &lt; <span class=\"number\">10</span>).forEach(System.out::println);   <span class=\"comment\">// 1, 2, 3</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// dropWhile：丢弃流的开头元素，直到遇到第一个不满足指定条件的元素为止（与 takeWhile 相反）</span></span><br><span class=\"line\">list.stream().dropWhile(d -&gt; d &lt; <span class=\"number\">10</span>).forEach(System.out::println);   <span class=\"comment\">// 10, 4</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ofNullable：过滤空值，防止报 NullPointerException</span></span><br><span class=\"line\">System.out.println(Stream.ofNullable(<span class=\"literal\">null</span>).count()); <span class=\"comment\">// 0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// iterate：支持终止条件的迭代</span></span><br><span class=\"line\">Stream.iterate(<span class=\"number\">0</span>, d -&gt; d + <span class=\"number\">1</span>).limit(<span class=\"number\">3</span>).forEach(System.out::println);    <span class=\"comment\">// JDK8</span></span><br><span class=\"line\">Stream.iterate(<span class=\"number\">0</span>, d -&gt; d &lt; <span class=\"number\">3</span>, d -&gt; d + <span class=\"number\">1</span>).forEach(System.out::println); <span class=\"comment\">// JDK9</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"增强-进程API\"><a href=\"#增强-进程API\" class=\"headerlink\" title=\"增强 进程API\"></a>增强 进程API</h2><ul>\n<li>增强 <code>java.lang.Process</code> 和 <code>ProcessBuilder</code>，提供更强大的进程管理和信息获取能力。</li>\n<li>新类 <code>ProcessHandle</code> 和 <code>ProcessHandle.Info</code>，支持获取进程 ID、状态、CPU 使用等。<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">ProcessHandle</span> <span class=\"variable\">current</span> <span class=\"operator\">=</span> ProcessHandle.current();</span><br><span class=\"line\">System.out.println(<span class=\"string\">&quot;PID: &quot;</span> + current.pid());</span><br><span class=\"line\">ProcessHandle.<span class=\"type\">Info</span> <span class=\"variable\">info</span> <span class=\"operator\">=</span> current.info();</span><br><span class=\"line\">System.out.println(<span class=\"string\">&quot;Command: &quot;</span> + info.command().orElse(<span class=\"string\">&quot;Unknown&quot;</span>));</span><br></pre></td></tr></table></figure></li>\n</ul>\n","categories":["JDK"],"tags":["后端","JDK"]},{"title":"GC机制","url":"/JVM/GC%E6%9C%BA%E5%88%B6/","content":"<!-- ## JVM内存结构\n![JVM内存结构](JVM_GC机制/JVM内存结构.png)\n\n### 新生代(Young Generation) \n- 大多数对象在新生代中被创建，其中很多对象的生命周期很短。每次新生代的垃圾回收（又称`Minor GC`）后只有少量对象存活，所以选用`复制算法`，只需要少量的复制成本就可以完成回收。\n\n- 新生代内又分三个区：一个`Eden`区，两个`Survivor`区，大部分对象在Eden区中生成。当Eden区满时，还存活的对象将被复制到两个Survivor区（中的一个）。当这个Survivor区满时，此区的存活且不满足“晋升”条件的对象将被复制到另外一个Survivor区。`对象每经历一次Minor GC，年龄加1，达到“晋升年龄阈值”后，被放到老年代，这个过程也称为“晋升”`。显然，“晋升年龄阈值”的大小直接影响着对象在新生代中的停留时间，在`Serial`和`ParNew` 两种GC回收器中，`“晋升年龄阈值”通过参数MaxTenuringThreshold设定，默认值为15`。\n\n### 老年代(Old Generation)  \n- 在新生代中经历了N次垃圾回收后仍存活的对象，就会被放到年老代，该区域中对象存活率高。老年代的垃圾回收（又称`Major GC`）通常使用`“标记-清理”`或`“标记-整理”`算法。整堆包括新生代和老年代的垃圾回收称为`Full GC`（HotSpot VM里，除了`CMS`之外，其它能收集老年代的GC都会同时收集整个GC堆，包括新生代）\n\n### 永久代(Perm Generation) `\n- 主要存放元数据，例如Class、Method的元信息，与垃圾回收要回收的Java对象关系不大。相对于新生代和年老代来说，该区域的划分对垃圾回收影响比较小。 -->\n<h2 id=\"GC判断策略\"><a href=\"#GC判断策略\" class=\"headerlink\" title=\"GC判断策略\"></a>GC判断策略</h2><img src=\"/JVM/GC%E6%9C%BA%E5%88%B6/%E5%88%A4%E6%96%AD%E5%AF%B9%E8%B1%A1%E7%9A%84%E7%94%9F%E6%AD%BB.png\" class=\"\" title=\"判断对象的生死\">\n\n<span id=\"more\"></span>\n\n<h3 id=\"判断对象是否可回收\"><a href=\"#判断对象是否可回收\" class=\"headerlink\" title=\"判断对象是否可回收\"></a>判断对象是否可回收</h3><h4 id=\"引用计数法-Reference-Counting\"><a href=\"#引用计数法-Reference-Counting\" class=\"headerlink\" title=\"引用计数法 (Reference Counting)\"></a><strong>引用计数法 (Reference Counting)</strong></h4><ul>\n<li><p>算法描述：</p>\n<ul>\n<li>给对象添加一个引用计数器</li>\n<li>每有一个地方引用它，计数器加 1</li>\n<li>引用失效时，计数器减 1</li>\n<li>计数器值为 0 的对象不再可用</li>\n</ul>\n</li>\n<li><p>缺点：</p>\n<ul>\n<li>很难解决循环引用的问题。即 <code>objA.instance = objB; objB.instance = objA;</code>，objA 和 objB 都不会再被访问后，它们仍然相互引用着对方，所以它们的引用计数器不为 0，将永远不能被判为不可用。</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"可达性分析法-Reachability-Analysis\"><a href=\"#可达性分析法-Reachability-Analysis\" class=\"headerlink\" title=\"可达性分析法 (Reachability Analysis)\"></a><strong>可达性分析法 (Reachability Analysis)</strong></h4><ul>\n<li><p>算法描述：</p>\n<ul>\n<li>从 “GC Root” 对象作为起点开始向下搜索，走过的路径称为引用链（Reference Chain）；</li>\n<li>从 “GC Root” 开始，不可达的对象被判为不可用。</li>\n</ul>\n</li>\n<li><p>Java 中可作为 “GC Root” 的对象：</p>\n<ul>\n<li>栈中（本地变量表中的reference）<ul>\n<li>虚拟机栈中，栈帧中的本地变量表引用的对象</li>\n<li>本地方法栈中，JNI 引用的对象（native方法）</li>\n</ul>\n</li>\n<li>方法区中<ul>\n<li>类的静态属性引用的对象</li>\n<li>常量引用的对象</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"四种引用类型\"><a href=\"#四种引用类型\" class=\"headerlink\" title=\"四种引用类型\"></a>四种引用类型</h3><img src=\"/JVM/GC%E6%9C%BA%E5%88%B6/%E5%9B%9B%E7%A7%8D%E5%BC%95%E7%94%A8%E7%B1%BB%E5%9E%8B.png\" class=\"\" title=\"四种引用类型\">\n<ul>\n<li><code>强引用 </code> 默认情况下，对象采用的均为强引用（这个对象的实例没有其他对象引用，GC时才会被回收）</li>\n<li><code>软引用 </code> 软引用是Java中提供的一种比较适合于缓存场景的应用（只有在内存不够用的情况下才会被GC）</li>\n<li><code>弱引用 </code> 在GC时一定会被GC回收</li>\n<li><code>虚引用 </code> 由于虚引用只是用来得知对象是否被GC</li>\n</ul>\n<h2 id=\"GC算法\"><a href=\"#GC算法\" class=\"headerlink\" title=\"GC算法\"></a>GC算法</h2><h3 id=\"复制拷贝-Copying\"><a href=\"#复制拷贝-Copying\" class=\"headerlink\" title=\"复制拷贝 (Copying)\"></a>复制拷贝 (Copying)</h3><img src=\"/JVM/GC%E6%9C%BA%E5%88%B6/%E5%A4%8D%E5%88%B6%E6%8B%B7%E8%B4%9D.png\" class=\"\" title=\"复制拷贝\">\n\n<h3 id=\"标记清除-Mark-Sweep\"><a href=\"#标记清除-Mark-Sweep\" class=\"headerlink\" title=\"标记清除 (Mark-Sweep)\"></a>标记清除 (Mark-Sweep)</h3><img src=\"/JVM/GC%E6%9C%BA%E5%88%B6/%E6%A0%87%E8%AE%B0%E6%B8%85%E9%99%A4.png\" class=\"\" title=\"标记清除\">\n\n<h3 id=\"标记整理-Mark-Compact\"><a href=\"#标记整理-Mark-Compact\" class=\"headerlink\" title=\"标记整理 (Mark-Compact)\"></a>标记整理 (Mark-Compact)</h3><img src=\"/JVM/GC%E6%9C%BA%E5%88%B6/%E6%A0%87%E8%AE%B0%E6%95%B4%E7%90%86.png\" class=\"\" title=\"标记整理\">\n\n<h3 id=\"分代收集-Generational-GC\"><a href=\"#分代收集-Generational-GC\" class=\"headerlink\" title=\"分代收集 (Generational GC)\"></a>分代收集 (Generational GC)</h3><ul>\n<li><code>新生代</code>： GC 过后只有少量对象存活 —— 复制拷贝</li>\n<li><code>老年代</code>： GC 过后对象存活率高 —— 标记整理</li>\n</ul>\n<h2 id=\"GC收集器\"><a href=\"#GC收集器\" class=\"headerlink\" title=\"GC收集器\"></a>GC收集器</h2><ul>\n<li>GC算法是内存回收的方法论（类似接口），GC收集器是算法落地实现（类似实现）。</li>\n</ul>\n<h3 id=\"垃圾收集器类型\"><a href=\"#垃圾收集器类型\" class=\"headerlink\" title=\"垃圾收集器类型\"></a>垃圾收集器类型</h3><img src=\"/JVM/GC%E6%9C%BA%E5%88%B6/%E5%9E%83%E5%9C%BE%E6%94%B6%E9%9B%86%E5%99%A8%E7%B1%BB%E5%9E%8B.jpg\" class=\"\" title=\"垃圾收集器类型\">\n\n<ul>\n<li><code>串行垃圾回收器(Serial) </code> 它为单线程环境设计且只使用一个线程进行垃圾回收，会暂停所有的用户线程。所以不适合服务器环境。</li>\n<li><code>并行垃圾回收器(Parallel) </code> 多个垃圾收集线程并行工作，此时用户线程是暂停的，适用于科学计算&#x2F;大数据处理首台处理等弱交互场景。</li>\n<li><code>并发垃圾回收器(CMS) </code> 用户线程和垃圾收集线程同时执行（不一定是并行，可能交替执行），不需要停顿，适用对响应时间有要求的场景。</li>\n<li><code>G1垃圾回收器(G1) </code> 将堆内存分割成不同的区域然后并发的对其进行垃圾回收。</li>\n</ul>\n<h3 id=\"七种垃圾收集器\"><a href=\"#七种垃圾收集器\" class=\"headerlink\" title=\"七种垃圾收集器\"></a>七种垃圾收集器</h3><img src=\"/JVM/GC%E6%9C%BA%E5%88%B6/7%E7%A7%8D%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8.jpg\" class=\"\" title=\"7种垃圾回收器\">\n\n<h3 id=\"垃圾收集器组合\"><a href=\"#垃圾收集器组合\" class=\"headerlink\" title=\"垃圾收集器组合\"></a>垃圾收集器组合</h3><img src=\"/JVM/GC%E6%9C%BA%E5%88%B6/%E5%9E%83%E5%9C%BE%E6%94%B6%E9%9B%86%E5%99%A8%E7%BB%84%E5%90%88.jpg\" class=\"\" title=\"圾回收集器组合\">\n<img src=\"/JVM/GC%E6%9C%BA%E5%88%B6/%E5%9E%83%E5%9C%BE%E6%94%B6%E9%9B%86%E5%99%A8%E5%8F%82%E6%95%B0.jpg\" class=\"\" title=\"圾回收集器参数\">\n\n<h3 id=\"垃圾回收器选择\"><a href=\"#垃圾回收器选择\" class=\"headerlink\" title=\"垃圾回收器选择\"></a>垃圾回收器选择</h3><ul>\n<li>单CPU或小内存，单机程序<ul>\n<li><code>-XX:+UseSerialGC</code></li>\n</ul>\n</li>\n<li>多CPU，需要最大吞吐量，如后台计算型应用<ul>\n<li><code>-XX:+UseParallelGC</code></li>\n<li><code>-XX:+UseParallelOldGC</code></li>\n</ul>\n</li>\n<li>多CPU，追求低停顿时间，需快速响应如互联网应用<ul>\n<li><code>-XX:+UseConcMarkSweepGC</code></li>\n<li><code>-XX:+UseParNewGC </code></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><ul>\n<li><a href=\"http://tang.love/2017/10/29/gc_category_in_jvm/\">大唐札记</a></li>\n<li><a href=\"https://www.happyheihei.com/2019/03/10/02-%E5%9E%83%E5%9C%BE%E6%94%B6%E9%9B%86&#40;GC&#41;.html\">happyheihei</a></li>\n</ul>\n","categories":["JVM"],"tags":["后端","JVM"]},{"title":"GC调优","url":"/JVM/GC%E8%B0%83%E4%BC%98/","content":"<h2 id=\"JVM参数类型\"><a href=\"#JVM参数类型\" class=\"headerlink\" title=\"JVM参数类型\"></a>JVM参数类型</h2><h3 id=\"标配参数-了解\"><a href=\"#标配参数-了解\" class=\"headerlink\" title=\"标配参数 (了解)\"></a>标配参数 (了解)</h3><ul>\n<li><code>-version</code></li>\n<li><code>-help</code></li>\n<li><code>-showversion</code></li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">~  java -version</span><br><span class=\"line\">   java version <span class=\"string\">&quot;1.8.0_201&quot;</span></span><br><span class=\"line\">   Java(TM) SE Runtime Environment (build 1.8.0_201-b09)</span><br><span class=\"line\">   Java HotSpot(TM) 64-Bit Server VM (build 25.201-b09, mixed mode)</span><br></pre></td></tr></table></figure>\n\n<span id=\"more\"></span>\n\n<h3 id=\"X参数-了解\"><a href=\"#X参数-了解\" class=\"headerlink\" title=\"X参数 (了解)\"></a>X参数 (了解)</h3><ul>\n<li><code>-Xint</code> 解释执行</li>\n<li><code>-Xcomp</code> 第一次使用就编译成本地代码</li>\n<li><code>-Xmixed</code> 混合模式</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">~  java -version</span><br><span class=\"line\">   java version <span class=\"string\">&quot;1.8.0_201&quot;</span></span><br><span class=\"line\">   Java(TM) SE Runtime Environment (build 1.8.0_201-b09)</span><br><span class=\"line\">   Java HotSpot(TM) 64-Bit Server VM (build 25.201-b09, mixed mode)</span><br><span class=\"line\">   </span><br><span class=\"line\">~  java -Xint -version</span><br><span class=\"line\">   java version <span class=\"string\">&quot;1.8.0_201&quot;</span></span><br><span class=\"line\">   Java(TM) SE Runtime Environment (build 1.8.0_201-b09)</span><br><span class=\"line\">   Java HotSpot(TM) 64-Bit Server VM (build 25.201-b09, interpreted mode)</span><br><span class=\"line\">   </span><br><span class=\"line\">~  java -Xcomp -version</span><br><span class=\"line\">   java version <span class=\"string\">&quot;1.8.0_201&quot;</span></span><br><span class=\"line\">   Java(TM) SE Runtime Environment (build 1.8.0_201-b09)</span><br><span class=\"line\">   Java HotSpot(TM) 64-Bit Server VM (build 25.201-b09, compiled mode)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"XX参数\"><a href=\"#XX参数\" class=\"headerlink\" title=\"XX参数\"></a>XX参数</h3><ul>\n<li>Boolean类型：<code>-XX:+或者-某个属性值</code> ，+表示开启，-表示关闭</li>\n<li>KV设值类型：<code>-XX:属性key=属性值value</code></li>\n</ul>\n<figure class=\"highlight apache\"><table><tr><td class=\"code\"><pre><span class=\"line\">~  <span class=\"attribute\">jps</span> -l</span><br><span class=\"line\">   <span class=\"attribute\">74019</span> org.jetbrains.jps.cmdline.Launcher</span><br><span class=\"line\">   <span class=\"attribute\">67749</span> org.jetbrains.idea.maven.server.RemoteMavenServer</span><br><span class=\"line\">   <span class=\"attribute\">74020</span> com.example.demo.gc.HelloGC</span><br><span class=\"line\">   <span class=\"attribute\">67718</span></span><br><span class=\"line\">   <span class=\"attribute\">74024</span> sun.tools.jps.Jps</span><br><span class=\"line\">   </span><br><span class=\"line\">~  <span class=\"attribute\">jinfo</span> -flag UseSerialGC <span class=\"number\">74020</span></span><br><span class=\"line\">   -<span class=\"attribute\">XX</span>:-UseSerialGC</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"JVM参数列表\"><a href=\"#JVM参数列表\" class=\"headerlink\" title=\"JVM参数列表\"></a>JVM参数列表</h2><img src=\"/JVM/GC%E8%B0%83%E4%BC%98/JVM%E5%8F%82%E6%95%B0%E5%88%97%E8%A1%A8.png\" class=\"\" title=\"JVM参数列表\">\n\n<h2 id=\"GC日志\"><a href=\"#GC日志\" class=\"headerlink\" title=\"GC日志\"></a>GC日志</h2><img src=\"/JVM/GC%E8%B0%83%E4%BC%98/GC%E6%97%A5%E5%BF%97.png\" class=\"\" title=\"GC日志\">\n\n<h2 id=\"GC优化策略\"><a href=\"#GC优化策略\" class=\"headerlink\" title=\"GC优化策略\"></a>GC优化策略</h2><h3 id=\"降低Full-GC执行频率\"><a href=\"#降低Full-GC执行频率\" class=\"headerlink\" title=\"降低Full GC执行频率\"></a>降低Full GC执行频率</h3><ul>\n<li>可选方案：<ul>\n<li><p>1.&nbsp;增大Old</p>\n<ul>\n<li>在不放大Heap的情况下，可能会造成一些问题</li>\n<li>放大Heap</li>\n</ul>\n</li>\n<li><p>2.&nbsp;尽可能减少从new晋升到Old的对象</p>\n<ul>\n<li>控制晋升年龄阀值</li>\n<li>增大救助空间</li>\n</ul>\n</li>\n<li><p>3.&nbsp;优化系统性能</p>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"降低Full-GC暂停时间\"><a href=\"#降低Full-GC暂停时间\" class=\"headerlink\" title=\"降低Full GC暂停时间\"></a>降低Full GC暂停时间</h3><ul>\n<li>可选方案：<ul>\n<li><p>1.&nbsp;减少Heap</p>\n</li>\n<li><p>2.&nbsp;GC换成CMS</p>\n</li>\n<li><p>3.&nbsp;升级或增加CPU</p>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"降低Minor-GC执行频率\"><a href=\"#降低Minor-GC执行频率\" class=\"headerlink\" title=\"降低Minor GC执行频率\"></a>降低Minor GC执行频率</h3><ul>\n<li>可选方案：<ul>\n<li><p>1.&nbsp;增大新生代</p>\n<ul>\n<li>有可能造成Full GC频繁</li>\n</ul>\n</li>\n<li><p>2.&nbsp;优化系统性能，减少每次请求的内存消耗量</p>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"降低Minor-GC暂停时间\"><a href=\"#降低Minor-GC暂停时间\" class=\"headerlink\" title=\"降低Minor GC暂停时间\"></a>降低Minor GC暂停时间</h3><ul>\n<li>可选方案：<ul>\n<li><p>1.&nbsp;减少新生代</p>\n<ul>\n<li>有可能造成new晋升到Old的对象增加</li>\n</ul>\n</li>\n<li><p>2.&nbsp;增加或升级CPU</p>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"性能监控工具\"><a href=\"#性能监控工具\" class=\"headerlink\" title=\"性能监控工具\"></a>性能监控工具</h2><ul>\n<li>命令行工具：<code>jps</code>、<code>jstat</code>、<code>jinfo</code>、<code>jmap</code>、<code>jhat</code>、<code>jstack</code></li>\n<li>启动远程工具：<code>jstatd</code>、<code>jmx</code></li>\n<li>图形化工具：<code>jconsole</code>、<code>jvisualvm</code>、<code>MAT</code></li>\n<li>实时调试：<code>Btrace</code></li>\n</ul>\n<h3 id=\"命令行工具\"><a href=\"#命令行工具\" class=\"headerlink\" title=\"命令行工具\"></a>命令行工具</h3><h4 id=\"jps\"><a href=\"#jps\" class=\"headerlink\" title=\"jps\"></a><strong>jps</strong></h4><ul>\n<li>显示指定系统内所有HotSpot虚拟机进程</li>\n<li>命令格式：<code>jps [options] [hostid]</code></li>\n<li>参数选项：<ul>\n<li><code>[options]</code>：<ul>\n<li><strong>-q：</strong>只输出LVMID，省略主类名称</li>\n<li><strong>-m：</strong>输出虚拟机进程启动时传递给主类main()函数的参数</li>\n<li><strong>-l：</strong>输出主类的全名，如果进程执行的是jar，输出jar路径</li>\n<li><strong>-v：</strong>输出虚拟机进程启动时JVM参数</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"jstat\"><a href=\"#jstat\" class=\"headerlink\" title=\"jstat\"></a><strong>jstat</strong></h4><ul>\n<li>虚拟机统计信息监视工具</li>\n<li>命令格式：<code>jstat &lt;option&gt; [-t] [-h&lt;lines&gt;] &lt;vmid&gt; [&lt;interval&gt; [&lt;count&gt;]]</code></li>\n<li>参数选项：<ul>\n<li><code>[-t]</code>：在第一列显示自JVM启动以来的时间戳</li>\n<li><code>[-h&lt;lines&gt;]</code>：每隔几行输出标题</li>\n<li><code>[&lt;interval&gt;]</code>：连续输出的时间间隔 (单位：s，ms)</li>\n<li><code>[&lt;count&gt;]</code>：连续输出的次数</li>\n<li><code>&lt;option&gt;</code>：<ul>\n<li><strong>-class：</strong>监视类装载、卸载数量、总空间及类装载所消耗的时间</li>\n<li><strong>-gc：</strong>监视java堆状况，包括新生代、老年代、永久代等的容量、已用空间、GC时间合计等信息</li>\n<li><strong>-gccapacity：</strong>监视内容与-gc基本相同，但输出主要关注java堆各个区域使用到的最大、最小空间</li>\n<li><strong>-gcutil：</strong>监视内容与-gc基本相同，但输出主要关注已使用空间占总空间的百分比</li>\n<li><strong>-gccause\t：</strong>监视内容与-gcutil基本相同，但是会额外输出导致上一次GC产生的原因</li>\n<li><strong>-gcnew：</strong>监视新生代GC状况</li>\n<li><strong>-gcnewcapacity：</strong>监视内容与-gcnew基本相同，输出主要关注使用到的最大、最小空间</li>\n<li><strong>-gcold：</strong>监视老年代GC状况</li>\n<li><strong>-gcoldcapacity：</strong>监视内容与-gcold基本相同，输出主要关注使用到的最大、最小空间</li>\n<li><strong>-gcpermcapacity：</strong>输出永久代使用到的最大、最小空间</li>\n<li><strong>-compiler：</strong>输出JIT编译过的方法、耗时等信息</li>\n<li><strong>-printcompilation：</strong>输出已经被JIT编译的方法</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"jinfo\"><a href=\"#jinfo\" class=\"headerlink\" title=\"jinfo\"></a><strong>jinfo</strong></h4><ul>\n<li>实时的查看和调整虚拟机的各项参数</li>\n<li>命令格式：<code>jinfo [option] &lt;vmid&gt;</code></li>\n<li>参数选项：<ul>\n<li><code>[options]</code>：<ul>\n<li><strong>-flag &lt;name&gt;：</strong>显示JVM某参数值</li>\n<li><strong>-flag [+ | -]&lt;name&gt;：</strong>开启关闭JVM某参数</li>\n<li><strong>-flag &lt;name&gt;&#x3D;&lt;value&gt;：</strong>设置JVM某参数的值</li>\n<li><strong>-flags：</strong>显示所有的参数</li>\n<li><strong>-sysprops：</strong>显示系统参数</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"jmap\"><a href=\"#jmap\" class=\"headerlink\" title=\"jmap\"></a><strong>jmap</strong></h4><ul>\n<li>生成虚拟机的内存转储快照（heapdump）文件</li>\n<li>命令格式：<code>jmap [options] &lt;vmid&gt;</code></li>\n<li>参数选项：<ul>\n<li><code>[options]</code>：<ul>\n<li><strong>-dump：</strong>生成Java堆转储快照。格式为：-dump:[live,]format&#x3D;b,file&#x3D;&lt;filename&gt;，live表示指明是否只dump出存活的对象；format指定输出格式；file指定文件名</li>\n<li><strong>-finalizerinfo：</strong>显示在F-Queue中等待Finalizer线程执行finalize()方法的对象。</li>\n<li><strong>-heap：</strong>显示Java堆详细信息，如使用哪种回收器、参数配置、分代状况等</li>\n<li><strong>-histo：</strong>显示堆中对象统计信息，包括类、实例数量和合计容量</li>\n<li><strong>-permstat：</strong>以ClassLoader为统计口径显示永久代内存状态</li>\n<li><strong>-F：</strong>当虚拟机进程对-dump选项没有响应时，可使用这个选项强制生成dump快照</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"jhat\"><a href=\"#jhat\" class=\"headerlink\" title=\"jhat\"></a><strong>jhat</strong></h4><ul>\n<li>分析jmap生成的文件，建立一个HTTP&#x2F;HTML服务器，在浏览器上查看分析结果</li>\n<li>命令格式：<code>jhat [-stack &lt;bool&gt;] [-refs &lt;bool&gt;] [-port &lt;port&gt;] [-baseline &lt;file&gt;] [-debug &lt;int&gt;] &lt;file&gt;</code></li>\n<li>参数选项：<ul>\n<li><code>[-J&lt;flag&gt;]</code>：jhat命令会启动一个JVM来执行，可以在启动时传入一些参数。如：-J-Xmx512M</li>\n<li><code>[-stack &lt;bool&gt;]</code>：关闭跟踪对象分配调用堆栈，默认值是true</li>\n<li><code>[-refs &lt;bool&gt;]</code>：关闭对象的引用的跟踪，默认为true</li>\n<li><code>[-port &lt;port&gt;]</code>：设置HTTP Server端口号，默认值 7000</li>\n<li><code>[-exclude &lt;file&gt;]</code>：指定对象查询时需要排除的数据成员列表文件</li>\n<li><code>[-baseline &lt;file&gt;]</code>：指定基准堆转储。在具有相同的对象ID两个堆转储对象被标记为不是新对象。这是用于比较两个不同的堆转储有用</li>\n<li><code>[-debug &lt;int&gt;]</code>：设置debug级别，0级表示没有调试输出。值越大则表示输出更详细的 debug 信息</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"jstack\"><a href=\"#jstack\" class=\"headerlink\" title=\"jstack\"></a><strong>jstack</strong></h4><ul>\n<li>生成当前时刻线程快照，主要⽬的是定位线程出现⻓时间停顿的原因，如线程间死锁、死循环等问题</li>\n<li>命令格式：<code>jstack [options] &lt;vmid&gt;</code></li>\n<li>参数选项：<ul>\n<li><code>[options]</code>：<ul>\n<li><strong>-F：</strong>当正常输出请求不被响应时，强制输出线程堆栈</li>\n<li><strong>-l：</strong>除堆栈外，显示关于锁的附加信息</li>\n<li><strong>-m：</strong>如果调用到本地方法的话，可以显示C&#x2F;C++的堆栈</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><ul>\n<li><a href=\"https://docs.oracle.com/javase/8/docs/technotes/tools/windows/java.html\">JDK8 Win官网文档</a></li>\n<li><a href=\"https://docs.oracle.com/javase/8/docs/technotes/tools/unix/java.html\">JDK8 Linux&#x2F;OS官网文档</a></li>\n<li><a href=\"http://xxfox.perfma.com/\">XXFOX</a></li>\n<li><a href=\"https://www.slideserve.com/abba/jvm\">JVM优化入门</a></li>\n<li><a href=\"http://calvin1978.blogcn.com/articles/jvmoption-7.html\">JVM参数推荐</a></li>\n<li><a href=\"https://www.jianshu.com/p/c82c0a8b857f\">JVM性能监控-命令行工具</a></li>\n</ul>\n","categories":["JVM"],"tags":["后端","JVM"]},{"title":"OOM常见异常","url":"/JVM/OOM%E5%B8%B8%E8%A7%81%E5%BC%82%E5%B8%B8/","content":"<!-- https://zhuanlan.zhihu.com/p/63916807 -->\n\n<h2 id=\"堆内存溢出\"><a href=\"#堆内存溢出\" class=\"headerlink\" title=\"堆内存溢出\"></a>堆内存溢出</h2><p><strong>原因</strong></p>\n<ul>\n<li>java堆内存不够</li>\n<li>业务高峰，创建对象过多</li>\n<li>内存泄露</li>\n<li>内存碎片严重，无法分配给大对象</li>\n</ul>\n<p><strong>解决</strong></p>\n<ul>\n<li>调整 -Xmx 参数增加堆大小</li>\n<li>修复应用程序中的内存泄漏</li>\n</ul>\n<span id=\"more\"></span>\n\n<p><strong>案例</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/** VM Args: -Xms10m -Xmx10m */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">HeapOOMDemo</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">byte</span>[] b = <span class=\"keyword\">new</span> <span class=\"title class_\">byte</span>[<span class=\"number\">20</span> * <span class=\"number\">1024</span> * <span class=\"number\">1024</span>];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>运行结果：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">Exception in thread <span class=\"string\">&quot;main&quot;</span> java.lang.OutOfMemoryError: Java heap space</span><br><span class=\"line\">\tat com.example.demo.HeapOOMDemo.main(HeapOOMDemo.java:<span class=\"number\">7</span>)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"栈内存溢出\"><a href=\"#栈内存溢出\" class=\"headerlink\" title=\"栈内存溢出\"></a>栈内存溢出</h2><p><strong>原因</strong></p>\n<ul>\n<li>方法调用层次过多（比如存在无限递归调用）</li>\n<li>线程栈太小</li>\n</ul>\n<p><strong>解决</strong></p>\n<ul>\n<li>优化程序设计，减少方法调用层次</li>\n<li>调整 -Xss 参数增加线程栈大小</li>\n</ul>\n<p><strong>案例</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/** VM Args: -Xss256k */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">StackOFDemo</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        methods();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">methods</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        methods();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>运行结果：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">Exception in thread <span class=\"string\">&quot;main&quot;</span> java.lang.StackOverflowError</span><br><span class=\"line\">\tat com.example.demo.StackOFDemo.methods(StackOFDemo.java:<span class=\"number\">11</span>)</span><br><span class=\"line\">\tat com.example.demo.StackOFDemo.methods(StackOFDemo.java:<span class=\"number\">11</span>)</span><br><span class=\"line\">\tat com.example.demo.StackOFDemo.methods(StackOFDemo.java:<span class=\"number\">11</span>)</span><br><span class=\"line\">\t......</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"方法区溢出\"><a href=\"#方法区溢出\" class=\"headerlink\" title=\"方法区溢出\"></a>方法区溢出</h2><p><strong>原因</strong></p>\n<ul>\n<li>从 Java 8 开始 Perm gen 改成了 MetaSpace，在本机内存中分配 Class 元数据（称为 MetaSpace）。当MetaSpace 耗尽，则抛出异常</li>\n</ul>\n<p><strong>解决</strong></p>\n<ul>\n<li>调整 -XX: MaxMetaSpaceSize 参数增加MetaSpace大小</li>\n<li>取消 -XX: MaxMetaspaceSize</li>\n<li>减小 Java 堆大小,为 MetaSpace 提供更多的可用空间</li>\n<li>为服务器分配更多的内存</li>\n<li>可能是应用程序 bug，修复 bug</li>\n</ul>\n<p><strong>案例</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.cglib.proxy.Enhancer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.cglib.proxy.MethodInterceptor;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.cglib.proxy.MethodProxy;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.Method;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/** VM Args: -XX:MetaspaceSize=10m -XX:MaxMetaspaceSize=10m */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MethodAreaOOMDemo</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">class</span> <span class=\"title class_\">OOMObject</span> &#123;  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">            <span class=\"type\">Enhancer</span> <span class=\"variable\">enhancer</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Enhancer</span>();</span><br><span class=\"line\">            enhancer.setSuperclass(OOMObject.class);</span><br><span class=\"line\">            enhancer.setUseCache(<span class=\"literal\">false</span>);</span><br><span class=\"line\">            enhancer.setCallback(</span><br><span class=\"line\">                    <span class=\"keyword\">new</span> <span class=\"title class_\">MethodInterceptor</span>() &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">public</span> Object <span class=\"title function_\">intercept</span><span class=\"params\">(Object obj,</span></span><br><span class=\"line\"><span class=\"params\">                                                Method method,</span></span><br><span class=\"line\"><span class=\"params\">                                                Object[] objects,</span></span><br><span class=\"line\"><span class=\"params\">                                                MethodProxy methodProxy)</span> <span class=\"keyword\">throws</span> Throwable &#123;</span><br><span class=\"line\">                            <span class=\"keyword\">return</span> methodProxy.invokeSuper(obj, objects);</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">            );</span><br><span class=\"line\">            enhancer.create();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>运行结果：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">Exception in thread <span class=\"string\">&quot;main&quot;</span> java.lang.OutOfMemoryError: Metaspace</span><br><span class=\"line\">\tat org.springframework.cglib.core.ReflectUtils.defineClass(ReflectUtils.java:<span class=\"number\">526</span>)</span><br><span class=\"line\">\tat org.springframework.cglib.core.AbstractClassGenerator.generate(AbstractClassGenerator.java:<span class=\"number\">363</span>)</span><br><span class=\"line\">\tat org.springframework.cglib.proxy.Enhancer.generate(Enhancer.java:<span class=\"number\">582</span>)</span><br><span class=\"line\">\tat org.springframework.cglib.core.AbstractClassGenerator$ClassLoaderData.get(AbstractClassGenerator.java:<span class=\"number\">131</span>)</span><br><span class=\"line\">\tat org.springframework.cglib.core.AbstractClassGenerator.create(AbstractClassGenerator.java:<span class=\"number\">319</span>)</span><br><span class=\"line\">\tat org.springframework.cglib.proxy.Enhancer.createHelper(Enhancer.java:<span class=\"number\">569</span>)</span><br><span class=\"line\">\tat org.springframework.cglib.proxy.Enhancer.create(Enhancer.java:<span class=\"number\">384</span>)</span><br><span class=\"line\">\tat com.example.demo.MethodAreaOOMDemo.main(MethodAreaOOMDemo.java:<span class=\"number\">29</span>)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"直接内存溢出\"><a href=\"#直接内存溢出\" class=\"headerlink\" title=\"直接内存溢出\"></a>直接内存溢出</h2><p><strong>原因</strong></p>\n<ul>\n<li>直接内存不够</li>\n</ul>\n<p><strong>解决</strong></p>\n<ul>\n<li>调整 -XX:MaxDirectMemorySize 参数增加内存大小</li>\n</ul>\n<p><strong>案例</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.nio.ByteBuffer;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/** VM Args: -XX:MaxDirectMemorySize=5m */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">DirectMemoryOOMDemo</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;MaxDirectMemorySize：&quot;</span> +</span><br><span class=\"line\">                (sun.misc.VM.maxDirectMemory() / (<span class=\"type\">double</span>)<span class=\"number\">1024</span> / <span class=\"number\">1024</span>) + <span class=\"string\">&quot;MB&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">ByteBuffer</span> <span class=\"variable\">buffer</span> <span class=\"operator\">=</span> ByteBuffer.allocateDirect(<span class=\"number\">6</span> * <span class=\"number\">1024</span> * <span class=\"number\">1024</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>运行结果：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">MaxDirectMemorySize：<span class=\"number\">5.</span>0MB</span><br><span class=\"line\">Exception in thread <span class=\"string\">&quot;main&quot;</span> java.lang.OutOfMemoryError: Direct buffer memory</span><br><span class=\"line\">\tat java.nio.Bits.reserveMemory(Bits.java:<span class=\"number\">694</span>)</span><br><span class=\"line\">\tat java.nio.DirectByteBuffer.&lt;init&gt;(DirectByteBuffer.java:<span class=\"number\">123</span>)</span><br><span class=\"line\">\tat java.nio.ByteBuffer.allocateDirect(ByteBuffer.java:<span class=\"number\">311</span>)</span><br><span class=\"line\">\tat com.example.demo.DirectMemoryOOMDemo.main(DirectMemoryOOMDemo.java:<span class=\"number\">11</span>)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"GC开销超过限制\"><a href=\"#GC开销超过限制\" class=\"headerlink\" title=\"GC开销超过限制\"></a>GC开销超过限制</h2><p><strong>原因</strong></p>\n<ul>\n<li>GC回收时间过长：超过98%的时间在进行垃圾回收，且回收了不到2%的堆空间，连续多次</li>\n</ul>\n<p><strong>解决</strong></p>\n<ul>\n<li>调整 -Xmx 参数增加堆大小</li>\n<li>使用 -XX:-UseGCOverheadLimit 取消 GC 开销限制</li>\n<li>修复应用程序中的内存泄漏</li>\n</ul>\n<p><strong>案例</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/** VM Args: -Xms10m -Xmx10m -XX:MaxDirectMemorySize=5m */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">GCOverheadDemo</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        List&lt;String&gt; list = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">                list.add(String.valueOf(++i).intern());</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Throwable e) &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;i值：&quot;</span> + i);</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> e;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>运行结果：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">i值：<span class=\"number\">147681</span></span><br><span class=\"line\">Exception in thread <span class=\"string\">&quot;main&quot;</span> java.lang.OutOfMemoryError: GC overhead limit exceeded</span><br><span class=\"line\">\tat java.lang.Integer.toString(Integer.java:<span class=\"number\">403</span>)</span><br><span class=\"line\">\tat java.lang.String.valueOf(String.java:<span class=\"number\">3099</span>)</span><br><span class=\"line\">\tat com.example.demo.GCOverheadDemo.main(GCOverheadDemo.java:<span class=\"number\">15</span>)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"线程创建限制\"><a href=\"#线程创建限制\" class=\"headerlink\" title=\"线程创建限制\"></a>线程创建限制</h2><p><strong>原因</strong></p>\n<ul>\n<li>进程和操作系统的内存资源限制</li>\n<li>进程和操作系统的线程数限制</li>\n<li>Linux中的线程被实现为轻量级进程，因此，还受到pid数量的限制</li>\n</ul>\n<p><strong>解决</strong></p>\n<ul>\n<li>排查应用是否创建了过多的线程</li>\n<li>调整操作系统线程数阈值</li>\n<li>增加机器内存</li>\n<li>减小堆内存</li>\n<li>减少进程数</li>\n<li>减小线程栈大小</li>\n<li>增大pid范围</li>\n</ul>\n<p><strong>案例</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">UnableCreateNewThreadDemo</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(() -&gt; &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                        Thread.sleep(Integer.MAX_VALUE);</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">                        e.printStackTrace();</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;, String.valueOf(++i)).start();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Throwable e) &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;i值：&quot;</span> + i);</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> e;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>运行结果：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">i值：<span class=\"number\">4071</span></span><br><span class=\"line\">Exception in thread <span class=\"string\">&quot;main&quot;</span> java.lang.OutOfMemoryError: unable to create <span class=\"keyword\">new</span> <span class=\"title class_\">native</span> thread</span><br><span class=\"line\">\tat java.lang.Thread.start0(Native Method)</span><br><span class=\"line\">\tat java.lang.Thread.start(Thread.java:<span class=\"number\">717</span>)</span><br><span class=\"line\">\tat com.example.demo.UnableCreateNewThreadDemo.main(UnableCreateNewThreadDemo.java:<span class=\"number\">16</span>)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><ul>\n<li><a href=\"https://segmentfault.com/a/1190000017226359\">煮酒科技</a></li>\n<li><a href=\"https://www.jianshu.com/p/2fdee831ed03\">CHEN川</a></li>\n</ul>\n","categories":["JVM"],"tags":["后端","JVM"]},{"title":"体系结构","url":"/JVM/%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/","content":"<h2 id=\"JVM体系结构\"><a href=\"#JVM体系结构\" class=\"headerlink\" title=\"JVM体系结构\"></a>JVM体系结构</h2><img src=\"/JVM/%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/JVM%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84.jpeg\" class=\"\" title=\"JVM体系结构\">\n\n<span id=\"more\"></span>\n\n<h3 id=\"方法区（Method-Area）\"><a href=\"#方法区（Method-Area）\" class=\"headerlink\" title=\"方法区（Method Area）\"></a>方法区（Method Area）</h3><ul>\n<li>和堆一样，被所有线程共享。存储已经被虚拟机加载的类信息、常量、静态变量等数据。此外，还有一个别名-非堆(Hon-Heap)。</li>\n<li>特点：线程共享，会出现OOM。</li>\n</ul>\n<h3 id=\"堆（Heap）\"><a href=\"#堆（Heap）\" class=\"headerlink\" title=\"堆（Heap）\"></a>堆（Heap）</h3><ul>\n<li>Java堆是JVM内存里面最大的一部分，被所有线程共享，在虚拟机启动的时候创建。所有的对象实例、数据(堆上分配)。Java堆也是GC主要的管理区域。</li>\n<li>特点：线程共享，会出现OOM。</li>\n</ul>\n<h3 id=\"虚拟机栈（Java-Stack）\"><a href=\"#虚拟机栈（Java-Stack）\" class=\"headerlink\" title=\"虚拟机栈（Java Stack）\"></a>虚拟机栈（Java Stack）</h3><ul>\n<li>生命周期与线程相同。虚拟机栈描述的是Java方法执行的内存模型：每个方法在执行的同时都会创建一个栈帧来存储局部变量表、操作数栈、动态链接、方法出口等信息。一个方法的执行过程就是一个栈帧在虚拟机栈中入栈至出栈的过程。如果线程请求栈的深度大于JVM允许的深度，抛出 StackOverflowError 异常，如果虚拟机栈动态扩展时无法申请到足够的内存，会抛出 OutOfMemoryError 异常。</li>\n<li>特点：线程私有，会出现OOM。</li>\n</ul>\n<img src=\"/JVM/%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/%E2%80%8B%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%A0%88.png\" class=\"\" title=\"虚拟机栈\">\n\n<h3 id=\"本地方法栈（Native-Method-Stack）\"><a href=\"#本地方法栈（Native-Method-Stack）\" class=\"headerlink\" title=\"本地方法栈（Native Method Stack）\"></a>本地方法栈（Native Method Stack）</h3><ul>\n<li>这部分与虚拟机栈作用类似，区别是虚拟机栈为虚拟机执行Java方法服务，本地方法栈则为虚拟机使用到的Native方法服务。和虚拟机栈一样，会抛出 StackOverflowError 和 OutOfMemoryError 异常。</li>\n<li>特点：线程私有，会出现OOM。</li>\n</ul>\n<h3 id=\"程序计数器（Program-Counter-Register）\"><a href=\"#程序计数器（Program-Counter-Register）\" class=\"headerlink\" title=\"程序计数器（Program Counter Register）\"></a>程序计数器（Program Counter Register）</h3><ul>\n<li>“当前线程所执行的字节码的行号指示器。” 存放着下一条将要执行的字节码指令的位置，假如没有ta，分支、循环、跳转、异常处理、线程恢复等功能都实现不了。如果当前执行Java方法，PC的值是正在执行的虚拟机字节码指令的地址，如果执行的是Native方法，比如 String#intern ，PC的值为空(Undefined)。</li>\n<li>特点：线程私有，不会出现OOM。</li>\n</ul>\n<h3 id=\"整体总结\"><a href=\"#整体总结\" class=\"headerlink\" title=\"整体总结\"></a>整体总结</h3><img src=\"/JVM/%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/JVM%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B%E6%80%BB%E7%BB%93.png\" class=\"\" title=\"JVM内存模型总结\">\n\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><ul>\n<li><a href=\"https://mp.weixin.qq.com/s?__biz=MzU3NDY4NzQwNQ==&mid=2247483820&idx=1&sn=8418f0f6a618bb0f0ca0980af09a816f&chksm=fd2fd06eca5859786ab124dd204a7ec9b1ad3ed230b9b531086cc6729a277a05d3e8307b7e0d&scene=21#wechat_redirect\">无敌码农</a></li>\n<li><a href=\"https://github.com/doocs/jvm/blob/master/docs/01-jvm-memory-structure.md\">Doocs</a></li>\n</ul>\n","categories":["JVM"],"tags":["后端","JVM"]},{"title":"Kubernetes","url":"/Kubernetes/Kubernetes/","content":"<h2 id=\"K8S-介绍\"><a href=\"#K8S-介绍\" class=\"headerlink\" title=\"K8S 介绍\"></a>K8S 介绍</h2><h3 id=\"K8S-概述\"><a href=\"#K8S-概述\" class=\"headerlink\" title=\"K8S 概述\"></a>K8S 概述</h3><ul>\n<li>K8S 是谷歌在2014年开业的容器化集群管理系统。</li>\n<li>使用 K8S 进行容器化应用部署。</li>\n<li>使用 K8S 利于应用扩展。</li>\n<li>K8S 目标实施让部署容器化应用更加简洁和高效。</li>\n</ul>\n<span id=\"more\"></span>\n\n<h3 id=\"K8S特性\"><a href=\"#K8S特性\" class=\"headerlink\" title=\"K8S特性\"></a>K8S特性</h3><ul>\n<li><strong>自动装箱：</strong> 根据资源需求自动部署容器。</li>\n<li><strong>自我修复：</strong> 容器失败时自动重启；Node 故障时重新部署和调度容器；监控失败时暂停服务，直至容器恢复。</li>\n<li><strong>水平扩展：</strong> 通过命令、UI 或 CPU 使用率自动扩展或缩减容器规模。</li>\n<li><strong>服务发现：</strong> 内置服务发现和负载均衡，无需额外机制。</li>\n<li><strong>滚动更新：</strong> 支持一次性或批量更新应用。</li>\n<li><strong>版本回退：</strong> 支持快速回退至历史版本。</li>\n<li><strong>密钥和配置管理：</strong> 无需重建镜像即可更新密钥和配置。</li>\n<li><strong>存储编排：</strong> 自动挂载存储系统，支持本地、网络存储（如 NFS、Gluster、Ceph）及云存储，适合有状态应用。</li>\n<li><strong>批处理：</strong> 支持一次性任务和定时任务，满足批量数据处理需求。</li>\n</ul>\n<h3 id=\"K8S-架构组件\"><a href=\"#K8S-架构组件\" class=\"headerlink\" title=\"K8S 架构组件\"></a>K8S 架构组件</h3><ul>\n<li><strong>Master Node 组件</strong><ul>\n<li><code>API Server</code> 集群统一入口，处理 RESTful 请求，数据存储至 etcd。</li>\n<li><code>Controller Manager</code> 管理集群后台任务，每种资源对应一个控制器。</li>\n<li><code>Scheduler</code> 负责节点调度，根据策略将应用部署到合适的节点。</li>\n<li><code>etcd</code> 存储系统，用于保存集群相关的数据。</li>\n</ul>\n</li>\n<li><strong>Worker Node 组件</strong><ul>\n<li><code>Kubelet</code> 节点代理，接收主节点指令，管理本地容器。</li>\n<li><code>Kube-Proxy</code> 提供网络代理和负载均衡功能。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"K8S-核心概念\"><a href=\"#K8S-核心概念\" class=\"headerlink\" title=\"K8S 核心概念\"></a>K8S 核心概念</h3><ul>\n<li><code>Pod</code> 最小部署单元；一组容器的集合；共享网络；生命周期是短暂的。</li>\n<li><code>Controller</code> 确保预期的 Pod 副本数量；无状态应用部署；有状态应用部署；确保所有的 Node 运行同一个 Pod；一次性任务和定时任务。</li>\n<li><code>Service</code> 定义一组 Pod 的访问规则。</li>\n</ul>\n<h2 id=\"K8S-集群搭建\"><a href=\"#K8S-集群搭建\" class=\"headerlink\" title=\"K8S 集群搭建\"></a>K8S 集群搭建</h2><h3 id=\"安装要求\"><a href=\"#安装要求\" class=\"headerlink\" title=\"安装要求\"></a>安装要求</h3><ul>\n<li>操作系统 CentOS7.x</li>\n<li>硬件要求：2GB 或更多 RAM，2个CPU 或更多 CPU，硬盘 30GB 或更多</li>\n<li>集群中所有机器之间网络互通</li>\n<li>可以访问外网，需要拉取镜像</li>\n<li>禁止 swap 分区</li>\n</ul>\n<h3 id=\"系统初始化\"><a href=\"#系统初始化\" class=\"headerlink\" title=\"系统初始化\"></a>系统初始化</h3><ol>\n<li><strong>关闭防火墙：</strong><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ systemctl stop firewalld</span><br><span class=\"line\">$ systemctl <span class=\"built_in\">disable</span> firewalld</span><br></pre></td></tr></table></figure></li>\n<li><strong>关闭 selinux：</strong><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ sed -i <span class=\"string\">&#x27;s/enforcing/disabled/&#x27;</span> /etc/selinux/config <span class=\"comment\"># 永久</span></span><br><span class=\"line\">$ setenforce 0 <span class=\"comment\"># 临时</span></span><br></pre></td></tr></table></figure></li>\n<li><strong>关闭 swap：</strong><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ swapoff -a      <span class=\"comment\"># 临时</span></span><br><span class=\"line\">$ sed -ri <span class=\"string\">&#x27;s/.*swap.*/#&amp;/&#x27;</span> /etc/fstab  <span class=\"comment\"># 永久</span></span><br></pre></td></tr></table></figure></li>\n<li><strong>主机名：</strong><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hostnamectl set-hostname &lt;hostname&gt;</span><br></pre></td></tr></table></figure></li>\n<li><strong>在 master 添加 hosts：</strong><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">cat</span> &gt;&gt; /etc/hosts &lt;&lt; <span class=\"string\">EOF</span></span><br><span class=\"line\"><span class=\"string\">192.168.1.1 k8s-master</span></span><br><span class=\"line\"><span class=\"string\">192.168.1.2 k8s-node1</span></span><br><span class=\"line\"><span class=\"string\">192.168.1.3 k8s-node2</span></span><br><span class=\"line\"><span class=\"string\">EOF</span></span><br></pre></td></tr></table></figure></li>\n<li><strong>将桥接的 IPv4 流量传递到 iptables 的链：</strong><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">cat</span> &gt; /etc/sysctl.d/k8s.conf &lt;&lt; <span class=\"string\">EOF</span></span><br><span class=\"line\"><span class=\"string\">net.bridge.bridge-nf-call-ip6tables = 1</span></span><br><span class=\"line\"><span class=\"string\">net.bridge.bridge-nf-call-iptables = 1</span></span><br><span class=\"line\"><span class=\"string\">EOF</span></span><br><span class=\"line\"></span><br><span class=\"line\">$ sysctl --system <span class=\"comment\"># 生效</span></span><br></pre></td></tr></table></figure></li>\n<li><strong>时间同步：</strong><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ yum install ntpdate -y</span><br><span class=\"line\">$ ntpdate time.windows.com</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h3 id=\"方式一：kubeadm\"><a href=\"#方式一：kubeadm\" class=\"headerlink\" title=\"方式一：kubeadm\"></a>方式一：kubeadm</h3><h4 id=\"安装-Docker-kubeadm-kubelet\"><a href=\"#安装-Docker-kubeadm-kubelet\" class=\"headerlink\" title=\"安装 Docker&#x2F;kubeadm&#x2F;kubelet\"></a>安装 Docker&#x2F;kubeadm&#x2F;kubelet</h4><ol>\n<li><strong>安装 Docker：</strong><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ wget https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo -O</span><br><span class=\"line\">/etc/yum.repos.d/docker-ce.repo</span><br><span class=\"line\">$ yum -y install docker-ce-18.06.1.ce-3.el7</span><br><span class=\"line\">$ systemctl <span class=\"built_in\">enable</span> docker &amp;&amp; systemctl start docker</span><br><span class=\"line\">$ docker --version</span><br></pre></td></tr></table></figure></li>\n<li><strong>设置 Docker 阿里云镜像：</strong><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">cat</span> &gt; /etc/docker/daemon.json &lt;&lt; <span class=\"string\">EOF</span></span><br><span class=\"line\"><span class=\"string\">&#123;</span></span><br><span class=\"line\"><span class=\"string\">&quot;registry-mirrors&quot;: [&quot;https://b9pmyelo.mirror.aliyuncs.com&quot;]</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br><span class=\"line\"><span class=\"string\">EOF</span></span><br><span class=\"line\">$ systemctl restart docker</span><br></pre></td></tr></table></figure></li>\n<li><strong>添加 Yum 阿里云软件源：</strong><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">cat</span> &gt; /etc/yum.repos.d/kubernetes.repo &lt;&lt; <span class=\"string\">EOF</span></span><br><span class=\"line\"><span class=\"string\">[kubernetes]</span></span><br><span class=\"line\"><span class=\"string\">name=Kubernetes</span></span><br><span class=\"line\"><span class=\"string\">baseurl=https://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64</span></span><br><span class=\"line\"><span class=\"string\">enabled=1</span></span><br><span class=\"line\"><span class=\"string\">gpgcheck=0</span></span><br><span class=\"line\"><span class=\"string\">repo_gpgcheck=0</span></span><br><span class=\"line\"><span class=\"string\">gpgkey=https://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg</span></span><br><span class=\"line\"><span class=\"string\">https://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpg</span></span><br><span class=\"line\"><span class=\"string\">EOF</span></span><br></pre></td></tr></table></figure></li>\n<li><strong>安装 kubeadm，kubelet 和 kubectl：</strong><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ yum install -y kubelet-1.18.0 kubeadm-1.18.0 kubectl-1.18.0</span><br><span class=\"line\">$ systemctl <span class=\"built_in\">enable</span> kubelet</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h4 id=\"部署-Kubernetes-Master\"><a href=\"#部署-Kubernetes-Master\" class=\"headerlink\" title=\"部署 Kubernetes Master\"></a>部署 Kubernetes Master</h4><ol>\n<li><strong>kubeadm 初始化（Master中执行）：</strong><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ kubeadm init \\</span><br><span class=\"line\">--apiserver-advertise-address=192.168.1.1 \\</span><br><span class=\"line\">--image-repository registry.aliyuncs.com/google_containers \\</span><br><span class=\"line\">--kubernetes-version v1.18.0 \\</span><br><span class=\"line\">--service-cidr=10.96.0.0/12 \\</span><br><span class=\"line\">--pod-network-cidr=10.244.0.0/16</span><br></pre></td></tr></table></figure></li>\n<li><strong>使用 kubectl 工具（Master中执行）：</strong><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">mkdir</span> -p <span class=\"variable\">$HOME</span>/.kube</span><br><span class=\"line\">$ sudo <span class=\"built_in\">cp</span> -i /etc/kubernetes/admin.conf <span class=\"variable\">$HOME</span>/.kube/config</span><br><span class=\"line\">$ sudo <span class=\"built_in\">chown</span> $(<span class=\"built_in\">id</span> -u):$(<span class=\"built_in\">id</span> -g) <span class=\"variable\">$HOME</span>/.kube/config</span><br></pre></td></tr></table></figure></li>\n<li><strong>安装 CNI 网络插件（Master中执行）：</strong><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ kubectl apply –f</span><br><span class=\"line\">https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kubeflannel.yml</span><br><span class=\"line\">$ kubectl get pods -n kube-system</span><br></pre></td></tr></table></figure></li>\n<li><strong>加入 Node（所有Node中执行）：</strong><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ kubeadm init 输出的 kubeadm <span class=\"built_in\">join</span> 命令：</span><br><span class=\"line\">  kubeadm <span class=\"built_in\">join</span> 192.168.1.1:6443 --token esce21.q6hetwm8si29qxwn \\</span><br><span class=\"line\">--discovery-token-ca-cert-hash</span><br><span class=\"line\">sha256:00603a05805807501d7181c3d60b478788408cfe6cedefedb1f97569708be9c5</span><br><span class=\"line\">$ kubectl get nodes</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h4 id=\"测试-Kubernetes\"><a href=\"#测试-Kubernetes\" class=\"headerlink\" title=\"测试 Kubernetes\"></a>测试 Kubernetes</h4><ol>\n<li><strong>部署测试 Nginx：</strong><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ kubectl create deployment nginx --image=nginx</span><br><span class=\"line\">$ kubectl expose deployment nginx --port=80 --<span class=\"built_in\">type</span>=NodePort</span><br><span class=\"line\">$ kubectl get pod,svc</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h3 id=\"方式二：二进制包\"><a href=\"#方式二：二进制包\" class=\"headerlink\" title=\"方式二：二进制包\"></a>方式二：二进制包</h3><ul>\n<li>待补充…</li>\n</ul>\n<h3 id=\"方式三：高可用集群\"><a href=\"#方式三：高可用集群\" class=\"headerlink\" title=\"方式三：高可用集群\"></a>方式三：高可用集群</h3><ul>\n<li>待补充…</li>\n</ul>\n<h2 id=\"K8S-Kubectl命令\"><a href=\"#K8S-Kubectl命令\" class=\"headerlink\" title=\"K8S Kubectl命令\"></a>K8S Kubectl命令</h2><ul>\n<li><strong>kubectl 语法</strong><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ kubectl [<span class=\"built_in\">command</span>] [TYPE] [NAME] [flags]</span><br><span class=\"line\"></span><br><span class=\"line\">[<span class=\"built_in\">command</span>]：指定要对资源执行的操作，例如 create、get、describe 和delete</span><br><span class=\"line\">[TYPE]：指定资源类型</span><br><span class=\"line\">[NAME]：指定资源的名称，如果省略则会显示所有的资源</span><br><span class=\"line\">[flags]：指定可选的参数</span><br></pre></td></tr></table></figure></li>\n<li><strong>kubectl 命令</strong><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 基础命令</span></span><br><span class=\"line\">$ kubectl create：通过文件名（YAML/JSON）或标准输入创建资源</span><br><span class=\"line\">$ kubectl expose：将资源（如 Pod、Deployment）公开为 Service，创建网络访问入口</span><br><span class=\"line\">$ kubectl run：快速运行单个 Pod，常用于测试</span><br><span class=\"line\">$ kubectl <span class=\"built_in\">set</span>：修改资源属性，如镜像或资源限制</span><br><span class=\"line\">$ kubectl get：显示一个或多个资源</span><br><span class=\"line\">$ kubectl explain：查看资源字段文档，适合编写 YAML</span><br><span class=\"line\">$ kubectl edit：直接编辑集群中资源</span><br><span class=\"line\">$ kubectl delete：删除资源，支持多种方式</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## 部署命令</span></span><br><span class=\"line\">$ kubectl rollout：管理 Deployment 的发布过程</span><br><span class=\"line\">$ kubectl rolling-update：对 ReplicationController 滚动更新</span><br><span class=\"line\">$ kubectl scale：调整 Deployment、ReplicaSet 或 Job 的 Pod 副本数量</span><br><span class=\"line\">$ kubectl autoscale：创建 HPA 实现自动扩缩容</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## 集群管理命令</span></span><br><span class=\"line\">$ kubectl certificate：管理 CSR（证书签名请求）</span><br><span class=\"line\">$ kubectl cluster-info：显示集群控制平面信息</span><br><span class=\"line\">$ kubectl top：查看节点或 Pod 的资源（CPU/Memory/Storage）使用</span><br><span class=\"line\">$ kubectl cordon：标记节点为不可调度，防止新 Pod 调度到该节点</span><br><span class=\"line\">$ kubectl uncordon：取消节点的不可调度状态</span><br><span class=\"line\">$ kubectl drain：驱逐节点上的 Pod，准备维护</span><br><span class=\"line\">$ kubectl taint：管理节点污点，控制 Pod 调度</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## 故障诊断和调试命令</span></span><br><span class=\"line\">$ kubectl describe：显示资源（如 Pod、Node、Service）的详细信息，包括事件</span><br><span class=\"line\">$ kubectl logs：获取 Pod 中容器的日志</span><br><span class=\"line\">$ kubectl attach：附加到运行中的容器，类似 docker attach</span><br><span class=\"line\">$ kubectl <span class=\"built_in\">exec</span>：在容器中执行命令，类似 docker <span class=\"built_in\">exec</span></span><br><span class=\"line\">$ kubectl port-forward：将本地端口转发到 Pod 的端口，便于调试</span><br><span class=\"line\">$ kubectl proxy：创建到 Kubernetes API Server 的代理，便于直接访问 API</span><br><span class=\"line\">$ kubectl <span class=\"built_in\">cp</span>：在本地和容器之间复制文件</span><br><span class=\"line\">$ kubectl auth：检查用户或服务账户的权限</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## 高级命令</span></span><br><span class=\"line\">$ kubectl apply：通过声明式配置文件（YAML/JSON）创建或更新资源</span><br><span class=\"line\">$ kubectl patch：对资源进行部分更新（如修改字段）</span><br><span class=\"line\">$ kubectl replace：替换现有资源（需要完整配置文件）</span><br><span class=\"line\">$ kubectl convert：将配置文件在不同 API 版本间转换</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## 设置命令</span></span><br><span class=\"line\">$ kubectl label：添加或更新资源的标签</span><br><span class=\"line\">$ kubectl annotate：添加或更新资源的注释</span><br><span class=\"line\">$ kubectl completion：生成 kubectl 命令自动补全脚本</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## 其他命令</span></span><br><span class=\"line\">$ kubectl api-versions：列出支持的 API 版本</span><br><span class=\"line\">$ kubectl config：管理 kubeconfig 文件（如切换上下文或集群）</span><br><span class=\"line\">$ kubectl <span class=\"built_in\">help</span>：查看命令帮助</span><br><span class=\"line\">$ kubectl plugin：运行插件</span><br><span class=\"line\">$ kubectl version：查看版本信息</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"K8S-YAML文件\"><a href=\"#K8S-YAML文件\" class=\"headerlink\" title=\"K8S YAML文件\"></a>K8S YAML文件</h2><h3 id=\"YAML-文件快速生成\"><a href=\"#YAML-文件快速生成\" class=\"headerlink\" title=\"YAML 文件快速生成\"></a>YAML 文件快速生成</h3><ul>\n<li>使用<code>kubectl create</code>命令生成 yaml 文件<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ kubectl create deployment &lt;name&gt; --image=&lt;image&gt; -o yaml --dry-run=client &gt; my.yaml</span><br></pre></td></tr></table></figure></li>\n<li>使用<code>kubectl get</code>命令导出 yaml 文件<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ kubectl get deployment &lt;name&gt; -o=yaml --<span class=\"built_in\">export</span> &gt; my.yaml</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"YAML-文件必须属性\"><a href=\"#YAML-文件必须属性\" class=\"headerlink\" title=\"YAML 文件必须属性\"></a>YAML 文件必须属性</h3><ul>\n<li><strong>Pod</strong><figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span>              <span class=\"comment\"># API版本（可用kubectl api-versions命令查询）</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Pod</span>                   <span class=\"comment\"># 指定资源类型（可用kubectl api-resources查询）</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">my-pod</span>              <span class=\"comment\"># 元数据对象的名字</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span>                       <span class=\"comment\"># 定义资源的核心配置</span></span><br><span class=\"line\">  <span class=\"attr\">containers:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">nginx</span>             <span class=\"comment\"># 容器名称</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">nginx:latest</span>     <span class=\"comment\"># 容器镜像</span></span><br></pre></td></tr></table></figure></li>\n<li><strong>Deployment</strong><figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">apps/v1</span>        </span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Deployment</span>             </span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">my-deployment</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">env:</span> <span class=\"string\">my-test</span>            <span class=\"comment\"># 整个资源对象 标签</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">replicas:</span> <span class=\"number\">1</span>               <span class=\"comment\"># 副本数，必需（默认值 1）</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span>                 <span class=\"comment\"># 选择器，用于匹配 Pod 标签，必需</span></span><br><span class=\"line\">    <span class=\"attr\">matchLabels:</span></span><br><span class=\"line\">      <span class=\"attr\">app:</span> <span class=\"string\">my-app</span>           <span class=\"comment\"># 与 spec.template.metadata.labels 匹配</span></span><br><span class=\"line\">  <span class=\"attr\">template:</span>                 <span class=\"comment\"># Pod 模板，必需</span></span><br><span class=\"line\">    <span class=\"attr\">metadata:</span></span><br><span class=\"line\">      <span class=\"attr\">labels:</span></span><br><span class=\"line\">        <span class=\"attr\">app:</span> <span class=\"string\">my-app</span>         <span class=\"comment\"># Pod 标签，必需（生成 Pod 时自动带上这个标签）</span></span><br><span class=\"line\">    <span class=\"attr\">spec:</span></span><br><span class=\"line\">      <span class=\"attr\">containers:</span>           <span class=\"comment\"># 容器列表，必需</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">nginx</span></span><br><span class=\"line\">          <span class=\"attr\">image:</span> <span class=\"string\">nginx:latest</span></span><br></pre></td></tr></table></figure></li>\n<li><strong>Service</strong><figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span>         </span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Service</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">my-service</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span>                 <span class=\"comment\"># 选择器，用于选择后端 Pod，必需（除非是 ExternalName 类型）</span></span><br><span class=\"line\">    <span class=\"attr\">app:</span> <span class=\"string\">my-app</span></span><br><span class=\"line\">  <span class=\"attr\">ports:</span>                    <span class=\"comment\"># 端口列表，必需</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">protocol:</span> <span class=\"string\">TCP</span></span><br><span class=\"line\">      <span class=\"attr\">port:</span> <span class=\"number\">80</span></span><br><span class=\"line\">      <span class=\"attr\">targetPort:</span> <span class=\"number\">80</span></span><br></pre></td></tr></table></figure></li>\n<li><strong>ConfigMap</strong><figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">ConfigMap</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">my-config</span></span><br><span class=\"line\"><span class=\"attr\">data:</span>                       <span class=\"comment\"># data 或 binaryData 至少需要一个，用于存储配置数据，必需</span></span><br><span class=\"line\">  <span class=\"attr\">key1:</span> <span class=\"string\">value1</span>              </span><br></pre></td></tr></table></figure></li>\n<li><strong>PersistentVolumeClaim (PVC)</strong><figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">PersistentVolumeClaim</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">my-pvc</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">accessModes:</span>              <span class=\"comment\"># 访问模式，必需</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">ReadWriteOnce</span>         <span class=\"comment\"># 定义存储的访问模式</span></span><br><span class=\"line\">  <span class=\"attr\">resources:</span>                <span class=\"comment\"># 资源请求，必需</span></span><br><span class=\"line\">    <span class=\"attr\">requests:</span></span><br><span class=\"line\">      <span class=\"attr\">storage:</span> <span class=\"string\">1Gi</span>          <span class=\"comment\"># 指定请求的存储容量</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"K8S-Pod\"><a href=\"#K8S-Pod\" class=\"headerlink\" title=\"K8S Pod\"></a>K8S Pod</h2><h3 id=\"Pod-概念\"><a href=\"#Pod-概念\" class=\"headerlink\" title=\"Pod 概念\"></a>Pod 概念</h3><ul>\n<li>最小部署的单元</li>\n<li>一组容器的集合</li>\n<li>共享网络</li>\n<li>生命周期是短暂的</li>\n</ul>\n<h3 id=\"Pod-存在的意义\"><a href=\"#Pod-存在的意义\" class=\"headerlink\" title=\"Pod 存在的意义\"></a>Pod 存在的意义</h3><ul>\n<li><strong>容器运行模型：</strong> Docker 创建容器，每个容器运行一个进程或应用程序。</li>\n<li><strong>多容器设计：</strong> Pod 包含多个容器，每个容器运行一个应用程序，支持多进程协作。</li>\n<li><strong>亲密性应用：</strong> Pod 内的容器可直接交互、共享网络，适合频繁调用或紧密协作的应用场景。</li>\n</ul>\n<h3 id=\"Pod-实现机制\"><a href=\"#Pod-实现机制\" class=\"headerlink\" title=\"Pod 实现机制\"></a>Pod 实现机制</h3><ul>\n<li><strong>共享网络：</strong> 通过 <code>Pause</code> 容器创建共享网络命名空间，所有业务容器加入其中，实现网络共享。</li>\n<li><strong>共享存储：</strong> 使用 <code>Volume</code> 数据卷进行持久化存储，供 Pod 容器共享。</li>\n</ul>\n<h3 id=\"Pod-镜像拉取策略\"><a href=\"#Pod-镜像拉取策略\" class=\"headerlink\" title=\"Pod 镜像拉取策略\"></a>Pod 镜像拉取策略</h3><figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span>          </span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Pod</span>         </span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">my-pod</span>          </span><br><span class=\"line\"><span class=\"attr\">spec:</span>                   </span><br><span class=\"line\">  <span class=\"attr\">containers:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">nginx</span>    </span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">nginx:latest</span> </span><br><span class=\"line\">    <span class=\"attr\">imagePullPolicy:</span> <span class=\"string\">Always</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li><code>spec.containers[].imagePullPolicy</code> 镜像拉取策略<ul>\n<li><code>IfNotPresent</code> 默认值，镜像在宿主机上不存在时才拉取。</li>\n<li><code>Always</code> 每次创建 Pod 都会重新拉取一次镜像。</li>\n<li><code>Never</code> Pod 永远不会主动拉取这个镜像。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"Pod-资源限制\"><a href=\"#Pod-资源限制\" class=\"headerlink\" title=\"Pod 资源限制\"></a>Pod 资源限制</h3><figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Pod</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">my-pod</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">containers:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">mysql</span>   </span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">mysql:latest</span></span><br><span class=\"line\">    <span class=\"attr\">resources:</span></span><br><span class=\"line\">      <span class=\"attr\">requests:</span>             <span class=\"comment\"># 指定容器所需的最小资源</span></span><br><span class=\"line\">        <span class=\"attr\">memory:</span> <span class=\"string\">&quot;64Mi&quot;</span>      <span class=\"comment\"># 请求 64M 内存  </span></span><br><span class=\"line\">        <span class=\"attr\">cpu:</span> <span class=\"string\">&quot;250m&quot;</span>         <span class=\"comment\"># 请求 250 毫核 CPU（1/4 个 CPU 核心）</span></span><br><span class=\"line\">      <span class=\"attr\">limits:</span>               <span class=\"comment\"># 指定容器可用的最大资源</span></span><br><span class=\"line\">        <span class=\"attr\">memory:</span> <span class=\"string\">&quot;128Mi&quot;</span>     <span class=\"comment\"># 最多 128M 内存</span></span><br><span class=\"line\">        <span class=\"attr\">cpu:</span> <span class=\"string\">&quot;500m&quot;</span>         <span class=\"comment\"># 最多 500 毫核 CPU（1/2 个 CPU 核心）</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Pod-重启策略\"><a href=\"#Pod-重启策略\" class=\"headerlink\" title=\"Pod 重启策略\"></a>Pod 重启策略</h3><figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span>          </span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Pod</span>         </span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">my-pod</span>          </span><br><span class=\"line\"><span class=\"attr\">spec:</span>                   </span><br><span class=\"line\">  <span class=\"attr\">containers:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">nginx</span>    </span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">nginx:latest</span> </span><br><span class=\"line\">  <span class=\"attr\">restartPolicy:</span> <span class=\"string\">Never</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li><code>spec.restartPolicy</code> 重启策略<ul>\n<li><code>Always</code> 默认值，当容器终止退出后，总是重启容器。</li>\n<li><code>OnFailure</code> 当容器异常退出时（退出状态码非0），才重启容器。</li>\n<li><code>Never</code> 当容器终止退出，从不重启容器。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"Pod-健康检查\"><a href=\"#Pod-健康检查\" class=\"headerlink\" title=\"Pod 健康检查\"></a>Pod 健康检查</h3><figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span>                </span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Pod</span>                        </span><br><span class=\"line\"><span class=\"attr\">metadata:</span>                        </span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">my-pod</span>        </span><br><span class=\"line\"><span class=\"attr\">spec:</span>                             </span><br><span class=\"line\">  <span class=\"attr\">containers:</span>                     </span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">nginx</span>          </span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">nginx:latest</span>           </span><br><span class=\"line\">    <span class=\"attr\">livenessProbe:</span>                <span class=\"comment\"># 定义存活探针，检查容器是否存活</span></span><br><span class=\"line\">      <span class=\"attr\">httpGet:</span>                    <span class=\"comment\"># 使用 HTTP GET 请求进行探针检查</span></span><br><span class=\"line\">        <span class=\"attr\">path:</span> <span class=\"string\">/</span>                   <span class=\"comment\"># 检查的路径，Nginx 默认首页</span></span><br><span class=\"line\">        <span class=\"attr\">port:</span> <span class=\"number\">80</span>                  <span class=\"comment\"># 检查的端口，Nginx 默认监听 80</span></span><br><span class=\"line\">      <span class=\"attr\">initialDelaySeconds:</span> <span class=\"number\">15</span>     <span class=\"comment\"># 容器启动后延迟 15 秒开始首次探针</span></span><br><span class=\"line\">      <span class=\"attr\">periodSeconds:</span> <span class=\"number\">10</span>           <span class=\"comment\"># 每 10 秒执行一次探针检查</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li><code>spec.containers[].*Probe</code> 健康检查策略<ul>\n<li><code>livenessProbe</code> 存活探针，检查容器是否存活，失败将杀死容器，然后根据 Pod 的重启策略来操作。</li>\n<li><code>readinessProbe</code> 就绪探针，检查容器是否准备好接收流量，失败 K8S 会把 Pod 从 service endpoints 中剔除。</li>\n</ul>\n</li>\n<li><code>spec.containers[].*Probe。*</code> 健康检查请求方式<ul>\n<li><code>httpGet</code> 发送 HTTP 请求，返回 200-400 范围状态码为成功。</li>\n<li><code>exec</code> 执行 Shell 命令返回状态码是 0 为成功。</li>\n<li><code>tcpSocket</code> 发送 TCP Socket 建立成功。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"Pod-创建流程\"><a href=\"#Pod-创建流程\" class=\"headerlink\" title=\"Pod 创建流程\"></a>Pod 创建流程</h3><ul>\n<li><p><strong>解释：</strong></p>\n<ul>\n<li><code>API Server</code> 用户和集群的桥梁，存取 etcd。</li>\n<li><code>etcd</code> 保存所有 Pod 和集群状态。</li>\n<li><code>Scheduler</code> 决定 Pod 跑在哪个节点。</li>\n<li><code>Kubelet</code> 节点上的“管家”，创建和管理 Pod。</li>\n<li><code>Docker</code> 实际跑容器的工具。</li>\n</ul>\n</li>\n<li><p><strong>流程：</strong></p>\n<ol>\n<li><strong>用户提交 Pod 定义：</strong><ul>\n<li>用户通过 <code>kubectl apply -f xxx.yaml</code> 或其他方式提交 Pod 的 YAML 文件到 K8S 集群</li>\n<li>请求发送到 API Server</li>\n</ul>\n</li>\n<li><strong>API Server 处理请求：</strong><ul>\n<li>验证 YAML 文件的合法性（如语法、权限）</li>\n<li>存储 Pod 定义到 etcd，返回确认（Pod 对象创建，未运行）</li>\n</ul>\n</li>\n<li><strong>etcd 存储 Pod 数据：</strong><ul>\n<li>存储 Pod 的定义（包括名称、镜像、资源请求等）</li>\n</ul>\n</li>\n<li><strong>Scheduler 调度 Pod：</strong><ul>\n<li>监控 API Server（通过 etcd）中的未调度 Pod（<code>spec.nodeName</code> 为空）。</li>\n<li>根据节点资源（CPU、内存）、约束条件等选择合适的节点，更新 Pod 定义，设置 <code>spec.nodeName</code>（绑定 Pod 到节点）。</li>\n<li>将更新后的 Pod 数据写回 etcd（通过 API Server）。</li>\n</ul>\n</li>\n<li><strong>Kubelet 检测并创建 Pod：</strong><ul>\n<li>监控 API Server，获取分配到本节点的 Pod（通过 <code>spec.nodeName</code> 匹配）。</li>\n<li>调用容器运行时（如 Docker），根据 Pod 的 spec 创建容器，配置网络（CNI）和存储（Volume）。</li>\n<li>启动容器并监控其状态（如健康检查），定期向 API Server 更新 Pod 状态（如 Running、Failed）。</li>\n</ul>\n</li>\n<li><strong>Docker（或其他容器运行时）执行容器：</strong><ul>\n<li>接收 Kubelet 的指令，拉取容器镜像，创建并启动容器。</li>\n<li>配置网络和存储，报告状态给 Kubelet。</li>\n</ul>\n</li>\n</ol>\n</li>\n</ul>\n<h3 id=\"Pod-调度限制\"><a href=\"#Pod-调度限制\" class=\"headerlink\" title=\"Pod 调度限制\"></a>Pod 调度限制</h3><ol>\n<li><strong>resources 资源限制：</strong><figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Pod</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">my-pod</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">containers:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">mysql</span>   </span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">mysql:latest</span></span><br><span class=\"line\">    <span class=\"attr\">resources:</span></span><br><span class=\"line\">      <span class=\"attr\">requests:</span>             <span class=\"comment\"># 指定容器所需的最小资源</span></span><br><span class=\"line\">        <span class=\"attr\">memory:</span> <span class=\"string\">&quot;64Mi&quot;</span>      <span class=\"comment\"># 请求 64M 内存  </span></span><br><span class=\"line\">        <span class=\"attr\">cpu:</span> <span class=\"string\">&quot;250m&quot;</span>         <span class=\"comment\"># 请求 250 毫核 CPU（1/4 个 CPU 核心）</span></span><br><span class=\"line\">      <span class=\"attr\">limits:</span>               <span class=\"comment\"># 指定容器可用的最大资源</span></span><br><span class=\"line\">        <span class=\"attr\">memory:</span> <span class=\"string\">&quot;128Mi&quot;</span>     <span class=\"comment\"># 最多 128M 内存</span></span><br><span class=\"line\">        <span class=\"attr\">cpu:</span> <span class=\"string\">&quot;500m&quot;</span>         <span class=\"comment\"># 最多 500 毫核 CPU（1/2 个 CPU 核心）</span></span><br></pre></td></tr></table></figure></li>\n<li><strong>nodeSelector 标签限制：</strong><figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span>                         </span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Pod</span>                               </span><br><span class=\"line\"><span class=\"attr\">metadata:</span>                              </span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">my-pod</span>                          </span><br><span class=\"line\"><span class=\"attr\">spec:</span>                                   </span><br><span class=\"line\">  <span class=\"attr\">containers:</span>                          </span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">nginx</span>                       </span><br><span class=\"line\">      <span class=\"attr\">image:</span> <span class=\"string\">nginx:latest</span>              </span><br><span class=\"line\">  <span class=\"attr\">nodeSelector:</span>             <span class=\"comment\"># 节点选择器</span></span><br><span class=\"line\">    <span class=\"attr\">k1:</span> <span class=\"string\">v1</span>                  <span class=\"comment\"># 节点标签键值对，要求节点具有 k1=v1</span></span><br></pre></td></tr></table></figure></li>\n<li><strong>nodeAffinity 亲和性限制：</strong></li>\n</ol>\n<ul>\n<li><code>requiredDuringSchedulingIgnoredDuringExecution</code> 硬亲和性，约束条件必须满足。</li>\n<li><code>preferredDuringSchedulingIgnoredDuringExecution</code> 软亲和性，约束条件尝试满足，不保证。<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span>                           </span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Pod</span>                               </span><br><span class=\"line\"><span class=\"attr\">metadata:</span>                              </span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">my-pod</span>                    </span><br><span class=\"line\">  <span class=\"attr\">labels:</span>                               </span><br><span class=\"line\">    <span class=\"attr\">app:</span> <span class=\"string\">example</span>                        <span class=\"comment\"># 标签键值对，app=example</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span>                                </span><br><span class=\"line\">  <span class=\"attr\">containers:</span>                          </span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">nginx</span>                       </span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">nginx:latest</span>                </span><br><span class=\"line\">  <span class=\"attr\">affinity:</span>                             <span class=\"comment\"># 亲和性规则</span></span><br><span class=\"line\">    <span class=\"attr\">nodeAffinity:</span>                       <span class=\"comment\"># 节点亲和性</span></span><br><span class=\"line\">      <span class=\"attr\">requiredDuringSchedulingIgnoredDuringExecution:</span>  <span class=\"comment\"># 调度时必须满足的规则</span></span><br><span class=\"line\">        <span class=\"attr\">nodeSelectorTerms:</span>              <span class=\"comment\"># 节点选择条件</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">matchExpressions:</span>             <span class=\"comment\"># 匹配表达式</span></span><br><span class=\"line\">          <span class=\"bullet\">-</span> <span class=\"attr\">key:</span> <span class=\"string\">active</span>                 <span class=\"comment\"># 节点标签的键</span></span><br><span class=\"line\">            <span class=\"attr\">operator:</span> <span class=\"string\">In</span>                <span class=\"comment\"># 操作符，In 表示包含</span></span><br><span class=\"line\">            <span class=\"attr\">values:</span>                     <span class=\"comment\"># 匹配的值，可多个</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"string\">dev</span>                      </span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"string\">test</span>                      </span><br><span class=\"line\">      <span class=\"attr\">preferredDuringSchedulingIgnoredDuringExecution:</span>  <span class=\"comment\"># 调度时优先考虑的规则</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">weight:</span> <span class=\"number\">80</span>                      <span class=\"comment\"># 优先级权重（1-100）</span></span><br><span class=\"line\">        <span class=\"attr\">preference:</span>                     <span class=\"comment\"># 优先匹配条件</span></span><br><span class=\"line\">          <span class=\"attr\">matchExpressions:</span>             </span><br><span class=\"line\">          <span class=\"bullet\">-</span> <span class=\"attr\">key:</span> <span class=\"string\">group</span>                  </span><br><span class=\"line\">            <span class=\"attr\">operator:</span> <span class=\"string\">In</span>                </span><br><span class=\"line\">            <span class=\"attr\">values:</span>                     </span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"string\">other</span>                    </span><br></pre></td></tr></table></figure></li>\n</ul>\n<ol start=\"4\">\n<li><strong>Taint 污点和污点容忍限制：</strong><ul>\n<li><strong>使用场景：</strong><ul>\n<li>专用节点。</li>\n<li>配置特定硬件节点。</li>\n<li>基于Taint驱逐。</li>\n</ul>\n</li>\n<li><strong>污点策略：</strong><ul>\n<li><code>NoSchedule</code> 一定不被调度。</li>\n<li><code>PreferNoSchedule</code> 尽量不被调度。</li>\n<li><code>NoExecute</code> 不会调度，并且还会驱逐 Node 已有 Pod。</li>\n</ul>\n</li>\n<li><strong>具体使用：</strong> <figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 查看节点污点</span></span><br><span class=\"line\">kubectl describe node &lt;node-name&gt; | grep Taint</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 添加节点污点</span></span><br><span class=\"line\">kubectl taint node &lt;node-name&gt; key=value:污点策略</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 删除节点污点</span></span><br><span class=\"line\">kubectl taint node &lt;node-name&gt; key:污点策略-</span><br></pre></td></tr></table></figure></li>\n<li><strong>污点容忍：</strong> <figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Pod</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">my-pod</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">containers:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">nginx</span></span><br><span class=\"line\">      <span class=\"attr\">image:</span> <span class=\"string\">nginx:latest</span></span><br><span class=\"line\">  <span class=\"attr\">tolerations:</span>                <span class=\"comment\"># 污点容忍</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">key:</span> <span class=\"string\">&quot;k1&quot;</span>               <span class=\"comment\"># 污点的键</span></span><br><span class=\"line\">      <span class=\"attr\">operator:</span> <span class=\"string\">&quot;Equal&quot;</span>       <span class=\"comment\"># 匹配操作符，Equal 表示相等匹配</span></span><br><span class=\"line\">      <span class=\"attr\">value:</span> <span class=\"string\">&quot;v1&quot;</span>             <span class=\"comment\"># 污点的值</span></span><br><span class=\"line\">      <span class=\"attr\">effect:</span> <span class=\"string\">&quot;NoSchedule&quot;</span>    <span class=\"comment\"># 污点策略</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ol>\n<h2 id=\"K8S-Controller\"><a href=\"#K8S-Controller\" class=\"headerlink\" title=\"K8S Controller\"></a>K8S Controller</h2><h3 id=\"Controller-概念\"><a href=\"#Controller-概念\" class=\"headerlink\" title=\"Controller 概念\"></a>Controller 概念</h3><ul>\n<li>在集群上管理和运行容器的对象。</li>\n</ul>\n<h3 id=\"Controller-作用\"><a href=\"#Controller-作用\" class=\"headerlink\" title=\"Controller 作用\"></a>Controller 作用</h3><ul>\n<li>监控 Pod 状态，自动调整（如重启、扩容）。</li>\n<li>提供高级功能，如副本管理、滚动更新等。</li>\n</ul>\n<h3 id=\"Controller-常用类型\"><a href=\"#Controller-常用类型\" class=\"headerlink\" title=\"Controller 常用类型\"></a>Controller 常用类型</h3><ul>\n<li><code>ReplicaSet</code> 确保指定数量的 Pod 副本运行。</li>\n<li><code>Deployment</code> 管理无状态应用（<code>ReplicaSet</code>），提供滚动更新、回滚等功能。</li>\n<li><code>StatefulSet</code> 管理有状态应用，维护 Pod 顺序和唯一性。</li>\n<li><code>DaemonSet</code> 守护进程，确保每个节点运行一个 Pod 副本。</li>\n<li><code>Job/CronJob</code> 运行一次性或定时任务。</li>\n</ul>\n<h3 id=\"无状态与有状态的区别\"><a href=\"#无状态与有状态的区别\" class=\"headerlink\" title=\"无状态与有状态的区别\"></a>无状态与有状态的区别</h3><table>\n<thead>\n<tr>\n<th></th>\n<th>无状态应用</th>\n<th>有状态应用</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>状态保存</td>\n<td>不保存状态，数据在外</td>\n<td>保存数据，有本地数据</td>\n</tr>\n<tr>\n<td>实例等同性</td>\n<td>实例相同，可随意替换</td>\n<td>实例不同，有唯一标识或数据</td>\n</tr>\n<tr>\n<td>扩容难度</td>\n<td>简单，直接增&#x2F;删实例</td>\n<td>复杂，需考虑数据同步和启动顺序</td>\n</tr>\n<tr>\n<td>Kubernetes控制器</td>\n<td>Deployment、ReplicaSet</td>\n<td>StatefulSet</td>\n</tr>\n<tr>\n<td>应用场景</td>\n<td>Web服务、API服务</td>\n<td>数据库、消息队列</td>\n</tr>\n</tbody></table>\n<h3 id=\"Deployment\"><a href=\"#Deployment\" class=\"headerlink\" title=\"Deployment\"></a>Deployment</h3><ol>\n<li><strong>创建 deployment，生成 yaml 文件部署：</strong><figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 生成 yaml 文件</span></span><br><span class=\"line\"><span class=\"string\">kubectl</span> <span class=\"string\">create</span> <span class=\"string\">deployment</span> <span class=\"string\">web-deploy</span> <span class=\"string\">--image=nginx</span> <span class=\"string\">--dry-run=client</span> <span class=\"string\">-o</span> <span class=\"string\">yaml</span> <span class=\"string\">&gt;</span> <span class=\"string\">web-deploy.yaml</span></span><br><span class=\"line\"><span class=\"comment\"># 使用 yaml 部署</span></span><br><span class=\"line\"><span class=\"string\">kubectl</span> <span class=\"string\">apply</span> <span class=\"string\">-f</span> <span class=\"string\">web-deploy.yaml</span></span><br><span class=\"line\"><span class=\"comment\"># 查看资源</span></span><br><span class=\"line\"><span class=\"string\">kubectl</span> <span class=\"string\">get</span> <span class=\"string\">deploy</span></span><br><span class=\"line\"><span class=\"string\">kubectl</span> <span class=\"string\">get</span> <span class=\"string\">pods</span></span><br></pre></td></tr></table></figure></li>\n<li><strong>创建 service，暴露对外端口号：</strong><figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">kubectl</span> <span class=\"string\">expose</span> <span class=\"string\">deployment</span> <span class=\"string\">web-deploy</span> <span class=\"string\">--port=80</span> <span class=\"string\">--type=NodePort</span> <span class=\"string\">--target-port=80</span> <span class=\"string\">--name=web-service</span> <span class=\"string\">-o</span> <span class=\"string\">yaml</span> <span class=\"string\">&gt;</span> <span class=\"string\">web-service.yaml</span></span><br><span class=\"line\"><span class=\"string\">kubectl</span> <span class=\"string\">apply</span> <span class=\"string\">-f</span> <span class=\"string\">web-service.yaml</span></span><br><span class=\"line\"><span class=\"string\">kubectl</span> <span class=\"string\">get</span> <span class=\"string\">svc</span></span><br></pre></td></tr></table></figure></li>\n<li><strong>应用升级回滚和弹性伸缩：</strong><figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 应用升级（更新 nginx 镜像版本）</span></span><br><span class=\"line\"><span class=\"string\">kubectl</span> <span class=\"string\">set</span> <span class=\"string\">image</span> <span class=\"string\">deployment</span> <span class=\"string\">web-deploy</span> <span class=\"string\">nginx=nginx:1.15</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看升级状态</span></span><br><span class=\"line\"><span class=\"string\">kubectl</span> <span class=\"string\">rollout</span> <span class=\"string\">status</span> <span class=\"string\">deployment</span> <span class=\"string\">web-deploy</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看升级版本历史</span></span><br><span class=\"line\"><span class=\"string\">kubectl</span> <span class=\"string\">rollout</span> <span class=\"string\">history</span> <span class=\"string\">deployment</span> <span class=\"string\">web-deploy</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 回滚到上一个版本</span></span><br><span class=\"line\"><span class=\"string\">kubectl</span> <span class=\"string\">rollout</span> <span class=\"string\">undo</span> <span class=\"string\">deployment</span> <span class=\"string\">web-deploy</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 回滚到指定版本（比如 revision 2）</span></span><br><span class=\"line\"><span class=\"string\">kubectl</span> <span class=\"string\">rollout</span> <span class=\"string\">undo</span> <span class=\"string\">deployment</span> <span class=\"string\">web-deploy</span> <span class=\"string\">--to-revision=2</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 弹性伸缩（调整副本数量）</span></span><br><span class=\"line\"><span class=\"string\">kubectl</span> <span class=\"string\">scale</span> <span class=\"string\">deployment</span> <span class=\"string\">web-deploy</span> <span class=\"string\">--replicas=5</span></span><br></pre></td></tr></table></figure></li>\n</ol>\n<h3 id=\"StatefulSet\"><a href=\"#StatefulSet\" class=\"headerlink\" title=\"StatefulSet\"></a>StatefulSet</h3><figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Service</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">apps/v1</span>                         </span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Service</span>                          </span><br><span class=\"line\"><span class=\"attr\">metadata:</span>                               </span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">my-service</span>                    </span><br><span class=\"line\"><span class=\"attr\">spec:</span>                                   </span><br><span class=\"line\">  <span class=\"attr\">clusterIP:</span> <span class=\"string\">None</span>                       </span><br><span class=\"line\">  <span class=\"attr\">selector:</span>                            </span><br><span class=\"line\">    <span class=\"attr\">app:</span> <span class=\"string\">my-app</span>                            </span><br><span class=\"line\">  <span class=\"attr\">ports:</span>                                </span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">port:</span> <span class=\"number\">80</span>                            </span><br><span class=\"line\">      <span class=\"attr\">targetPort:</span> <span class=\"number\">80</span>                      </span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"comment\"># StatefulSet</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span>                     </span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">StatefulSet</span>                       <span class=\"comment\"># 资源类型为 StatefulSet</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span>                              </span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">my-statefulset</span>                           </span><br><span class=\"line\"><span class=\"attr\">spec:</span>                                   </span><br><span class=\"line\">  <span class=\"attr\">serviceName:</span> <span class=\"string\">my-service</span>               <span class=\"comment\"># 引用 Service 的名称</span></span><br><span class=\"line\">  <span class=\"attr\">replicas:</span> <span class=\"number\">2</span>                          </span><br><span class=\"line\">  <span class=\"attr\">selector:</span>                          </span><br><span class=\"line\">    <span class=\"attr\">matchLabels:</span>                       </span><br><span class=\"line\">      <span class=\"attr\">app:</span> <span class=\"string\">my-app</span>                          </span><br><span class=\"line\">  <span class=\"attr\">template:</span>                             </span><br><span class=\"line\">    <span class=\"attr\">metadata:</span>                           </span><br><span class=\"line\">      <span class=\"attr\">labels:</span>                           </span><br><span class=\"line\">        <span class=\"attr\">app:</span> <span class=\"string\">my-app</span>                        </span><br><span class=\"line\">    <span class=\"attr\">spec:</span>                               </span><br><span class=\"line\">      <span class=\"attr\">containers:</span>                       </span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">nginx</span>                     </span><br><span class=\"line\">          <span class=\"attr\">image:</span> <span class=\"string\">nginx:latest</span>                </span><br></pre></td></tr></table></figure>\n\n<h3 id=\"DaemonSet\"><a href=\"#DaemonSet\" class=\"headerlink\" title=\"DaemonSet\"></a>DaemonSet</h3><figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">apps/v1</span>                    </span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">DaemonSet</span>                         <span class=\"comment\"># 资源类型为 DaemonSet</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span>                               </span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">my-daemonset</span>                         </span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">default</span>                    </span><br><span class=\"line\"><span class=\"attr\">spec:</span>                                   </span><br><span class=\"line\">  <span class=\"attr\">selector:</span>                             </span><br><span class=\"line\">    <span class=\"attr\">matchLabels:</span>                        </span><br><span class=\"line\">      <span class=\"attr\">app:</span> <span class=\"string\">my-app</span>                      </span><br><span class=\"line\">  <span class=\"attr\">template:</span>                             </span><br><span class=\"line\">    <span class=\"attr\">metadata:</span>                           </span><br><span class=\"line\">      <span class=\"attr\">labels:</span>                           </span><br><span class=\"line\">        <span class=\"attr\">app:</span> <span class=\"string\">my-app</span>                    </span><br><span class=\"line\">    <span class=\"attr\">spec:</span>                              </span><br><span class=\"line\">      <span class=\"attr\">containers:</span>                       </span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">fluentd</span>                   </span><br><span class=\"line\">        <span class=\"attr\">image:</span> <span class=\"string\">fluentd:latest</span>           </span><br><span class=\"line\">        <span class=\"attr\">resources:</span>                    </span><br><span class=\"line\">          <span class=\"attr\">limits:</span>                      </span><br><span class=\"line\">            <span class=\"attr\">cpu:</span> <span class=\"string\">&quot;200m&quot;</span>                </span><br><span class=\"line\">            <span class=\"attr\">memory:</span> <span class=\"string\">&quot;512Mi&quot;</span>            </span><br><span class=\"line\">          <span class=\"attr\">requests:</span>                    </span><br><span class=\"line\">            <span class=\"attr\">cpu:</span> <span class=\"string\">&quot;100m&quot;</span>                 </span><br><span class=\"line\">            <span class=\"attr\">memory:</span> <span class=\"string\">&quot;256Mi&quot;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Job-CronJob\"><a href=\"#Job-CronJob\" class=\"headerlink\" title=\"Job&#x2F;CronJob\"></a>Job&#x2F;CronJob</h3><figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">batch/v1</span>                    </span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Job</span>                               <span class=\"comment\"># 资源类型为 Job</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span>                              </span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">my-job</span>                         </span><br><span class=\"line\"><span class=\"attr\">spec:</span>                                   </span><br><span class=\"line\">  <span class=\"attr\">completions:</span> <span class=\"number\">1</span>                        <span class=\"comment\"># 任务需要成功完成的 Pod 数量</span></span><br><span class=\"line\">  <span class=\"attr\">parallelism:</span> <span class=\"number\">1</span>                        <span class=\"comment\"># 同时运行的 Pod 数量</span></span><br><span class=\"line\">  <span class=\"attr\">template:</span>                             </span><br><span class=\"line\">    <span class=\"attr\">spec:</span>                               </span><br><span class=\"line\">      <span class=\"attr\">containers:</span>                       </span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">my-job</span>               </span><br><span class=\"line\">        <span class=\"attr\">image:</span> <span class=\"string\">busybox:latest</span>           </span><br><span class=\"line\">        <span class=\"attr\">command:</span> [<span class=\"string\">&quot;sh&quot;</span>, <span class=\"string\">&quot;-c&quot;</span>, <span class=\"string\">&quot;echo &#x27;Job completed&#x27; &amp;&amp; sleep 5&quot;</span>]  <span class=\"comment\"># 运行的命令，打印消息并休眠 5 秒</span></span><br><span class=\"line\">      <span class=\"attr\">restartPolicy:</span> <span class=\"string\">Never</span>              <span class=\"comment\"># 重启策略，Never 表示 Pod 失败后不重启</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">batch/v1</span>                   </span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">CronJob</span>                           <span class=\"comment\"># 资源类型为 CronJob</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span>                              </span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">my-cronjob</span>                  </span><br><span class=\"line\"><span class=\"attr\">spec:</span>                                   </span><br><span class=\"line\">  <span class=\"attr\">schedule:</span> <span class=\"string\">&quot;*/5 * * * *&quot;</span>               <span class=\"comment\"># 定时调度表达式，每 5 分钟运行一次</span></span><br><span class=\"line\">  <span class=\"attr\">jobTemplate:</span>                          <span class=\"comment\"># Job 模板，定义每次调度的 Job 配置</span></span><br><span class=\"line\">    <span class=\"attr\">spec:</span>                               <span class=\"comment\"># Job 的详细规范</span></span><br><span class=\"line\">      <span class=\"attr\">template:</span>                        </span><br><span class=\"line\">        <span class=\"attr\">spec:</span>                           <span class=\"comment\"># Pod 的详细规范</span></span><br><span class=\"line\">          <span class=\"attr\">containers:</span>                   </span><br><span class=\"line\">          <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">my-cronjob</span>        </span><br><span class=\"line\">            <span class=\"attr\">image:</span> <span class=\"string\">busybox:latest</span>       </span><br><span class=\"line\">            <span class=\"attr\">command:</span> [<span class=\"string\">&quot;sh&quot;</span>, <span class=\"string\">&quot;-c&quot;</span>, <span class=\"string\">&quot;echo &#x27;CronJob ran at $(date)&#x27;&quot;</span>]  <span class=\"comment\"># 运行的命令，打印当前时间</span></span><br><span class=\"line\">          <span class=\"attr\">restartPolicy:</span> <span class=\"string\">Never</span>          <span class=\"comment\"># 重启策略，Never 表示 Pod 失败后不重启</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"K8S-Service\"><a href=\"#K8S-Service\" class=\"headerlink\" title=\"K8S Service\"></a>K8S Service</h2><h3 id=\"Service-概念\"><a href=\"#Service-概念\" class=\"headerlink\" title=\"Service 概念\"></a>Service 概念</h3><ul>\n<li>定义一组 Pod 的访问规则。</li>\n</ul>\n<h3 id=\"Service-常用类型\"><a href=\"#Service-常用类型\" class=\"headerlink\" title=\"Service 常用类型\"></a>Service 常用类型</h3><ul>\n<li><code>ClusterIP</code> 集群内部使用。</li>\n<li><code>NodePort</code> 暴露端口给外部。</li>\n<li><code>LoadBalancer</code> 提供负载均衡和外部访问，公有云。</li>\n</ul>\n<h3 id=\"Service\"><a href=\"#Service\" class=\"headerlink\" title=\"Service\"></a>Service</h3><figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Deployment</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">apps/v1</span>                     </span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Deployment</span>                        </span><br><span class=\"line\"><span class=\"attr\">metadata:</span>                               </span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">my-deployment</span>                        </span><br><span class=\"line\"><span class=\"attr\">spec:</span>                                 </span><br><span class=\"line\">  <span class=\"attr\">selector:</span>                             </span><br><span class=\"line\">    <span class=\"attr\">matchLabels:</span>                        </span><br><span class=\"line\">      <span class=\"attr\">app:</span> <span class=\"string\">my-app</span>                          </span><br><span class=\"line\">  <span class=\"attr\">template:</span>                             </span><br><span class=\"line\">    <span class=\"attr\">metadata:</span>                         </span><br><span class=\"line\">      <span class=\"attr\">labels:</span>                           </span><br><span class=\"line\">        <span class=\"attr\">app:</span> <span class=\"string\">my-app</span>                       </span><br><span class=\"line\">    <span class=\"attr\">spec:</span>                               </span><br><span class=\"line\">      <span class=\"attr\">containers:</span>                      </span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">nginx</span>                   </span><br><span class=\"line\">        <span class=\"attr\">image:</span> <span class=\"string\">nginx:latest</span>               </span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"comment\"># Service</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span>                          </span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Service</span>                           <span class=\"comment\"># 资源类型为 Service</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span>                               </span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">my-service</span>                      <span class=\"comment\"># Service 的名称</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span>                                   <span class=\"comment\"># Service 的详细规范</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span>                             <span class=\"comment\"># 标签选择器，匹配后端 Pod</span></span><br><span class=\"line\">    <span class=\"attr\">app:</span> <span class=\"string\">my-app</span>                         <span class=\"comment\"># 标签键值对，匹配 Deployment 的 Pod 标签 </span></span><br><span class=\"line\">  <span class=\"attr\">ports:</span>                                <span class=\"comment\"># 端口配置</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">port:</span> <span class=\"number\">80</span>                            <span class=\"comment\"># Service 监听的端口</span></span><br><span class=\"line\">    <span class=\"attr\">targetPort:</span> <span class=\"number\">80</span>                      <span class=\"comment\"># Pod 容器的目标端口</span></span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"K8S-Secret\"><a href=\"#K8S-Secret\" class=\"headerlink\" title=\"K8S Secret\"></a>K8S Secret</h2><h3 id=\"Secret-作用\"><a href=\"#Secret-作用\" class=\"headerlink\" title=\"Secret 作用\"></a>Secret 作用</h3><ul>\n<li>存储加密数据到 etcd， 让 Pod 容器以变量或 Volume 的方式挂载到容器中。</li>\n<li>解决密码、token、密钥等敏感数据的配置问题，而不需要把这些敏感数据暴露到镜像或者 Pod Spec 中。</li>\n</ul>\n<h3 id=\"Secret-类型\"><a href=\"#Secret-类型\" class=\"headerlink\" title=\"Secret 类型\"></a>Secret 类型</h3><ul>\n<li><code>Service Account</code> 用来访问 Kubernetes API,由 Kubernetes 自动创建，并且会自动挂载到 Pod 的 &#x2F;run&#x2F;secrets&#x2F;kubernetes.io&#x2F;serviceaccount 目录中。</li>\n<li><code>Opaque</code> base64 编码格式的 Secret,用来存储密码、密钥等。</li>\n<li><code>kubernetes.io/dockerconfigjson</code> 用来存储私有 docker registry 的认证信息。</li>\n</ul>\n<h3 id=\"Secret-创建\"><a href=\"#Secret-创建\" class=\"headerlink\" title=\"Secret 创建\"></a>Secret 创建</h3><figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span>                          </span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Secret</span>                           </span><br><span class=\"line\"><span class=\"attr\">metadata:</span>                               </span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">my-secret</span>                       </span><br><span class=\"line\"><span class=\"attr\">type:</span> <span class=\"string\">Opaque</span>                            <span class=\"comment\"># Secret 类型</span></span><br><span class=\"line\"><span class=\"attr\">data:</span>                                   </span><br><span class=\"line\">  <span class=\"attr\">username:</span> <span class=\"string\">YWRtaW4=</span>                    <span class=\"comment\"># 用户名，Base64 编码的 &quot;admin&quot;</span></span><br><span class=\"line\">  <span class=\"attr\">password:</span> <span class=\"string\">MTIzNDU2</span>                    <span class=\"comment\"># 密码，Base64 编码的 &quot;123456&quot;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">kubectl</span> <span class=\"string\">get</span> <span class=\"string\">secret</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Secret-挂载\"><a href=\"#Secret-挂载\" class=\"headerlink\" title=\"Secret 挂载\"></a>Secret 挂载</h3><ul>\n<li><p><strong>方式一：变量</strong></p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span>                          </span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Pod</span>                               </span><br><span class=\"line\"><span class=\"attr\">metadata:</span>                               </span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">my-pod</span>                       </span><br><span class=\"line\"><span class=\"attr\">spec:</span>                                   </span><br><span class=\"line\">  <span class=\"attr\">containers:</span>                           </span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">nginx</span>                         </span><br><span class=\"line\">      <span class=\"attr\">image:</span> <span class=\"string\">nginx:latest</span>                </span><br><span class=\"line\">      <span class=\"attr\">env:</span>                                  <span class=\"comment\"># 环境变量配置</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">USERNAME</span>                    <span class=\"comment\"># 环境变量名</span></span><br><span class=\"line\">          <span class=\"attr\">valueFrom:</span>                        <span class=\"comment\"># 从 Secret 引用值</span></span><br><span class=\"line\">            <span class=\"attr\">secretKeyRef:</span>                   <span class=\"comment\"># 引用 Secret 的键</span></span><br><span class=\"line\">              <span class=\"attr\">name:</span> <span class=\"string\">my-secret</span>               <span class=\"comment\"># Secret 的名称</span></span><br><span class=\"line\">              <span class=\"attr\">key:</span> <span class=\"string\">username</span>                 <span class=\"comment\"># Secret 中的键 &quot;admin&quot;</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">PASSWORD</span>                    <span class=\"comment\"># 环境变量名</span></span><br><span class=\"line\">          <span class=\"attr\">valueFrom:</span>                        </span><br><span class=\"line\">            <span class=\"attr\">secretKeyRef:</span>                   </span><br><span class=\"line\">              <span class=\"attr\">name:</span> <span class=\"string\">my-secret</span>               <span class=\"comment\"># Secret 的名称</span></span><br><span class=\"line\">              <span class=\"attr\">key:</span> <span class=\"string\">password</span>                 <span class=\"comment\"># Secret 中的键 &quot;123456&quot;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 验证环境变量</span></span><br><span class=\"line\"><span class=\"string\">kubectl</span> <span class=\"string\">exec</span> <span class=\"string\">my-pod</span> <span class=\"string\">--env</span></span><br><span class=\"line\"><span class=\"comment\"># 输出</span></span><br><span class=\"line\"><span class=\"comment\"># USERNAME=admin</span></span><br><span class=\"line\"><span class=\"comment\"># PASSWORD=123456</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>方式二：Volume</strong></p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span>                          </span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Pod</span>                              </span><br><span class=\"line\"><span class=\"attr\">metadata:</span>                               </span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">my-pod</span>                       </span><br><span class=\"line\"><span class=\"attr\">spec:</span>                                  </span><br><span class=\"line\">  <span class=\"attr\">containers:</span>                         </span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">nginx</span>                    </span><br><span class=\"line\">      <span class=\"attr\">image:</span> <span class=\"string\">nginx:latest</span>                  </span><br><span class=\"line\">      <span class=\"attr\">volumeMounts:</span>                       <span class=\"comment\"># 容器挂载的卷</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">secret-volume</span>             <span class=\"comment\"># 卷名称</span></span><br><span class=\"line\">          <span class=\"attr\">mountPath:</span> <span class=\"string\">/etc/secrets</span>         <span class=\"comment\"># 挂载路径，Secret 文件将出现在此目录</span></span><br><span class=\"line\">          <span class=\"attr\">readOnly:</span> <span class=\"literal\">true</span>                  <span class=\"comment\"># 挂载为只读</span></span><br><span class=\"line\">  <span class=\"attr\">volumes:</span>                                <span class=\"comment\"># Pod 的卷定义</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">secret-volume</span>                 <span class=\"comment\"># 卷名称</span></span><br><span class=\"line\">      <span class=\"attr\">secret:</span>                             <span class=\"comment\"># 卷类型为 Secret</span></span><br><span class=\"line\">        <span class=\"attr\">secretName:</span> <span class=\"string\">my-secret</span>             <span class=\"comment\"># 引用的 Secret 名称</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 验证 Volume 挂载文件</span></span><br><span class=\"line\"><span class=\"string\">kubectl</span> <span class=\"string\">exec</span> <span class=\"string\">my-pod</span> <span class=\"string\">--</span> <span class=\"string\">cat</span> <span class=\"string\">/etc/secrets/username</span></span><br><span class=\"line\"><span class=\"string\">kubectl</span> <span class=\"string\">exec</span> <span class=\"string\">my-pod</span> <span class=\"string\">--</span> <span class=\"string\">cat</span> <span class=\"string\">/etc/secrets/password</span></span><br><span class=\"line\"><span class=\"comment\"># 输出</span></span><br><span class=\"line\"><span class=\"comment\"># admin</span></span><br><span class=\"line\"><span class=\"comment\"># 123456</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"K8S-ConfigMap\"><a href=\"#K8S-ConfigMap\" class=\"headerlink\" title=\"K8S ConfigMap\"></a>K8S ConfigMap</h2><h3 id=\"ConfigMap-作用\"><a href=\"#ConfigMap-作用\" class=\"headerlink\" title=\"ConfigMap 作用\"></a>ConfigMap 作用</h3><ul>\n<li>存储不加密数据到 etcd， 让 Pod 容器以变量或 Volume 的方式挂载到容器中。</li>\n</ul>\n<h3 id=\"ConfigMap-创建\"><a href=\"#ConfigMap-创建\" class=\"headerlink\" title=\"ConfigMap 创建\"></a>ConfigMap 创建</h3><figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span>                        </span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">ConfigMap</span>                        </span><br><span class=\"line\"><span class=\"attr\">metadata:</span>                               </span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">my-config</span>                       </span><br><span class=\"line\"><span class=\"attr\">data:</span>                                   </span><br><span class=\"line\">  <span class=\"attr\">app.conf:</span> <span class=\"string\">|</span>                           <span class=\"comment\"># 键 app.conf，值是一个多行配置文件</span></span><br><span class=\"line\">    <span class=\"string\">server.port=8080</span>                    <span class=\"comment\"># 示例配置：服务端口</span></span><br><span class=\"line\">    <span class=\"string\">log.level=info</span>                      <span class=\"comment\"># 示例配置：日志级别</span></span><br><span class=\"line\">  <span class=\"attr\">key1:</span> <span class=\"string\">value1</span>                          <span class=\"comment\"># 键值对，key1 的值为 value1</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">kubectl</span> <span class=\"string\">get</span> <span class=\"string\">cm</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"ConfigMap-挂载\"><a href=\"#ConfigMap-挂载\" class=\"headerlink\" title=\"ConfigMap 挂载\"></a>ConfigMap 挂载</h3><ul>\n<li><p><strong>方式一：变量</strong></p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span>                          </span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Pod</span>                              </span><br><span class=\"line\"><span class=\"attr\">metadata:</span>                               </span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">my-pod</span>                       </span><br><span class=\"line\"><span class=\"attr\">spec:</span>                                 </span><br><span class=\"line\">  <span class=\"attr\">containers:</span>                       </span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">nginx</span>                       </span><br><span class=\"line\">      <span class=\"attr\">image:</span> <span class=\"string\">nginx:latest</span>              </span><br><span class=\"line\">      <span class=\"attr\">env:</span>                                  <span class=\"comment\"># 环境变量配置</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">KEY1</span>                        <span class=\"comment\"># 环境变量名</span></span><br><span class=\"line\">          <span class=\"attr\">valueFrom:</span>                        <span class=\"comment\"># 从 ConfigMap 引用值</span></span><br><span class=\"line\">            <span class=\"attr\">configMapKeyRef:</span>                <span class=\"comment\"># 引用 ConfigMap 的键</span></span><br><span class=\"line\">              <span class=\"attr\">name:</span> <span class=\"string\">my-config</span>               <span class=\"comment\"># ConfigMap 的名称</span></span><br><span class=\"line\">              <span class=\"attr\">key:</span> <span class=\"string\">key1</span>                     <span class=\"comment\"># ConfigMap 中的键</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">APP_CONFIG</span>                  <span class=\"comment\"># 环境变量名</span></span><br><span class=\"line\">          <span class=\"attr\">valueFrom:</span>                        </span><br><span class=\"line\">            <span class=\"attr\">configMapKeyRef:</span>               </span><br><span class=\"line\">              <span class=\"attr\">name:</span> <span class=\"string\">my-config</span>               <span class=\"comment\"># ConfigMap 的名称</span></span><br><span class=\"line\">              <span class=\"attr\">key:</span> <span class=\"string\">app.conf</span>                 <span class=\"comment\"># ConfigMap 中的键</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 验证环境变量</span></span><br><span class=\"line\"><span class=\"string\">kubectl</span> <span class=\"string\">exec</span> <span class=\"string\">my-pod</span> <span class=\"string\">--env</span></span><br><span class=\"line\"><span class=\"comment\"># 输出</span></span><br><span class=\"line\"><span class=\"comment\"># KEY1=value1</span></span><br><span class=\"line\"><span class=\"comment\"># APP_CONFIG=server.port=8080</span></span><br><span class=\"line\"><span class=\"comment\"># log.level=info</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>方式二：Volume</strong></p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span>                         </span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Pod</span>                               </span><br><span class=\"line\"><span class=\"attr\">metadata:</span>                               </span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">my-pod</span>                      </span><br><span class=\"line\"><span class=\"attr\">spec:</span>                                </span><br><span class=\"line\">  <span class=\"attr\">containers:</span>                          </span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">nginx</span>                       </span><br><span class=\"line\">      <span class=\"attr\">image:</span> <span class=\"string\">nginx:latest</span>                      </span><br><span class=\"line\">      <span class=\"attr\">volumeMounts:</span>                         <span class=\"comment\"># 容器挂载的卷</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">config-volume</span>               <span class=\"comment\"># 卷名称</span></span><br><span class=\"line\">          <span class=\"attr\">mountPath:</span> <span class=\"string\">/etc/config</span>            <span class=\"comment\"># 挂载路径，ConfigMap 文件将出现在此目录</span></span><br><span class=\"line\">  <span class=\"attr\">volumes:</span>                                  <span class=\"comment\"># Pod 的卷定义</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">config-volume</span>                   <span class=\"comment\"># 卷名称</span></span><br><span class=\"line\">      <span class=\"attr\">configMap:</span>                            <span class=\"comment\"># 卷类型为 ConfigMap</span></span><br><span class=\"line\">        <span class=\"attr\">name:</span> <span class=\"string\">my-config</span>                     <span class=\"comment\"># 引用的 ConfigMap 名称</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 验证 Volume 挂载文件</span></span><br><span class=\"line\"><span class=\"string\">kubectl</span> <span class=\"string\">exec</span> <span class=\"string\">my-pod</span> <span class=\"string\">--</span> <span class=\"string\">cat</span> <span class=\"string\">/etc/config/key1</span></span><br><span class=\"line\"><span class=\"string\">kubectl</span> <span class=\"string\">exec</span> <span class=\"string\">nginx-pod</span> <span class=\"string\">--</span> <span class=\"string\">cat</span> <span class=\"string\">/etc/config/app.conf</span></span><br><span class=\"line\"><span class=\"comment\"># 输出</span></span><br><span class=\"line\"><span class=\"comment\"># value1</span></span><br><span class=\"line\"><span class=\"comment\"># server.port=8080</span></span><br><span class=\"line\"><span class=\"comment\"># log.level=info</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"K8S-集群安全机制-RBAC\"><a href=\"#K8S-集群安全机制-RBAC\" class=\"headerlink\" title=\"K8S 集群安全机制 RBAC\"></a>K8S 集群安全机制 RBAC</h2><h3 id=\"集群安全机制\"><a href=\"#集群安全机制\" class=\"headerlink\" title=\"集群安全机制\"></a>集群安全机制</h3><ul>\n<li><p><strong>第一步：认证</strong></p>\n<ul>\n<li>传输安全：对外不暴露 8080 端口，只能内部访问，对外使用端口 6443</li>\n<li>认证：客户端身份认证常用方式<ul>\n<li>https 证书认证，基于 ca 证书</li>\n<li>http token 认证，通过 token 识别用户</li>\n<li>http 基本认证，用户名 + 密码认证</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p><strong>第二步：鉴权（授权）</strong></p>\n<ul>\n<li>基于 RBAC 进行鉴权操作</li>\n<li>基于角色访问控制</li>\n</ul>\n</li>\n<li><p><strong>第三步：准入控制</strong></p>\n<ul>\n<li>就是准入控制器的列表，如果列表有请求内容则通过，没有则拒绝</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"RBAC\"><a href=\"#RBAC\" class=\"headerlink\" title=\"RBAC\"></a>RBAC</h3><ul>\n<li><strong>角色</strong><ul>\n<li><code>role</code> 特定命名空间访问权限</li>\n<li><code>ClusterRole</code> 所有命名空间访问权限</li>\n</ul>\n</li>\n<li><strong>角色绑定</strong><ul>\n<li><code>roleBinding</code> 角色绑定到主体</li>\n<li><code>ClusterRoleBinding</code> 集群角色绑定到主体</li>\n</ul>\n</li>\n<li><strong>主体</strong><ul>\n<li><code>user</code> 用户</li>\n<li><code>group</code> 用户组</li>\n<li><code>serviceAccount</code> 服务账号</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"使用示例\"><a href=\"#使用示例\" class=\"headerlink\" title=\"使用示例\"></a>使用示例</h3><figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 创建命名空间（可选，如果命名空间不存在）</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Namespace</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">my-namespace</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"comment\"># 创建 ServiceAccount（模拟用户）</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">ServiceAccount</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">my-user</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">my-namespace</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"comment\"># 创建 Role（定义权限规则）</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">rbac.authorization.k8s.io/v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Role</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">pod-manager</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">my-namespace</span></span><br><span class=\"line\"><span class=\"attr\">rules:</span>                                                   <span class=\"comment\"># 定义权限规则</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">apiGroups:</span> [<span class=\"string\">&quot;&quot;</span>]                                      <span class=\"comment\"># 指定核心 API 组（&quot;&quot; 表示核心资源，如 pods）</span></span><br><span class=\"line\">    <span class=\"attr\">resources:</span> [<span class=\"string\">&quot;pods&quot;</span>]                                  <span class=\"comment\"># 指定受控资源为 pods</span></span><br><span class=\"line\">    <span class=\"attr\">verbs:</span> [<span class=\"string\">&quot;get&quot;</span>, <span class=\"string\">&quot;list&quot;</span>, <span class=\"string\">&quot;watch&quot;</span>, <span class=\"string\">&quot;create&quot;</span>, <span class=\"string\">&quot;delete&quot;</span>]  <span class=\"comment\"># 允许的操作：获取、列出、监视、创建、删除</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"comment\"># 创建 RoleBinding（将 Role 绑定到 ServiceAccount）</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">rbac.authorization.k8s.io/v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">RoleBinding</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">pod-manager-binding</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">my-namespace</span></span><br><span class=\"line\"><span class=\"attr\">subjects:</span>                                                <span class=\"comment\"># 定义绑定主体</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">kind:</span> <span class=\"string\">ServiceAccount</span>                                 <span class=\"comment\"># 指定主体类型为 ServiceAccount</span></span><br><span class=\"line\">    <span class=\"attr\">name:</span> <span class=\"string\">my-user</span>                                        <span class=\"comment\"># 指定主体名称为 my-user</span></span><br><span class=\"line\">    <span class=\"attr\">namespace:</span> <span class=\"string\">my-namespace</span>                              <span class=\"comment\"># 指定主体所在的命名空间</span></span><br><span class=\"line\"><span class=\"attr\">roleRef:</span>                                                 <span class=\"comment\"># 定义绑定的角色</span></span><br><span class=\"line\">  <span class=\"attr\">kind:</span> <span class=\"string\">Role</span>                                             <span class=\"comment\"># 指定引用的角色类型为 Role</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">pod-manager</span>                                      <span class=\"comment\"># 指定引用的角色名称为 pod-manager</span></span><br><span class=\"line\">  <span class=\"attr\">apiGroup:</span> <span class=\"string\">rbac.authorization.k8s.io</span>                    <span class=\"comment\"># 指定角色所属的 API 组</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 验证 RBAC 配置</span></span><br><span class=\"line\"><span class=\"comment\"># 获取 ServiceAccount 的 Token</span></span><br><span class=\"line\"><span class=\"string\">kubectl</span> <span class=\"string\">-n</span> <span class=\"string\">my-namespace</span> <span class=\"string\">get</span> <span class=\"string\">secret</span> <span class=\"string\">$(kubectl</span> <span class=\"string\">-n</span> <span class=\"string\">my-namespace</span> <span class=\"string\">get</span> <span class=\"string\">sa</span> <span class=\"string\">my-user</span> <span class=\"string\">-o</span> <span class=\"string\">jsonpath=&#x27;&#123;.secrets[0].name&#125;&#x27;)</span> <span class=\"string\">-o</span> <span class=\"string\">jsonpath=&#x27;&#123;.data.token&#125;&#x27;</span> <span class=\"string\">|</span> <span class=\"string\">base64</span> <span class=\"string\">-d</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 使用 Token 访问 API，验证权限</span></span><br><span class=\"line\"><span class=\"string\">curl</span> <span class=\"string\">-k</span> <span class=\"string\">-H</span> <span class=\"string\">&quot;Authorization: Bearer &lt;TOKEN&gt;&quot;</span> <span class=\"string\">https://&lt;K8S_API_SERVER&gt;/api/v1/namespaces/my-namespace/pods</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 测试权限：</span></span><br><span class=\"line\"><span class=\"comment\"># 检查是否可以获取 Pods</span></span><br><span class=\"line\"><span class=\"string\">kubectl</span> <span class=\"string\">--namespace=my-namespace</span> <span class=\"string\">auth</span> <span class=\"string\">can-i</span> <span class=\"string\">get</span> <span class=\"string\">pods</span> <span class=\"string\">--as=system:serviceaccount:my-namespace:my-user</span></span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"comment\"># 检查是否可以创建 Deployments</span></span><br><span class=\"line\"><span class=\"string\">kubectl</span> <span class=\"string\">--namespace=my-namespace</span> <span class=\"string\">auth</span> <span class=\"string\">can-i</span> <span class=\"string\">create</span> <span class=\"string\">deployments</span> <span class=\"string\">--as=system:serviceaccount:my-namespace:my-user</span></span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"K8S-Ingress\"><a href=\"#K8S-Ingress\" class=\"headerlink\" title=\"K8S Ingress\"></a>K8S Ingress</h2><h3 id=\"Ingress-作用\"><a href=\"#Ingress-作用\" class=\"headerlink\" title=\"Ingress 作用\"></a>Ingress 作用</h3><ul>\n<li>Ingress 负责定义路由规则（如 <code>example.com/</code> 路由到某个 Service。</li>\n<li>支持 HTTPS、负载均衡、URL 重写等高级功能。</li>\n<li>相比直接使用 Service 的 NodePort 或 LoadBalancer，Ingress 更灵活且节省资源。</li>\n</ul>\n<h3 id=\"Ingress-Controller\"><a href=\"#Ingress-Controller\" class=\"headerlink\" title=\"Ingress Controller\"></a>Ingress Controller</h3><ul>\n<li>Ingress Controller 负责解析规则并处理流量。若没有 Controller，Ingress 资源只是无效的配置，无法响应请求。</li>\n<li>监听 Kubernetes API，读取 Ingress 资源，动态生成路由配置（如 Nginx 的 <code>nginx.conf</code>）。</li>\n<li>接收外部 HTTP&#x2F;HTTPS 请求，根据 Ingress 规则转发到后端 Service 和 Pod。</li>\n<li>提供负载均衡、SSL 终止、路径重写等功能。</li>\n</ul>\n<h3 id=\"Ingress-使用\"><a href=\"#Ingress-使用\" class=\"headerlink\" title=\"Ingress 使用\"></a>Ingress 使用</h3><ul>\n<li>部署 Ingress Controller<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">kubectl</span> <span class=\"string\">apply</span> <span class=\"string\">-f</span> <span class=\"string\">https://raw.githubusercontent.com/kubernetes/ingress-nginx/main/deploy/static/provider/cloud/deploy.yaml</span></span><br><span class=\"line\"><span class=\"string\">kubectl</span> <span class=\"string\">get</span> <span class=\"string\">pods</span> <span class=\"string\">-n</span> <span class=\"string\">ingress-nginx</span></span><br></pre></td></tr></table></figure></li>\n<li>部署 Ingress<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Deployment</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">apps/v1</span>                     </span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Deployment</span>                       </span><br><span class=\"line\"><span class=\"attr\">metadata:</span>                               </span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">web</span>                            </span><br><span class=\"line\"><span class=\"attr\">spec:</span>                                   </span><br><span class=\"line\">  <span class=\"attr\">replicas:</span> <span class=\"number\">2</span>                           </span><br><span class=\"line\">  <span class=\"attr\">selector:</span>                            </span><br><span class=\"line\">    <span class=\"attr\">matchLabels:</span>                        </span><br><span class=\"line\">      <span class=\"attr\">app:</span> <span class=\"string\">web</span>                          </span><br><span class=\"line\">  <span class=\"attr\">template:</span>                             </span><br><span class=\"line\">    <span class=\"attr\">metadata:</span>                          </span><br><span class=\"line\">      <span class=\"attr\">labels:</span>                          </span><br><span class=\"line\">        <span class=\"attr\">app:</span> <span class=\"string\">web</span>                        </span><br><span class=\"line\">    <span class=\"attr\">spec:</span>                              </span><br><span class=\"line\">      <span class=\"attr\">containers:</span>                      </span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">nginx</span>                     </span><br><span class=\"line\">        <span class=\"attr\">image:</span> <span class=\"string\">nginx:latest</span>             </span><br><span class=\"line\">        <span class=\"attr\">ports:</span>                          <span class=\"comment\"># 容器暴露的端口</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">containerPort:</span> <span class=\"number\">80</span>             <span class=\"comment\"># 容器端口 80</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"comment\"># Service</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span>                         </span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Service</span>                         </span><br><span class=\"line\"><span class=\"attr\">metadata:</span>                               </span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">web-service</span>                    </span><br><span class=\"line\"><span class=\"attr\">spec:</span>                                   </span><br><span class=\"line\">  <span class=\"attr\">selector:</span>                            </span><br><span class=\"line\">    <span class=\"attr\">app:</span> <span class=\"string\">web</span>                           </span><br><span class=\"line\">  <span class=\"attr\">ports:</span>                                <span class=\"comment\"># 端口配置</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">port:</span> <span class=\"number\">80</span>                            <span class=\"comment\"># Service 监听的端口</span></span><br><span class=\"line\">    <span class=\"attr\">targetPort:</span> <span class=\"number\">80</span>                      <span class=\"comment\"># Pod 容器的目标端口</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"comment\"># Ingress</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">networking.k8s.io/v1</span>       </span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Ingress</span>                          <span class=\"comment\"># 资源类型为 Ingress  </span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span>                               </span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">web-ingress</span>                    </span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">rules:</span>                                <span class=\"comment\"># 路由规则列表</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">host:</span> <span class=\"string\">example.com</span>                   <span class=\"comment\"># 匹配的主机域名</span></span><br><span class=\"line\">    <span class=\"attr\">http:</span>                               <span class=\"comment\"># HTTP 协议配置</span></span><br><span class=\"line\">      <span class=\"attr\">paths:</span>                            <span class=\"comment\"># 路径规则</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">path:</span> <span class=\"string\">/</span>                         <span class=\"comment\"># 匹配的路径（根路径）</span></span><br><span class=\"line\">        <span class=\"attr\">pathType:</span> <span class=\"string\">Prefix</span>                <span class=\"comment\"># 路径类型，Prefix 表示前缀匹配</span></span><br><span class=\"line\">        <span class=\"attr\">backend:</span>                        <span class=\"comment\"># 后端服务</span></span><br><span class=\"line\">          <span class=\"attr\">service:</span>                      <span class=\"comment\"># 目标 Service</span></span><br><span class=\"line\">            <span class=\"attr\">name:</span> <span class=\"string\">web-service</span>           <span class=\"comment\"># Service 名称</span></span><br><span class=\"line\">            <span class=\"attr\">port:</span>                       <span class=\"comment\"># Service 端口</span></span><br><span class=\"line\">              <span class=\"attr\">number:</span> <span class=\"number\">80</span>                <span class=\"comment\"># 端口号</span></span><br></pre></td></tr></table></figure></li>\n<li>配置 Host<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Host 配置</span></span><br><span class=\"line\">&lt;Ingress-Controller-IP&gt; example.com</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 测试</span></span><br><span class=\"line\">curl http://example.com</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"K8S-Helm-包管理\"><a href=\"#K8S-Helm-包管理\" class=\"headerlink\" title=\"K8S Helm 包管理\"></a>K8S Helm 包管理</h2><h3 id=\"Helm-介绍\"><a href=\"#Helm-介绍\" class=\"headerlink\" title=\"Helm 介绍\"></a>Helm 介绍</h3><ul>\n<li>包管理工具，用于简化应用的部署和管理。</li>\n</ul>\n<h3 id=\"Helm-作用\"><a href=\"#Helm-作用\" class=\"headerlink\" title=\"Helm 作用\"></a>Helm 作用</h3><ul>\n<li><strong>模板化：</strong> 通过变量和模板复用 YAML 配置。</li>\n<li><strong>版本管理：</strong> 支持应用的版本控制和回滚。</li>\n<li><strong>简化部署：</strong> 一条命令部署复杂应用（如 helm install）。</li>\n</ul>\n<h3 id=\"Helm-核心概念\"><a href=\"#Helm-核心概念\" class=\"headerlink\" title=\"Helm 核心概念\"></a>Helm 核心概念</h3><ul>\n<li><code>Helm</code> 是一个命令行客户端工具。</li>\n<li><code>Chart</code> 把 yaml 打包，是 yaml 集合。</li>\n<li><code>Release</code> 基于 Chart 部署实体，应用级别的版本管理。</li>\n</ul>\n<h3 id=\"Helm-客户端\"><a href=\"#Helm-客户端\" class=\"headerlink\" title=\"Helm 客户端\"></a>Helm 客户端</h3><p>Helm 客户端下载地址：<a href=\"https://github.com/helm/helm/releases\">https://github.com/helm/helm/releases</a><br>下载解压移动到&#x2F;usr&#x2F;bin&#x2F;目录即可</p>\n<h3 id=\"Helm-配置-Chart-仓库地址\"><a href=\"#Helm-配置-Chart-仓库地址\" class=\"headerlink\" title=\"Helm 配置 Chart 仓库地址\"></a>Helm 配置 Chart 仓库地址</h3><ul>\n<li>微软：<a href=\"https://mirror.azure.cn/kubernetes/charts/\">https://mirror.azure.cn/kubernetes/charts/</a></li>\n<li>阿里：<a href=\"https://kubernetes.oss-cn-hangzhou.aliyuncs.com/charts\">https://kubernetes.oss-cn-hangzhou.aliyuncs.com/charts</a><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 列出存储库</span></span><br><span class=\"line\">helm repo list</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 添加存储库</span></span><br><span class=\"line\">helm repo add &lt;仓库名称&gt; &lt;仓库地址&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 删除存储库</span></span><br><span class=\"line\">helm repo remove &lt;仓库名称&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 更新存储库</span></span><br><span class=\"line\">helm repo update</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"Helm-常用命令\"><a href=\"#Helm-常用命令\" class=\"headerlink\" title=\"Helm 常用命令\"></a>Helm 常用命令</h3><ul>\n<li>搜索和查看 Chart<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 在本地配置的仓库中搜索 Chart</span></span><br><span class=\"line\">helm search repo [KEYWORD]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 在 Artifact Hub（Helm 官方 Chart 中心）搜索 Chart</span></span><br><span class=\"line\">helm search hub [KEYWORD]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看指定 Chart 的元信息（如版本、描述）</span></span><br><span class=\"line\">helm show chart [CHART]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看 Chart 的默认 values.yaml 配置</span></span><br><span class=\"line\">helm show values [CHART]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看 Chart 的 README 文档</span></span><br><span class=\"line\">helm show readme [CHART]</span><br></pre></td></tr></table></figure></li>\n<li>安装和升级<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 安装 Chart 到 Kubernetes 集群</span></span><br><span class=\"line\"><span class=\"string\">helm</span> <span class=\"string\">install</span> [<span class=\"string\">RELEASE_NAME</span>] [<span class=\"string\">CHART</span>] [<span class=\"string\">FLAGS</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 升级已安装的 Release（支持修改配置或 Chart 版本）</span></span><br><span class=\"line\"><span class=\"string\">helm</span> <span class=\"string\">upgrade</span> [<span class=\"string\">RELEASE_NAME</span>] [<span class=\"string\">CHART</span>] [<span class=\"string\">FLAGS</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 回滚到指定版本的 Release</span></span><br><span class=\"line\"><span class=\"string\">helm</span> <span class=\"string\">rollback</span> [<span class=\"string\">RELEASE_NAME</span>] [<span class=\"string\">REVISION</span>]</span><br></pre></td></tr></table></figure></li>\n<li>管理 Release<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 列出当前命名空间中的 Release</span></span><br><span class=\"line\"><span class=\"string\">helm</span> <span class=\"string\">list</span> [<span class=\"string\">FLAGS</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看指定 Release 的状态（包括资源和配置）</span></span><br><span class=\"line\"><span class=\"string\">helm</span> <span class=\"string\">status</span> [<span class=\"string\">RELEASE_NAME</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看指定 Release 的修订历史</span></span><br><span class=\"line\"><span class=\"string\">helm</span> <span class=\"string\">history</span> [<span class=\"string\">RELEASE_NAME</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 删除指定 Release（卸载应用）</span></span><br><span class=\"line\"><span class=\"string\">helm</span> <span class=\"string\">uninstall</span> [<span class=\"string\">RELEASE_NAME</span>]</span><br></pre></td></tr></table></figure></li>\n<li>打包和发布 Chart<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 创建一个新的 Chart 模板目录</span></span><br><span class=\"line\"><span class=\"string\">helm</span> <span class=\"string\">create</span> [<span class=\"string\">NAME</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 将 Chart 打包为 .tgz 文件</span></span><br><span class=\"line\"><span class=\"string\">helm</span> <span class=\"string\">package</span> [<span class=\"string\">CHART_PATH</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 检查 Chart 的语法和格式是否正确</span></span><br><span class=\"line\"><span class=\"string\">helm</span> <span class=\"string\">lint</span> [<span class=\"string\">CHART_PATH</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 将打包的 Chart 推送到远程 Chart 仓库（需仓库支持）</span></span><br><span class=\"line\"><span class=\"string\">helm</span> <span class=\"string\">push</span> [<span class=\"string\">CHART_TGZ</span>] [<span class=\"string\">REPO</span>]</span><br></pre></td></tr></table></figure></li>\n<li>调试和验证<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 渲染 Chart 模板，生成 Kubernetes 清单（不实际部署）</span></span><br><span class=\"line\"><span class=\"string\">helm</span> <span class=\"string\">template</span> [<span class=\"string\">RELEASE_NAME</span>] [<span class=\"string\">CHART</span>] [<span class=\"string\">FLAGS</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 模拟安装过程，输出渲染的 Kubernetes 清单，不实际部署</span></span><br><span class=\"line\"><span class=\"string\">helm</span> <span class=\"string\">install</span> <span class=\"string\">--dry-run</span> [<span class=\"string\">RELEASE_NAME</span>] [<span class=\"string\">CHART</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 获取 Release 的详细信息</span></span><br><span class=\"line\"><span class=\"string\">helm</span> <span class=\"string\">get</span> [<span class=\"string\">SUBCOMMAND</span>] [<span class=\"string\">RELEASE_NAME</span>]</span><br></pre></td></tr></table></figure></li>\n<li>依赖管理<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 添加 Chart 依赖到 Chart.yaml</span></span><br><span class=\"line\"><span class=\"string\">helm</span> <span class=\"string\">dependency</span> <span class=\"string\">add</span> [<span class=\"string\">CHART</span>] [<span class=\"string\">REPO</span>] [<span class=\"string\">VERSION</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 更新 Chart 的依赖（下载依赖到 charts/ 目录）</span></span><br><span class=\"line\"><span class=\"string\">helm</span> <span class=\"string\">dependency</span> <span class=\"string\">update</span> [<span class=\"string\">CHART_PATH</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 列出 Chart 的依赖</span></span><br><span class=\"line\"><span class=\"string\">helm</span> <span class=\"string\">dependency</span> <span class=\"string\">list</span> [<span class=\"string\">CHART_PATH</span>]</span><br></pre></td></tr></table></figure></li>\n<li>插件管理<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 安装 Helm 插件</span></span><br><span class=\"line\"><span class=\"string\">helm</span> <span class=\"string\">plugin</span> <span class=\"string\">install</span> [<span class=\"string\">URL</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 列出已安装的插件</span></span><br><span class=\"line\"><span class=\"string\">helm</span> <span class=\"string\">plugin</span> <span class=\"string\">list</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 卸载指定插件</span></span><br><span class=\"line\"><span class=\"string\">helm</span> <span class=\"string\">plugin</span> <span class=\"string\">uninstall</span> [<span class=\"string\">PLUGIN</span>]</span><br></pre></td></tr></table></figure></li>\n<li>环境和配置<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 显示 Helm 的环境变量（如缓存路径、配置路径）</span></span><br><span class=\"line\"><span class=\"string\">helm</span> <span class=\"string\">env</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 生成 Shell 自动补全脚本（支持 bash、zsh、fish）</span></span><br><span class=\"line\"><span class=\"string\">helm</span> <span class=\"string\">completion</span> [<span class=\"string\">SHELL</span>]</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"Helm-快速部署应用\"><a href=\"#Helm-快速部署应用\" class=\"headerlink\" title=\"Helm 快速部署应用\"></a>Helm 快速部署应用</h3><figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 搜索应用</span></span><br><span class=\"line\"><span class=\"string\">helm</span> <span class=\"string\">search</span> <span class=\"string\">repo</span> <span class=\"string\">weave</span></span><br><span class=\"line\"><span class=\"comment\"># 安装应用</span></span><br><span class=\"line\"><span class=\"string\">helm</span> <span class=\"string\">install</span> <span class=\"string\">ui</span> <span class=\"string\">stable/weave-scope</span></span><br><span class=\"line\"><span class=\"comment\"># 查看应用</span></span><br><span class=\"line\"><span class=\"string\">helm</span> <span class=\"string\">list</span></span><br><span class=\"line\"><span class=\"string\">helm</span> <span class=\"string\">status</span> <span class=\"string\">ui</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Helm-自定义-Chart-部署\"><a href=\"#Helm-自定义-Chart-部署\" class=\"headerlink\" title=\"Helm 自定义 Chart 部署\"></a>Helm 自定义 Chart 部署</h3><ul>\n<li>创建自定义 Chart<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 生成一个 mychart 目录，里面包含如下：</span></span><br><span class=\"line\"><span class=\"comment\"># charts：空目录，普通文件夹</span></span><br><span class=\"line\"><span class=\"comment\"># Chart.yaml：基本信息，版本、名称等内容</span></span><br><span class=\"line\"><span class=\"comment\"># templates：自定义的 yaml 文件目录</span></span><br><span class=\"line\"><span class=\"comment\"># values.yaml：自定义的 yaml 文件的全局变量定义</span></span><br><span class=\"line\"><span class=\"string\">helm</span> <span class=\"string\">create</span> <span class=\"string\">mychart</span></span><br></pre></td></tr></table></figure></li>\n<li>templates 中创建自定义的 yaml(<code>my-deployment.yaml</code>、<code>my-service.yaml</code>)<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Deployment</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">apps/v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Deployment</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">my-deployment</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">matchLabels:</span></span><br><span class=\"line\">      <span class=\"attr\">app:</span> <span class=\"string\">my-app</span></span><br><span class=\"line\">  <span class=\"attr\">template:</span></span><br><span class=\"line\">    <span class=\"attr\">metadata:</span></span><br><span class=\"line\">      <span class=\"attr\">labels:</span></span><br><span class=\"line\">        <span class=\"attr\">app:</span> <span class=\"string\">my-app</span></span><br><span class=\"line\">    <span class=\"attr\">spec:</span></span><br><span class=\"line\">      <span class=\"attr\">containers:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">nginx</span></span><br><span class=\"line\">          <span class=\"attr\">image:</span> <span class=\"string\">nginx:latest</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"comment\"># Service</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Service</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">my-service</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">app:</span> <span class=\"string\">my-app</span></span><br><span class=\"line\">  <span class=\"attr\">ports:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">port:</span> <span class=\"number\">80</span></span><br><span class=\"line\">      <span class=\"attr\">targetPort:</span> <span class=\"number\">80</span></span><br></pre></td></tr></table></figure></li>\n<li>安装自定义 Chart<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">helm install myweb mychart</span><br></pre></td></tr></table></figure></li>\n<li>应用升级 Chart<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">helm upgrade myweb mychart</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"Helm-Chart-模版\"><a href=\"#Helm-Chart-模版\" class=\"headerlink\" title=\"Helm Chart 模版\"></a>Helm Chart 模版</h3><ul>\n<li>在 value.yaml 定义变量和值<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">label: nginx</span><br><span class=\"line\">image: nginx</span><br><span class=\"line\">prot: 80</span><br></pre></td></tr></table></figure></li>\n<li>在 templates 的 yaml 文件使用 value.yaml 定义变量和值<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 通过表达式形式</span></span><br><span class=\"line\">&#123;&#123; .Value.变量名称 &#125;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 内置对象</span></span><br><span class=\"line\">&#123;&#123; .Release.Name &#125;&#125;       <span class=\"comment\"># Release 名字</span></span><br><span class=\"line\">&#123;&#123; .Release.Namespace &#125;&#125;  <span class=\"comment\"># Release 命名空间</span></span><br><span class=\"line\">&#123;&#123; .Release.Service &#125;&#125;    <span class=\"comment\"># Release 服务名称</span></span><br><span class=\"line\">&#123;&#123; .Release.Revision &#125;&#125;   <span class=\"comment\"># Release 修订版本号，从1开始累加</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"K8S-持久化存储\"><a href=\"#K8S-持久化存储\" class=\"headerlink\" title=\"K8S 持久化存储\"></a>K8S 持久化存储</h2><h3 id=\"NFS\"><a href=\"#NFS\" class=\"headerlink\" title=\"NFS\"></a>NFS</h3><ul>\n<li>新节点安装 NFS<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 安装 NFS</span></span><br><span class=\"line\">yum install -y nfs-utils</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 设置挂载路径</span></span><br><span class=\"line\">vi /etc/exports</span><br><span class=\"line\">/data/nfs *(rw,no_root_squash)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 创建挂载路径</span></span><br><span class=\"line\"><span class=\"built_in\">mkdir</span> -p /data/nfs</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 启动 NFS 服务</span></span><br><span class=\"line\">systemctl start nfs</span><br></pre></td></tr></table></figure></li>\n<li>K8S 集群节点安装 NFS<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 安装 NFS</span></span><br><span class=\"line\">yum install -y nfs-utils</span><br></pre></td></tr></table></figure></li>\n<li>部署应用使用 NFS 持久存储<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">apps/v1</span>                     </span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Deployment</span>                        </span><br><span class=\"line\"><span class=\"attr\">metadata:</span>                               </span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">my-deployment</span>               </span><br><span class=\"line\"><span class=\"attr\">spec:</span>                                  </span><br><span class=\"line\">  <span class=\"attr\">selector:</span>                             </span><br><span class=\"line\">    <span class=\"attr\">matchLabels:</span>                        </span><br><span class=\"line\">      <span class=\"attr\">app:</span> <span class=\"string\">my-app</span>                       </span><br><span class=\"line\">  <span class=\"attr\">template:</span>                             </span><br><span class=\"line\">    <span class=\"attr\">metadata:</span>                           </span><br><span class=\"line\">      <span class=\"attr\">labels:</span>                           </span><br><span class=\"line\">        <span class=\"attr\">app:</span> <span class=\"string\">my-app</span>                     </span><br><span class=\"line\">    <span class=\"attr\">spec:</span>                               </span><br><span class=\"line\">      <span class=\"attr\">containers:</span>                       </span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">nginx</span>                    </span><br><span class=\"line\">          <span class=\"attr\">image:</span> <span class=\"string\">nginx:latest</span>                   </span><br><span class=\"line\">          <span class=\"attr\">volumeMounts:</span>                             <span class=\"comment\"># 容器挂载的卷</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">nfs-volume</span>                      <span class=\"comment\"># 卷名称</span></span><br><span class=\"line\">              <span class=\"attr\">mountPath:</span> <span class=\"string\">/usr/share/nginx/html</span>      <span class=\"comment\"># 挂载路径，Nginx 的默认 Web 目录</span></span><br><span class=\"line\">      <span class=\"attr\">volumes:</span>                                      <span class=\"comment\"># Pod 的卷定义</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">nfs-volume</span>                          <span class=\"comment\"># 卷名称</span></span><br><span class=\"line\">          <span class=\"attr\">nfs:</span>                                      <span class=\"comment\"># 引用 NFS</span></span><br><span class=\"line\">            <span class=\"attr\">server:</span> <span class=\"number\">192.168</span><span class=\"number\">.1</span><span class=\"number\">.4</span>                     <span class=\"comment\"># NFS 服务节点地址</span></span><br><span class=\"line\">            <span class=\"attr\">path:</span> <span class=\"string\">/data/nfs</span>                         <span class=\"comment\"># NFS 挂载路径</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"PV、PVC\"><a href=\"#PV、PVC\" class=\"headerlink\" title=\"PV、PVC\"></a>PV、PVC</h3><ul>\n<li><code>PV</code> 持久化存储，对存储资源进行抽象，对外提供可以调用的地方（生产者）</li>\n<li><code>PVC</code> 用于调用，不需要关系内部实现细节（消费者）</li>\n<li><strong>PV、PVC 流程：</strong> <code>应用部署</code> -&gt; <code>定义PVC（绑定PV）</code>-&gt; <code>定义PV（数据存储服务器IP、路径）</code></li>\n</ul>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Deployment</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">apps/v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Deployment</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">my-deployment</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">matchLabels:</span></span><br><span class=\"line\">      <span class=\"attr\">app:</span> <span class=\"string\">my-app</span></span><br><span class=\"line\">  <span class=\"attr\">template:</span></span><br><span class=\"line\">    <span class=\"attr\">metadata:</span></span><br><span class=\"line\">      <span class=\"attr\">labels:</span></span><br><span class=\"line\">        <span class=\"attr\">app:</span> <span class=\"string\">my-app</span></span><br><span class=\"line\">  <span class=\"attr\">containers:</span>                          </span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">nginx</span>                       </span><br><span class=\"line\">      <span class=\"attr\">image:</span> <span class=\"string\">nginx:latest</span></span><br><span class=\"line\">      <span class=\"attr\">volumeMounts:</span>                      </span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">nfs-volume</span>                  <span class=\"comment\"># 卷名称</span></span><br><span class=\"line\">          <span class=\"attr\">mountPath:</span> <span class=\"string\">/usr/share/nginx/html</span>  <span class=\"comment\"># 挂载路径，Nginx 的默认 Web 目录</span></span><br><span class=\"line\">  <span class=\"attr\">volumes:</span>                                  <span class=\"comment\"># Pod 的卷定义</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">nfs-volume</span>                      <span class=\"comment\"># 卷名称</span></span><br><span class=\"line\">      <span class=\"attr\">persistentVolumeClaim:</span>                <span class=\"comment\"># 引用 PVC</span></span><br><span class=\"line\">        <span class=\"attr\">claimName:</span> <span class=\"string\">my-pvc</span>                   <span class=\"comment\"># PVC 名称</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"comment\"># PersistentVolumeClaim</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">PersistentVolumeClaim</span>                 </span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">my-pvc</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">accessModes:</span>                              <span class=\"comment\"># 访问模式，与 PV 匹配</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">ReadWriteMany</span>                         <span class=\"comment\"># 支持多节点读写</span></span><br><span class=\"line\">  <span class=\"attr\">resources:</span>                                <span class=\"comment\"># 请求资源</span></span><br><span class=\"line\">    <span class=\"attr\">requests:</span>                               <span class=\"comment\"># 最小需求</span></span><br><span class=\"line\">      <span class=\"attr\">storage:</span> <span class=\"string\">1Gi</span>                          <span class=\"comment\"># 请求 1Gi 存储</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"comment\"># PersistentVolume</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span>                         </span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">PersistentVolume</span>                     </span><br><span class=\"line\"><span class=\"attr\">metadata:</span>                               </span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">my-pv</span>                         </span><br><span class=\"line\"><span class=\"attr\">spec:</span>                                  </span><br><span class=\"line\">  <span class=\"attr\">capacity:</span>                                 <span class=\"comment\"># 存储容量</span></span><br><span class=\"line\">    <span class=\"attr\">storage:</span> <span class=\"string\">1Gi</span>                            <span class=\"comment\"># 分配 1Gi 存储</span></span><br><span class=\"line\">  <span class=\"attr\">accessModes:</span>                              <span class=\"comment\"># 访问模式</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">ReadWriteMany</span>                         <span class=\"comment\"># 支持多节点读写（NFS 特性）</span></span><br><span class=\"line\">  <span class=\"attr\">persistentVolumeReclaimPolicy:</span> <span class=\"string\">Retain</span>     <span class=\"comment\"># 回收策略：保留 PV</span></span><br><span class=\"line\">  <span class=\"attr\">nfs:</span>                                      <span class=\"comment\"># NFS 存储配置</span></span><br><span class=\"line\">    <span class=\"attr\">server:</span> <span class=\"number\">192.168</span><span class=\"number\">.1</span><span class=\"number\">.4</span>                     <span class=\"comment\"># NFS 服务器 IP</span></span><br><span class=\"line\">    <span class=\"attr\">path:</span> <span class=\"string\">/data/nfs</span>                         <span class=\"comment\"># NFS 共享目录</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"K8S-监控平台\"><a href=\"#K8S-监控平台\" class=\"headerlink\" title=\"K8S 监控平台\"></a>K8S 监控平台</h2><h3 id=\"监控指标\"><a href=\"#监控指标\" class=\"headerlink\" title=\"监控指标\"></a>监控指标</h3><ul>\n<li><strong>集群监控：</strong> 节点资源利用率、节点数、运行pods</li>\n<li><strong>Pod 监控：</strong> 容器指标、应用程序</li>\n</ul>\n<h3 id=\"Prometheus-Grafana\"><a href=\"#Prometheus-Grafana\" class=\"headerlink\" title=\"Prometheus + Grafana\"></a>Prometheus + Grafana</h3><ul>\n<li><strong>Prometheus</strong><ul>\n<li>开源的</li>\n<li>监控、报警、数据库</li>\n<li>以 HTTP 协议周期性抓取被监控组件状态</li>\n<li>不需要复杂的集成过程，使用 HTTP 接口接入就可以了</li>\n</ul>\n</li>\n<li><strong>Grafana</strong><ul>\n<li>开源的数据分析和可视化工具</li>\n<li>支持多种数据源</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><ul>\n<li><a href=\"https://kubernetes.io/zh-cn/\">K8S 官网</a></li>\n</ul>\n","categories":["Kubernetes"],"tags":["后端","Kubernetes"]},{"title":"Linux_系统：性能与工具","url":"/Linux/Linux_%E7%B3%BB%E7%BB%9F%EF%BC%9A%E6%80%A7%E8%83%BD%E4%B8%8E%E5%B7%A5%E5%85%B7/","content":"<img src=\"/Linux/Linux_%E7%B3%BB%E7%BB%9F%EF%BC%9A%E6%80%A7%E8%83%BD%E4%B8%8E%E5%B7%A5%E5%85%B7/linux_perf_tools_full.png\" class=\"\" title=\"linux_perf_tools_full\">\n\n<span id=\"more\"></span>\n\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><ul>\n<li><a href=\"https://www.slideshare.net/brendangregg/linux-performance-analysis-and-tools\">Linux Performance Analysis and Tools</a></li>\n<li><a href=\"http://www.brendangregg.com/linuxperf.html\">BPF Performance Tools</a></li>\n</ul>\n","categories":["Linux"],"tags":["后端","Linux"]},{"title":"Linux_系统：系统监控","url":"/Linux/Linux_%E7%B3%BB%E7%BB%9F%EF%BC%9A%E7%B3%BB%E7%BB%9F%E7%9B%91%E6%8E%A7/","content":"<style>\nimg{\n    padding: 0px 40px 0px 40px;\n    max-width: 860px;\n}\n</style>\n\n<h2 id=\"整机：top\"><a href=\"#整机：top\" class=\"headerlink\" title=\"整机：top\"></a>整机：top</h2><ul>\n<li>命令格式：<code>top [options]</code></li>\n<li>参数选项：<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-attr\">[options]</span>：</span><br><span class=\"line\">   -<span class=\"selector-tag\">b</span> 批处理</span><br><span class=\"line\">   -c 显示完整的启动命令</span><br><span class=\"line\">   -<span class=\"selector-tag\">I</span> 忽略失效过程</span><br><span class=\"line\">   -s 保密模式</span><br><span class=\"line\">   -S 累积模式</span><br><span class=\"line\">   -H 线程模式</span><br><span class=\"line\">   -<span class=\"selector-tag\">i</span>&lt;时间&gt; 设置间隔时间</span><br><span class=\"line\">   -u&lt;用户名&gt; 指定用户名</span><br><span class=\"line\">   -<span class=\"selector-tag\">p</span>&lt;进程号&gt; 指定进程</span><br><span class=\"line\">   -n&lt;次数&gt; 循环显示的次数</span><br></pre></td></tr></table></figure></li>\n</ul>\n<span id=\"more\"></span>\n\n<ul>\n<li>top界面操作：<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\">c 显示完整的命令名</span><br><span class=\"line\">d 修改刷新时间</span><br><span class=\"line\">h 显示帮助画面，给出一些简短的命令总结说明</span><br><span class=\"line\">k 指定要杀死的进程</span><br><span class=\"line\">u 显示指定用户相关进程</span><br><span class=\"line\"><span class=\"selector-tag\">P</span> 按CPU使用排序</span><br><span class=\"line\">M 按内存使用排序</span><br><span class=\"line\">F 排序（进入新的界面，并选择排序的目标字段）</span><br><span class=\"line\">R 顺序或逆序</span><br><span class=\"line\">H 显示线程</span><br><span class=\"line\">Z 以多色彩显示<span class=\"attribute\">top</span></span><br><span class=\"line\">l/t/m 显示toggle/load/cpu/内存信息</span><br><span class=\"line\"><span class=\"number\">1</span> 显示多CPU的信息（多核机器上查看每个CPU的使用率）</span><br><span class=\"line\">W 保存当前<span class=\"attribute\">top</span>的配置</span><br></pre></td></tr></table></figure></li>\n<li>uptime：系统负载均衡，<code>(0.00+0.01+0.05)/3 &gt; 0.7</code>，大于0.7系统就会有点卡</li>\n</ul>\n<img src=\"/Linux/Linux_%E7%B3%BB%E7%BB%9F%EF%BC%9A%E7%B3%BB%E7%BB%9F%E7%9B%91%E6%8E%A7/top.png\" class=\"\" title=\"top\">\n\n<h2 id=\"CPU：vmstat\"><a href=\"#CPU：vmstat\" class=\"headerlink\" title=\"CPU：vmstat\"></a>CPU：vmstat</h2><ul>\n<li>命令格式：<code>vmstat [options] [delay [count]]</code></li>\n<li>参数选项：<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-attr\">[options]</span>：</span><br><span class=\"line\">   -<span class=\"selector-tag\">a</span> 显示活跃和非活跃内存</span><br><span class=\"line\">   -f 显示启动后创建的进程总数</span><br><span class=\"line\">   -m 显示slabinfo，slabinfo信息记录在/proc/slabinfo文件中</span><br><span class=\"line\">   -n 头信息仅显示一次</span><br><span class=\"line\">   -s 显示内存相关的统计信息</span><br><span class=\"line\">   -d 显示相关磁盘的统计信息    </span><br><span class=\"line\">   -<span class=\"selector-tag\">p</span> 显示磁盘子分区的统计信息</span><br><span class=\"line\">   -S 输出信息的单位</span><br><span class=\"line\"><span class=\"selector-attr\">[delay]</span>：信息收集间隔</span><br><span class=\"line\"><span class=\"selector-attr\">[count]</span>：信息收集次数</span><br></pre></td></tr></table></figure></li>\n</ul>\n<img src=\"/Linux/Linux_%E7%B3%BB%E7%BB%9F%EF%BC%9A%E7%B3%BB%E7%BB%9F%E7%9B%91%E6%8E%A7/vmstat.png\" class=\"\" title=\"vmstat\">\n\n\n<h2 id=\"内存：free\"><a href=\"#内存：free\" class=\"headerlink\" title=\"内存：free\"></a>内存：free</h2><ul>\n<li>命令格式：<code>free [options]</code></li>\n<li>参数选项：<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-attr\">[options]</span>：</span><br><span class=\"line\">   -<span class=\"selector-tag\">b</span> 以Byte为单位显示内存使用情况</span><br><span class=\"line\">   -k 以KB为单位显示内存使用情况 </span><br><span class=\"line\">   -m 以MB为单位显示内存使用情况</span><br><span class=\"line\">   -g 以GB为单位显示内存使用情况</span><br><span class=\"line\">   -o 不显示缓冲区调节列</span><br><span class=\"line\">   -s&lt;间隔秒数&gt; 持续观察内存使用状况</span><br><span class=\"line\">   -t 显示内存总和列</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"硬盘：df\"><a href=\"#硬盘：df\" class=\"headerlink\" title=\"硬盘：df\"></a>硬盘：df</h2><ul>\n<li>命令格式：<code>df [options] [file]</code></li>\n<li>参数选项：<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-attr\">[options]</span>：</span><br><span class=\"line\">   -<span class=\"selector-tag\">a</span> 全部文件系统列表</span><br><span class=\"line\">   -h 方便阅读方式显示</span><br><span class=\"line\">   -H 等于“-h”，但是计算式<span class=\"number\">1</span>K=<span class=\"number\">1000</span>，而不是<span class=\"number\">1</span>K=<span class=\"number\">1024</span></span><br><span class=\"line\">   -<span class=\"selector-tag\">i</span> 显示inode信息</span><br><span class=\"line\">   -k 区块为<span class=\"number\">1024</span>字节</span><br><span class=\"line\">   -l 只显示本地文件系统</span><br><span class=\"line\">   -m 区块为<span class=\"number\">1048576</span>字节</span><br><span class=\"line\">   –no-sync 忽略 sync 命令</span><br><span class=\"line\">   -<span class=\"selector-tag\">P</span> 输出格式为POSIX</span><br><span class=\"line\">   –sync 在取得磁盘信息前，先执行sync命令</span><br><span class=\"line\">   -T 文件系统类型</span><br><span class=\"line\">   –<span class=\"attribute\">block-size</span>=&lt;区块大小&gt; 指定区块大小</span><br><span class=\"line\">   -t&lt;文件系统类型&gt; 只显示选定文件系统的磁盘信息</span><br><span class=\"line\">   -x&lt;文件系统类型&gt; 不显示选定文件系统的磁盘信息</span><br><span class=\"line\"><span class=\"selector-attr\">[file]</span>：指定文件系统上的文件</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"磁盘IO：iostat\"><a href=\"#磁盘IO：iostat\" class=\"headerlink\" title=\"磁盘IO：iostat\"></a>磁盘IO：iostat</h2><ul>\n<li>命令格式：<code>iostat [options] [delay [count]]</code></li>\n<li>参数选项：<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-attr\">[options]</span>：</span><br><span class=\"line\">   -c 显示CPU使用情况</span><br><span class=\"line\">   -d 显示磁盘使用情况</span><br><span class=\"line\">   -k 以K为单位显示</span><br><span class=\"line\">   -m 以M为单位显示</span><br><span class=\"line\">   -N 显示磁盘阵列(LVM) 信息</span><br><span class=\"line\">   -n 显示NFS使用情况</span><br><span class=\"line\">   -<span class=\"selector-tag\">p</span> 可以报告出每块磁盘的每个分区的使用情况</span><br><span class=\"line\">   -t 显示终端和CPU的信息</span><br><span class=\"line\">   -x 显示详细信息</span><br><span class=\"line\"><span class=\"selector-attr\">[delay]</span>：时间间隔</span><br><span class=\"line\"><span class=\"selector-attr\">[count]</span>：显示次数</span><br></pre></td></tr></table></figure></li>\n</ul>\n<img src=\"/Linux/Linux_%E7%B3%BB%E7%BB%9F%EF%BC%9A%E7%B3%BB%E7%BB%9F%E7%9B%91%E6%8E%A7/iostat.png\" class=\"\" title=\"iostat\">\n\n<h2 id=\"网络IO：ifstat\"><a href=\"#网络IO：ifstat\" class=\"headerlink\" title=\"网络IO：ifstat\"></a>网络IO：ifstat</h2><ul>\n<li>命令格式：<code>ifstat [options]</code></li>\n<li>参数选项：<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-attr\">[options]</span>：</span><br><span class=\"line\">   -<span class=\"selector-tag\">a</span> 忽略历史文件</span><br><span class=\"line\">   -d, <span class=\"attr\">--scan</span>=SECS 每秒SECS的样本统计数据</span><br><span class=\"line\">   -e 显示错误</span><br><span class=\"line\">   -j json格式的输出</span><br><span class=\"line\">   -n, <span class=\"attr\">--nooutput</span> 不显示任何输出。仅更新历史记录文件</span><br><span class=\"line\">   -<span class=\"selector-tag\">p</span>, <span class=\"attr\">--pretty</span> 如果与<span class=\"attr\">--json</span>结合使用，则打印输出</span><br><span class=\"line\">   -r 重置历史记录</span><br><span class=\"line\">   -s, <span class=\"attr\">--noupdate</span> 不要更新历史记录文件</span><br><span class=\"line\">   -t, <span class=\"attr\">--interval</span>=SECS 在过去的SECS秒内报告平均值</span><br><span class=\"line\">   -z, <span class=\"attr\">--zeros</span> 显示活动为零的条目</span><br><span class=\"line\">   -x, <span class=\"attr\">--extended</span>=TYPE 显示TYPE的扩展统计数据</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><ul>\n<li><a href=\"http://www.man7.org/linux/man-pages/dir_all_alphabetic.html\">Linux 命令详解</a></li>\n</ul>\n","categories":["Linux"],"tags":["后端","Linux"]},{"title":"Linux_网络：网络模式","url":"/Linux/Linux_%E7%BD%91%E7%BB%9C%EF%BC%9A%E7%BD%91%E7%BB%9C%E6%A8%A1%E5%BC%8F/","content":"<h2 id=\"NAT模式\"><a href=\"#NAT模式\" class=\"headerlink\" title=\"NAT模式\"></a>NAT模式</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 特点</span></span><br><span class=\"line\">1、如果主机可以上网，虚拟机可以上网</span><br><span class=\"line\">2、虚拟机之间不能ping通</span><br><span class=\"line\">3、虚拟机可以ping通主机（此时ping虚拟机的网关，即是ping主机）</span><br><span class=\"line\">4、主机不能ping通虚拟机</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 应用场景</span></span><br><span class=\"line\">虚拟机只要求可以上网，无其它特殊要求，满足最一般需求</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 配置方法</span></span><br><span class=\"line\">连接方式 选择 网络地址转换（NAT）</span><br><span class=\"line\">高级-控制芯片 选择 PCnet-FAST III</span><br><span class=\"line\">高级-混杂模式 拒绝</span><br><span class=\"line\">高级-接入网线 √</span><br><span class=\"line\">（虚拟机ip自动获取）</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Ip样式</span></span><br><span class=\"line\">ip 10.0.2.15</span><br><span class=\"line\">网关 10.0.2.2</span><br><span class=\"line\">注意此处的网关在不同虚拟机中可能是同一个值，但是这归属于不同的NAT Engine，因此实际上各个虚拟机用的不是同一个网关</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 原理</span></span><br><span class=\"line\">虚拟机的请求传递给NAT Engine，由它来利用主机进行对外的网络访问，返回的数据包再由NAT Engine给虚拟机。</span><br></pre></td></tr></table></figure>\n\n<span id=\"more\"></span>\n\n<h2 id=\"Bridged-Adapter模式（桥接模式）\"><a href=\"#Bridged-Adapter模式（桥接模式）\" class=\"headerlink\" title=\"Bridged Adapter模式（桥接模式）\"></a>Bridged Adapter模式（桥接模式）</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 特点</span></span><br><span class=\"line\">1、如果主机可以上网，虚拟机可以上网</span><br><span class=\"line\">2、虚拟机之间可以ping通</span><br><span class=\"line\">3、虚拟机可以ping通主机</span><br><span class=\"line\">4、主机可以ping通虚拟机</span><br><span class=\"line\">5、如果主机不可以上网，所有1-4特点均无</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 应用场景</span></span><br><span class=\"line\">虚拟机要求可以上网，且虚拟机完全模拟一台实体机</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 配置方法</span></span><br><span class=\"line\">连接方式 选择 桥接网卡</span><br><span class=\"line\">界面名称 选择 （如果你的笔记本有无线网卡和有线网卡，需要根据现在的上网方式对应选择）</span><br><span class=\"line\">高级-控制芯片 选择 PCnet-FAST III</span><br><span class=\"line\">高级-混杂模式 拒绝</span><br><span class=\"line\">高级-接入网线 √</span><br><span class=\"line\">（虚拟机ip自动获取）</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Ip样式</span></span><br><span class=\"line\">ip 与本机ip在同一网段内</span><br><span class=\"line\">网关 与本机网关相同</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 原理</span></span><br><span class=\"line\">通过主机网卡，架设一条桥，直接连入到网络中。它使得虚拟机能被分配到一个网络中独立的IP，所有网络功能完全和在网络中的真实机器一样。</span><br><span class=\"line\">（虚拟机是通过主机所在网络中的DHCP服务得到ip地址的，所以按理来说，两者是完全独立的，但事实却是虚拟机是没有独立硬件的，它还是要依靠主机的网卡，因此，</span><br><span class=\"line\">主机要断开网络，虚拟机也就没法拿到ip了）</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Host-only-Adapter主机模式\"><a href=\"#Host-only-Adapter主机模式\" class=\"headerlink\" title=\"Host-only Adapter主机模式\"></a>Host-only Adapter主机模式</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 特点</span></span><br><span class=\"line\">1、虚拟机不可以上网</span><br><span class=\"line\">2、虚拟机之间可以ping通</span><br><span class=\"line\">3、虚拟机可以ping通主机</span><br><span class=\"line\">（注意虚拟机与主机通信是通过主机的名为VirtualBox Host-Only Network的网卡，因此ip是该网卡ip 192.168.56.1，而不是你现在正在上网所用的ip）</span><br><span class=\"line\">4、主机可以ping通虚拟机</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 应用场景</span></span><br><span class=\"line\">在主机无法上网的情况下（主机可以上网的情况下可以用host-only，也可以用桥接），需要搭建一个模拟局域网，所有机器可以互访</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 配置方法</span></span><br><span class=\"line\">连接方式 选择 仅主机（Host-Only）适配器</span><br><span class=\"line\">界面名称 选择 VirtualBox Host-Only Ethernet Adapter</span><br><span class=\"line\">高级-控制芯片 选择 PCnet-FAST III</span><br><span class=\"line\">高级-混杂模式 拒绝</span><br><span class=\"line\">高级-接入网线 √</span><br><span class=\"line\">（虚拟机ip自动获取，也可以自己进行配置，网关配置为主机中虚拟网卡的地址【默认为192.168.56.1】，ip配置为与虚拟网卡地址同网段地址）</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Ip样式</span></span><br><span class=\"line\">ip 与本机VirtualBox Host-Only Network的网卡ip在同一网段内（默认192.168.56.*）</span><br><span class=\"line\">网关 本机VirtualBox Host-Only Network的网卡ip（默认192.168.56.1）</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 原理</span></span><br><span class=\"line\">通过VirtualBox Host-Only Network网卡进行通信，虚拟机以此ip作为网关，因此模拟了一个本机与各个虚拟机的局域网。</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Internal模式（内网模式）\"><a href=\"#Internal模式（内网模式）\" class=\"headerlink\" title=\"Internal模式（内网模式）\"></a>Internal模式（内网模式）</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 特点</span></span><br><span class=\"line\">1、虚拟机不可以上网</span><br><span class=\"line\">2、虚拟机之间可以ping通</span><br><span class=\"line\">3、虚拟机不能ping通主机</span><br><span class=\"line\">4、主机不能ping通虚拟机</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 应用场景</span></span><br><span class=\"line\">让各台虚拟机处于隔离的局域网内，只让它们相互通信，与外界（包括主机）隔绝</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 配置方法</span></span><br><span class=\"line\">连接方式 选择 内部网络</span><br><span class=\"line\">界面名称 选择 intnet（可以重新命名，所有放在同一局域网内的虚拟机此名称相同）</span><br><span class=\"line\">高级-控制芯片 选择 PCnet-FAST III</span><br><span class=\"line\">高级-混杂模式 拒绝</span><br><span class=\"line\">高级-接入网线 √</span><br><span class=\"line\">（虚拟机ip：对于XP自动获取ip即可，但对于linux，必须手动配置ip和子网掩码，手动配置时需保证各个虚拟机ip在同一网段）</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Ip样式</span></span><br><span class=\"line\">ip 169.254.147.9</span><br><span class=\"line\">子网掩码 255.255.0.0</span><br><span class=\"line\">默认网关 无</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 原理</span></span><br><span class=\"line\">各个虚拟机利用VirtualBox内置的DHCP服务器得到ip，数据包传递不经过主机所在网络，因此安全性高，防止外部抓包</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"NAT模式-端口映射\"><a href=\"#NAT模式-端口映射\" class=\"headerlink\" title=\"NAT模式+端口映射\"></a>NAT模式+端口映射</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">将虚拟机某端口映射到主机某端口，可以使主机和外部机器访问虚拟机提供的服务</span><br><span class=\"line\"></span><br><span class=\"line\">命令如下：</span><br><span class=\"line\">（在命令行模式下，先到VirtualBox的安装目录下面，否则找不到命令）</span><br><span class=\"line\">vboxmanage setextradata &lt;VM name&gt; <span class=\"string\">&quot;VBoxInternal/Devices/pcnet/0/LUN#0/Config/&lt;rule name&gt;/Protocol&quot;</span> TCP</span><br><span class=\"line\">vboxmanage setextradata &lt;VM name&gt; <span class=\"string\">&quot;VBoxInternal/Devices/pcnet/0/LUN#0/Config/&lt;rule name&gt;/GuestPort&quot;</span> 80</span><br><span class=\"line\">vboxmanage setextradata &lt;VM name&gt; <span class=\"string\">&quot;VBoxInternal/Devices/pcnet/0/LUN#0/Config/&lt;rule name&gt;/HostPort&quot;</span> 8000</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><ul>\n<li><a href=\"http://ju.outofmemory.cn/entry/111285\">原文地址</a></li>\n</ul>\n","categories":["Linux"],"tags":["后端","Linux"]},{"title":"Maven：手动导包","url":"/Maven/Maven%EF%BC%9A%E6%89%8B%E5%8A%A8%E5%AF%BC%E5%8C%85/","content":"<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">mvn install:install-file -Dfile=&lt;path-to-file&gt; -DgroupId=&lt;group-id&gt; -DartifactId=&lt;artifact-id&gt; -Dversion=&lt;version&gt; -Dpackaging=&lt;packaging&gt;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><code>&lt;path-to-file&gt;</code>：jar包路径</li>\n<li><code>&lt;group-id&gt;</code>：maven依赖中的group-id</li>\n<li><code>&lt;artifact-id&gt;</code>：maven依赖中的artifact-id</li>\n<li><code>&lt;version&gt;</code>：maven依赖中的version jar版本号</li>\n<li><code>&lt;packaging&gt;</code>：规定项目的输出格式，包括jar、war、pom、apk等</li>\n</ul>\n","categories":["Maven"],"tags":["后端","Maven"]},{"title":"Maven：镜像源","url":"/Maven/Maven%EF%BC%9A%E9%95%9C%E5%83%8F%E6%BA%90/","content":"<h2 id=\"镜像地址\"><a href=\"#镜像地址\" class=\"headerlink\" title=\"镜像地址\"></a>镜像地址</h2><ul>\n<li>阿里云 <a href=\"https://maven.aliyun.com/mvn/view\">https://maven.aliyun.com/mvn/view</a></li>\n<li>腾讯云 <a href=\"https://mirrors.cloud.tencent.com/\">https://mirrors.cloud.tencent.com</a></li>\n<li>华为云 <a href=\"https://mirrors.huaweicloud.com/\">https://mirrors.huaweicloud.com</a></li>\n</ul>\n<span id=\"more\"></span>\n\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">mirrors</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 配置多个mirror的情况下，只有第一个位置mirror的才生效 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">mirror</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">id</span>&gt;</span>aliyunmaven<span class=\"tag\">&lt;/<span class=\"name\">id</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">mirrorOf</span>&gt;</span>*<span class=\"tag\">&lt;/<span class=\"name\">mirrorOf</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>阿里云公共仓库<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">url</span>&gt;</span>https://maven.aliyun.com/repository/public<span class=\"tag\">&lt;/<span class=\"name\">url</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">mirror</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">mirror</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">id</span>&gt;</span>nexus-tencentyun<span class=\"tag\">&lt;/<span class=\"name\">id</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">mirrorOf</span>&gt;</span>*<span class=\"tag\">&lt;/<span class=\"name\">mirrorOf</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>Nexus tencentyun<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">url</span>&gt;</span>http://mirrors.cloud.tencent.com/nexus/repository/maven-public/<span class=\"tag\">&lt;/<span class=\"name\">url</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">mirror</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">mirror</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">id</span>&gt;</span>huaweicloud<span class=\"tag\">&lt;/<span class=\"name\">id</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">mirrorOf</span>&gt;</span>*<span class=\"tag\">&lt;/<span class=\"name\">mirrorOf</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">url</span>&gt;</span>https://mirrors.huaweicloud.com/repository/maven/<span class=\"tag\">&lt;/<span class=\"name\">url</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">mirror</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">mirrors</span>&gt;</span></span><br></pre></td></tr></table></figure>","categories":["Maven"],"tags":["后端","Maven"]},{"title":"MyBatis：源码结构","url":"/MyBatis/MyBatis%EF%BC%9A%E6%BA%90%E7%A0%81%E7%BB%93%E6%9E%84/","content":"<img src=\"/MyBatis/MyBatis%EF%BC%9A%E6%BA%90%E7%A0%81%E7%BB%93%E6%9E%84/MyBatis%E6%BA%90%E7%A0%81%E7%BB%93%E6%9E%84.png\" class=\"\" title=\"MyBatis源码结构\">\n","categories":["MyBatis"],"tags":["后端","MyBatis"]},{"title":"MySQL_优化：Show Profile分析","url":"/MySQL/MySQL_%E4%BC%98%E5%8C%96%EF%BC%9AShow%20Profile%E5%88%86%E6%9E%90/","content":"<h2 id=\"什么是Show-Profile\"><a href=\"#什么是Show-Profile\" class=\"headerlink\" title=\"什么是Show Profile\"></a>什么是Show Profile</h2><ul>\n<li>是MySQL提供可以用来分析当前会话中语句执行的资源消耗情况。可以用于SQL的调优的测量</li>\n</ul>\n<span id=\"more\"></span>\n\n<h2 id=\"开启Show-Profile\"><a href=\"#开启Show-Profile\" class=\"headerlink\" title=\"开启Show Profile\"></a>开启Show Profile</h2><figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"># 查看</span><br><span class=\"line\"><span class=\"keyword\">SHOW</span> VARIABLES <span class=\"keyword\">LIKE</span> <span class=\"string\">&#x27;profiling&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"># 开启（默认关闭，使用前需要开启）</span><br><span class=\"line\"><span class=\"keyword\">SET</span> profiling <span class=\"operator\">=</span> <span class=\"keyword\">ON</span>;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"诊断SQL\"><a href=\"#诊断SQL\" class=\"headerlink\" title=\"诊断SQL\"></a>诊断SQL</h2><figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"># 执行<span class=\"keyword\">SQL</span>后查看结果</span><br><span class=\"line\"><span class=\"keyword\">SHOW</span> PROFILES;</span><br><span class=\"line\"></span><br><span class=\"line\"># 根据查询结果的Query_ID诊断<span class=\"keyword\">SQL</span></span><br><span class=\"line\"><span class=\"keyword\">SHOW</span> PROFILE cpu,block io <span class=\"keyword\">FOR</span> QUERY [Query_ID];</span><br><span class=\"line\"></span><br><span class=\"line\"># PROFILE TYPE:  </span><br><span class=\"line\"><span class=\"keyword\">ALL</span>                              # 显示所有的开销信息  </span><br><span class=\"line\">BLOCK IO                         # 显示块IO相关开销  </span><br><span class=\"line\">CONTEXT SWITCHES                 #上下文切换相关开销  </span><br><span class=\"line\">CPU                              # 显示CPU相关开销信息  </span><br><span class=\"line\">IPC                              # 显示发送和接收相关开销信息  </span><br><span class=\"line\">MEMORY                           # 显示内存相关开销信息  </span><br><span class=\"line\">PAGE FAULTS                      # 显示页面错误相关开销信息  </span><br><span class=\"line\">SOURCE                           # 显示和Source_function，Source_file，Source_line相关的开销信息  </span><br><span class=\"line\">SWAPS                            # 显示交换次数相关开销的信息  </span><br><span class=\"line\"></span><br><span class=\"line\"># 需要注意的诊断Status结论</span><br><span class=\"line\">converting HEAP <span class=\"keyword\">to</span> MyISAM        # 查询结果太大，内存不够往磁盘上搬</span><br><span class=\"line\">Creating tmp <span class=\"keyword\">table</span>               # 创建临时表</span><br><span class=\"line\">Copying <span class=\"keyword\">to</span> tmp <span class=\"keyword\">table</span> <span class=\"keyword\">on</span> disk     # 把内存中临时表复制到磁盘</span><br><span class=\"line\">locked                           # 锁住了</span><br></pre></td></tr></table></figure>\n","categories":["MySQL"],"tags":["后端","数据库","MySQL"]},{"title":"MySQL_优化：性能分析Explain","url":"/MySQL/MySQL_%E4%BC%98%E5%8C%96%EF%BC%9A%E6%80%A7%E8%83%BD%E5%88%86%E6%9E%90Explain/","content":"<h2 id=\"什么是Explain\"><a href=\"#什么是Explain\" class=\"headerlink\" title=\"什么是Explain\"></a>什么是Explain</h2><ul>\n<li>EXPLAIN关键字可以模拟优化器执行SQL查询语句，从而知道MySQL如何处理SQL语句。进行分析查询语句或是表结构的性能瓶颈。</li>\n</ul>\n<span id=\"more\"></span>\n\n<h2 id=\"Explain分析结果\"><a href=\"#Explain分析结果\" class=\"headerlink\" title=\"Explain分析结果\"></a>Explain分析结果</h2><ul>\n<li>表的读取顺序</li>\n<li>数据读取操作的操作类型</li>\n<li>哪些索引可以使用</li>\n<li>哪些索引被实际使用</li>\n<li>表之间的引用</li>\n<li>每张表有多少行被优化器查询</li>\n</ul>\n<h2 id=\"Explain语法\"><a href=\"#Explain语法\" class=\"headerlink\" title=\"Explain语法\"></a>Explain语法</h2><figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\">EXPLAIN <span class=\"operator\">&lt;</span><span class=\"keyword\">SQL</span>查询语句<span class=\"operator\">&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Explain字段解释\"><a href=\"#Explain字段解释\" class=\"headerlink\" title=\"Explain字段解释\"></a>Explain字段解释</h2><figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"operator\">+</span><span class=\"comment\">--+---------+----+--------+----+-----------+---+------+----+----+-----+-----+</span></span><br><span class=\"line\"> <span class=\"operator\">|</span> id <span class=\"operator\">|</span> select_type <span class=\"operator\">|</span> <span class=\"keyword\">table</span> <span class=\"operator\">|</span> partitions <span class=\"operator\">|</span> type  <span class=\"operator\">|</span> possible_keys <span class=\"operator\">|</span> key <span class=\"operator\">|</span> key_len <span class=\"operator\">|</span> <span class=\"keyword\">ref</span>  <span class=\"operator\">|</span> <span class=\"keyword\">rows</span> <span class=\"operator\">|</span> filtered <span class=\"operator\">|</span> Extra <span class=\"operator\">|</span></span><br><span class=\"line\"><span class=\"operator\">+</span><span class=\"comment\">--+---------+----+--------+----+-----------+---+------+----+----+-----+-----+</span></span><br><span class=\"line\"></span><br><span class=\"line\">id：查询标识符</span><br><span class=\"line\">select_type：查询类型</span><br><span class=\"line\"><span class=\"keyword\">table</span>：输出行描述的表的表名</span><br><span class=\"line\">partitions：匹配的分区</span><br><span class=\"line\">type：连接类型</span><br><span class=\"line\">possible_keys：可供选择使用的索引</span><br><span class=\"line\">key：实际使用的索引</span><br><span class=\"line\">key_len：实际使用的索引的长度</span><br><span class=\"line\"><span class=\"keyword\">ref</span>：与索引进行比较的列，也就是关联表使用的列</span><br><span class=\"line\"><span class=\"keyword\">rows</span>：估计要检查的行数</span><br><span class=\"line\">filtered：按表条件过滤的行的百分比</span><br><span class=\"line\">Extra：附加信息</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"id\"><a href=\"#id\" class=\"headerlink\" title=\"id\"></a>id</h3><ul>\n<li>id相同，执行顺序由上至下</li>\n<li>id不同，id值越大优先级越高，越先被执行</li>\n</ul>\n<h3 id=\"select-type\"><a href=\"#select-type\" class=\"headerlink\" title=\"select_type\"></a>select_type</h3><ul>\n<li><code>SIMPLE </code> 简单SELECT，不使用UNION或子查询等</li>\n<li><code>PRIMARY </code> 查询中若包含任何复杂的子部分，最外层的SELECT被标记为PRIMARY</li>\n<li><code>UNION </code> 在 UNION 查询中的第二个或者之后的 SELECT 语句</li>\n<li><code>UNION RESULT </code> UNION的结果</li>\n<li><code>SUBQUERY </code> 在子查询中的第一个SELECT</li>\n<li><code>DERIVED </code> 衍生表的SELECT，FROM子句的子查询</li>\n</ul>\n<h3 id=\"table\"><a href=\"#table\" class=\"headerlink\" title=\"table\"></a>table</h3><ul>\n<li>对应行正在访问哪一个表，表名或者别名</li>\n</ul>\n<h3 id=\"type\"><a href=\"#type\" class=\"headerlink\" title=\"type\"></a>type</h3><p>依次从好到差：<code>system</code> &gt; <code>const</code> &gt; <code>eq_ref</code> &gt; <code>ref</code> &gt; fulltext &gt; ref_or_null &gt; index_merge &gt; unique_subquery &gt; index_subquery &gt; <code>range</code> &gt; <code>index</code> &gt; <code>ALL</code></p>\n<ul>\n<li><code>system </code> 表只有一行数据（等于系统表）</li>\n<li><code>const </code> 针对主键或唯一索引的等值查询扫描, 最多只返回一行数据</li>\n<li><code>eq_ref </code> 主键或唯一索引的所有部分被join连接使用 ，最多只会返回一条符合条件的记录</li>\n<li><code>ref </code> 相比eq_ref，不使用唯一索引，而是使用普通索引或者唯一性索引的部分前缀，索引要和某个值相比较，可能会找到多个符合条件的行</li>\n<li><code>range </code> 范围扫描通常出现在 in()，between ，&gt; ，&lt;，&gt;&#x3D; 等操作中</li>\n<li><code>index </code> 和ALL一样全表扫描，不同就是mysql只需扫描索引树，这通常比ALL快一些</li>\n<li><code>ALL </code> 最坏的情况，全表扫描</li>\n</ul>\n<h3 id=\"possible-keys\"><a href=\"#possible-keys\" class=\"headerlink\" title=\"possible_keys\"></a>possible_keys</h3><ul>\n<li>在当前查询中可能使用到的索引. 注意，即使有些索引在 <code>possible_keys</code> 中出现, 但是并不表示此索引会真正地被 MySQL 使用到. MySQL 在查询时具体使用了哪些索引, 由 <code>key</code> 字段决定</li>\n</ul>\n<h3 id=\"key\"><a href=\"#key\" class=\"headerlink\" title=\"key\"></a>key</h3><ul>\n<li>此字段是 MySQL 在当前查询时所真正使用到的索引</li>\n</ul>\n<h3 id=\"key-len\"><a href=\"#key-len\" class=\"headerlink\" title=\"key_len\"></a>key_len</h3><ul>\n<li>索引最大长度是768字节，当字符串过长时，mysql会做一个类似左前缀索引的处理，将前半部分的字符提取出来做索引</li>\n</ul>\n<h3 id=\"ref\"><a href=\"#ref\" class=\"headerlink\" title=\"ref\"></a>ref</h3><ul>\n<li>表示上述表的连接匹配条件，即哪些列或常量被用于查找索引列上的值</li>\n</ul>\n<h3 id=\"rows\"><a href=\"#rows\" class=\"headerlink\" title=\"rows\"></a>rows</h3><ul>\n<li>rows列显示MySQL认为它执行查询时必须检查的行数。注意这是一个预估值</li>\n</ul>\n<h3 id=\"Extra\"><a href=\"#Extra\" class=\"headerlink\" title=\"Extra\"></a>Extra</h3><ul>\n<li><code>Using filesort </code> 表示 MySQL 需额外的排序操作, 不能通过索引顺序达到排序效果. 一般有 Using filesort, 都建议优化去掉, 因为这样的查询 CPU 资源消耗大</li>\n<li><code>Using temporary </code> 查询中会使用临时表, 一般出现于排序, 分组和多表 join 的情况, 查询效率不高, 建议优化</li>\n<li><code>Using index </code> “覆盖索引扫描”, 表示查询在索引树中就可查找所需数据, 不用扫描表数据文件, 往往说明性能不错</li>\n<li><code>Using where </code> 表示使用了where过滤</li>\n<li><code>Using join buffer </code> 表示使用了连接缓存</li>\n<li><code>impossible where </code> where子句的值总是false，不能用来获取任何元组</li>\n<li><code>select tables optimized away </code> 在没有GROUP BY子句的情况下，基于索引优化MIN&#x2F;MAX操作或者对于MyISAM存储引擎优化COUNT(*)操作，不必等到执行阶段再进行计算，查询执行计划生成的阶段即完成优化</li>\n<li><code>distinct </code> 优化distinct操作，在找到第一匹配的元组后即停止找同样值的动作</li>\n</ul>\n","categories":["MySQL"],"tags":["后端","数据库","MySQL"]},{"title":"MySQL_优化：慢查询日志","url":"/MySQL/MySQL_%E4%BC%98%E5%8C%96%EF%BC%9A%E6%85%A2%E6%9F%A5%E8%AF%A2%E6%97%A5%E5%BF%97/","content":"<h2 id=\"什么是慢查询日志\"><a href=\"#什么是慢查询日志\" class=\"headerlink\" title=\"什么是慢查询日志\"></a>什么是慢查询日志</h2><ul>\n<li>慢查询日志是MySQL提供多一种日志记录，它用来记录在MySQL中响应时间超过阀值的语句，具体指运行时间超过long_query_time值的SQL，则会被记录到慢查询日志中</li>\n<li>慢查询日志默认是关闭的，开启慢查询日志会带来一定的性能影响，不是调优需要，一般不建议开启</li>\n</ul>\n<span id=\"more\"></span>\n\n<h2 id=\"开启慢查询日志\"><a href=\"#开启慢查询日志\" class=\"headerlink\" title=\"开启慢查询日志\"></a>开启慢查询日志</h2><figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"># 查看</span><br><span class=\"line\"><span class=\"keyword\">SHOW</span> VARIABLES <span class=\"keyword\">LIKE</span> <span class=\"string\">&#x27;%slow_query_log%&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"># 开启（当前数据库生效，重启MySQL失效）</span><br><span class=\"line\"><span class=\"keyword\">SET</span> <span class=\"keyword\">GLOBAL</span> slow_query_log <span class=\"operator\">=</span> <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"># 关闭</span><br><span class=\"line\"><span class=\"keyword\">SET</span> <span class=\"keyword\">GLOBAL</span> slow_query_log <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"设置慢查询阀值时间\"><a href=\"#设置慢查询阀值时间\" class=\"headerlink\" title=\"设置慢查询阀值时间\"></a>设置慢查询阀值时间</h2><figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"># 查看（默认<span class=\"number\">10</span>秒）</span><br><span class=\"line\"><span class=\"keyword\">SHOW</span> VARIABLES <span class=\"keyword\">LIKE</span> <span class=\"string\">&#x27;%long_query_time%&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"># 设置（判断大于long_query_time，而非大于等于；设置后需重新连接或新开会话才能看到修改值）</span><br><span class=\"line\"><span class=\"keyword\">SET</span> <span class=\"keyword\">GLOBAL</span> long_query_time<span class=\"operator\">=</span><span class=\"number\">3</span>;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"查询慢查询当前系统总记录\"><a href=\"#查询慢查询当前系统总记录\" class=\"headerlink\" title=\"查询慢查询当前系统总记录\"></a>查询慢查询当前系统总记录</h2><figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SHOW</span> <span class=\"keyword\">GLOBAL</span> STATUS <span class=\"keyword\">LIKE</span> <span class=\"string\">&#x27;%slow_queries%&#x27;</span>;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"慢查询配置版\"><a href=\"#慢查询配置版\" class=\"headerlink\" title=\"慢查询配置版\"></a>慢查询配置版</h2><figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"># 修改my.cnf文件，[mysqld]下添加参数</span><br><span class=\"line\">slow_query_log <span class=\"operator\">=</span> <span class=\"number\">1</span></span><br><span class=\"line\">slow_query_log_file<span class=\"operator\">=</span><span class=\"operator\">/</span>var<span class=\"operator\">/</span>lib<span class=\"operator\">/</span>mysql<span class=\"operator\">/</span>host_name<span class=\"operator\">-</span>slow.log</span><br><span class=\"line\">long_query_time<span class=\"operator\">=</span><span class=\"number\">3</span>;</span><br><span class=\"line\">log_output<span class=\"operator\">=</span>FILE</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"日志分析工具mysqldumpslow\"><a href=\"#日志分析工具mysqldumpslow\" class=\"headerlink\" title=\"日志分析工具mysqldumpslow\"></a>日志分析工具mysqldumpslow</h2><h3 id=\"参数说明\"><a href=\"#参数说明\" class=\"headerlink\" title=\"参数说明\"></a>参数说明</h3><p>s：是表示按照何种方式排序<br>c：访问次数<br>l：锁定时间<br>r：返回记录<br>t：查询时间<br>al：平均锁定时间<br>ar：平均返回记录数<br>at：平均查询时间<br>t NUM：显示头num条记录<br>g PATTERN：正则匹配，大小写不敏感</p>\n<h3 id=\"常用命令\"><a href=\"#常用命令\" class=\"headerlink\" title=\"常用命令\"></a>常用命令</h3><figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"># 得到返回记录集最多的<span class=\"number\">10</span>个<span class=\"keyword\">SQL</span></span><br><span class=\"line\">mysqldumpslow <span class=\"operator\">-</span>s r <span class=\"operator\">-</span>t <span class=\"number\">10</span> <span class=\"operator\">/</span>var<span class=\"operator\">/</span>lib<span class=\"operator\">/</span>mysql<span class=\"operator\">/</span>host_name<span class=\"operator\">-</span>slow.log</span><br><span class=\"line\"></span><br><span class=\"line\"># 得到访问次数最多的<span class=\"number\">10</span>个<span class=\"keyword\">SQL</span></span><br><span class=\"line\">mysqldumpslow <span class=\"operator\">-</span>s c <span class=\"operator\">-</span>t <span class=\"number\">10</span> <span class=\"operator\">/</span>var<span class=\"operator\">/</span>lib<span class=\"operator\">/</span>mysql<span class=\"operator\">/</span>host_name<span class=\"operator\">-</span>slow.log</span><br><span class=\"line\"></span><br><span class=\"line\"># 得到按照时间排序的前<span class=\"number\">10</span>条里面含有左连接的查询语句</span><br><span class=\"line\">mysqldumpslow <span class=\"operator\">-</span>s t <span class=\"operator\">-</span>t <span class=\"number\">10</span> <span class=\"operator\">-</span>g &quot;left join&quot; <span class=\"operator\">/</span>var<span class=\"operator\">/</span>lib<span class=\"operator\">/</span>mysql<span class=\"operator\">/</span>host_name<span class=\"operator\">-</span>slow.log</span><br><span class=\"line\"></span><br><span class=\"line\"># 另外建议在使用这些命令结合 <span class=\"operator\">|</span> 和more使用，否则有可能出现爆屏情况</span><br><span class=\"line\">mysqldumpslow <span class=\"operator\">-</span>s r <span class=\"operator\">-</span>t <span class=\"number\">10</span> <span class=\"operator\">/</span>var<span class=\"operator\">/</span>lib<span class=\"operator\">/</span>mysql<span class=\"operator\">/</span>host_name<span class=\"operator\">-</span>slow.log <span class=\"operator\">|</span> more</span><br></pre></td></tr></table></figure>\n","categories":["MySQL"],"tags":["后端","数据库","MySQL"]},{"title":"MySQL_优化：查询优化","url":"/MySQL/MySQL_%E4%BC%98%E5%8C%96%EF%BC%9A%E6%9F%A5%E8%AF%A2%E4%BC%98%E5%8C%96/","content":"<h2 id=\"查询优化\"><a href=\"#查询优化\" class=\"headerlink\" title=\"查询优化\"></a>查询优化</h2><h3 id=\"小表驱动大表\"><a href=\"#小表驱动大表\" class=\"headerlink\" title=\"小表驱动大表\"></a>小表驱动大表</h3><figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"># 当B表的数据集小于A表的数据集时，用<span class=\"keyword\">IN</span>优于<span class=\"keyword\">EXISTS</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> <span class=\"keyword\">FROM</span> A <span class=\"keyword\">WHERE</span> id <span class=\"keyword\">IN</span> (<span class=\"keyword\">SELECT</span> id <span class=\"keyword\">FROM</span> B)</span><br><span class=\"line\"></span><br><span class=\"line\"># 当A表的数据集小于B表的数据集时，用<span class=\"keyword\">EXISTS</span>优于<span class=\"keyword\">IN</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> <span class=\"keyword\">FROM</span> A <span class=\"keyword\">WHERE</span> <span class=\"keyword\">EXISTS</span> (<span class=\"keyword\">SELECT</span> <span class=\"number\">1</span> <span class=\"keyword\">FROM</span> B <span class=\"keyword\">WHERE</span> B.id <span class=\"operator\">=</span> A.id)</span><br></pre></td></tr></table></figure>\n\n<span id=\"more\"></span>\n\n<h2 id=\"ORDER-BY关键字优化\"><a href=\"#ORDER-BY关键字优化\" class=\"headerlink\" title=\"ORDER BY关键字优化\"></a>ORDER BY关键字优化</h2><ul>\n<li>MySQL支持二种方式的排序，FileSort和Index。Index指MySQL扫描索引本身完成排序，Index方式效率高。</li>\n</ul>\n<h3 id=\"Index方式排序\"><a href=\"#Index方式排序\" class=\"headerlink\" title=\"Index方式排序\"></a>Index方式排序</h3><figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\">索引：KEY a_b_c(a, b, c)</span><br><span class=\"line\"></span><br><span class=\"line\"># <span class=\"keyword\">ORDER</span> <span class=\"keyword\">BY</span>能使用索引最左前缀</span><br><span class=\"line\"><span class=\"keyword\">ORDER</span> <span class=\"keyword\">BY</span> a</span><br><span class=\"line\"><span class=\"keyword\">ORDER</span> <span class=\"keyword\">BY</span> a, b</span><br><span class=\"line\"><span class=\"keyword\">ORDER</span> <span class=\"keyword\">BY</span> a, b, c</span><br><span class=\"line\"><span class=\"keyword\">ORDER</span> <span class=\"keyword\">BY</span> a <span class=\"keyword\">DESC</span>, b <span class=\"keyword\">DESC</span>, c <span class=\"keyword\">DESC</span></span><br><span class=\"line\"></span><br><span class=\"line\"># <span class=\"keyword\">WHERE</span>使用索引的最左前缀定义为常量，则<span class=\"keyword\">ORDER</span> <span class=\"keyword\">BY</span>能使用索引</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> a <span class=\"operator\">=</span> const <span class=\"keyword\">ORDER</span> <span class=\"keyword\">BY</span> b, c</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> a <span class=\"operator\">=</span> const <span class=\"keyword\">AND</span> b <span class=\"operator\">=</span> const <span class=\"keyword\">ORDER</span> <span class=\"keyword\">BY</span> c</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> a <span class=\"operator\">=</span> const <span class=\"keyword\">AND</span> b <span class=\"operator\">&gt;</span> const <span class=\"keyword\">ORDER</span> <span class=\"keyword\">BY</span> b, c</span><br><span class=\"line\"></span><br><span class=\"line\"># 不能使用索引进行排序</span><br><span class=\"line\"><span class=\"keyword\">ORDER</span> <span class=\"keyword\">BY</span> a <span class=\"keyword\">ASC</span>, b <span class=\"keyword\">DESC</span>, c <span class=\"keyword\">DESC</span>\t         # 排序不一致</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> g <span class=\"operator\">=</span> const <span class=\"keyword\">ORDER</span> <span class=\"keyword\">BY</span> b, c\t         # 丢失a索引</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> a <span class=\"operator\">=</span> const <span class=\"keyword\">ORDER</span> <span class=\"keyword\">BY</span> c\t                 # 丢失b索引</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> a <span class=\"operator\">=</span> const <span class=\"keyword\">ORDER</span> <span class=\"keyword\">BY</span> a, d\t         # d不是索引的一部分</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> a <span class=\"keyword\">in</span> (...) <span class=\"keyword\">ORDER</span> <span class=\"keyword\">BY</span> b, c                    # 对于排序来说，多个相等条件也是范围查询</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"FileSort方式排序算法\"><a href=\"#FileSort方式排序算法\" class=\"headerlink\" title=\"FileSort方式排序算法\"></a>FileSort方式排序算法</h3><ul>\n<li><strong>双路排序：</strong>MySQL 4.1之前是使用双路排序,字面意思就是两次扫描磁盘，最终得到数据，读取行指针和orderby列，对他们进行排序，然后扫描已经排序好的列表，按照列表中的值重新从列表中读取对应的数据输出</li>\n<li><strong>单路排序：</strong>从磁盘读取查询需要的所有列，按照order by列在buffer对它们进行排序，然后扫描排序后的列表进行输出，它的效率更快一些，避免了第二次读取数据。并且把随机IO变成了顺序IO,但是它会使用更多的空间，因为它把每一行都保存在内存中了。</li>\n</ul>\n<h3 id=\"FileSort方式优化策略\"><a href=\"#FileSort方式优化策略\" class=\"headerlink\" title=\"FileSort方式优化策略\"></a>FileSort方式优化策略</h3><ul>\n<li>不用SELECT *</li>\n<li>增大max_length_for_sort_data参数的设置</li>\n<li>增大sort_buffer_size参数的设置</li>\n</ul>\n<h2 id=\"GROUP-BY关键字优化\"><a href=\"#GROUP-BY关键字优化\" class=\"headerlink\" title=\"GROUP BY关键字优化\"></a>GROUP BY关键字优化</h2><ul>\n<li>GROUP BY实质是<code>先排序后分组</code>，遵照索引建的最佳左前缀</li>\n<li>WHERE高于HAVING，能写在WHERE限定的条件就不要去HAVING限定了</li>\n<li>优化方式同ORDER BY</li>\n</ul>\n","categories":["MySQL"],"tags":["后端","数据库","MySQL"]},{"title":"MySQL_优化：索引分析","url":"/MySQL/MySQL_%E4%BC%98%E5%8C%96%EF%BC%9A%E7%B4%A2%E5%BC%95%E5%88%86%E6%9E%90/","content":"<h2 id=\"单表\"><a href=\"#单表\" class=\"headerlink\" title=\"单表\"></a>单表</h2><h3 id=\"SQL\"><a href=\"#SQL\" class=\"headerlink\" title=\"SQL\"></a>SQL</h3><figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> IF <span class=\"keyword\">NOT</span> <span class=\"keyword\">EXISTS</span> `article` ( </span><br><span class=\"line\">\t`id` <span class=\"type\">INT</span>(<span class=\"number\">10</span>) UNSIGNED <span class=\"keyword\">NOT</span> <span class=\"keyword\">NULL</span> <span class=\"keyword\">PRIMARY</span> KEY AUTO_INCREMENT, </span><br><span class=\"line\">\t`author_id` <span class=\"type\">INT</span>(<span class=\"number\">10</span>) UNSIGNED <span class=\"keyword\">NOT</span> <span class=\"keyword\">NULL</span>, </span><br><span class=\"line\">\t`category_id` <span class=\"type\">INT</span>(<span class=\"number\">10</span>) UNSIGNED <span class=\"keyword\">NOT</span> <span class=\"keyword\">NULL</span>, </span><br><span class=\"line\">\t`views` <span class=\"type\">INT</span>(<span class=\"number\">10</span>) UNSIGNED <span class=\"keyword\">NOT</span> <span class=\"keyword\">NULL</span>, </span><br><span class=\"line\">\t`comments` <span class=\"type\">INT</span>(<span class=\"number\">10</span>) UNSIGNED <span class=\"keyword\">NOT</span> <span class=\"keyword\">NULL</span>, </span><br><span class=\"line\">\t`title` <span class=\"type\">VARBINARY</span>(<span class=\"number\">255</span>) <span class=\"keyword\">NOT</span> <span class=\"keyword\">NULL</span>, </span><br><span class=\"line\">\t`content` TEXT <span class=\"keyword\">NOT</span> <span class=\"keyword\">NULL</span> </span><br><span class=\"line\">); </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> `article`(`author_id`, `category_id`, `views`, `comments`, `title`, `content`) <span class=\"keyword\">VALUES</span> (<span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"string\">&#x27;1&#x27;</span>, <span class=\"string\">&#x27;1&#x27;</span>), (<span class=\"number\">2</span>, <span class=\"number\">2</span>, <span class=\"number\">2</span>, <span class=\"number\">2</span>, <span class=\"string\">&#x27;2&#x27;</span>, <span class=\"string\">&#x27;2&#x27;</span>), (<span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">3</span>, <span class=\"string\">&#x27;3&#x27;</span>, <span class=\"string\">&#x27;3&#x27;</span>); </span><br></pre></td></tr></table></figure>\n\n<span id=\"more\"></span>\n\n<h3 id=\"优化分析\"><a href=\"#优化分析\" class=\"headerlink\" title=\"优化分析\"></a>优化分析</h3><figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"># 查询 category_id 为 <span class=\"number\">1</span> 且 comments 大于 <span class=\"number\">1</span> 的情况下,views 最多的 article_id</span><br><span class=\"line\">EXPLAIN <span class=\"keyword\">SELECT</span> id,author_id <span class=\"keyword\">FROM</span> article <span class=\"keyword\">WHERE</span> category_id <span class=\"operator\">=</span> <span class=\"number\">1</span> <span class=\"keyword\">AND</span> comments <span class=\"operator\">&gt;</span> <span class=\"number\">1</span> <span class=\"keyword\">ORDER</span> <span class=\"keyword\">BY</span> views <span class=\"keyword\">DESC</span> LIMIT <span class=\"number\">1</span>; </span><br><span class=\"line\"></span><br><span class=\"line\"># 结论：type 是 <span class=\"keyword\">ALL</span>，Extra 里出现了 <span class=\"keyword\">Using</span> filesort</span><br><span class=\"line\">优化<span class=\"number\">1</span>：<span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> `article` <span class=\"keyword\">ADD</span> INDEX idx_article_ccv ( `category_id` , `comments`, `views` ); </span><br><span class=\"line\"></span><br><span class=\"line\"># 结论：type 是 <span class=\"keyword\">range</span>，Extra 里出现了 <span class=\"keyword\">Using</span> filesort</span><br><span class=\"line\">优化<span class=\"number\">2</span>：<span class=\"keyword\">DROP</span> INDEX idx_article_ccv <span class=\"keyword\">ON</span> article;</span><br><span class=\"line\">\t   <span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> `article` <span class=\"keyword\">ADD</span> INDEX idx_article_cv ( `category_id` , `views` );</span><br><span class=\"line\"></span><br><span class=\"line\"># 结论：type 是 <span class=\"keyword\">ref</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"两表\"><a href=\"#两表\" class=\"headerlink\" title=\"两表\"></a>两表</h2><h3 id=\"SQL-1\"><a href=\"#SQL-1\" class=\"headerlink\" title=\"SQL\"></a>SQL</h3><figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> IF <span class=\"keyword\">NOT</span> <span class=\"keyword\">EXISTS</span> `class` (</span><br><span class=\"line\">`id` <span class=\"type\">INT</span>(<span class=\"number\">10</span>) UNSIGNED <span class=\"keyword\">NOT</span> <span class=\"keyword\">NULL</span> AUTO_INCREMENT,</span><br><span class=\"line\">`card` <span class=\"type\">INT</span>(<span class=\"number\">10</span>) UNSIGNED <span class=\"keyword\">NOT</span> <span class=\"keyword\">NULL</span>,</span><br><span class=\"line\"><span class=\"keyword\">PRIMARY</span> KEY (`id`)</span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> IF <span class=\"keyword\">NOT</span> <span class=\"keyword\">EXISTS</span> `book` (</span><br><span class=\"line\">`bookid` <span class=\"type\">INT</span>(<span class=\"number\">10</span>) UNSIGNED <span class=\"keyword\">NOT</span> <span class=\"keyword\">NULL</span> AUTO_INCREMENT,</span><br><span class=\"line\">`card` <span class=\"type\">INT</span>(<span class=\"number\">10</span>) UNSIGNED <span class=\"keyword\">NOT</span> <span class=\"keyword\">NULL</span>,</span><br><span class=\"line\"><span class=\"keyword\">PRIMARY</span> KEY (`bookid`)</span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> class(card) <span class=\"keyword\">VALUES</span>(<span class=\"built_in\">FLOOR</span>(<span class=\"number\">1</span> <span class=\"operator\">+</span> (RAND() <span class=\"operator\">*</span> <span class=\"number\">10</span>)));</span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> class(card) <span class=\"keyword\">VALUES</span>(<span class=\"built_in\">FLOOR</span>(<span class=\"number\">1</span> <span class=\"operator\">+</span> (RAND() <span class=\"operator\">*</span> <span class=\"number\">10</span>)));</span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> class(card) <span class=\"keyword\">VALUES</span>(<span class=\"built_in\">FLOOR</span>(<span class=\"number\">1</span> <span class=\"operator\">+</span> (RAND() <span class=\"operator\">*</span> <span class=\"number\">10</span>)));</span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> class(card) <span class=\"keyword\">VALUES</span>(<span class=\"built_in\">FLOOR</span>(<span class=\"number\">1</span> <span class=\"operator\">+</span> (RAND() <span class=\"operator\">*</span> <span class=\"number\">10</span>)));</span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> class(card) <span class=\"keyword\">VALUES</span>(<span class=\"built_in\">FLOOR</span>(<span class=\"number\">1</span> <span class=\"operator\">+</span> (RAND() <span class=\"operator\">*</span> <span class=\"number\">10</span>)));</span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> class(card) <span class=\"keyword\">VALUES</span>(<span class=\"built_in\">FLOOR</span>(<span class=\"number\">1</span> <span class=\"operator\">+</span> (RAND() <span class=\"operator\">*</span> <span class=\"number\">10</span>)));</span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> class(card) <span class=\"keyword\">VALUES</span>(<span class=\"built_in\">FLOOR</span>(<span class=\"number\">1</span> <span class=\"operator\">+</span> (RAND() <span class=\"operator\">*</span> <span class=\"number\">10</span>)));</span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> class(card) <span class=\"keyword\">VALUES</span>(<span class=\"built_in\">FLOOR</span>(<span class=\"number\">1</span> <span class=\"operator\">+</span> (RAND() <span class=\"operator\">*</span> <span class=\"number\">10</span>)));</span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> class(card) <span class=\"keyword\">VALUES</span>(<span class=\"built_in\">FLOOR</span>(<span class=\"number\">1</span> <span class=\"operator\">+</span> (RAND() <span class=\"operator\">*</span> <span class=\"number\">10</span>)));</span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> class(card) <span class=\"keyword\">VALUES</span>(<span class=\"built_in\">FLOOR</span>(<span class=\"number\">1</span> <span class=\"operator\">+</span> (RAND() <span class=\"operator\">*</span> <span class=\"number\">10</span>)));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> book(card) <span class=\"keyword\">VALUES</span>(<span class=\"built_in\">FLOOR</span>(<span class=\"number\">1</span> <span class=\"operator\">+</span> (RAND() <span class=\"operator\">*</span> <span class=\"number\">10</span>)));</span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> book(card) <span class=\"keyword\">VALUES</span>(<span class=\"built_in\">FLOOR</span>(<span class=\"number\">1</span> <span class=\"operator\">+</span> (RAND() <span class=\"operator\">*</span> <span class=\"number\">10</span>)));</span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> book(card) <span class=\"keyword\">VALUES</span>(<span class=\"built_in\">FLOOR</span>(<span class=\"number\">1</span> <span class=\"operator\">+</span> (RAND() <span class=\"operator\">*</span> <span class=\"number\">10</span>)));</span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> book(card) <span class=\"keyword\">VALUES</span>(<span class=\"built_in\">FLOOR</span>(<span class=\"number\">1</span> <span class=\"operator\">+</span> (RAND() <span class=\"operator\">*</span> <span class=\"number\">10</span>)));</span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> book(card) <span class=\"keyword\">VALUES</span>(<span class=\"built_in\">FLOOR</span>(<span class=\"number\">1</span> <span class=\"operator\">+</span> (RAND() <span class=\"operator\">*</span> <span class=\"number\">10</span>)));</span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> book(card) <span class=\"keyword\">VALUES</span>(<span class=\"built_in\">FLOOR</span>(<span class=\"number\">1</span> <span class=\"operator\">+</span> (RAND() <span class=\"operator\">*</span> <span class=\"number\">10</span>)));</span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> book(card) <span class=\"keyword\">VALUES</span>(<span class=\"built_in\">FLOOR</span>(<span class=\"number\">1</span> <span class=\"operator\">+</span> (RAND() <span class=\"operator\">*</span> <span class=\"number\">10</span>)));</span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> book(card) <span class=\"keyword\">VALUES</span>(<span class=\"built_in\">FLOOR</span>(<span class=\"number\">1</span> <span class=\"operator\">+</span> (RAND() <span class=\"operator\">*</span> <span class=\"number\">10</span>)));</span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> book(card) <span class=\"keyword\">VALUES</span>(<span class=\"built_in\">FLOOR</span>(<span class=\"number\">1</span> <span class=\"operator\">+</span> (RAND() <span class=\"operator\">*</span> <span class=\"number\">10</span>)));</span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> book(card) <span class=\"keyword\">VALUES</span>(<span class=\"built_in\">FLOOR</span>(<span class=\"number\">1</span> <span class=\"operator\">+</span> (RAND() <span class=\"operator\">*</span> <span class=\"number\">10</span>)));</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"优化分析-1\"><a href=\"#优化分析-1\" class=\"headerlink\" title=\"优化分析\"></a>优化分析</h3><figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"># 左连接查询</span><br><span class=\"line\">EXPLAIN <span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> <span class=\"keyword\">FROM</span> class <span class=\"keyword\">LEFT</span> <span class=\"keyword\">JOIN</span> book <span class=\"keyword\">ON</span> class.card <span class=\"operator\">=</span> book.card; </span><br><span class=\"line\"></span><br><span class=\"line\"># 结论：两表type  是 <span class=\"keyword\">ALL</span> </span><br><span class=\"line\">优化<span class=\"number\">1</span>：<span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> `class` <span class=\"keyword\">ADD</span> INDEX idx_card ( `card`); </span><br><span class=\"line\"></span><br><span class=\"line\"># 结论：左表type 是 index，右表type 是 <span class=\"keyword\">ALL</span></span><br><span class=\"line\">优化<span class=\"number\">2</span>：<span class=\"keyword\">DROP</span> INDEX idx_card <span class=\"keyword\">ON</span> class; </span><br><span class=\"line\">           <span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> `book` <span class=\"keyword\">ADD</span> INDEX idx_card ( `card`); </span><br><span class=\"line\"></span><br><span class=\"line\"># 结论：左表type 是 <span class=\"keyword\">ALL</span>，右表type 是 <span class=\"keyword\">ref</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"三表\"><a href=\"#三表\" class=\"headerlink\" title=\"三表\"></a>三表</h2><h3 id=\"SQL-2\"><a href=\"#SQL-2\" class=\"headerlink\" title=\"SQL\"></a>SQL</h3><figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> IF <span class=\"keyword\">NOT</span> <span class=\"keyword\">EXISTS</span> `phone` (</span><br><span class=\"line\">`phoneid` <span class=\"type\">INT</span>(<span class=\"number\">10</span>) UNSIGNED <span class=\"keyword\">NOT</span> <span class=\"keyword\">NULL</span> AUTO_INCREMENT,</span><br><span class=\"line\">`card` <span class=\"type\">INT</span>(<span class=\"number\">10</span>) UNSIGNED <span class=\"keyword\">NOT</span> <span class=\"keyword\">NULL</span>,</span><br><span class=\"line\"><span class=\"keyword\">PRIMARY</span> KEY (`phoneid`)</span><br><span class=\"line\">) ENGINE <span class=\"operator\">=</span> INNODB;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> phone(card) <span class=\"keyword\">VALUES</span>(<span class=\"built_in\">FLOOR</span>(<span class=\"number\">1</span> <span class=\"operator\">+</span> (RAND() <span class=\"operator\">*</span> <span class=\"number\">10</span>)));</span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> phone(card) <span class=\"keyword\">VALUES</span>(<span class=\"built_in\">FLOOR</span>(<span class=\"number\">1</span> <span class=\"operator\">+</span> (RAND() <span class=\"operator\">*</span> <span class=\"number\">10</span>)));</span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> phone(card) <span class=\"keyword\">VALUES</span>(<span class=\"built_in\">FLOOR</span>(<span class=\"number\">1</span> <span class=\"operator\">+</span> (RAND() <span class=\"operator\">*</span> <span class=\"number\">10</span>)));</span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> phone(card) <span class=\"keyword\">VALUES</span>(<span class=\"built_in\">FLOOR</span>(<span class=\"number\">1</span> <span class=\"operator\">+</span> (RAND() <span class=\"operator\">*</span> <span class=\"number\">10</span>)));</span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> phone(card) <span class=\"keyword\">VALUES</span>(<span class=\"built_in\">FLOOR</span>(<span class=\"number\">1</span> <span class=\"operator\">+</span> (RAND() <span class=\"operator\">*</span> <span class=\"number\">10</span>)));</span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> phone(card) <span class=\"keyword\">VALUES</span>(<span class=\"built_in\">FLOOR</span>(<span class=\"number\">1</span> <span class=\"operator\">+</span> (RAND() <span class=\"operator\">*</span> <span class=\"number\">10</span>)));</span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> phone(card) <span class=\"keyword\">VALUES</span>(<span class=\"built_in\">FLOOR</span>(<span class=\"number\">1</span> <span class=\"operator\">+</span> (RAND() <span class=\"operator\">*</span> <span class=\"number\">10</span>)));</span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> phone(card) <span class=\"keyword\">VALUES</span>(<span class=\"built_in\">FLOOR</span>(<span class=\"number\">1</span> <span class=\"operator\">+</span> (RAND() <span class=\"operator\">*</span> <span class=\"number\">10</span>)));</span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> phone(card) <span class=\"keyword\">VALUES</span>(<span class=\"built_in\">FLOOR</span>(<span class=\"number\">1</span> <span class=\"operator\">+</span> (RAND() <span class=\"operator\">*</span> <span class=\"number\">10</span>)));</span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> phone(card) <span class=\"keyword\">VALUES</span>(<span class=\"built_in\">FLOOR</span>(<span class=\"number\">1</span> <span class=\"operator\">+</span> (RAND() <span class=\"operator\">*</span> <span class=\"number\">10</span>)));</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"优化分析-2\"><a href=\"#优化分析-2\" class=\"headerlink\" title=\"优化分析\"></a>优化分析</h3><figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"># 左连接查询</span><br><span class=\"line\">EXPLAIN <span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> <span class=\"keyword\">FROM</span> class <span class=\"keyword\">LEFT</span> <span class=\"keyword\">JOIN</span> book <span class=\"keyword\">ON</span> class.card<span class=\"operator\">=</span>book.card <span class=\"keyword\">LEFT</span> <span class=\"keyword\">JOIN</span> phone <span class=\"keyword\">ON</span> book.card <span class=\"operator\">=</span> phone.card; </span><br><span class=\"line\"></span><br><span class=\"line\"># 结论：三表type  是 <span class=\"keyword\">ALL</span> </span><br><span class=\"line\">优化<span class=\"number\">1</span>：<span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> `phone` <span class=\"keyword\">ADD</span> INDEX idx_card ( `card`); </span><br><span class=\"line\">           <span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> `book` <span class=\"keyword\">ADD</span> INDEX idx_card ( `card`); </span><br><span class=\"line\"></span><br><span class=\"line\"># 结论：左表type 是 <span class=\"keyword\">ALL</span>，两个右表type 是 <span class=\"keyword\">ref</span></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","categories":["MySQL"],"tags":["后端","数据库","MySQL"]},{"title":"MySQL：主从复制","url":"/MySQL/MySQL%EF%BC%9A%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6/","content":"<h2 id=\"主从复制好处\"><a href=\"#主从复制好处\" class=\"headerlink\" title=\"主从复制好处\"></a>主从复制好处</h2><ul>\n<li>水平扩展，读写分离 - 在这种架构下，所有的增&#x2F;删&#x2F;改操作在Master上执行，所有的读操作在Slaves上执行，这样可以把并行压力分担到多个从库</li>\n<li>数据安全 - 从库可以随时停下来备份数据，而不必考虑服务不可用的问题。</li>\n<li>数据分析 - 在从库上分析数据，不会影响主库的性能</li>\n<li>远程数据分配 - 可以通过从库创建数据提供给远端的网站使用，而不必暴露主库</li>\n</ul>\n<span id=\"more\"></span>\n\n<h2 id=\"主从复制形式\"><a href=\"#主从复制形式\" class=\"headerlink\" title=\"主从复制形式\"></a>主从复制形式</h2><img src=\"/MySQL/MySQL%EF%BC%9A%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6/%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6%E5%BD%A2%E5%BC%8F.png\" class=\"\" title=\"主从复制形式\">\n\n<h2 id=\"主从复制原理\"><a href=\"#主从复制原理\" class=\"headerlink\" title=\"主从复制原理\"></a>主从复制原理</h2><img src=\"/MySQL/MySQL%EF%BC%9A%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6/%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6%E5%8E%9F%E7%90%86.jpg\" class=\"\" title=\"主从复制原理\">\n\n<h3 id=\"主从复制三个线程\"><a href=\"#主从复制三个线程\" class=\"headerlink\" title=\"主从复制三个线程\"></a>主从复制三个线程</h3><ul>\n<li>Binlog Dump线程：此线程运行在主库，从库运行START SLAVE启动复制后，会在主库上生成一个BinlogDump线程，该线程的主要作用就是读取主库Binlog事件，然后发送到从库（从库的I&#x2F;O线程）</li>\n<li>I&#x2F;O线程：此线程运行在从库，作用是向主数据库要数据，并将主库发送过来的变更事件写入到从库的中继日志中</li>\n<li>SQL线程：此线程运行在从库，主要作用是读取中继日志中的变更事件并更新从库</li>\n</ul>\n<h3 id=\"主从复制流程\"><a href=\"#主从复制流程\" class=\"headerlink\" title=\"主从复制流程\"></a>主从复制流程</h3><ul>\n<li>主库验证从库发起的连接；</li>\n<li>主库为从库开启一个线程；</li>\n<li>从库将主库日志的偏移位告诉主库；</li>\n<li>主库检查该值是否小于当前二进制日志偏移位。</li>\n<li>如果小于，则通知从库可以取数据。</li>\n<li>从库持续从主库取数据，直至取完，这时，从库线程进入睡眠，主库线程同时进入睡眠。</li>\n<li>当主库有更新时，主库线程被激活，并将二进制日志推送给从库，并通知从库线程进入工作状态。</li>\n<li>从库SQL线程执行二进制日志，随后进入睡眠状态。</li>\n</ul>\n<h2 id=\"主从复制配置-一主一从\"><a href=\"#主从复制配置-一主一从\" class=\"headerlink\" title=\"主从复制配置(一主一从)\"></a>主从复制配置(一主一从)</h2><ol>\n<li><p>MySQL版本一致</p></li>\n<li><p>主从服务器之间能ping通</p></li>\n<li><p>关闭虚拟机防火墙</p></li>\n<li><p>主机修改my.cnf配置文件</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\">[mysqld]</span><br><span class=\"line\"># [必须] 服务器唯一ID</span><br><span class=\"line\">server<span class=\"operator\">-</span>id <span class=\"operator\">=</span> <span class=\"number\">1</span></span><br><span class=\"line\"># [必须] 启用二进制日志</span><br><span class=\"line\">log<span class=\"operator\">-</span>bin<span class=\"operator\">=</span>MySQL路径<span class=\"operator\">/</span>data<span class=\"operator\">/</span>mysqlbin</span><br><span class=\"line\"># [必须] 主机，读写都可以</span><br><span class=\"line\">read<span class=\"operator\">-</span><span class=\"keyword\">only</span><span class=\"operator\">=</span><span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\"># [可选] 启用错误日志</span><br><span class=\"line\">log<span class=\"operator\">-</span>err<span class=\"operator\">=</span>MySQL路径<span class=\"operator\">/</span>data<span class=\"operator\">/</span>mysqlerr</span><br><span class=\"line\"># [可选] 根目录</span><br><span class=\"line\">basedir<span class=\"operator\">=</span>&quot;MySQL路径/&quot;</span><br><span class=\"line\"># [可选] 临时目录</span><br><span class=\"line\">tmpdir<span class=\"operator\">=</span>&quot;MySQL路径/&quot;</span><br><span class=\"line\"># [可选] 数据目录</span><br><span class=\"line\">datadir<span class=\"operator\">=</span>&quot;MySQL路径/Data/&quot;</span><br><span class=\"line\"># [可选] 设置不要复制的数据库</span><br><span class=\"line\">binlog<span class=\"operator\">-</span>ignore<span class=\"operator\">-</span>db<span class=\"operator\">=</span>数据库名字</span><br><span class=\"line\"># [可选] 设置需要复制的数据库</span><br><span class=\"line\">binlog<span class=\"operator\">-</span>do<span class=\"operator\">-</span>db<span class=\"operator\">=</span>数据库名字</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>从机修改my.cnf配置文件</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\">[mysqld]</span><br><span class=\"line\"># [必须] 服务器唯一ID</span><br><span class=\"line\">server<span class=\"operator\">-</span>id <span class=\"operator\">=</span> <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\"># [可选] 启用二进制日志</span><br><span class=\"line\">log<span class=\"operator\">-</span>bin<span class=\"operator\">=</span>MySQL路径<span class=\"operator\">/</span>data<span class=\"operator\">/</span>mysqlbin</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>修改配置后主从机都需要重启mysql服务</p>\n</li>\n<li><p>主机建立账户并授权slave</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"># 授权</span><br><span class=\"line\"><span class=\"keyword\">GRANT</span> REPLICATION SLAVE <span class=\"keyword\">ON</span> <span class=\"operator\">*</span>.<span class=\"operator\">*</span> <span class=\"keyword\">TO</span> <span class=\"string\">&#x27;用户名&#x27;</span>@<span class=\"string\">&#x27;从机数据库IP&#x27;</span> IDENTIFIED <span class=\"keyword\">BY</span> <span class=\"string\">&#x27;密码&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"># 刷新</span><br><span class=\"line\">FLUSH PRIVILEGES;</span><br><span class=\"line\"></span><br><span class=\"line\"># 查询master的状态（记录下File和Position的值）</span><br><span class=\"line\"><span class=\"keyword\">SHOW</span> MASTER STATUS;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>从机配置需要复制的主机</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"># 配置需要复制的主机</span><br><span class=\"line\">CHANGE MASTER <span class=\"keyword\">TO</span> MASTER_HOST<span class=\"operator\">=</span><span class=\"string\">&#x27;主机数据库IP&#x27;</span>,MASTER_USER<span class=\"operator\">=</span><span class=\"string\">&#x27;用户名&#x27;</span>,MASTER_PASSWORD<span class=\"operator\">=</span><span class=\"string\">&#x27;密码&#x27;</span>,MASTER_LOG_FILE<span class=\"operator\">=</span><span class=\"string\">&#x27;File名字&#x27;</span>,MASTER_LOG_POS<span class=\"operator\">=</span>Position数字;</span><br><span class=\"line\"></span><br><span class=\"line\"># 启动从机复制功能</span><br><span class=\"line\"><span class=\"keyword\">START</span> SLAVE;</span><br><span class=\"line\"></span><br><span class=\"line\"># 停止从机复制功能</span><br><span class=\"line\">STOP SLAVE;</span><br><span class=\"line\"></span><br><span class=\"line\"># 查看是否配置成功（Slave_IO_Running 和 Slave_SQL_Running 都为Yes）</span><br><span class=\"line\"><span class=\"keyword\">SHOW</span> SLAVE STATUS;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><ul>\n<li><a href=\"https://dev.mysql.com/doc/refman/5.5/en/replication.html\">MySQL 官网</a></li>\n<li><a href=\"https://www.cnblogs.com/clsn/p/8150036.html\">MySQL Replication 主从复制全方位解决方案</a></li>\n<li><a href=\"https://wuguiyunwei.com/index.php/2017/05/22/632.html\">MySQL 主从复制常见错误</a></li>\n</ul>\n","categories":["MySQL"],"tags":["后端","数据库","MySQL"]},{"title":"MySQL：安装","url":"/MySQL/MySQL%EF%BC%9A%E5%AE%89%E8%A3%85/","content":"<h2 id=\"安装MySQL\"><a href=\"#安装MySQL\" class=\"headerlink\" title=\"安装MySQL\"></a>安装MySQL</h2><ul>\n<li>下载MySQL服务安装包 <a href=\"https://dev.mysql.com/downloads/mysql/\">https://dev.mysql.com/downloads/mysql/</a></li>\n<li>配置环境变量Path -&gt; D:\\Java\\MySQL_8.0\\bin;</li>\n<li>创建my.ini文件和data目录到安装目录<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[mysqld]</span><br><span class=\"line\"><span class=\"comment\">#mysql服务的唯一编号</span></span><br><span class=\"line\">server-id=1</span><br><span class=\"line\"><span class=\"comment\"># 设置3306端口</span></span><br><span class=\"line\">port=3306</span><br><span class=\"line\"><span class=\"comment\"># 设置mysql的安装目录</span></span><br><span class=\"line\">basedir=D:\\Java\\MySQL_8.0</span><br><span class=\"line\"><span class=\"comment\"># 设置mysql数据库的数据的存放目录</span></span><br><span class=\"line\">datadir=D:\\Java\\MySQL_8.0\\data</span><br><span class=\"line\"><span class=\"comment\"># 允许最大连接数</span></span><br><span class=\"line\">max_connections=200</span><br><span class=\"line\"><span class=\"comment\"># 允许连接失败的次数。这是为了防止有人从该主机试图攻击数据库系统</span></span><br><span class=\"line\">max_connect_errors=10</span><br><span class=\"line\"><span class=\"comment\"># 服务端使用的字符集默认为utf8mb4</span></span><br><span class=\"line\">character-set-server=utf8mb4</span><br><span class=\"line\"><span class=\"comment\">#数据库字符集对应一些排序等规则，注意要和character-set-server对应</span></span><br><span class=\"line\">collation-server = utf8mb4_general_ci</span><br><span class=\"line\"><span class=\"comment\"># 创建新表时将使用的默认存储引擎</span></span><br><span class=\"line\">default-storage-engine=INNODB </span><br><span class=\"line\"><span class=\"comment\"># 默认使用“mysql_native_password”插件认证</span></span><br><span class=\"line\">default_authentication_plugin=mysql_native_password</span><br><span class=\"line\"></span><br><span class=\"line\">[mysql]</span><br><span class=\"line\"><span class=\"comment\"># 设置mysql客户端默认字符集</span></span><br><span class=\"line\">default-character-set=utf8mb4</span><br><span class=\"line\"></span><br><span class=\"line\">[client]</span><br><span class=\"line\"><span class=\"comment\"># 设置mysql客户端连接服务端时默认使用的端口</span></span><br><span class=\"line\">port=3306</span><br><span class=\"line\">default-character-set=utf8mb4</span><br></pre></td></tr></table></figure></li>\n</ul>\n<span id=\"more\"></span>\n\n<ul>\n<li>修改密码<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 初始化mysql</span></span><br><span class=\"line\">mysqld --initialize --console        </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 需记下登陆密码</span></span><br><span class=\"line\">如：2018-04-28T15:57:24.859249Z 5 [Note] [MY-010454] [Server] A temporary password is generated <span class=\"keyword\">for</span> root@localhost: rI5rvf5x5G,E</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 安装服务，服务名可不加，默认是mysql</span></span><br><span class=\"line\">mysqld --install [服务名称]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 启动服务</span></span><br><span class=\"line\">net start mysql</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 登陆</span></span><br><span class=\"line\">mysql -u root -p</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 修改密码</span></span><br><span class=\"line\">alter user <span class=\"string\">&quot;root&quot;</span>@<span class=\"string\">&quot;localhost&quot;</span> identified by <span class=\"string\">&quot;你的新密码&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 刷新权限</span></span><br><span class=\"line\">flush privileges;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"卸载MySQL\"><a href=\"#卸载MySQL\" class=\"headerlink\" title=\"卸载MySQL\"></a>卸载MySQL</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 停止服务</span></span><br><span class=\"line\">net stop mysql;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 删除服务</span></span><br><span class=\"line\">mysqld --remove [服务名称]    或者     sc delete [服务名称]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 删除安装目录</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 删除注册表信息</span></span><br><span class=\"line\">HKEY_LOCAL_MACHINE\\SYSTEM\\ControlSet001\\services\\eventlog\\Application\\MySQL </span><br><span class=\"line\">HKEY_LOCAL_MACHINE\\SYSTEM\\ControlSet001\\services\\MySQL</span><br><span class=\"line\">HKEY_LOCAL_MACHINE\\SYSTEM\\ControlSet002\\services\\eventlog\\Application\\MySQL</span><br><span class=\"line\">HKEY_LOCAL_MACHINE\\SYSTEM\\ControlSet002\\services\\MySQL</span><br><span class=\"line\">HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\services\\eventlog\\Application\\MySQL </span><br><span class=\"line\">HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\services\\MySQL</span><br></pre></td></tr></table></figure>","categories":["MySQL"],"tags":["后端","数据库","MySQL"]},{"title":"MySQL：引擎","url":"/MySQL/MySQL%EF%BC%9A%E5%BC%95%E6%93%8E/","content":"<style>\nth {\n    width: 10px;\n}\n</style>\n\n<table>\n<thead>\n<tr>\n<th>对比项</th>\n<th>MyISAM</th>\n<th>InnoDB</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>主外键</td>\n<td>不支持</td>\n<td>支持</td>\n</tr>\n<tr>\n<td>事务</td>\n<td>不支持</td>\n<td>支持</td>\n</tr>\n<tr>\n<td>行表锁</td>\n<td>表锁，即使操作一条记录也会锁住整个表，不适合高并发的操作</td>\n<td>行锁，操作时只锁某一行，不对其他行有影响，适合高并发的操作</td>\n</tr>\n<tr>\n<td>缓存</td>\n<td>只缓存索引，不缓存真实数据</td>\n<td>不仅缓存索引还要缓存真实数据，对内存要求较高，而且内存大小对性能有决定性的影响</td>\n</tr>\n<tr>\n<td>表空间</td>\n<td>小</td>\n<td>大</td>\n</tr>\n<tr>\n<td>关注点</td>\n<td>性能</td>\n<td>事务</td>\n</tr>\n<tr>\n<td>默认安装</td>\n<td>Y</td>\n<td>Y</td>\n</tr>\n</tbody></table>\n","categories":["MySQL"],"tags":["后端","数据库","MySQL"]},{"title":"MySQL：索引","url":"/MySQL/MySQL%EF%BC%9A%E7%B4%A2%E5%BC%95/","content":"<h2 id=\"什么是索引\"><a href=\"#什么是索引\" class=\"headerlink\" title=\"什么是索引\"></a>什么是索引</h2><ul>\n<li>简单理解为<code>排好序的快速查找数据结构</code></li>\n<li>结论：数据本身之外，数据库还维护着一个满足特定查找算法的数据结构，这些数据结构以某种方式指向数据，这样就可以在这些数据结构的基础上实现高级查找算法，这种数据结构就是索引。</li>\n</ul>\n<span id=\"more\"></span>\n\n<h2 id=\"索引优势\"><a href=\"#索引优势\" class=\"headerlink\" title=\"索引优势\"></a>索引优势</h2><ul>\n<li>可以快速检索，减少I&#x2F;O次数，加快检索速度</li>\n<li>根据索引分组和排序，可以加快分组和排序</li>\n</ul>\n<h2 id=\"索引劣势\"><a href=\"#索引劣势\" class=\"headerlink\" title=\"索引劣势\"></a>索引劣势</h2><ul>\n<li>索引本身也是表，因此会占用存储空间，一般来说，索引表占用的空间的数据表的1.5倍</li>\n<li>索引表的维护和创建需要时间成本，这个成本随着数据量增大而增大</li>\n<li>构建索引会降低数据表的修改操作（删除，添加，修改）的效率，因为在修改数据表的同时还需要修改索引表</li>\n</ul>\n<h2 id=\"索引分类\"><a href=\"#索引分类\" class=\"headerlink\" title=\"索引分类\"></a>索引分类</h2><p>常见的索引类型有：<code>主键索引</code>、<code>唯一索引</code>、<code>普通索引</code>、<code>全文索引</code>、<code>组合索引</code></p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"># 主键索引：即主索引，根据主键pk_clolum（length）建立索引，不允许重复，不允许空值</span><br><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> <span class=\"string\">&#x27;table_name&#x27;</span> <span class=\"keyword\">ADD</span> <span class=\"keyword\">PRIMARY</span> KEY(<span class=\"string\">&#x27;id&#x27;</span>)；</span><br><span class=\"line\"></span><br><span class=\"line\"># 唯一索引：用来建立索引的列的值必须是唯一的，允许空值</span><br><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> <span class=\"string\">&#x27;table_name&#x27;</span> <span class=\"keyword\">ADD</span> <span class=\"keyword\">UNIQUE</span>(<span class=\"string\">&#x27;email&#x27;</span>)；</span><br><span class=\"line\"></span><br><span class=\"line\"># 普通索引：用表中的普通列构建的索引，没有任何限制</span><br><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> <span class=\"string\">&#x27;table_name&#x27;</span> <span class=\"keyword\">ADD</span> INDEX index_name(<span class=\"string\">&#x27;description&#x27;</span>)；</span><br><span class=\"line\"></span><br><span class=\"line\"># 全文索引：用大文本对象的列构建的索引</span><br><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> <span class=\"string\">&#x27;table_name&#x27;</span> <span class=\"keyword\">ADD</span> FULLTEXT(<span class=\"string\">&#x27;content&#x27;</span>)；</span><br><span class=\"line\"></span><br><span class=\"line\"># 组合索引：用多个列组合构建的索引，这多个列中的值不允许有空值，遵循“最左前缀”原则：相当于建立了col1,col1col2,col1col2col3三个索引</span><br><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> <span class=\"string\">&#x27;table_name&#x27;</span> <span class=\"keyword\">ADD</span> INDEX index_name(<span class=\"string\">&#x27;col1&#x27;</span>,<span class=\"string\">&#x27;col2&#x27;</span>,<span class=\"string\">&#x27;col3&#x27;</span>)；</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"索引结构\"><a href=\"#索引结构\" class=\"headerlink\" title=\"索引结构\"></a>索引结构</h2><ul>\n<li>BTree索引：</li>\n<li>Hash索引：</li>\n<li>full-text索引：</li>\n<li>R-Tree索引：</li>\n</ul>\n<h2 id=\"索引失效\"><a href=\"#索引失效\" class=\"headerlink\" title=\"索引失效\"></a>索引失效</h2><ol>\n<li>尽量使用覆盖索引(只访问索引的查询(索引列和查询列一致))，减少select *</li>\n<li>不符合<code>最左前缀原则</code>索引失效</li>\n<li>字符串不加<code>单引号</code>索引失效</li>\n<li>索引列上做任何操作（计算、函数、类型转换）索引失效</li>\n<li>使用<code>!=</code> 或者 <code>&lt;&gt;</code>索引失效</li>\n<li>使用<code>OR</code>索引失效</li>\n<li>使用<code>IS NULL</code>、<code>IS NOT NULL</code>索引失效</li>\n<li>使用<code>LIKE</code>以通配符开头<code>&#39;%abc&#39;</code>索引失效，以通配符结尾<code>&#39;abc%&#39;</code>索引不会失效</li>\n</ol>\n<h2 id=\"哪些情况需要创建索引\"><a href=\"#哪些情况需要创建索引\" class=\"headerlink\" title=\"哪些情况需要创建索引\"></a>哪些情况需要创建索引</h2><ul>\n<li>主键自动建立唯一索引</li>\n<li>查询中与其他表关联的字段，外键关系建立索引</li>\n<li>频繁作为查询条件的字段应该创建索引</li>\n<li>查询中排序的字段，排序字段若通过索引去访问将大大提高排序速度</li>\n<li>查询中统计或者分组字段</li>\n<li>高并发条件下倾向组合索引</li>\n</ul>\n<h2 id=\"哪些情况不需要创建索引\"><a href=\"#哪些情况不需要创建索引\" class=\"headerlink\" title=\"哪些情况不需要创建索引\"></a>哪些情况不需要创建索引</h2><ul>\n<li>表记录太少</li>\n<li>数据列包含许多重复的内容</li>\n<li>频繁更新的字段不适合创建索引，因为每次更新不单单是更新了记录还会更新索引，加重了IO负担</li>\n<li>Where条件里用不到的字段不创建索引</li>\n</ul>\n","categories":["MySQL"],"tags":["后端","数据库","MySQL"]},{"title":"MySQL：锁机制","url":"/MySQL/MySQL%EF%BC%9A%E9%94%81%E6%9C%BA%E5%88%B6/","content":"<h2 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h2><ul>\n<li>锁是计算机协调多个进程或线程并发访问某一资源的机制</li>\n<li>在数据库中，除传统的计算资源（如CPU、RAM、I&#x2F;O等）的争用以外，数据也是一种供许多用户共享的资源。如何保证数据并发访问的一致性、有效性是所有数据库必须解决的一个问题，锁冲突也是影响数据库并发访问性能的一个重要因素。从这个角度来说，锁对数据库而言显得尤其重要，也更加复杂</li>\n</ul>\n<span id=\"more\"></span>\n\n<h2 id=\"锁的分类\"><a href=\"#锁的分类\" class=\"headerlink\" title=\"锁的分类\"></a>锁的分类</h2><h3 id=\"数据操作的类型分类\"><a href=\"#数据操作的类型分类\" class=\"headerlink\" title=\"数据操作的类型分类\"></a>数据操作的类型分类</h3><ul>\n<li>读锁(共享锁)：针对同一份数据，多个读操作可以同时进行而不会互相影响</li>\n<li>写锁(排它锁)：当前写操作没有完成前，它会阻断其他写锁和读锁</li>\n</ul>\n<h3 id=\"数据操作的粒度分类\"><a href=\"#数据操作的粒度分类\" class=\"headerlink\" title=\"数据操作的粒度分类\"></a>数据操作的粒度分类</h3><ul>\n<li>表锁</li>\n<li>行锁</li>\n</ul>\n<h2 id=\"表锁-偏读\"><a href=\"#表锁-偏读\" class=\"headerlink\" title=\"表锁(偏读)\"></a>表锁(偏读)</h2><ul>\n<li>偏向MyISAM存储引擎，开销小，加锁快；无死锁；锁定粒度大，发生锁冲突的概率最高,并发度最低</li>\n</ul>\n<h3 id=\"加锁-释放锁\"><a href=\"#加锁-释放锁\" class=\"headerlink\" title=\"加锁&#x2F;释放锁\"></a>加锁&#x2F;释放锁</h3><figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"># 查看表上加过的锁</span><br><span class=\"line\"><span class=\"keyword\">SHOW</span> <span class=\"keyword\">OPEN</span> TABLES;</span><br><span class=\"line\"></span><br><span class=\"line\"># 加锁 </span><br><span class=\"line\">LOCK <span class=\"keyword\">TABLE</span> 表名 READ(WRITE);</span><br><span class=\"line\"></span><br><span class=\"line\"># 释放锁</span><br><span class=\"line\">UNLOCK TABLES;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"表锁分析\"><a href=\"#表锁分析\" class=\"headerlink\" title=\"表锁分析\"></a>表锁分析</h3><figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"># 分析表锁定</span><br><span class=\"line\"><span class=\"keyword\">SHOW</span> STATUS <span class=\"keyword\">LIKE</span> <span class=\"string\">&#x27;table%&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"># Table_locks_immediate：表级锁定的次数，表示可以立即获取锁的查询次数，每立即获取锁值<span class=\"operator\">+</span><span class=\"number\">1</span></span><br><span class=\"line\"># Table_locks_waited：表级锁定争用而发生等待的次数(不能立即获取锁的次数，每等待一次锁值<span class=\"operator\">+</span><span class=\"number\">1</span>)，此值高则说明存在着较严重的表级锁争用情况</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"案例分析\"><a href=\"#案例分析\" class=\"headerlink\" title=\"案例分析\"></a>案例分析</h3><h4 id=\"SQL\"><a href=\"#SQL\" class=\"headerlink\" title=\"SQL\"></a>SQL</h4><figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> IF <span class=\"keyword\">NOT</span> <span class=\"keyword\">EXISTS</span> `myisam_lock` ( </span><br><span class=\"line\">\t`id` <span class=\"type\">INT</span>(<span class=\"number\">10</span>) <span class=\"keyword\">NOT</span> <span class=\"keyword\">NULL</span> <span class=\"keyword\">PRIMARY</span> KEY AUTO_INCREMENT, </span><br><span class=\"line\">\t`name` <span class=\"type\">VARBINARY</span>(<span class=\"number\">255</span>) <span class=\"keyword\">NOT</span> <span class=\"keyword\">NULL</span></span><br><span class=\"line\">)ENGINE <span class=\"operator\">=</span> MyISAM; </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> `myisam_lock`(`name`) <span class=\"keyword\">VALUES</span> (<span class=\"string\">&#x27;a&#x27;</span>), (<span class=\"string\">&#x27;b&#x27;</span>), (<span class=\"string\">&#x27;c&#x27;</span>);</span><br></pre></td></tr></table></figure>\n<h4 id=\"读锁\"><a href=\"#读锁\" class=\"headerlink\" title=\"读锁\"></a>读锁</h4><img src=\"/MySQL/MySQL%EF%BC%9A%E9%94%81%E6%9C%BA%E5%88%B6/%E8%A1%A8%E9%94%81_%E8%AF%BB%E9%94%81.png\" class=\"\" title=\"读锁\">\n\n<h4 id=\"写锁\"><a href=\"#写锁\" class=\"headerlink\" title=\"写锁\"></a>写锁</h4><img src=\"/MySQL/MySQL%EF%BC%9A%E9%94%81%E6%9C%BA%E5%88%B6/%E8%A1%A8%E9%94%81_%E5%86%99%E9%94%81.png\" class=\"\" title=\"写锁\">\n\n<h4 id=\"结论\"><a href=\"#结论\" class=\"headerlink\" title=\"结论\"></a>结论</h4><ul>\n<li>对MyISAM表的读操作（加读锁），不会阻塞其他进程对同一表的读请求，但会阻塞对同一表的写请求。只有当读锁释放后，才会执行其它进程的写操作</li>\n<li>对MyISAM表的写操作（加写锁），会阻塞其他进程对同一表的读和写操作，只有当写锁释放后，才会执行其它进程的读写操作</li>\n</ul>\n<p><font color=red>简而言之，就是读锁会阻塞写，但是不会堵塞读。而写锁则会把读和写都堵塞</font></p>\n<h2 id=\"行锁-偏写\"><a href=\"#行锁-偏写\" class=\"headerlink\" title=\"行锁(偏写)\"></a>行锁(偏写)</h2><ul>\n<li>偏向InnoDB存储引擎，开销大，加锁慢；会出现死锁；锁定粒度最小，发生锁冲突的概率最低,并发度也最高</li>\n<li>InnoDB与MyISAM的最大不同有两点：一是支持事务（TRANSACTION）；二是采用了行级锁</li>\n</ul>\n<h3 id=\"行锁分析\"><a href=\"#行锁分析\" class=\"headerlink\" title=\"行锁分析\"></a>行锁分析</h3><figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"># 分析行锁定</span><br><span class=\"line\"><span class=\"keyword\">SHOW</span> STATUS <span class=\"keyword\">LIKE</span> <span class=\"string\">&#x27;innodb_row_lock%&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"># Innodb_row_lock_current_waits：当前正在等待锁定的数量 </span><br><span class=\"line\"># Innodb_row_lock_time：从系统启动到现在锁定总时间长度</span><br><span class=\"line\"># Innodb_row_lock_time_avg：每次等待所花平均时间</span><br><span class=\"line\"># Innodb_row_lock_time_max：从系统启动到现在等待最常的一次所花的时间</span><br><span class=\"line\"># Innodb_row_lock_waits：系统启动后到现在总共等待的次数</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"案例分析-1\"><a href=\"#案例分析-1\" class=\"headerlink\" title=\"案例分析\"></a>案例分析</h3><h4 id=\"SQL-1\"><a href=\"#SQL-1\" class=\"headerlink\" title=\"SQL\"></a>SQL</h4><figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> innodb_lock ( </span><br><span class=\"line\">\ta <span class=\"type\">INT</span> (<span class=\"number\">11</span>), </span><br><span class=\"line\">\tb <span class=\"type\">VARCHAR</span> (<span class=\"number\">16</span>) </span><br><span class=\"line\">) ENGINE <span class=\"operator\">=</span> INNODB;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> innodb_lock <span class=\"keyword\">VALUES</span> (<span class=\"number\">1</span>, <span class=\"string\">&#x27;1000&#x27;</span>),(<span class=\"number\">2</span>, <span class=\"string\">&#x27;2000&#x27;</span>),(<span class=\"number\">3</span>, <span class=\"string\">&#x27;3000&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> INDEX idx_a <span class=\"keyword\">ON</span> innodb_lock (a);</span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> INDEX idx_b <span class=\"keyword\">ON</span> innodb_lock (b);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"行锁\"><a href=\"#行锁\" class=\"headerlink\" title=\"行锁\"></a>行锁</h4><img src=\"/MySQL/MySQL%EF%BC%9A%E9%94%81%E6%9C%BA%E5%88%B6/%E8%A1%8C%E9%94%81.png\" class=\"\" title=\"行锁\">\n\n<h4 id=\"结论-1\"><a href=\"#结论-1\" class=\"headerlink\" title=\"结论\"></a>结论</h4><ul>\n<li>Innodb存储引擎实现了行级锁定，虽然在锁定机制的实现方面所带来的性能损耗可能比表级锁定会要更高一些，但是在整体并发处理能力方面要远远优于MyISAM的表级锁定的</li>\n<li>使用不当的时候，可能会让Innodb的整体性能表现不仅不能比MyISAM高，甚至可能会更差</li>\n</ul>\n<h3 id=\"问题分析\"><a href=\"#问题分析\" class=\"headerlink\" title=\"问题分析\"></a>问题分析</h3><h4 id=\"索引失效\"><a href=\"#索引失效\" class=\"headerlink\" title=\"索引失效\"></a>索引失效</h4><img src=\"/MySQL/MySQL%EF%BC%9A%E9%94%81%E6%9C%BA%E5%88%B6/%E8%A1%8C%E9%94%81_%E7%B4%A2%E5%BC%95%E5%A4%B1%E6%95%88.png\" class=\"\" title=\"行锁_索引失效\">\n\n<h4 id=\"间隙锁\"><a href=\"#间隙锁\" class=\"headerlink\" title=\"间隙锁\"></a>间隙锁</h4><img src=\"/MySQL/MySQL%EF%BC%9A%E9%94%81%E6%9C%BA%E5%88%B6/%E8%A1%8C%E9%94%81_%E9%97%B4%E9%9A%99%E9%94%81.png\" class=\"\" title=\"行锁_间隙锁\">\n\n\n\n","categories":["MySQL"],"tags":["后端","数据库","MySQL"]},{"title":"Nginx","url":"/Nginx/Nginx/","content":"<h2 id=\"基本命令\"><a href=\"#基本命令\" class=\"headerlink\" title=\"基本命令\"></a>基本命令</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 启动</span></span><br><span class=\"line\">nginx       </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 快速停止     </span></span><br><span class=\"line\">nginx -s stop   </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 优雅关闭，在退出前完成已经接受的连接请求 </span></span><br><span class=\"line\">nginx -s quit    </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 重新加载配置</span></span><br><span class=\"line\">nginx -s reload   </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 测试配置文件              </span></span><br><span class=\"line\">nginx -t            </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 指定配置文件            </span></span><br><span class=\"line\">nginx -c /path/to/nginx.conf    </span><br></pre></td></tr></table></figure>\n\n<span id=\"more\"></span>\n\n<h2 id=\"运行原理\"><a href=\"#运行原理\" class=\"headerlink\" title=\"运行原理\"></a>运行原理</h2><img src=\"/Nginx/Nginx/%E5%9F%BA%E6%9C%AC%E8%BF%90%E8%A1%8C%E5%8E%9F%E7%90%86.png\" class=\"\" title=\"Nginx 基本运行原理\">\n\n<h2 id=\"配置文件\"><a href=\"#配置文件\" class=\"headerlink\" title=\"配置文件\"></a>配置文件</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">worker_processes  1;                             <span class=\"comment\"># 定义工作进程数量，默认为1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 定义事件模型配置块，控制 NGINX 处理连接的方式</span></span><br><span class=\"line\">events &#123;</span><br><span class=\"line\">    worker_connections  1024;                    <span class=\"comment\"># 设置每个工作进程的最大并发连接数</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 定义 HTTP 服务器配置块</span></span><br><span class=\"line\">http &#123;</span><br><span class=\"line\">    include       mime.types;                    <span class=\"comment\"># 引入 MIME 类型定义文件，用于设置响应内容的 Content-Type</span></span><br><span class=\"line\">    default_type  application/octet-stream;      <span class=\"comment\"># 设置默认的 MIME 类型，当无法识别文件类型时使用</span></span><br><span class=\"line\"></span><br><span class=\"line\">    sendfile        on;                          <span class=\"comment\"># 启用 sendfile 机制，直接从磁盘发送文件到网络，减少 CPU 开销，优化静态文件传输</span></span><br><span class=\"line\"></span><br><span class=\"line\">    keepalive_timeout  65;                       <span class=\"comment\"># 设置客户端保持连接的超时时间</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 定义虚拟主机 vhost</span></span><br><span class=\"line\">    server &#123;</span><br><span class=\"line\">        listen       80;                         <span class=\"comment\"># 设置监听的端口</span></span><br><span class=\"line\">        server_name  localhost;                  <span class=\"comment\"># 设置监听的域名或主机名</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 定义请求路径的处理规则</span></span><br><span class=\"line\">        location / &#123;                             <span class=\"comment\"># 匹配路径</span></span><br><span class=\"line\">            root   html;                         <span class=\"comment\"># 页面根目录</span></span><br><span class=\"line\">            index  index.html index.htm;         <span class=\"comment\"># 默认页名称</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        error_page   500 502 503 504  /50x.html; <span class=\"comment\"># 定义错误页面的映射</span></span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\"># 定义错误页面文件的处理规则</span></span><br><span class=\"line\">        location = /50x.html &#123;</span><br><span class=\"line\">            root   html;                         <span class=\"comment\"># 错误页面根目录</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"内置变量\"><a href=\"#内置变量\" class=\"headerlink\" title=\"内置变量\"></a>内置变量</h2><ul>\n<li><p><strong>客户端请求相关变量：</strong></p>\n<ul>\n<li><code>$host</code> 客户端请求的 Host 头值（若无则取服务器名称或 IP）。</li>\n<li><code>$remote_addr</code> 客户端的 IP 地址。</li>\n<li><code>$remote_port</code> 客户端连接的端口号。</li>\n<li><code>$request</code> 完整的请求行（如 GET &#x2F;index.html HTTP&#x2F;1.1）。</li>\n<li><code>$request_method</code> 请求方法（如 GET、POST）。</li>\n<li><code>$request_uri</code> 原始请求 URI，包括参数（如 &#x2F;index.html?a&#x3D;1）。</li>\n<li><code>$uri</code> 当前请求的 URI，不包含参数（如 &#x2F;index.html）。</li>\n<li><code>$args</code> 请求的查询字符串参数（如 a&#x3D;1&amp;b&#x3D;2）。</li>\n<li><code>$arg_xxx</code> 特定查询参数的值（如 $arg_a 为 1）。</li>\n<li><code>$http_xxx</code> 客户端请求的 HTTP 头字段（xxx 为头名小写，如 $http_user_agent 表示 User-Agent）。</li>\n<li><code>$scheme</code> 请求使用的协议（如 http 或 https）。</li>\n</ul>\n</li>\n<li><p><strong>服务器相关变量：</strong></p>\n<ul>\n<li><code>$server_addr</code> 服务器的 IP 地址（需启用 set_real_ip_from 或动态解析）。</li>\n<li><code>$server_port</code> 服务器监听的端口。</li>\n<li><code>$server_name</code> 当前匹配的 server_name。</li>\n<li><code>$server_protocol</code> 请求使用的协议版本（如 HTTP&#x2F;1.1）。</li>\n</ul>\n</li>\n<li><p><strong>连接和请求处理相关变量：</strong></p>\n<ul>\n<li><code>$connection</code> 当前连接的唯一 ID。</li>\n<li><code>$connection_requests</code> 当前连接处理的请求总数。</li>\n<li><code>$request_time</code> 处理请求的总时间（以秒为单位，精确到毫秒）。</li>\n<li><code>$upstream_response_time</code> 从上游服务器接收响应的时间。</li>\n<li><code>$upstream_addr</code> 上游服务器的地址（IP:端口）。</li>\n<li><code>$upstream_status</code> 上游服务器的响应状态码。</li>\n<li><code>$bytes_sent</code> 发送给客户端的字节数。</li>\n<li><code>$body_bytes_sent</code> 发送给客户端的响应体字节数（不包括头）。</li>\n</ul>\n</li>\n<li><p><strong>文件和路径相关变量：</strong></p>\n<ul>\n<li><code>$document_root</code> 当前请求的 root 指令值。</li>\n<li><code>$document_uri</code> 当前请求的 URI，经过内部重定向后（如 alias 或 rewrite 后的值）。</li>\n<li><code>$request_filename</code> 当前请求的文件路径（结合 root 或 alias 解析）。</li>\n<li><code>$fastcgi_script_name</code> FastCGI 请求的文件名。</li>\n</ul>\n</li>\n<li><p><strong>状态和条件变量：</strong></p>\n<ul>\n<li><code>$status</code> 响应状态码（如 200、404）。</li>\n<li><code>$sent_http_xxx</code> 发送给客户端的 HTTP 头字段（如 $sent_http_content_type）。</li>\n<li><code>$is_args</code> 如果请求有查询字符串，则为 ?，否则为空。</li>\n</ul>\n</li>\n<li><p><strong>其他高级变量：</strong></p>\n<ul>\n<li><code>$pid</code> 当前工作进程的 ID。</li>\n<li><code>$msec</code> 当前时间（以 Unix 时间戳+毫秒格式，如 1623456789.123）。</li>\n<li><code>$nginx_version</code> NGINX 版本号。</li>\n<li><code>$time_local</code> 本地时间（格式如 [12&#x2F;Oct&#x2F;2023:12:00:00 +0800]）。</li>\n<li><code>$cookie_xxx</code> 特定 cookie 值（如 $cookie_sessionid）。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"基本使用\"><a href=\"#基本使用\" class=\"headerlink\" title=\"基本使用\"></a>基本使用</h2><h3 id=\"server-虚拟主机\"><a href=\"#server-虚拟主机\" class=\"headerlink\" title=\"server 虚拟主机\"></a>server 虚拟主机</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 定义多个虚拟主机</span></span><br><span class=\"line\">http &#123;</span><br><span class=\"line\">    server &#123;</span><br><span class=\"line\">        listen       80;</span><br><span class=\"line\">        server_name  example.com;</span><br><span class=\"line\"></span><br><span class=\"line\">        location / &#123;</span><br><span class=\"line\">            root   html;                        </span><br><span class=\"line\">            index  index.html index.htm;       </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    server &#123;</span><br><span class=\"line\">        listen       80;</span><br><span class=\"line\">        server_name  test.com;</span><br><span class=\"line\"></span><br><span class=\"line\">        location / &#123;</span><br><span class=\"line\">            root   html;                        </span><br><span class=\"line\">            index  index.html index.htm;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"server-name-匹配规则\"><a href=\"#server-name-匹配规则\" class=\"headerlink\" title=\"server_name 匹配规则\"></a>server_name 匹配规则</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 多域名配置</span></span><br><span class=\"line\">server_name  www.example.com www.test.com;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 通配符配置</span></span><br><span class=\"line\">server_name  *.example.com;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 正则配置</span></span><br><span class=\"line\">server_name  ~^[0-9]+\\.example\\.com$;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"location-匹配规则\"><a href=\"#location-匹配规则\" class=\"headerlink\" title=\"location 匹配规则\"></a>location 匹配规则</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># = 精确匹配</span></span><br><span class=\"line\">location = /index.html           <span class=\"comment\"># 只匹配 /index.html，不匹配 /index.html?a=1 或 /index.html/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#  前缀匹配 </span></span><br><span class=\"line\">location /api                    <span class=\"comment\"># 匹配 /api、/api/users、/api/users/list</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ~ 和 ~* 正则匹配（~: 区分大小写 ~*: 不区分大小写）</span></span><br><span class=\"line\">location ~ ^/user/[0-9]+$        <span class=\"comment\"># 区分大小写，匹配 /user/123，不匹配 /USER/123 或 /user/abc</span></span><br><span class=\"line\">location ~* \\.(jpg|png|gif)$     <span class=\"comment\"># 不区分大小写，匹配 /image.jpg、/image.PNG</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ^~ 前缀优先匹配</span></span><br><span class=\"line\">location ^~ /images              <span class=\"comment\"># 匹配 /images、/images/photo.jpg</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># / 通用匹配</span></span><br><span class=\"line\">location /                       <span class=\"comment\"># 匹配所有请求，如 /、/about、/api</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li><strong>匹配优先级：</strong><ul>\n<li><strong>精确匹配 (&#x3D;):</strong> 最高优先级。</li>\n<li><strong>前缀优先匹配 (^~):</strong> 次高优先级，阻止正则匹配。</li>\n<li><strong>前缀匹配 (无修饰符):</strong> 按最长匹配原则选择。</li>\n<li><strong>正则匹配 (~ 和 ~*):</strong> 按配置文件中定义的顺序依次尝试。</li>\n<li><strong>通用匹配 (&#x2F;):</strong> 兜底，优先级最低。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"rewrite-重写URL\"><a href=\"#rewrite-重写URL\" class=\"headerlink\" title=\"rewrite 重写URL\"></a>rewrite 重写URL</h3><ul>\n<li><p><strong>rewrite语法：</strong> <code>rewrite regex replacement [flag];</code></p>\n<ul>\n<li><code>regex</code> 正则表达式，匹配请求的 URI。</li>\n<li><code>replacement</code> 重写后的目标 URI。</li>\n<li><code>flag（可选）</code> 控制重写行为，常见标志包括：<ul>\n<li><code>last</code> 完成重写后停止处理当前 location，重新启动请求匹配。</li>\n<li><code>break</code> 完成重写后停止处理，留在当前 location。</li>\n<li><code>redirect</code> 返回 302 临时重定向（客户端感知）。</li>\n<li><code>permanent</code> 返回 301 永久重定向（客户端感知）。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p><strong>简单路径重写：</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 匹配 /old/abc 重写为 /new/abc，并重新匹配 location</span></span><br><span class=\"line\">location /old &#123;</span><br><span class=\"line\">    rewrite ^/old(.*)$ /new<span class=\"variable\">$1</span> last;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>参数传递：</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 匹配 /product/123 重写为 /item.php?id=123，$1 捕获正则组</span></span><br><span class=\"line\">location /product &#123;</span><br><span class=\"line\">    rewrite ^/product/(\\d+)/?$ /item.php?<span class=\"built_in\">id</span>=<span class=\"variable\">$1</span> last;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>重定向：</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 将 /blog/post 重定向到 https://newblog.com/post，返回 301</span></span><br><span class=\"line\">location /blog &#123;</span><br><span class=\"line\">    rewrite ^/blog/(.*)$ https://newblog.com/<span class=\"variable\">$1</span> permanent;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>条件重写：</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 如果请求包含 debug=1（如 /page?debug=1），重写为 /debug/page，留在当前块</span></span><br><span class=\"line\">location / &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"variable\">$args</span> ~* <span class=\"string\">&quot;debug=1&quot;</span>) &#123;</span><br><span class=\"line\">        rewrite ^/(.*)$ /debug/<span class=\"variable\">$1</span> <span class=\"built_in\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    proxy_pass http://backend;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"valid-referers-防盗链\"><a href=\"#valid-referers-防盗链\" class=\"headerlink\" title=\"valid_referers 防盗链\"></a>valid_referers 防盗链</h3><ul>\n<li><strong>valid_referers语法：</strong> <code>valid_referers [none] [blocked] [server_names] [string ...];</code><ul>\n<li><code>none</code> 允许没有 Referer 头的请求（例如直接在浏览器输入 URL）。</li>\n<li><code>blocked</code> 允许 Referer 被防火墙或代理过滤的请求。</li>\n<li><code>server_names</code> 允许来自当前服务器域名的请求。</li>\n<li><code>string</code> 具体域名：<code>example.com</code>; 子域匹配：<code>*.example.com</code>; 正则表达式：<code>~^(https?://)?(.*\\.)?example\\.com</code>。</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">location ~* \\.(jpg|jpeg|png|gif|bmp|webp|mp4|flv|mp3|pdf|docx|zip|rar)$ &#123;</span><br><span class=\"line\">    <span class=\"comment\"># 允许无 Referer、被过滤 Referer、当前服务器域名及 example.com 子域的请求</span></span><br><span class=\"line\">    valid_referers none blocked server_names ~\\.example\\.com;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"variable\">$invalid_referer</span>) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">return</span> 403;</span><br><span class=\"line\">        <span class=\"comment\"># 或者重定向到一个提示图片</span></span><br><span class=\"line\">        <span class=\"comment\"># rewrite ^/ /images/stolen.jpg last;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"正向代理\"><a href=\"#正向代理\" class=\"headerlink\" title=\"正向代理\"></a>正向代理</h3><img src=\"/Nginx/Nginx/%E6%AD%A3%E5%90%91%E4%BB%A3%E7%90%86.png\" class=\"\" title=\"Nginx 正向代理\">\n\n<ul>\n<li><p><strong>用途：</strong></p>\n<ul>\n<li>访问原来无法访问的资源；</li>\n<li>可做缓存，加速访问资源；</li>\n<li>对客户端访问授权，上网进行认证；</li>\n<li>代理可以记录用户访问记录等，且对外隐藏用户信息；</li>\n</ul>\n</li>\n<li><p><strong>示例：</strong> <code>(注：Nginx 默认不支持正向代理)</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen 8080;                                      <span class=\"comment\"># 代理服务器监听端口</span></span><br><span class=\"line\">    resolver 8.8.8.8;                                 <span class=\"comment\"># 设置 DNS 服务器，用于解析目标地址</span></span><br><span class=\"line\">    location / &#123;</span><br><span class=\"line\">        proxy_pass <span class=\"variable\">$scheme</span>://$http_host<span class=\"variable\">$request_uri</span>;  <span class=\"comment\"># 转发请求到目标服务器</span></span><br><span class=\"line\">        proxy_set_header Host <span class=\"variable\">$http_host</span>;             <span class=\"comment\"># 设置 Host 头</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"反向代理\"><a href=\"#反向代理\" class=\"headerlink\" title=\"反向代理\"></a>反向代理</h3><img src=\"/Nginx/Nginx/%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86.png\" class=\"\" title=\"Nginx 反向代理\">\n\n<ul>\n<li><p><strong>用途：</strong></p>\n<ul>\n<li>保证内网安全，通常将反向代理作为公网访问地址，Web 服务器是内网；</li>\n<li>负载均衡，通过反向代理服务器来优化网站的负载；</li>\n</ul>\n</li>\n<li><p><strong>示例：</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">http &#123;</span><br><span class=\"line\">    server &#123;</span><br><span class=\"line\">        listen 80;                                    <span class=\"comment\"># 反向代理监听端口</span></span><br><span class=\"line\">        server_name example.com;                      <span class=\"comment\"># 匹配域名</span></span><br><span class=\"line\">        location / &#123;</span><br><span class=\"line\">            proxy_pass http://192.168.1.101:8080;     <span class=\"comment\"># 直接转发到单个后端服务器</span></span><br><span class=\"line\">            proxy_set_header Host <span class=\"variable\">$host</span>;              <span class=\"comment\"># 传递 Host 头</span></span><br><span class=\"line\">            proxy_set_header X-Real-IP <span class=\"variable\">$remote_addr</span>;  <span class=\"comment\"># 传递客户端真实 IP</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"负载均衡\"><a href=\"#负载均衡\" class=\"headerlink\" title=\"负载均衡\"></a>负载均衡</h3><ul>\n<li><p><strong>示例：</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">http &#123;</span><br><span class=\"line\">    upstream backend &#123;</span><br><span class=\"line\">        server 192.168.1.101:8080;                    <span class=\"comment\"># 后端服务器 1</span></span><br><span class=\"line\">        server 192.168.1.102:8080;                    <span class=\"comment\"># 后端服务器 2</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    server &#123;</span><br><span class=\"line\">        listen 80;                                    <span class=\"comment\"># 反向代理监听端口</span></span><br><span class=\"line\">        server_name example.com;                      <span class=\"comment\"># 匹配域名</span></span><br><span class=\"line\">        location / &#123;</span><br><span class=\"line\">            proxy_pass http://backend;                <span class=\"comment\"># 转发请求到 upstream 定义的后端</span></span><br><span class=\"line\">            proxy_set_header Host <span class=\"variable\">$host</span>;              <span class=\"comment\"># 传递 Host 头</span></span><br><span class=\"line\">            proxy_set_header X-Real-IP <span class=\"variable\">$remote_addr</span>;  <span class=\"comment\"># 传递客户端真实 IP</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>负载均衡策略：</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 轮询（默认）：请求按顺序分发到后端服务器。</span></span><br><span class=\"line\">upstream backend &#123;</span><br><span class=\"line\">    server 192.168.1.101:8080;                 </span><br><span class=\"line\">    server 192.168.1.102:8080;              </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 权重：根据 weight 参数分配请求，权重越高分发越多。</span></span><br><span class=\"line\">upstream backend &#123;</span><br><span class=\"line\">    server 192.168.1.101:8080 weight=2;                 </span><br><span class=\"line\">    server 192.168.1.102:8080 weight=1;              </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 最小连接：将请求分发到当前连接数最少的服务器。</span></span><br><span class=\"line\">upstream backend &#123;</span><br><span class=\"line\">    least_conn;</span><br><span class=\"line\">    server 192.168.1.101:8080;                 </span><br><span class=\"line\">    server 192.168.1.102:8080;              </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># IP 哈希：根据客户端 IP 计算哈希值，确保同一客户端请求始终发往同一服务器（用于会话保持）。</span></span><br><span class=\"line\">upstream backend &#123;</span><br><span class=\"line\">    ip_hash;</span><br><span class=\"line\">    server 192.168.1.101:8080;                 </span><br><span class=\"line\">    server 192.168.1.102:8080;              </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>upstream 可选参数：</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># max_fails 服务器失败的次数阈值，达到后标记为不可用。</span></span><br><span class=\"line\">server 192.168.1.101:8080 max_fails=3;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># fail_timeout 失败次数统计的窗口时间，同时也是服务器标记为不可用后的等待时间，配合 max_fails 使用。</span></span><br><span class=\"line\">server 192.168.1.101:8080 fail_timeout=30s;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># max_conns 限制服务器的最大并发连接数，防止过载，默认0无限制。</span></span><br><span class=\"line\">server 192.168.1.101:8080 max_conns=100;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># down 用于临时禁用服务器（如维护期间）。</span></span><br><span class=\"line\">server 192.168.1.101:8080 down;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># backup 后备服务器，仅在主服务器全部不可用时使用。</span></span><br><span class=\"line\">server 192.168.1.101:8080 backup;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"动静分离\"><a href=\"#动静分离\" class=\"headerlink\" title=\"动静分离\"></a>动静分离</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">http &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    upstream dynamic_backend &#123;</span><br><span class=\"line\">        server 192.168.1.101:8080;</span><br><span class=\"line\">        server 192.168.1.102:8080 backup;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    server &#123;</span><br><span class=\"line\">        listen       80;</span><br><span class=\"line\">        server_name  example.com;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 静态资源处理</span></span><br><span class=\"line\">        location ~* \\.(jpg|jpeg|png|gif|css|js|ico|html|htm)$ &#123;</span><br><span class=\"line\">            root   /var/www/static;</span><br><span class=\"line\">            expires 30d;</span><br><span class=\"line\">            access_log off;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 动态请求处理</span></span><br><span class=\"line\">        location / &#123;</span><br><span class=\"line\">            proxy_pass http://dynamic_backend;</span><br><span class=\"line\">            proxy_set_header Host <span class=\"variable\">$host</span>;</span><br><span class=\"line\">            proxy_set_header X-Real-IP <span class=\"variable\">$remote_addr</span>;</span><br><span class=\"line\">            proxy_set_header X-Forwarded-For <span class=\"variable\">$proxy_add_x_forwarded_for</span>;</span><br><span class=\"line\">            proxy_connect_timeout 10s;</span><br><span class=\"line\">            proxy_read_timeout 10s;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"高可用\"><a href=\"#高可用\" class=\"headerlink\" title=\"高可用\"></a>高可用</h3><ul>\n<li><strong>配置环境</strong><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">节点 1（Master）：192.168.1.101</span><br><span class=\"line\">节点 2（Backup）：192.168.1.102</span><br><span class=\"line\">虚拟 IP（VIP）：192.168.1.100</span><br></pre></td></tr></table></figure></li>\n<li><strong>两台节点安装 Nginx 和 Keepalived</strong><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo yum install nginx -y</span><br><span class=\"line\">sudo yum install keepalived -y</span><br></pre></td></tr></table></figure></li>\n<li><strong>配置 Keepalived</strong> <code>(/etc/keepalived/keepalived.conf)</code><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 节点 1（Master）</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 全局配置块</span></span><br><span class=\"line\">global_defs &#123;</span><br><span class=\"line\">    router_id nginx1             <span class=\"comment\"># 唯一标识 (主机名)</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># VRRP 脚本，用于检查 Nginx 状态</span></span><br><span class=\"line\">vrrp_script check_nginx &#123;</span><br><span class=\"line\">    script <span class=\"string\">&quot;/bin/pidof nginx&quot;</span>    <span class=\"comment\"># 脚本命令，检查 Nginx 进程是否存在</span></span><br><span class=\"line\">    interval 2                   <span class=\"comment\"># 脚本执行间隔（秒）</span></span><br><span class=\"line\">    weight 50                    <span class=\"comment\"># 权重</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># VRRP 实例，配置虚拟 IP 和高可用逻辑</span></span><br><span class=\"line\">vrrp_instance VI_1 &#123;</span><br><span class=\"line\">    state MASTER                 <span class=\"comment\"># 主节点为 MASTER，备节点为 BACKUP</span></span><br><span class=\"line\">    interface eth0               <span class=\"comment\"># 替换为实际网卡名（通过 ip a 查看网卡名称）</span></span><br><span class=\"line\">    virtual_router_id 51         <span class=\"comment\"># 虚拟路由器 ID，主、备机的 virtual_router_id 必须相同（1-255）</span></span><br><span class=\"line\">    priority 101                 <span class=\"comment\"># 节点优先级，值越大优先级越高（主节点需大于备节点）</span></span><br><span class=\"line\">    advert_int 1                 <span class=\"comment\"># 主节点发送心跳的频率</span></span><br><span class=\"line\">    authentication &#123;             <span class=\"comment\"># 认证配置，用于 VRRP 通信安全</span></span><br><span class=\"line\">        auth_type PASS</span><br><span class=\"line\">        auth_pass 123456</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    virtual_ipaddress &#123;</span><br><span class=\"line\">        192.168.1.100            <span class=\"comment\"># 虚拟 IP（VIP），客户端通过此 IP 访问服务</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    track_script &#123;</span><br><span class=\"line\">        check_nginx              <span class=\"comment\"># 检测 Nginx 是否运行，若失败则降低优先级，触发 VIP 切换</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 节点 2（Backup）</span></span><br><span class=\"line\">global_defs &#123;</span><br><span class=\"line\">    router_id nginx2</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">vrrp_script check_nginx &#123;</span><br><span class=\"line\">    script <span class=\"string\">&quot;/bin/pidof nginx&quot;</span> </span><br><span class=\"line\">    interval 2</span><br><span class=\"line\">    weight 50</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">vrrp_instance VI_1 &#123;</span><br><span class=\"line\">  state BACKUP</span><br><span class=\"line\">  interface eth0</span><br><span class=\"line\">  virtual_router_id 51</span><br><span class=\"line\">  priority 100             </span><br><span class=\"line\">  advert_int 1</span><br><span class=\"line\">  authentication &#123;</span><br><span class=\"line\">      auth_type PASS</span><br><span class=\"line\">      auth_pass 123456</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  virtual_ipaddress &#123;</span><br><span class=\"line\">      192.168.1.100</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  track_script &#123;</span><br><span class=\"line\">      check_nginx</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><strong>启动 Nginx 和 Keepalived</strong><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo systemctl start nginx</span><br><span class=\"line\">sudo systemctl start keepalived</span><br></pre></td></tr></table></figure></li>\n<li><strong>验证高可用</strong><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">curl http://192.168.1.100</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><ul>\n<li><a href=\"https://nginx.org/\">Nginx 官网</a></li>\n</ul>\n","categories":["Nginx"],"tags":["后端","Nginx"]},{"title":"Spring_AOP","url":"/Spring/Spring%EF%BC%9AAOP/","content":"<h2 id=\"AOP简介\"><a href=\"#AOP简介\" class=\"headerlink\" title=\"AOP简介\"></a>AOP简介</h2><ul>\n<li><code>AOP(Aspect Oriented Programming)</code> 面向切面编程，通过预编译方式和运行期动态代理实现程序功能的统一维护的一种技术。AOP是OOP（面向对象编程）的延续，是软件开发中的一个热点，也是Spring框架中的一个重要内容，是函数式编程的一种衍生范型。利用AOP可以对业务逻辑的各个部分进行隔离，从而使得业务逻辑各部分之间的<code>耦合度降低</code>，提高程序的<code>可重用性</code>，同时提高了开发的效率。</li>\n<li>AOP采取<code>横向抽取</code>机制，取代了传统<code>纵向继承</code>体系重复性代码。</li>\n</ul>\n<span id=\"more\"></span>\n\n<h2 id=\"AOP概念\"><a href=\"#AOP概念\" class=\"headerlink\" title=\"AOP概念\"></a>AOP概念</h2><h3 id=\"AOP术语\"><a href=\"#AOP术语\" class=\"headerlink\" title=\"AOP术语\"></a>AOP术语</h3><ul>\n<li><code>Target</code> 目标类，代理的目标对象。</li>\n<li><code>Joinpoint</code> 连接点，指那些可能被拦截到的点。</li>\n<li><code>Pointcut</code> 切入点，已经被增强的连接点。</li>\n<li><code>Advice</code> 通知&#x2F;增强，增强的代码。</li>\n<li><code>Proxy</code> 代理类，一个类被AOP织入增强后，就产生一个结果代理类。</li>\n<li><code>Weave</code> 织入，指把增强Advice应用到目标对象Target来创建新的代理对象Proxy的过程。</li>\n<li><code>Aspect</code> 切面，是切入点Pointcut和通知Advice的结合。一个线是一个特殊的面。一个切入点和一个通知，组成一个特殊的面。</li>\n</ul>\n<img src=\"/Spring/Spring%EF%BC%9AAOP/AOP.png\" class=\"\" title=\"AOP\">\n\n<h3 id=\"通知类型\"><a href=\"#通知类型\" class=\"headerlink\" title=\"通知类型\"></a>通知类型</h3><ul>\n<li><code>Before</code> 前置通知，在目标类的方法执行之前执行</li>\n<li><code>After</code> 后置通知，在目标类的方法执行之后执行</li>\n<li><code>AfterReturning</code> 返回通知，在正常执行后通知</li>\n<li><code>AfterThrowing</code> 异常通知，在抛出异常后通知</li>\n<li><code>Around</code> 环绕通知，在目标类的方法执行之前和之后执行</li>\n<li><strong>正常执行：</strong>前置通知 -&gt; 目标方法 -&gt; 后置通知 -&gt; 返回通知</li>\n<li><strong>异常执行：</strong>前置通知 -&gt; 目标方法 -&gt; 后置通知 -&gt; 异常通知</li>\n</ul>\n<h2 id=\"AOP切入点表达式\"><a href=\"#AOP切入点表达式\" class=\"headerlink\" title=\"AOP切入点表达式\"></a>AOP切入点表达式</h2><ul>\n<li>语法：<code>execution(修饰符 返回值 包.类.方法名(参数) throws 异常)</code><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">修饰符，[可省略]</span><br><span class=\"line\">public                             <span class=\"comment\"># 公共方法</span></span><br><span class=\"line\">        *                                  <span class=\"comment\"># 任意</span></span><br><span class=\"line\"></span><br><span class=\"line\">        返回值，[不能省略]</span><br><span class=\"line\">        void                               <span class=\"comment\"># 返回没有值</span></span><br><span class=\"line\">        String                             <span class=\"comment\"># 返回值字符串</span></span><br><span class=\"line\">        *                                  <span class=\"comment\"># 任意</span></span><br><span class=\"line\"></span><br><span class=\"line\">        包，[可省略]</span><br><span class=\"line\">        com.example.demo                   <span class=\"comment\"># 固定包</span></span><br><span class=\"line\">        com.example.demo.*.service         <span class=\"comment\"># demo包下面子包任意 （例如：com.example.demo.user.service）</span></span><br><span class=\"line\">        com.example.demo..                 <span class=\"comment\"># demo包下面的所有子包（含自己）</span></span><br><span class=\"line\">        com.example.demo.*.service..       <span class=\"comment\"># demo包下面任意子包，固定目录service，service目录任意包</span></span><br><span class=\"line\"></span><br><span class=\"line\">        类，[可省略]</span><br><span class=\"line\">        UserServiceImpl                    <span class=\"comment\"># 指定类</span></span><br><span class=\"line\">        *Impl                              <span class=\"comment\"># 以Impl结尾</span></span><br><span class=\"line\">        User*                              <span class=\"comment\"># 以User开头</span></span><br><span class=\"line\">        *                                  <span class=\"comment\">#  任意</span></span><br><span class=\"line\"></span><br><span class=\"line\">        方法名，[不能省略]</span><br><span class=\"line\">        addUser                            <span class=\"comment\"># 固定方法</span></span><br><span class=\"line\">        add*                               <span class=\"comment\"># 以add开头</span></span><br><span class=\"line\">        *Do                                <span class=\"comment\"># 以Do结尾</span></span><br><span class=\"line\">        *                                  <span class=\"comment\"># 任意</span></span><br><span class=\"line\"></span><br><span class=\"line\">        (参数)，[不能省略]</span><br><span class=\"line\">        ()                                 <span class=\"comment\"># 无参</span></span><br><span class=\"line\">        (int)                              <span class=\"comment\"># 一个整型</span></span><br><span class=\"line\">        (int ,int)                         <span class=\"comment\"># 两个</span></span><br><span class=\"line\">        (..)                               <span class=\"comment\"># 参数任意</span></span><br><span class=\"line\"></span><br><span class=\"line\">        throws，[可省略]</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"AOP示例\"><a href=\"#AOP示例\" class=\"headerlink\" title=\"AOP示例\"></a>AOP示例</h2><ul>\n<li><p>TargetObject.java</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TargetObject</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">print</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;目标方法...&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>MyAspect.java</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Aspect</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyAspect</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Pointcut(&quot;execution(public void com.example.demo.aop.TargetObject.*(..))&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">pointCut</span><span class=\"params\">()</span>&#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Before(value = &quot;pointCut()&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">before</span><span class=\"params\">(JoinPoint joinPoint)</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;前置通知....&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@After(value = &quot;pointCut()&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">after</span><span class=\"params\">(JoinPoint joinPoint)</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;后置通知....&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@AfterReturning(value = &quot;pointCut()&quot;, returning = &quot;result&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">afterReturning</span><span class=\"params\">(JoinPoint joinPoint, Object result)</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;返回通知....&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@AfterThrowing(value = &quot;pointCut()&quot;, throwing = &quot;exception&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">afterThrowing</span><span class=\"params\">(JoinPoint joinPoint, Exception exception)</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;异常通知....&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//@Around(value = &quot;pointCut()&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Object <span class=\"title function_\">around</span><span class=\"params\">(ProceedingJoinPoint proceedingJoinPoint)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Object</span> <span class=\"variable\">result</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;前置通知....&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// 执行目标方法</span></span><br><span class=\"line\">            proceedingJoinPoint.proceed();</span><br><span class=\"line\"></span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;后置通知....&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;返回通知....&quot;</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Throwable throwable) &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;异常通知....&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>SpringConfig.java</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"meta\">@EnableAspectJAutoProxy</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SpringConfig</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> TargetObject <span class=\"title function_\">targetObject</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">TargetObject</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> MyAspect <span class=\"title function_\">myAspect</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">MyAspect</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Test.java</p>\n <figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"> <span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">ApplicationContext</span> <span class=\"variable\">applicationContext</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">AnnotationConfigApplicationContext</span>(SpringConfig.class);</span><br><span class=\"line\">    <span class=\"type\">TargetObject</span> <span class=\"variable\">targetObject</span> <span class=\"operator\">=</span> applicationContext.getBean(TargetObject.class);</span><br><span class=\"line\">    targetObject.print();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p> 运行结果：</p>\n <figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">前置通知....</span><br><span class=\"line\">目标方法...</span><br><span class=\"line\">后置通知....</span><br><span class=\"line\">返回通知....</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"AOP实现\"><a href=\"#AOP实现\" class=\"headerlink\" title=\"AOP实现\"></a>AOP实现</h2><ul>\n<li>接口 + 实现类：Spring 采用 JDK动态代理</li>\n<li>实现类：Spring 采用 CGLIB字节码增强</li>\n</ul>\n<h3 id=\"JDK动态代理\"><a href=\"#JDK动态代理\" class=\"headerlink\" title=\"JDK动态代理\"></a>JDK动态代理</h3><ul>\n<li><p>UserService.java</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">UserService</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">addUser</span><span class=\"params\">()</span>;</span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">updateUser</span><span class=\"params\">()</span>;</span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">deleteUser</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>UserServiceImpl.java</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">UserServiceImpl</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">UserService</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">addUser</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;添加用户...&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">updateUser</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;修改用户...&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">deleteUser</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;删除用户...&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>MyAspect.java</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyAspect</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">before</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;开启事务...&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">after</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;提交事务...&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>MyBeanFactory.java</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyBeanFactory</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> UserService <span class=\"title function_\">createService</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 目标类</span></span><br><span class=\"line\">        <span class=\"keyword\">final</span> <span class=\"type\">UserService</span> <span class=\"variable\">userService</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">UserServiceImpl</span>();</span><br><span class=\"line\">        <span class=\"comment\">// 切面类</span></span><br><span class=\"line\">        <span class=\"keyword\">final</span> <span class=\"type\">MyAspect</span> <span class=\"variable\">myAspect</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">MyAspect</span>();</span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         * 代理类：将目标类（切入点）和 切面类（通知） 结合 --&gt; 切面</span></span><br><span class=\"line\"><span class=\"comment\">         * Proxy.newProxyInstance</span></span><br><span class=\"line\"><span class=\"comment\">         * <span class=\"doctag\">@param</span> loader 类加载器</span></span><br><span class=\"line\"><span class=\"comment\">         * <span class=\"doctag\">@param</span> interfaces 代理类需要实现的所有接口（不包含父类接口）</span></span><br><span class=\"line\"><span class=\"comment\">         * <span class=\"doctag\">@param</span> invocationHandler 处理类实现</span></span><br><span class=\"line\"><span class=\"comment\">         * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        <span class=\"type\">UserService</span> <span class=\"variable\">proxService</span> <span class=\"operator\">=</span> (UserService) Proxy.newProxyInstance(</span><br><span class=\"line\">                MyBeanFactory.class.getClassLoader(),</span><br><span class=\"line\">                userService.getClass().getInterfaces(),</span><br><span class=\"line\">                <span class=\"keyword\">new</span> <span class=\"title class_\">InvocationHandler</span>() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">                     * 代理类的每一个方法执行时，都将调用一次invoke</span></span><br><span class=\"line\"><span class=\"comment\">                     * <span class=\"doctag\">@param</span> proxy 代理对象</span></span><br><span class=\"line\"><span class=\"comment\">                     * <span class=\"doctag\">@param</span> method 执行的方法</span></span><br><span class=\"line\"><span class=\"comment\">                     * <span class=\"doctag\">@param</span> args 方法参数</span></span><br><span class=\"line\"><span class=\"comment\">                     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">                     * <span class=\"doctag\">@throws</span> Throwable</span></span><br><span class=\"line\"><span class=\"comment\">                     */</span></span><br><span class=\"line\">                    <span class=\"meta\">@Override</span></span><br><span class=\"line\">                    <span class=\"keyword\">public</span> Object <span class=\"title function_\">invoke</span><span class=\"params\">(Object proxy, Method method, Object[] args)</span> <span class=\"keyword\">throws</span> Throwable &#123;</span><br><span class=\"line\">                        myAspect.before();</span><br><span class=\"line\"></span><br><span class=\"line\">                        <span class=\"comment\">// 执行目标类的方法</span></span><br><span class=\"line\">                        <span class=\"type\">Object</span> <span class=\"variable\">obj</span> <span class=\"operator\">=</span> method.invoke(userService, args);</span><br><span class=\"line\"></span><br><span class=\"line\">                        myAspect.after();</span><br><span class=\"line\">                        <span class=\"keyword\">return</span> obj;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> proxService;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"CGLIB字节码增强\"><a href=\"#CGLIB字节码增强\" class=\"headerlink\" title=\"CGLIB字节码增强\"></a>CGLIB字节码增强</h3><ul>\n<li>UserService.java<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">UserService</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">addUser</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;添加用户...&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">updateUser</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;修改用户...&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">deleteUser</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;删除用户...&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>MyAspect.java<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyAspect</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">before</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;开启事务...&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">after</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;提交事务...&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>MyBeanFactory.java<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyBeanFactory</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> UserService <span class=\"title function_\">createService</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 目标类</span></span><br><span class=\"line\">        <span class=\"keyword\">final</span> <span class=\"type\">UserService</span> <span class=\"variable\">userService</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">UserService</span>();</span><br><span class=\"line\">        <span class=\"comment\">// 切面类</span></span><br><span class=\"line\">        <span class=\"keyword\">final</span> <span class=\"type\">MyAspect</span> <span class=\"variable\">myAspect</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">MyAspect</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 代理类，采用cglib，底层创建目标类的子类</span></span><br><span class=\"line\">        <span class=\"comment\">// 核心类</span></span><br><span class=\"line\">        <span class=\"type\">Enhancer</span> <span class=\"variable\">enhancer</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Enhancer</span>();</span><br><span class=\"line\">        <span class=\"comment\">// 确定父类</span></span><br><span class=\"line\">        enhancer.setSuperclass(userService.getClass());</span><br><span class=\"line\">        <span class=\"comment\">// 设置回调函数</span></span><br><span class=\"line\">        enhancer.setCallback(<span class=\"keyword\">new</span> <span class=\"title class_\">MethodInterceptor</span>()&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">             * <span class=\"doctag\">@param</span> proxy 代理对象</span></span><br><span class=\"line\"><span class=\"comment\">             * <span class=\"doctag\">@param</span> method 执行的方法</span></span><br><span class=\"line\"><span class=\"comment\">             * <span class=\"doctag\">@param</span> args 方法参数</span></span><br><span class=\"line\"><span class=\"comment\">             * <span class=\"doctag\">@param</span> methodProxy 方法的代理</span></span><br><span class=\"line\"><span class=\"comment\">             * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">             * <span class=\"doctag\">@throws</span> Throwable</span></span><br><span class=\"line\"><span class=\"comment\">             */</span></span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"keyword\">public</span> Object <span class=\"title function_\">intercept</span><span class=\"params\">(Object proxy, Method method, Object[] args, MethodProxy methodProxy)</span> <span class=\"keyword\">throws</span> Throwable &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                myAspect.before();</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\">// 执行目标类的方法</span></span><br><span class=\"line\">                <span class=\"type\">Object</span> <span class=\"variable\">obj</span> <span class=\"operator\">=</span> method.invoke(userService, args);</span><br><span class=\"line\">                <span class=\"comment\">// 执行代理类的父类，执行目标类（目标类和代理类 父子关系）</span></span><br><span class=\"line\">                <span class=\"comment\">//methodProxy.invokeSuper(proxy, args);</span></span><br><span class=\"line\"></span><br><span class=\"line\">                myAspect.after();</span><br><span class=\"line\">                <span class=\"keyword\">return</span> obj;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        <span class=\"comment\">// 创建代理</span></span><br><span class=\"line\">        <span class=\"type\">UserService</span> <span class=\"variable\">proxService</span> <span class=\"operator\">=</span> (UserService) enhancer.create();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> proxService;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n","categories":["Spring"],"tags":["后端","Spring"]},{"title":"Spring_常用注解汇总","url":"/Spring/Spring%EF%BC%9A%E5%B8%B8%E7%94%A8%E6%B3%A8%E8%A7%A3%E6%B1%87%E6%80%BB/","content":"<h2 id=\"Bean相关\"><a href=\"#Bean相关\" class=\"headerlink\" title=\"Bean相关\"></a>Bean相关</h2><ul>\n<li><code>@Bean</code> 声明当前方法的返回值为一个Bean</li>\n<li><code>@Scope</code> 用于指定作用域</li>\n<li><code>@Lazy</code> 表示延迟初始化</li>\n<li><code>@Primary</code> 自动装配时当出现多个Bean候选者时，被注解为@Primary的Bean将作为首选者</li>\n</ul>\n<span id=\"more\"></span>\n\n<h3 id=\"声明Bean注解\"><a href=\"#声明Bean注解\" class=\"headerlink\" title=\"声明Bean注解\"></a>声明Bean注解</h3><ul>\n<li><code>@Component</code> 组件，没有明确的角色 </li>\n<li><code>@Controller</code> 应用在MVC层（控制层）</li>\n<li><code>@Service</code> 应用在Service层（业务逻辑层）</li>\n<li><code>@Repository</code> 应用在Dao层（数据访问层）</li>\n</ul>\n<h3 id=\"注入Bean注解\"><a href=\"#注入Bean注解\" class=\"headerlink\" title=\"注入Bean注解\"></a>注入Bean注解</h3><ul>\n<li><code>@Autowired</code> 由Spring提供，根据类型进行自动装配，如果组合@Qualifier使用将按名称进行装配</li>\n<li><code>@Resource</code> 由JSR-250提供，根据名称进行自动装配，使用需导入javax.annotation包</li>\n<li><code>@Inject</code> 由JSR-330提供，根据类型进行自动装配，如需按名称进行装配则需配合@Named使用，使用需导入javax.inject.Inject包</li>\n</ul>\n<h3 id=\"Bean的初始化和销毁注解\"><a href=\"#Bean的初始化和销毁注解\" class=\"headerlink\" title=\"Bean的初始化和销毁注解\"></a>Bean的初始化和销毁注解</h3><ul>\n<li><code>@PostConstruct</code> 用于指定初始化方法，在构造函数执行后执行</li>\n<li><code>@PreDestroy</code> 用于指定销毁方法，在Bean销毁之前执行</li>\n</ul>\n<h2 id=\"配置相关\"><a href=\"#配置相关\" class=\"headerlink\" title=\"配置相关\"></a>配置相关</h2><ul>\n<li><code>@Order</code> 调整配置类加载顺序，值越小优先级越高</li>\n<li><code>@Configuration</code> 声明当前类是一个配置类，相当于Spring的xml配置文件</li>\n<li><code>@ConfigurationProperties</code> 将Properties属性与一个Bean及其属性相关联</li>\n<li><code>@ComponentScan</code> 扫描该类所在的包下所有的声明类</li>\n</ul>\n<h3 id=\"注入注解\"><a href=\"#注入注解\" class=\"headerlink\" title=\"注入注解\"></a>注入注解</h3><ul>\n<li><code>@Value</code> 值注入，普通字符，SpEl表达式，配置文件属性值等</li>\n<li><code>@PropertySource</code> 加载Properties配置文件</li>\n<li><code>@ImportResource</code> 导入Xml配置文件</li>\n<li><code>@Import</code> 导入Bean到Spring容器</li>\n</ul>\n<h3 id=\"条件注解\"><a href=\"#条件注解\" class=\"headerlink\" title=\"条件注解\"></a>条件注解</h3><ul>\n<li><code>@ConditionalOnBean</code>\t Spring容器中是否存在对应的实例</li>\n<li><code>@ConditionalOnMissingBean</code>\t Spring容器中是否不存在对应的实例</li>\n<li><code>@ConditionalOnClass</code> 类加载器中是否存在对应的类</li>\n<li><code>@ConditionalOnMissingClass</code> 类加载器中是否不存在对应的类</li>\n<li><code>@ConditionalOnExpression</code> 判断 SpEL 表达式是否成立</li>\n<li><code>@ConditionalOnJava</code> 指定Java版本是否符合要求</li>\n<li><code>@ConditionalOnJndi</code> 在JNDI存在的条件下查找指定的位置</li>\n<li><code>@ConditionalOnSingleCandidate</code> Spring容器中是否存在且只存在一个对应的实例</li>\n<li><code>@ConditionalOnProperty</code> 应用环境中的属性是否存在</li>\n<li><code>@ConditionalOnResource</code> 是否存在指定的资源文件</li>\n<li><code>@ConditionalOnWebApplication</code> 应用程序是否是Web程序</li>\n<li><code>@ConditionalOnNotWebApplication</code> 应用程序是否非Web程序</li>\n<li><code>@Profile</code> 指定组件在哪个环境的情况下才能被注册到容器中</li>\n<li><code>@DependsOn</code> 控制Bean加载顺序，A 间接依赖 B，B未准备好，A无法访问</li>\n</ul>\n<h2 id=\"功能相关\"><a href=\"#功能相关\" class=\"headerlink\" title=\"功能相关\"></a>功能相关</h2><h3 id=\"AOP注解\"><a href=\"#AOP注解\" class=\"headerlink\" title=\"AOP注解\"></a>AOP注解</h3><ul>\n<li><code>@EnableAspectJAutoProxy</code> 开启对AspectJ自动代理的支持</li>\n<li><code>@Aspect</code>\t 声明该类是一个切面Bean</li>\n<li><code>@Before</code>\t 前置通知，在目标类的方法执行之前执行</li>\n<li><code>@After</code>\t 后置通知，在目标类的方法执行之后执行</li>\n<li><code>@AfterReturning</code>\t 返回通知，在正常执行后通知</li>\n<li><code>@AfterThrowing</code>\t异常通知，在抛出异常后通知</li>\n<li><code>@Around</code>\t 环绕通知，在目标类的方法执行之前和之后执行</li>\n<li><code>@Pointcut</code> 切入点，用于定义通知类型，切面类的方法和切入点的表达式</li>\n</ul>\n<h3 id=\"事务注解\"><a href=\"#事务注解\" class=\"headerlink\" title=\"事务注解\"></a>事务注解</h3><ul>\n<li><code>@EnableTransactionManagement</code> 开启注解式事务的支持</li>\n<li><code>@Transactional</code> 用于声明事务</li>\n</ul>\n<h3 id=\"缓存注解\"><a href=\"#缓存注解\" class=\"headerlink\" title=\"缓存注解\"></a>缓存注解</h3><ul>\n<li><code>@EnableCaching</code> 开启注解式的缓存支持</li>\n<li><code>@CacheConfig</code> 用于配置该类中会用到的一些共用的缓存配置</li>\n<li><code>@Cacheable</code> 用于方法的返回值将被加入缓存。在查询时，会先从缓存中获取，若不存在才对数据库访问</li>\n<li><code>@CachePut</code> 用于数据新增和修改操作</li>\n<li><code>@CacheEvict</code> 用于删除操作，用来从缓存中移除相应数据</li>\n</ul>\n<h3 id=\"异步注解\"><a href=\"#异步注解\" class=\"headerlink\" title=\"异步注解\"></a>异步注解</h3><ul>\n<li><code>@EnableAsync</code> 开启对异步任务的支持</li>\n<li><code>@Async</code> 声明这是一个异步任务</li>\n</ul>\n<h3 id=\"定时任务注解\"><a href=\"#定时任务注解\" class=\"headerlink\" title=\"定时任务注解\"></a>定时任务注解</h3><ul>\n<li><code>@EnableScheduling</code> 开启对定时任务的支持</li>\n<li><code>@Scheduled</code> 声明这是一个定时任务。包含：cron 、fixDelay、fixRate等类型</li>\n</ul>\n<h2 id=\"测试相关\"><a href=\"#测试相关\" class=\"headerlink\" title=\"测试相关\"></a>测试相关</h2><ul>\n<li><code>@RunWith</code> Spring中通常用于对JUnit的支持</li>\n<li><code>@ContextConfiguration</code> 用于加载配置ApplicationContext</li>\n</ul>\n<h2 id=\"Enable-相关\"><a href=\"#Enable-相关\" class=\"headerlink\" title=\"Enable*相关\"></a>Enable*相关</h2><ul>\n<li><code>@EnableAspectJAutoProxy</code> 开启对AspectJ自动代理的支持</li>\n<li><code>@EnableAsync</code> 开启对异步任务的支持</li>\n<li><code>@EnableScheduling</code> 开启对定时任务的支持</li>\n<li><code>@EnableWebMvc</code> 开启Web MVC的配置支持</li>\n<li><code>@EnableConfigurationProperties</code> 开启对@ConfigurationProperties注解配置Bean的支持</li>\n<li><code>@EnableJpaRepositories</code> 开启对SpringData JPA Repository的支持</li>\n<li><code>@EnableTransactionManagement</code> 开启注解式事务的支持</li>\n<li><code>@EnableCaching</code> 开启注解式的缓存支持</li>\n</ul>\n<h2 id=\"SpringMVC相关\"><a href=\"#SpringMVC相关\" class=\"headerlink\" title=\"SpringMVC相关\"></a>SpringMVC相关</h2><h3 id=\"请求映射注解\"><a href=\"#请求映射注解\" class=\"headerlink\" title=\"请求映射注解\"></a>请求映射注解</h3><ul>\n<li><code>@RequestMapping</code> 用于映射 Http 请求，包括访问路径和参数</li>\n<li><code>@GetMapping</code> 用于映射 Http 请求的 Get 方法，获取信息</li>\n<li><code>@PostMapping</code> 用于映射 Http 请求的 Post 方法，保存信息</li>\n<li><code>@PutMapping</code> 用于映射 Http 请求的 Put 方法，更新信息</li>\n<li><code>@DeleteMapping</code> 用于映射 Http 请求的 Delete 方法，删除信息</li>\n<li><code>@PatchMapping</code> 用于映射 Http 请求的 Patch 方法，更新部分信息</li>\n<li><code>@RestController</code> 组合注解，@ResponseBody + @Controller</li>\n</ul>\n<h3 id=\"请求参数注解\"><a href=\"#请求参数注解\" class=\"headerlink\" title=\"请求参数注解\"></a>请求参数注解</h3><ul>\n<li><code>@PathVariable</code> 用于获取请求路径中的变量</li>\n<li><code>@RequestParam</code> 用于获取请求参数</li>\n<li><code>@RequestHeader</code> 用于获取请求头的信息</li>\n<li><code>@CookieValue</code> 用于获取客户端的Cookie中的信息</li>\n<li><code>@SessionAttribute</code> 用于获取服务端的Session中的信息</li>\n<li><code>@RequestPart</code> 用于获取文件之类的Multipart信息</li>\n<li><code>@RequestAttribute</code> 用于将请求中的属性(request attributes，是服务器放入的属性值)绑定到方法参数</li>\n<li><code>@RequestBody</code> 用于获取请求中的Body部分数据</li>\n<li><code>@ResponseBody</code> 用于将返回值放在Response内，而不是一个页面</li>\n<li><code>@InitBinder</code> 用于设置WebDataBinder，WebDataBinder用来自动绑定前台请求参数到Model中</li>\n<li><code>@SessionAttributes</code> 用于绑定HttpSession中的attribute对象的值，便于在方法中的参数里使用</li>\n<li><code>@ModelAttribute</code> 本来的作用是绑定键值对到Model里，在@ControllerAdvice中是让全局的@RequestMapping都能获得在此处设置的键值对</li>\n</ul>\n<h3 id=\"跨域请求注解\"><a href=\"#跨域请求注解\" class=\"headerlink\" title=\"跨域请求注解\"></a>跨域请求注解</h3><ul>\n<li><code>@CrossOrigin</code> 用于在Class和Method上支持跨域请求</li>\n</ul>\n<h3 id=\"全局处理注解\"><a href=\"#全局处理注解\" class=\"headerlink\" title=\"全局处理注解\"></a>全局处理注解</h3><ul>\n<li><code>@ExceptionHandler</code> 用于全局处理控制器里的异常</li>\n<li><code>@ControllerAdvice</code> 声明一个类来统一对所有@RequestMapping方法来做@ExceptionHandler、@InitBinder以及@ModelAttribute处理</li>\n<li><code>@RestControllerAdvice</code> 组合注解，@ResponseBody + @ControllerAdvice</li>\n<li><code>@ResponseStatus</code> 用于方法或者异常类返回的Http状态码</li>\n</ul>\n<h2 id=\"SpringJpa相关\"><a href=\"#SpringJpa相关\" class=\"headerlink\" title=\"SpringJpa相关\"></a>SpringJpa相关</h2><ul>\n<li><code>@Entity</code> 用于映射到数据库表</li>\n<li><code>@Table</code> 用于实体类映射的数据库表名</li>\n<li><code>@Id</code> 用于标注为数据库表的主键列</li>\n<li><code>@GeneratedValue</code> 用于标注主键的生成策略。通过 strategy 属性指定</li>\n<li><code>@Column</code> 用于实体属性与数据库表的列不同名时需要使用</li>\n<li><code>@Basic</code> 默认 Entity 类的属性的默认注解</li>\n<li><code>@Transient</code> 用于忽略该属性，不映射数据库表字段</li>\n<li><code>@Temporal</code> 用于定义 Date 类型的精度</li>\n</ul>\n<h2 id=\"SpringBoot相关\"><a href=\"#SpringBoot相关\" class=\"headerlink\" title=\"SpringBoot相关\"></a>SpringBoot相关</h2><ul>\n<li><code>@SpringBootApplication</code> SpringBoot的核心注解，主要作用是开启自动配置</li>\n<li><code>@EnableAutoConfiguration</code> 自动载入应用程序所需的所有Bean</li>\n<li><code>@AutoConfigureAfter</code> 在指定的自动配置类之后再配置</li>\n</ul>\n<h2 id=\"Lombok相关\"><a href=\"#Lombok相关\" class=\"headerlink\" title=\"Lombok相关\"></a>Lombok相关</h2><ul>\n<li><code>@Setter</code> 为属性提供 set 方法</li>\n<li><code>@Getter</code> 为属性提供 get 方法</li>\n<li><code>@NoArgsConstructor</code> 为类提供一个无参的构造方法</li>\n<li><code>@AllArgsConstructor</code> 为类提供一个全参的构造方法</li>\n<li><code>@Accessors</code> 为配置 get 和 set 方法的生成结果</li>\n<li><code>@Data</code> 为类提供所有属性的 get 和 set 方法，此外还提供了equals、canEqual、hashCode、toString方法</li>\n<li><code>@Log4j</code> 为类提供一个属性名为log 的 log4j 日志对象</li>\n<li><code>@Slf4j</code> 为类提供一个属性名为log 的 Slf4j 日志对象</li>\n</ul>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><ul>\n<li><a href=\"https://www.oschina.net/uploads/doc/annotations/spring.html\">Spring Project Annotations</a></li>\n</ul>\n","categories":["Spring"],"tags":["后端","Spring"]},{"title":"Spring_生命周期","url":"/Spring/Spring%EF%BC%9A%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/","content":"<h2 id=\"生命周期流程\"><a href=\"#生命周期流程\" class=\"headerlink\" title=\"生命周期流程\"></a>生命周期流程</h2><img src=\"/Spring/Spring%EF%BC%9A%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/Bean%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F.png\" class=\"\" title=\"Bean生命周期\">\n<ul>\n<li><ol>\n<li>Spring容器根据实例化策略略对Bean进行实例化。</li>\n</ol>\n</li>\n<li><ol start=\"2\">\n<li>实例化完成后，如果该bean设置了一些属性的话，则利用set方法设置一些属性。</li>\n</ol>\n</li>\n<li><ol start=\"3\">\n<li>如果该Bean实现了<code>BeanNameAware</code>接口，则调用<code>setBeanName()</code>方法。</li>\n</ol>\n</li>\n<li><ol start=\"4\">\n<li>如果该Bean实现了<code>BeanFactoryAware</code>接口，则调用<code>setBeanFactory()</code>方法。</li>\n</ol>\n</li>\n<li><ol start=\"5\">\n<li>如果该Bean实现了<code>ApplicationContextAware</code>接口，则调用<code>setApplicationContext()</code>方法。</li>\n</ol>\n</li>\n<li><ol start=\"6\">\n<li>如果该容器注册了<code>BeanPostProcessor</code>，则会调用<code>postProcessBeforeInitialization()</code>方法完成Bean的前置处理。</li>\n</ol>\n</li>\n<li><ol start=\"7\">\n<li>如果该Bean实现了<code>InitializingBean</code>接口，则调用<code>afterPropertiesSet()</code>方法。</li>\n</ol>\n</li>\n<li><ol start=\"8\">\n<li>如果该Bean配置了<code>init-method</code>方法，则调用<code>init-method</code>指定的方法。</li>\n</ol>\n</li>\n<li><ol start=\"9\">\n<li>初始化完成后，如果该容器注册了<code>BeanPostProcessor</code>则会调用<code>postProcessAfterInitialization()</code>方法完成Bean的后置处理。</li>\n</ol>\n</li>\n<li><ol start=\"10\">\n<li>对象完成初始化，开始方法调用。</li>\n</ol>\n</li>\n<li><ol start=\"11\">\n<li>在容器进行关闭之前，如果该Bean实现了<code>DisposableBean</code>接口，则调用<code>destroy()</code>方法。</li>\n</ol>\n</li>\n<li><ol start=\"12\">\n<li>在容器进行关闭之前，如果该Bean配置了<code>destroy-mehod</code>，则调用<code>destroy-method</code>指定的方法。</li>\n</ol>\n</li>\n</ul>\n<span id=\"more\"></span>\n\n<h2 id=\"初始化、销毁3种方式\"><a href=\"#初始化、销毁3种方式\" class=\"headerlink\" title=\"初始化、销毁3种方式\"></a>初始化、销毁3种方式</h2><h3 id=\"init-method、destroy-method方法\"><a href=\"#init-method、destroy-method方法\" class=\"headerlink\" title=\"init-method、destroy-method方法\"></a>init-method、destroy-method方法</h3><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> com.example.entity.LifeCycleBean;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.*;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SpringConfig</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean(initMethod = &quot;initMethod&quot;, destroyMethod = &quot;destroyMethod&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> LifeCycleBean <span class=\"title function_\">lifeCycleBean</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">LifeCycleBean</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">LifeCycleBean</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">initMethod</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;init-method...&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">destroyMethod</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;destroy-method...&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"InitializingBean、DisposableBean接口\"><a href=\"#InitializingBean、DisposableBean接口\" class=\"headerlink\" title=\"InitializingBean、DisposableBean接口\"></a>InitializingBean、DisposableBean接口</h3><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.DisposableBean;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.InitializingBean;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.stereotype.Component;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">LifeCycleBean</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">InitializingBean</span>, DisposableBean &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">afterPropertiesSet</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;InitializingBean afterPropertiesSet...&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">destroy</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;DisposableBean destroy...&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"PostConstruct、-PreDestroy注解\"><a href=\"#PostConstruct、-PreDestroy注解\" class=\"headerlink\" title=\"@PostConstruct、@PreDestroy注解\"></a>@PostConstruct、@PreDestroy注解</h3><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.stereotype.Component;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.annotation.PostConstruct;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.annotation.PreDestroy;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">LifeCycleBean</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@PostConstruct</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">postConstruct</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;postConstruct...&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@PreDestroy</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">preDestroy</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;preDestroy...&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"BeanPostProcessor后置处理器\"><a href=\"#BeanPostProcessor后置处理器\" class=\"headerlink\" title=\"BeanPostProcessor后置处理器\"></a>BeanPostProcessor后置处理器</h2><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.BeansException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.config.BeanPostProcessor;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.stereotype.Component;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyBeanPostProcessor</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">BeanPostProcessor</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Object <span class=\"title function_\">postProcessBeforeInitialization</span><span class=\"params\">(Object bean, String beanName)</span> <span class=\"keyword\">throws</span> BeansException &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;BeanPostProcessor postProcessBeforeInitialization...&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> bean;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Object <span class=\"title function_\">postProcessAfterInitialization</span><span class=\"params\">(Object bean, String beanName)</span> <span class=\"keyword\">throws</span> BeansException &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;BeanPostProcessor postProcessAfterInitialization...&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> bean;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"完整示例\"><a href=\"#完整示例\" class=\"headerlink\" title=\"完整示例\"></a>完整示例</h2><ul>\n<li><p>LifeCycleBean.java</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.BeansException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.*;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.ApplicationContext;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.ApplicationContextAware;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.annotation.PostConstruct;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.annotation.PreDestroy;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">LifeCycleBean</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">BeanNameAware</span>, BeanFactoryAware, ApplicationContextAware,</span><br><span class=\"line\">        InitializingBean, DisposableBean &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String id;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">getId</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> id;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setId</span><span class=\"params\">(String id)</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;属性注入...&quot;</span>);</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.id = id;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">LifeCycleBean</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;构造函数调用...&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">display</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;方法调用...&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setBeanName</span><span class=\"params\">(String name)</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;BeanNameAware 被调用...&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setBeanFactory</span><span class=\"params\">(BeanFactory beanFactory)</span> <span class=\"keyword\">throws</span> BeansException &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;BeanFactoryAware 被调用...&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setApplicationContext</span><span class=\"params\">(ApplicationContext applicationContext)</span> <span class=\"keyword\">throws</span> BeansException &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;ApplicationContextAware 被调用...&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"meta\">@PostConstruct</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">postConstruct</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;PostConstruct 被调用...&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@PreDestroy</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">preDestroy</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;PreDestroy 被调用...&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">afterPropertiesSet</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;InitializingBean afterPropertiesSet 被调用...&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">destroy</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;DisposableBean destroy 被调用...&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">initMethod</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;init-method 被调用...&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">destroyMethod</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;destroy-method 被调用...&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>MyBeanPostProcessor.java</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> com.example.entity.LifeCycleBean;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.BeansException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.config.BeanPostProcessor;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.stereotype.Component;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyBeanPostProcessor</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">BeanPostProcessor</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Object <span class=\"title function_\">postProcessBeforeInitialization</span><span class=\"params\">(Object bean, String beanName)</span> <span class=\"keyword\">throws</span> BeansException &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (bean <span class=\"keyword\">instanceof</span> LifeCycleBean) &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;BeanPostProcessor postProcessBeforeInitialization 被调用...&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> bean;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Object <span class=\"title function_\">postProcessAfterInitialization</span><span class=\"params\">(Object bean, String beanName)</span> <span class=\"keyword\">throws</span> BeansException &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (bean <span class=\"keyword\">instanceof</span> LifeCycleBean) &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;BeanPostProcessor postProcessAfterInitialization 被调用...&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> bean;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>SpringConfig.java</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> com.example.entity.LifeCycleBean;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.*;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"meta\">@ComponentScan(value = &quot;com.example&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SpringConfig</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean(initMethod = &quot;initMethod&quot;, destroyMethod = &quot;destroyMethod&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> LifeCycleBean <span class=\"title function_\">lifeCycleBean</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">LifeCycleBean</span> <span class=\"variable\">lifeCycleBean</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">LifeCycleBean</span>();</span><br><span class=\"line\">        lifeCycleBean.setId(<span class=\"string\">&quot;1001&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> lifeCycleBean;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Test.java</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">AnnotationConfigApplicationContext</span> <span class=\"variable\">applicationContext</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">AnnotationConfigApplicationContext</span>(SpringConfig.class);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">LifeCycleBean</span> <span class=\"variable\">lifeCycleBean</span> <span class=\"operator\">=</span> applicationContext.getBean(LifeCycleBean.class);</span><br><span class=\"line\">    lifeCycleBean.display();</span><br><span class=\"line\"></span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;方法调用完成，容器开始关闭...&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    applicationContext.close();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>运行结果：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">构造函数调用...</span><br><span class=\"line\">属性注入...</span><br><span class=\"line\">BeanNameAware 被调用...</span><br><span class=\"line\">BeanFactoryAware 被调用...</span><br><span class=\"line\">ApplicationContextAware 被调用...</span><br><span class=\"line\">BeanPostProcessor postProcessBeforeInitialization 被调用...</span><br><span class=\"line\">PostConstruct 被调用...</span><br><span class=\"line\">InitializingBean afterPropertiesSet 被调用...</span><br><span class=\"line\">init-method 被调用...</span><br><span class=\"line\">BeanPostProcessor postProcessAfterInitialization 被调用...</span><br><span class=\"line\">方法调用...</span><br><span class=\"line\">方法调用完成，容器开始关闭...</span><br><span class=\"line\">PreDestroy 被调用...</span><br><span class=\"line\">DisposableBean destroy 被调用...</span><br><span class=\"line\">destroy-method 被调用...</span><br></pre></td></tr></table></figure></li>\n</ul>\n","categories":["Spring"],"tags":["后端","Spring"]},{"title":"Spring_组件注册","url":"/Spring/Spring%EF%BC%9A%E7%BB%84%E4%BB%B6%E6%B3%A8%E5%86%8C/","content":"<h2 id=\"Bean\"><a href=\"#Bean\" class=\"headerlink\" title=\"@Bean\"></a>@Bean</h2><h3 id=\"Scope作用域\"><a href=\"#Scope作用域\" class=\"headerlink\" title=\"@Scope作用域\"></a>@Scope作用域</h3><ul>\n<li><code>singleton</code> 单实例(默认)。IOC容器启动会调用方法创建对象放到容器中，每次获取直接从容器中获取</li>\n<li><code>prototype</code> 多实例。IOC容器启动不会调用方法创建对象放在容器中，每次获取时才会调用方法创建对象</li>\n<li><code>request</code> 同一次请求创建一个实例</li>\n<li><code>session</code> 同一个session创建一个实例</li>\n</ul>\n<span id=\"more\"></span>\n\n<h3 id=\"Lazy懒加载\"><a href=\"#Lazy懒加载\" class=\"headerlink\" title=\"@Lazy懒加载\"></a>@Lazy懒加载</h3><ul>\n<li><code>懒加载</code> 单实例Bean情况下，容器启动时不创建对象。第一次获取Bean时才创建对象并初始化</li>\n</ul>\n<h3 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h3><ul>\n<li>SpringConfig.java<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span>  <span class=\"comment\">// 表示该类是配置类</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SpringConfig</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"meta\">@Lazy</span></span><br><span class=\"line\">    <span class=\"comment\">//@Scope(&quot;prototype&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> User <span class=\"title function_\">user</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">User</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"ComponentScan\"><a href=\"#ComponentScan\" class=\"headerlink\" title=\"@ComponentScan\"></a>@ComponentScan</h2><h3 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h3><ul>\n<li><code>@ComponentScan</code> 指定包路径扫描，把**@Controller<strong>、</strong>@Service<strong>、</strong>@Repository<strong>、</strong>@Component**标注的类，实例化到spring容器中</li>\n<li><code>@Filter</code> 是**@ComponentScan**注解类中的子注解(内部注解)，可以指定一些过滤规则</li>\n<li><code>@ComponentScans</code> 是**@ComponentScan<strong>注解的集合，里面可以指定多个</strong>@ComponentScan**注解，扫描多个包路径</li>\n</ul>\n<h3 id=\"重要属性\"><a href=\"#重要属性\" class=\"headerlink\" title=\"重要属性\"></a>重要属性</h3><ul>\n<li><code>value</code> 指定要扫描的包</li>\n<li><code>excludeFilters</code> 指定扫描时按什么规则排除那些组件</li>\n<li><code>includeFilters</code> 指定扫描时按什么规则只需要包含那些组件</li>\n<li><code>useDefaultFilters</code> 使用默认的过滤，全部扫描，设置includeFilters属性时需更改为false</li>\n</ul>\n<h3 id=\"过滤规则\"><a href=\"#过滤规则\" class=\"headerlink\" title=\"过滤规则\"></a>过滤规则</h3><ul>\n<li><code>FilterType.ANNOTATION</code> 使用注解类型</li>\n<li><code>FilterType.ASSIGNABLE_TYPE</code> 使用指定类型</li>\n<li><code>FilterType.ASPECTJ</code> 使用ASPECTJ表达式</li>\n<li><code>FilterType.REGEX</code> 使用正则表达式</li>\n<li><code>FilterType.CUSTOM</code> 使用自定义规则</li>\n</ul>\n<h3 id=\"示例-1\"><a href=\"#示例-1\" class=\"headerlink\" title=\"示例\"></a>示例</h3><ul>\n<li>SpringConfig.java<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> com.example.entity.User;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.example.service.UserService;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.*;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.stereotype.Controller;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"meta\">@ComponentScan(value = &quot;com.example&quot;, excludeFilters = &#123;</span></span><br><span class=\"line\"><span class=\"meta\">        @Filter(type = FilterType.ANNOTATION, classes = &#123;Controller.class&#125;),</span></span><br><span class=\"line\"><span class=\"meta\">        @Filter(type = FilterType.ASSIGNABLE_TYPE, classes = &#123;UserService.class&#125;),</span></span><br><span class=\"line\"><span class=\"meta\">        @Filter(type = FilterType.CUSTOM, classes = &#123;MyTypeFilter.class&#125;)</span></span><br><span class=\"line\"><span class=\"meta\">&#125;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SpringConfig</span> &#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>MyTypeFilter.java<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.core.io.Resource;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.core.type.AnnotationMetadata;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.core.type.ClassMetadata;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.core.type.classreading.MetadataReader;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.core.type.classreading.MetadataReaderFactory;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.core.type.filter.TypeFilter;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 自定义扫描规则</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyTypeFilter</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">TypeFilter</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> metadataReader 读取到的当前正在扫描的类信息</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> metadataReaderFactory 可以获取到其他任何类信息</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@throws</span> IOException</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">match</span><span class=\"params\">(MetadataReader metadataReader, MetadataReaderFactory metadataReaderFactory)</span> <span class=\"keyword\">throws</span> IOException &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 获取当前类注解的信息</span></span><br><span class=\"line\">        <span class=\"type\">AnnotationMetadata</span> <span class=\"variable\">annotationMetadata</span> <span class=\"operator\">=</span> metadataReader.getAnnotationMetadata();</span><br><span class=\"line\">        <span class=\"comment\">// 获取当前正在扫描的类的类信息</span></span><br><span class=\"line\">        <span class=\"type\">ClassMetadata</span> <span class=\"variable\">classMetadata</span> <span class=\"operator\">=</span> metadataReader.getClassMetadata();</span><br><span class=\"line\">        <span class=\"comment\">// 获取当前类资源（类的路径）</span></span><br><span class=\"line\">        <span class=\"type\">Resource</span> <span class=\"variable\">resource</span> <span class=\"operator\">=</span> metadataReader.getResource();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">className</span> <span class=\"operator\">=</span> classMetadata.getClassName();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (className.contains(<span class=\"string\">&quot;UserDao&quot;</span>)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"Import\"><a href=\"#Import\" class=\"headerlink\" title=\"@Import\"></a>@Import</h2><h3 id=\"定义-1\"><a href=\"#定义-1\" class=\"headerlink\" title=\"定义\"></a>定义</h3><ul>\n<li><code>@Import</code> 要导入到容器中的组件，容器中就会自动注册这个组件，id默认是全类名</li>\n<li><code>ImportSelector</code> 返回需要导入的组件的全类名数组</li>\n<li><code>ImportBeanDefinitionRegistrar</code> 手动注册bean到容器中</li>\n</ul>\n<h3 id=\"示例-2\"><a href=\"#示例-2\" class=\"headerlink\" title=\"示例\"></a>示例</h3><ul>\n<li>SpringConfig.java<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> com.example.entity.A;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Configuration;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Import;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"meta\">@Import(&#123;A.class, MyImportSelector.class, MyImportBeanDefinitionRegistrar.class&#125;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SpringConfig</span> &#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>MyImportSelector.java<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.ImportSelector;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.core.type.AnnotationMetadata;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 自定义导入组件</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyImportSelector</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">ImportSelector</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> importingClassMetadata 当前标注<span class=\"doctag\">@Import</span>注解的类的所有注解信息</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@return</span> 导入到容器中的组件全类名</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> String[] selectImports(AnnotationMetadata importingClassMetadata) &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 方法不要返回null值</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">String</span>[]&#123;<span class=\"string\">&quot;com.example.entity.B&quot;</span>&#125;;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>MyImportBeanDefinitionRegistrar.java<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> com.example.entity.C;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.support.BeanDefinitionRegistry;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.support.RootBeanDefinition;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.ImportBeanDefinitionRegistrar;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.core.type.AnnotationMetadata;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 自定义导入注册器</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyImportBeanDefinitionRegistrar</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">ImportBeanDefinitionRegistrar</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> importingClassMetadata 当前类的注解信息</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> registry BeanDefinition注册类</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">registerBeanDefinitions</span><span class=\"params\">(AnnotationMetadata importingClassMetadata, BeanDefinitionRegistry registry)</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 指定Bean定义信息</span></span><br><span class=\"line\">\t\t\t<span class=\"type\">RootBeanDefinition</span> <span class=\"variable\">beanDefinition</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">RootBeanDefinition</span>(C.class);</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 注册一个Bean，指定bean名</span></span><br><span class=\"line\">\t\t\tregistry.registerBeanDefinition(<span class=\"string\">&quot;c&quot;</span>, beanDefinition);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"FactoryBean\"><a href=\"#FactoryBean\" class=\"headerlink\" title=\"FactoryBean\"></a>FactoryBean</h2><h3 id=\"示例-3\"><a href=\"#示例-3\" class=\"headerlink\" title=\"示例\"></a>示例</h3><ul>\n<li>UserFactoryBean.java<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.FactoryBean;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">UserFactoryBean</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">FactoryBean</span>&lt;User&gt; &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> User <span class=\"title function_\">getObject</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">User</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Class&lt;?&gt; getObjectType() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> User.class;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">isSingleton</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>SpringConfig.java<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> com.example.entity.UserFactoryBean;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.*;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SpringConfig</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> UserFactoryBean <span class=\"title function_\">userFactoryBean</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">UserFactoryBean</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>Test.java<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">ApplicationContext</span> <span class=\"variable\">applicationContext</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">AnnotationConfigApplicationContext</span>(SpringConfig.class);</span><br><span class=\"line\">    <span class=\"comment\">// 默认获取的是工厂bean调用getObject创建的对象</span></span><br><span class=\"line\">    <span class=\"type\">Object</span> <span class=\"variable\">user</span> <span class=\"operator\">=</span> applicationContext.getBean(<span class=\"string\">&quot;userFactoryBean&quot;</span>);</span><br><span class=\"line\">    System.out.println(user);<span class=\"comment\">//com.example.entity.User@7a5b769b</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 要获取工厂Bean本身，需要给id前面加一个&amp;</span></span><br><span class=\"line\">    <span class=\"comment\">// BeanFactory.FACTORY_BEAN_PREFIX = &quot;&amp;&quot;</span></span><br><span class=\"line\">    <span class=\"type\">Object</span> <span class=\"variable\">userFactoryBean</span> <span class=\"operator\">=</span> applicationContext.getBean(<span class=\"string\">&quot;&amp;userFactoryBean&quot;</span>);</span><br><span class=\"line\">    System.out.println(userFactoryBean);<span class=\"comment\">//com.example.entity.UserFactoryBean@58496dc</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n","categories":["Spring"],"tags":["后端","Spring"]},{"title":"Spring_组件赋值","url":"/Spring/Spring%EF%BC%9A%E7%BB%84%E4%BB%B6%E8%B5%8B%E5%80%BC/","content":"<h2 id=\"属性赋值\"><a href=\"#属性赋值\" class=\"headerlink\" title=\"属性赋值\"></a>属性赋值</h2><h3 id=\"Value\"><a href=\"#Value\" class=\"headerlink\" title=\"@Value\"></a>@Value</h3><ul>\n<li><code>@Value(“Michael Jackson”)</code> 普通字符</li>\n<li><code>@Value(&quot;#&#123;systemProperties[‘os.name’]&#125;&quot;)</code> 操作系统属性</li>\n<li><code>@Value(&quot;#&#123; T(java.lang.Math).random() * 100 &#125;&quot;)</code> SpEl表达式结果</li>\n<li><code>@Value(&quot;#&#123;domeClass.name&#125;&quot;)</code> 其它Bean属性</li>\n<li><code>@Value(“classpath:com/example/test.txt”)</code> 文件资源</li>\n<li><code>@Value(“https://www.baidu.com/”)</code> 网站资源</li>\n<li><code>@Value(&quot;$&#123;book.name&#125;&quot;)</code> 配置文件属性</li>\n</ul>\n<span id=\"more\"></span>\n\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Value(&quot;#&#123;10-2&#125;&quot;)</span>  </span><br><span class=\"line\"><span class=\"keyword\">private</span> String id;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Value(&quot;张三&quot;)</span> </span><br><span class=\"line\"><span class=\"keyword\">private</span> String username;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Value(&quot;$&#123;user.password&#125;&quot;)</span> </span><br><span class=\"line\"><span class=\"keyword\">private</span> String password;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"PropertySource\"><a href=\"#PropertySource\" class=\"headerlink\" title=\"@PropertySource\"></a>@PropertySource</h3><ul>\n<li><code>@PropertySource</code> 加载配置文件，value属性也可加载多个配置文件。</li>\n<li><code>@PropertySources</code> 加载多个配置文件。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"meta\">@PropertySource(value=&#123;&quot;classpath:/jdbc.properties&quot;&#125;)</span>  </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SpringConfig</span> &#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"自动装配\"><a href=\"#自动装配\" class=\"headerlink\" title=\"自动装配\"></a>自动装配</h2><h3 id=\"Autowired\"><a href=\"#Autowired\" class=\"headerlink\" title=\"@Autowired\"></a>@Autowired</h3><ul>\n<li><code>@Autowired</code> 默认按照类型进行装配。多个相同类型的组件，则按照组件名称进行装配。</li>\n<li><code>@Qualifier</code> 指定组件名称进行装配，配合@Autowired使用。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Autowired(required=false)</span> <span class=\"comment\">// required：是否必须</span></span><br><span class=\"line\"><span class=\"meta\">@Qualifier(&quot;userService&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> UserService userService;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Resource\"><a href=\"#Resource\" class=\"headerlink\" title=\"@Resource\"></a>@Resource</h3><ul>\n<li><code>@Resource</code> 默认按照组件名称进行装配。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Resource</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> UserService userService;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Inject\"><a href=\"#Inject\" class=\"headerlink\" title=\"@Inject\"></a>@Inject</h3><ul>\n<li><code>@Inject</code> 需要导入javax.inject包，和@Autowired的功能一样，但没有required属性。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Inject</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> UserService userService;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Primary\"><a href=\"#Primary\" class=\"headerlink\" title=\"@Primary\"></a>@Primary</h3><ul>\n<li><code>@Primary</code> Spring进行自动装配时，设置默认使用首选的Bean。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> com.example.entity.User;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.*;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SpringConfig</span> &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> User <span class=\"title function_\">user1</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">User</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Primary</span> </span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> User <span class=\"title function_\">user2</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">User</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Aware子接口\"><a href=\"#Aware子接口\" class=\"headerlink\" title=\"Aware子接口\"></a>Aware子接口</h3><ul>\n<li>自定义组件想要使用Spring容器底层的一些组件，需实现Aware的子接口</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.BeansException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.BeanNameAware;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.ApplicationContext;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.ApplicationContextAware;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.EmbeddedValueResolverAware;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.stereotype.Component;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.util.StringValueResolver;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">CustomComponent</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">ApplicationContextAware</span>,</span><br><span class=\"line\">        BeanNameAware,</span><br><span class=\"line\">        EmbeddedValueResolverAware &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> ApplicationContext applicationContext;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setBeanName</span><span class=\"params\">(String name)</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;当前Bean的名字：&quot;</span> + name);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setApplicationContext</span><span class=\"params\">(ApplicationContext applicationContext)</span> <span class=\"keyword\">throws</span> BeansException &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;applicationContext：&quot;</span>+applicationContext);</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.applicationContext = applicationContext;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setEmbeddedValueResolver</span><span class=\"params\">(StringValueResolver resolver)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">resolveStringValue</span> <span class=\"operator\">=</span> resolver.resolveStringValue(<span class=\"string\">&quot;系统：$&#123;os.name&#125;，值：#&#123;10*5&#125;&quot;</span>);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;解析的字符串：&quot;</span>+resolveStringValue);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"环境切换\"><a href=\"#环境切换\" class=\"headerlink\" title=\"环境切换\"></a>环境切换</h2><h3 id=\"Profile\"><a href=\"#Profile\" class=\"headerlink\" title=\"@Profile\"></a>@Profile</h3><ul>\n<li><code>@Profile</code> 指定组件在哪个环境的情况下才能被注册到容器中。</li>\n<li><code>@Profile</code> 激活方式：<ul>\n<li><ol>\n<li>虚拟机参数激活：<code>-Dspring.profiles.active=dev</code></li>\n</ol>\n</li>\n<li><ol start=\"2\">\n<li>代码方式激活： <figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">AnnotationConfigApplicationContext</span> <span class=\"variable\">applicationContext</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">AnnotationConfigApplicationContext</span>();</span><br><span class=\"line\"><span class=\"comment\">// 设置需要激活的环境</span></span><br><span class=\"line\">applicationContext.getEnvironment().setActiveProfiles(<span class=\"string\">&quot;dev&quot;</span>);</span><br><span class=\"line\"><span class=\"comment\">// 注册主配置类</span></span><br><span class=\"line\">applicationContext.register(SpringConfig.class);</span><br><span class=\"line\"><span class=\"comment\">// 启动刷新容器</span></span><br><span class=\"line\">applicationContext.refresh();</span><br></pre></td></tr></table></figure></li>\n</ol>\n</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SpringConfig</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"meta\">@Profile(&quot;prod&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> DruidDataSource <span class=\"title function_\">dataSourceProd</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">DruidDataSource</span> <span class=\"variable\">ds</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">DruidDataSource</span>();</span><br><span class=\"line\">        ds.setDriverClassName(<span class=\"string\">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class=\"line\">        ds.setUrl(<span class=\"string\">&quot;jdbc:mysql://localhost:3306/prod&quot;</span>);</span><br><span class=\"line\">        ds.setUsername(<span class=\"string\">&quot;root&quot;</span>);</span><br><span class=\"line\">        ds.setPassword(<span class=\"string\">&quot;root&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ds;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"meta\">@Profile(&quot;dev&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> DruidDataSource <span class=\"title function_\">dataSourceDev</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">DruidDataSource</span> <span class=\"variable\">ds</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">DruidDataSource</span>();</span><br><span class=\"line\">        ds.setDriverClassName(<span class=\"string\">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class=\"line\">        ds.setUrl(<span class=\"string\">&quot;jdbc:mysql://localhost:3306/dev&quot;</span>);</span><br><span class=\"line\">        ds.setUsername(<span class=\"string\">&quot;root&quot;</span>);</span><br><span class=\"line\">        ds.setPassword(<span class=\"string\">&quot;root&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ds;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Conditional\"><a href=\"#Conditional\" class=\"headerlink\" title=\"@Conditional\"></a>@Conditional</h3><ul>\n<li><code>@ConditionalOnBean</code>\t Spring容器中是否存在对应的实例。</li>\n<li><code>@ConditionalOnMissingBean</code>\t Spring容器中是否不存在对应的实例。</li>\n<li><code>@ConditionalOnClass</code> 类加载器中是否存在对应的类。</li>\n<li><code>@ConditionalOnMissingClass</code> 类加载器中是否不存在对应的类。</li>\n<li><code>@ConditionalOnExpression</code> 判断 SpEL 表达式是否成立。</li>\n<li><code>@ConditionalOnJava</code> 指定Java版本是否符合要求。</li>\n<li><code>@ConditionalOnJndi</code> 在JNDI存在的条件下查找指定的位置。</li>\n<li><code>@ConditionalOnSingleCandidate</code> Spring容器中是否存在且只存在一个对应的实例。</li>\n<li><code>@ConditionalOnProperty</code> 应用环境中的属性是否存在。</li>\n<li><code>@ConditionalOnResource</code> 是否存在指定的资源文件。</li>\n<li><code>@ConditionalOnWebApplication</code> 应用程序是否是Web程序。</li>\n<li><code>@ConditionalOnNotWebApplication</code> 应用程序是否非Web程序。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Spring容器或者所有父容器中需要存在至少一个javax.sql.DataSource类的实例</span></span><br><span class=\"line\"><span class=\"meta\">@ConditionalOnBean(javax.sql.DataSource.class)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Spring当前容器中不存在ErrorController类型的Bean</span></span><br><span class=\"line\"><span class=\"meta\">@ConditionalOnMissingBean(value = ErrorController.class, search = SearchStrategy.CURRENT)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 类加载器中必须存在Configuration这个类</span></span><br><span class=\"line\"><span class=\"meta\">@ConditionalOnClass(Configuration.class)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 类加载器中不能存在GenericObjectPool这个类</span></span><br><span class=\"line\"><span class=\"meta\">@ConditionalOnMissingClass(“GenericObjectPool”)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// server.host配置项的值需要是localhost</span></span><br><span class=\"line\"><span class=\"meta\">@ConditionalOnExpression(“‘$&#123;server.host&#125;’==’localhost’”)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Java版本至少是8</span></span><br><span class=\"line\"><span class=\"meta\">@ConditionalOnJava(JavaVersion.EIGHT)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Spring当前或父容器中必须存在PlatformTransactionManager这个类型的实例，且只有一个实例</span></span><br><span class=\"line\"><span class=\"meta\">@ConditionalOnSingleCandidate(PlatformTransactionManager.class)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 应用程序的环境中必须有spring.aop.auto这项配置，且它的值是true或者环境中不存在</span></span><br><span class=\"line\"><span class=\"meta\">@ConditionalOnProperty(prefix = “spring.aop”, name = “auto”, havingValue = “true”, matchIfMissing = true)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 类加载路径中必须存在mybatis.xml文件</span></span><br><span class=\"line\"><span class=\"meta\">@ConditionalOnResource(resources=”mybatis.xml”)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 必须在Web应用下才会生效</span></span><br><span class=\"line\"><span class=\"meta\">@ConditionalOnWebApplication</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 必须在非Web应用下才会生效</span></span><br><span class=\"line\"><span class=\"meta\">@ConditionalOnNotWebApplication</span></span><br></pre></td></tr></table></figure>\n","categories":["Spring"],"tags":["后端","Spring"]},{"title":"Redis：基本使用","url":"/Redis/Redis%EF%BC%9A%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/","content":"<h2 id=\"Redis常用命令\"><a href=\"#Redis常用命令\" class=\"headerlink\" title=\"Redis常用命令\"></a>Redis常用命令</h2><h3 id=\"Key（键）\"><a href=\"#Key（键）\" class=\"headerlink\" title=\"Key（键）\"></a>Key（键）</h3><ul>\n<li><code>KEYS pattern</code> 查找所有符合给定模式 pattern 的 key</li>\n<li><code>EXISTS key</code> 检查指定 key 是否存在</li>\n<li><code>DEL key [key ...]</code> 删除一个或多个 key</li>\n<li><code>RENAME key newkey</code> 重命名 key</li>\n<li><code>RENAMENX key newkey</code> 当 newkey 不存在时，重命名 key</li>\n<li><code>EXPIRE key seconds</code> 设置 key 生存时间（秒）</li>\n<li><code>PEXPIRE key milliseconds</code> 设置 key 生存时间（毫秒）</li>\n<li><code>EXPIREAT key timestamp</code> 设置 key 生存时间（UNIX 时间戳，秒）</li>\n<li><code>PEXPIREAT key milliseconds-timestamp</code> 设置 key 生存时间（UNIX 时间戳，毫秒）</li>\n<li><code>PERSIST key</code> 移除 key 生存时间，转换成永不过期的 key</li>\n<li><code>TTL key </code> 获取 key 剩余生存时间（秒）</li>\n<li><code>PTTL key </code> 获取 key 剩余生存时间（毫秒）</li>\n<li><code>RANDOMKEY</code> 从当前数据库中随机返回（不删除）一个 key</li>\n<li><code>TYPE key</code> 返回 key 所储存的值的类型</li>\n<li><code>MOVE key db</code> 将当前数据库的 key 移动到给定的数据库 db 当中</li>\n<li><code>SORT key [BY pattern] [LIMIT offset count] [GET pattern [GET pattern ...]] [ASC | DESC] [ALPHA] [STORE destination]</code>返回或保存给定列表、集合、有序集合 key 中经过排序的元素</li>\n</ul>\n<span id=\"more\"></span>\n\n<h3 id=\"String（字符串）\"><a href=\"#String（字符串）\" class=\"headerlink\" title=\"String（字符串）\"></a>String（字符串）</h3><ul>\n<li><code>GET key</code> 获取 key 值</li>\n<li><code>SET key value [EX seconds] [PX milliseconds] [NX|XX]</code> 设置 key 值</li>\n<li><code>SETNX key value</code> 设置 key 值，仅当 key 不存在</li>\n<li><code>MGET key [key ...]</code> 获取一个或多个 key 值</li>\n<li><code>MSET key value [key value ...]</code> 设置一个或多个 key 值</li>\n<li><code>MSETNX key value [key value ...]</code> 设置一个或多个 key 值，仅当所有 key 都不存在</li>\n<li><code>GETRANGE key start end</code> 获取  key 值 start 和 end 索引范围的字符串</li>\n<li><code>SETRANGE key offset value</code> 设置 key 值，根据指定索引位置</li>\n<li><code>GETSET key value</code> 设置 key 值，并返回旧值</li>\n<li><code>SETEX key seconds value</code> 设置 key 值，并设置生存时间（秒）</li>\n<li><code>PSETEX key milliseconds value</code> 设置 key 值，并设置生存时间（毫秒）</li>\n<li><code>APPEND key value</code> 将 value 追加到原来 key 值末尾</li>\n<li><code>STRLEN key</code> 获取 key 值长度</li>\n<li><code>INCR key</code> 将 key 值增1</li>\n<li><code>DECR key</code> 将 key 值减1</li>\n<li><code>INCRBY key increment</code> 将 key 值加上增量 increment</li>\n<li><code>DECRBY key decrement</code> 将 key 值减去减量 decrement</li>\n<li><code>INCRBYFLOAT key increment</code> 将 key 值加上浮点数增量 increment</li>\n</ul>\n<h3 id=\"Hash（哈希表）\"><a href=\"#Hash（哈希表）\" class=\"headerlink\" title=\"Hash（哈希表）\"></a>Hash（哈希表）</h3><ul>\n<li><code>HKEYS key</code> 获取哈希表 key 中所有的 field</li>\n<li><code>HVALS key</code> 获取哈希表 key 中所有的 field 值</li>\n<li><code>HGETALL key</code> 获取哈希表 key 中所有的 field 和 field 值</li>\n<li><code>HEXISTS key field</code> 检查哈希表 key 中的 field 是否存在</li>\n<li><code>HGET key field</code> 获取哈希表 key 中的 field 值</li>\n<li><code>HSET key field value</code> 设置哈希表 key 中的 field</li>\n<li><code>HSETNX key field value</code> 设置哈希表 key 中的 field，仅当 field 不存在</li>\n<li><code>HMGET key field [field ...]</code> 获取哈希表 key 中的一个或多个 field 值</li>\n<li><code>HMSET key field value [field value ...]</code> 设置哈希表 key 中的一个或多个 field</li>\n<li><code>HDEL key field [field ...]</code> 删除哈希表 key 中的一个或多个 field</li>\n<li><code>HLEN key</code> 获取哈希表 key 中 field 的数量</li>\n<li><code>HINCRBY key field increment</code> 将哈希表 key 中的 field 值加上增量 increment</li>\n<li><code>HINCRBYFLOAT key field increment</code> 将哈希表 key 中的 field 值加上浮点数增量 increment</li>\n</ul>\n<h3 id=\"List（列表）\"><a href=\"#List（列表）\" class=\"headerlink\" title=\"List（列表）\"></a>List（列表）</h3><ul>\n<li><code>LRANGE key start stop</code> 获取  key 中 start 和 stop 索引范围的元素</li>\n<li><code>LPUSH key value [value ...]</code> 插入一个或多个值 value 到列表 key 的表头</li>\n<li><code>RPUSH key value [value ...]</code> 插入一个或多个值 value 到列表 key 的表尾</li>\n<li><code>LPUSHX key value</code> 插入 value 值到列表 key 的表头，仅当 key 存在</li>\n<li><code>RPUSHX key value</code> 插入 value 值到列表 key 的表尾，仅当 key 存在</li>\n<li><code>LPOP key</code> 移除并返回列表 key 的头元素</li>\n<li><code>RPOP key</code> 移除并返回列表 key 的尾元素</li>\n<li><code>LREM key count value</code> 移除 value 值，指定重复 value 值数量 count</li>\n<li><code>LLEN key</code> 获取 key 长度</li>\n<li><code>LINDEX key index</code> 获取下标为 index 的元素</li>\n<li><code>LSET key index value</code> 设置下标为 index 的元素</li>\n<li><code>LINSERT key BEFORE|AFTER pivot value</code> 插入 value 值，位于值 pivot 之前或之后</li>\n<li><code>LTRIM key start stop</code> 截取 key 中 start 和 stop 索引范围的元素后，再赋值给 key</li>\n<li><code>RPOPLPUSH source destination</code> 将列表 source 尾元素弹出，再插入到列表 destination 头元素</li>\n</ul>\n<h3 id=\"Set（集合）\"><a href=\"#Set（集合）\" class=\"headerlink\" title=\"Set（集合）\"></a>Set（集合）</h3><ul>\n<li><code>SMEMBERS key</code> 获取集合 key 所有元素</li>\n<li><code>SADD key member [member ...]</code> 加入 member 元素到 key 集合</li>\n<li><code>SREM key member [member ...]</code> 移除集合 key 中的一个或多个 member 元素</li>\n<li><code>SCARD key</code> 获取集合 key 数量</li>\n<li><code>SISMEMBER key member</code> 判断 member 元素是否存在 key 集合</li>\n<li><code>SDIFF key [key ...]</code> 获取第一个 key 集合的差集</li>\n<li><code>SDIFFSTORE destination key [key ...]</code> 获取第一个 key 集合的差集，并赋值给 destination 集合</li>\n<li><code>SINTER key [key ...]</code> 获取第一个 key 集合的交集</li>\n<li><code>SINTERSTORE destination key [key ...]</code> 获取第一个 key 集合的交集，并赋值给 destination 集合</li>\n<li><code>SUNION key [key ...]</code> 获取第一个 key 集合的并集</li>\n<li><code>SUNIONSTORE destination key [key ...]</code> 获取第一个 key 集合的并集，并赋值给 destination 集合</li>\n<li><code>SMOVE source destination member</code> 将 member 元素从 source 集合移动到 destination 集合</li>\n<li><code>SPOP key</code> 移除并返回集合中的一个随机元素</li>\n<li><code>SRANDMEMBER key [count]</code> 获取 count 数量的随机元素</li>\n</ul>\n<h3 id=\"SortedSet（有序集合）\"><a href=\"#SortedSet（有序集合）\" class=\"headerlink\" title=\"SortedSet（有序集合）\"></a>SortedSet（有序集合）</h3><ul>\n<li><code>ZADD key score member [[score member] [score member] ...]</code> 加入一个或多个 member 元素及 score 值到序集中</li>\n<li><code>ZREM key member [member ...]</code> 移除序集 key 中一个或多个 member 元素</li>\n<li><code>ZRANGE key start stop [WITHSCORES]</code> 获取序集 key 中 start 和 stop 区间范围的元素（正序）</li>\n<li><code>ZREVRANGE key start stop [WITHSCORES]</code> 获取序集 key 中 start 和 stop 区间范围的元素（反序）</li>\n<li><code>ZCARD key</code> 获取序集 key 的元素数量</li>\n<li><code>ZCOUNT key min max</code> 获取序集 key 中 score 值在 min 和 max 之间的元素数量</li>\n<li><code>ZSCORE key member</code> 获取序集 key 中 score 值</li>\n<li><code>ZRANK key member</code> 获取序集 key 中 member 下标（正序）</li>\n<li><code>ZREVRANK key member</code> 获取序集 key 中 member 下标（反序）</li>\n<li><code>ZRANGEBYSCORE key min max [WITHSCORES] [LIMIT offset count]</code> 获取序集 key 中 score 值在 min 和 max 之间的元素（正序）</li>\n<li><code>ZREVRANGEBYSCORE key max min [WITHSCORES] [LIMIT offset count]</code> 获取序集 key 中 score 值在 min 和 max 之间的元素（反序）</li>\n<li><code>ZREMRANGEBYSCORE key min max</code> 移除序集 key 中 score 值在 min 和 max 之间的元素</li>\n<li><code>ZREMRANGEBYRANK key start stop</code> 移除序集 key 中 score 值下标在 start 和 stop 之间的元素</li>\n<li><code>ZINCRBY key increment member</code> 将序集 key 中 member 的 score 值加上增量 increment</li>\n</ul>\n<h3 id=\"Connection（连接）\"><a href=\"#Connection（连接）\" class=\"headerlink\" title=\"Connection（连接）\"></a>Connection（连接）</h3><ul>\n<li><code>AUTH password</code> 验证密码，解锁命令</li>\n<li><code>ECHO message</code> 打印 message 信息</li>\n<li><code>PING</code> 用于测试与服务器的连接是否仍然生效</li>\n<li><code>QUIT</code> 请求服务器关闭与当前客户端的连接</li>\n<li><code>SELECT index</code> 切换到指定的数据库</li>\n</ul>\n<h3 id=\"Server（服务器）\"><a href=\"#Server（服务器）\" class=\"headerlink\" title=\"Server（服务器）\"></a>Server（服务器）</h3><ul>\n<li><code>SHUTDOWN</code> 停止客户端</li>\n<li><code>FLUSHDB</code> 清空当前数据库</li>\n<li><code>FLUSHALL</code> 清空所有数据库</li>\n<li><code>DBSIZE</code> 获取当前数据库 key 数量</li>\n<li><code>TIME</code> 获取当前服务器时间</li>\n<li><code>INFO [section]</code> 获取服务器各种信息和统计数值</li>\n<li><code>CONFIG GET parameter</code> 获取服务器配置参数</li>\n<li><code>CONFIG SET parameter value</code> 设置服务器配置参数，动态设置无需重启</li>\n<li><code>SAVE</code> 执行同步保存操作</li>\n<li><code>BGSAVE</code> 执行异步保存操作</li>\n<li><code>BGREWRITEAOF</code> 执行一个 AOF文件 重写操作</li>\n<li><code>SLAVEOF host port</code> 将当前服务器转变为指定服务器的从属服务器</li>\n</ul>\n<h3 id=\"Transaction（事务）\"><a href=\"#Transaction（事务）\" class=\"headerlink\" title=\"Transaction（事务）\"></a>Transaction（事务）</h3><ul>\n<li><code>MULTI</code> 标记一个事务块的开始</li>\n<li><code>EXEC</code> 执行所有事务块内的命令</li>\n<li><code>DISCARD</code> 取消事务，放弃执行事务块内的所有命令</li>\n<li><code>WATCH key [key ...]</code> 监视一个或多个 key ，如果在事务执行之前 key 被其他命令所改动，那么事务将被打断</li>\n<li><code>UNWATCH</code> 取消 WATCH 命令对所有 key 的监视</li>\n</ul>\n<h2 id=\"Redis持久化\"><a href=\"#Redis持久化\" class=\"headerlink\" title=\"Redis持久化\"></a>Redis持久化</h2><h3 id=\"RDB（数据快照）\"><a href=\"#RDB（数据快照）\" class=\"headerlink\" title=\"RDB（数据快照）\"></a>RDB（数据快照）</h3><ul>\n<li>RDB 持久化可以在指定的时间间隔内生成数据集的时间点快照</li>\n</ul>\n<h4 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">################################ SNAPSHOTTING  ################################</span></span><br><span class=\"line\"><span class=\"comment\"># save &quot;&quot;            # 关闭 RDB</span></span><br><span class=\"line\">save 900 1           <span class=\"comment\"># 15 分钟内，至少执行了 1 次写操作</span></span><br><span class=\"line\">save 300 10          <span class=\"comment\"># 5 分钟内，至少执行了 10 次写操作</span></span><br><span class=\"line\">save 60 10000        <span class=\"comment\"># 1 分钟内，至少执行了 10000 次写操作</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 后台备份进程出错时，主进程是否停止写入</span></span><br><span class=\"line\">stop-writes-on-bgsave-error <span class=\"built_in\">yes</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 导出的 RDB 文件是否压缩</span></span><br><span class=\"line\">rdbcompression <span class=\"built_in\">yes</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 导入 RDB 恢复时数据时，是否检验 RDB 的完整性</span></span><br><span class=\"line\">rdbchecksum <span class=\"built_in\">yes</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 指定 RDB 文件名</span></span><br><span class=\"line\">dbfilename dump.rdb</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># RDB 文件存储路径</span></span><br><span class=\"line\"><span class=\"built_in\">dir</span> ./</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"优点\"><a href=\"#优点\" class=\"headerlink\" title=\"优点\"></a>优点</h4><ul>\n<li>RDB是某一时间点的快照，是一个紧凑的单文件，更多用于数据备份。可以按每小时或每日来备份，方便从不同的版本恢复数据。</li>\n<li>单文件容易传输到远程服务做故障恢复。</li>\n<li>RDB可以Fork子进程进行持久化，使Redis可以更好地处理用户请求。</li>\n<li>在大量数据的情况下，RDB相比较于AOF会更快的加载。</li>\n</ul>\n<h4 id=\"缺点\"><a href=\"#缺点\" class=\"headerlink\" title=\"缺点\"></a>缺点</h4><ul>\n<li>如果Redis不及时保存RDB文件，会造成数据的丢失。例如系统突然断电，但未来得及保存数据。即使你设置更多的Save point，也无法保证100%的数据不丢失。</li>\n<li>RDB经常需要fork子进程去执行，但如果再大量数据的情况下，这个fork操作会非常耗CPU资源的。对比AOF虽然也是fork，但是它的数据保存处理是可以控制的，不需要全量保存。</li>\n</ul>\n<h4 id=\"数据快照\"><a href=\"#数据快照\" class=\"headerlink\" title=\"数据快照\"></a>数据快照</h4><ul>\n<li><ol>\n<li>Redis 调用 fork() ，同时拥有父进程和子进程。</li>\n</ol>\n</li>\n<li><ol start=\"2\">\n<li>子进程将数据集写入到一个临时 RDB 文件中。</li>\n</ol>\n</li>\n<li><ol start=\"3\">\n<li>当子进程完成对新 RDB 文件的写入时，Redis 用新 RDB 文件替换原来的 RDB 文件，并删除旧 RDB 文件。</li>\n</ol>\n</li>\n</ul>\n<h3 id=\"AOF（日志追加）\"><a href=\"#AOF（日志追加）\" class=\"headerlink\" title=\"AOF（日志追加）\"></a>AOF（日志追加）</h3><ul>\n<li>AOF 持久化记录服务器执行的所有写操作命令，并在服务器启动时，通过重新执行这些命令来还原数据集</li>\n</ul>\n<h4 id=\"配置-1\"><a href=\"#配置-1\" class=\"headerlink\" title=\"配置\"></a>配置</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">############################## APPEND ONLY MODE ###############################</span></span><br><span class=\"line\"><span class=\"comment\"># 是否开启AOF，默认关闭（no）</span></span><br><span class=\"line\">appendonly <span class=\"built_in\">yes</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 指定 AOF 文件名</span></span><br><span class=\"line\">appendfilename appendonly.aof</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Redis支持三种不同的刷写模式：</span></span><br><span class=\"line\"><span class=\"comment\"># appendfsync always       # 同步持久化，每次发生数据变更会被立即记录到磁盘，性能差但数据完整性比较好</span></span><br><span class=\"line\">appendfsync everysec       <span class=\"comment\"># 异步操作，每秒记录，如果一秒钟内宕机，有数据丢失</span></span><br><span class=\"line\"><span class=\"comment\"># appendfsync no           # 将缓存回写的策略交给系统，linux 默认是30秒将缓冲区的数据回写硬盘的</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 正在导出 RDB 快照的过程中，要不要停止同步 AOF</span></span><br><span class=\"line\">no-appendfsync-on-rewrite no </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># AOF 文件大小比起上次重写时的大小，增长率100%时，重写</span></span><br><span class=\"line\">auto-aof-rewrite-percentage 100</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># AOF 文件至少超过64M时，重写</span></span><br><span class=\"line\">auto-aof-rewrite-min-size 64mb</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"优点-1\"><a href=\"#优点-1\" class=\"headerlink\" title=\"优点\"></a>优点</h4><ul>\n<li>AOF可以设置 完全不同步、每秒同步、每次操作同步，默认是每秒同步。因为AOF是操作指令的追加，所以可以频繁的大量的同步。</li>\n<li>AOF文件是一个值追加日志的文件，即使服务宕机为写入完整的命令，也可以通过redis-check-aof工具修复这些问题。</li>\n<li>如果AOF文件过大，Redis会在后台自动地重写AOF文件。重写后会使AOF文件压缩到最小所需的指令集。</li>\n<li>AOF文件是有序保存数据库的所有写入操作，易读，易分析。即使如果不小心误操作数据库，也很容易找出错误指令，恢复到某个数据节点。例如不小心FLUSHALL，可以非常容易恢复到执行命令之前。</li>\n</ul>\n<h4 id=\"缺点-1\"><a href=\"#缺点-1\" class=\"headerlink\" title=\"缺点\"></a>缺点</h4><ul>\n<li>相同数据量下，AOF的文件通常体积会比RDB大。因为AOF是存指令的，而RDB是所有指令的结果快照。但AOF在日志重写后会压缩一些空间。</li>\n<li>在大量写入和载入的时候，AOF的效率会比RDB低。因为大量写入，AOF会执行更多的保存命令，载入的时候也需要大量的重执行命令来得到最后的结果。RDB对此更有优势。</li>\n</ul>\n<h4 id=\"日志重写\"><a href=\"#日志重写\" class=\"headerlink\" title=\"日志重写\"></a>日志重写</h4><ul>\n<li><ol>\n<li>Redis 执行 fork() ，现在同时拥有父进程和子进程。</li>\n</ol>\n</li>\n<li><ol start=\"2\">\n<li>子进程开始将新 AOF 文件的内容写入到临时文件。</li>\n</ol>\n</li>\n<li><ol start=\"3\">\n<li>对于所有新执行的写入命令，父进程一边将它们累积到一个内存缓存中，一边将这些改动追加到现有 AOF 文件的末尾： 这样即使在重写的中途发生停机，现有的 AOF 文件也还是安全的。</li>\n</ol>\n</li>\n<li><ol start=\"4\">\n<li>当子进程完成重写工作时，它给父进程发送一个信号，父进程在接收到信号之后，将内存缓存中的所有数据追加到新 AOF 文件的末尾。</li>\n</ol>\n</li>\n<li><ol start=\"5\">\n<li>Redis 原子地用新文件替换旧文件，之后所有命令都会直接追加到新 AOF 文件的末尾。</li>\n</ol>\n</li>\n</ul>\n<h3 id=\"RDB与AOF比较\"><a href=\"#RDB与AOF比较\" class=\"headerlink\" title=\"RDB与AOF比较\"></a>RDB与AOF比较</h3><table>\n<thead>\n<tr>\n<th></th>\n<th>RDB</th>\n<th>AOF</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>启动优先级</td>\n<td>低</td>\n<td>高</td>\n</tr>\n<tr>\n<td>体积</td>\n<td>小</td>\n<td>大</td>\n</tr>\n<tr>\n<td>恢复速度</td>\n<td>快</td>\n<td>慢</td>\n</tr>\n<tr>\n<td>数据安全性</td>\n<td>丢数据</td>\n<td>根据策略决定</td>\n</tr>\n<tr>\n<td>轻重</td>\n<td>重</td>\n<td>轻</td>\n</tr>\n</tbody></table>\n<h3 id=\"RDB与AOF选择\"><a href=\"#RDB与AOF选择\" class=\"headerlink\" title=\"RDB与AOF选择\"></a>RDB与AOF选择</h3><ul>\n<li>一般来说，不考虑硬盘大小，最安全的做法是RDB与AOF同时使用，即使AOF损坏无法修复，还可以用RDB来恢复数据。</li>\n<li>如果Redis的数据在你的服务中并不是必要的数据，例如只是当简单的缓存，没有缓存也不会造成缓存雪崩。说明数据的安全可靠性并不是首要考虑范围内，那么单独只使用RDB就可以了。</li>\n<li>不推荐单独使用AOF，因为AOF对于数据的恢复载入来说，比RDB慢。并且Redis官方也说明了，AOF有一个罕见的bug。出了问题无法很好的解决。所以使用AOF的时候，最好还是有RDB作为数据备份。</li>\n</ul>\n<h2 id=\"Redis事务\"><a href=\"#Redis事务\" class=\"headerlink\" title=\"Redis事务\"></a>Redis事务</h2><h3 id=\"三阶段\"><a href=\"#三阶段\" class=\"headerlink\" title=\"三阶段\"></a>三阶段</h3><ul>\n<li><code>开启</code> 以 MULTI 开始一个事务</li>\n<li><code>入队</code> 将多个命令入队到事务中，接到这些命令并不会立即执行，而是放到等待执行的事务队列里面</li>\n<li><code>执行</code> 由 EXEC 命令触发事务</li>\n</ul>\n<h3 id=\"三特性\"><a href=\"#三特性\" class=\"headerlink\" title=\"三特性\"></a>三特性</h3><ul>\n<li><code>单独的隔离操作</code> 事务中的所有命令都会序列化、按顺序地执行。事务在执行的过程中，不会被其他客户端发送来的命令请求所打断。</li>\n<li><code>没有隔离级别的概念</code> 队列中的命令没有提交之前都不会实际的被执行，因为事务提交前任何指令都不会被实际执行，也就不存在 ”事务内的查询要看到事务里的更新，在事务外查询不能看到” 这个问题。</li>\n<li><code>不保证原子性</code> 同一个事务中如果有一条命令执行失败，其后的命令仍然会被执行，没有回滚。</li>\n</ul>\n<h3 id=\"正常执行\"><a href=\"#正常执行\" class=\"headerlink\" title=\"正常执行\"></a>正常执行</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; MULTI</span><br><span class=\"line\">OK</span><br><span class=\"line\"></span><br><span class=\"line\">127.0.0.1:6379&gt; SET k1 v1</span><br><span class=\"line\">QUEUED</span><br><span class=\"line\"></span><br><span class=\"line\">127.0.0.1:6379&gt; SET k2 v2</span><br><span class=\"line\">QUEUED</span><br><span class=\"line\"></span><br><span class=\"line\">127.0.0.1:6379&gt; GET k2</span><br><span class=\"line\">QUEUED</span><br><span class=\"line\"></span><br><span class=\"line\">127.0.0.1:6379&gt; EXEC</span><br><span class=\"line\">1) OK</span><br><span class=\"line\">2) OK</span><br><span class=\"line\">3) <span class=\"string\">&quot;v2&quot;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"放弃事务\"><a href=\"#放弃事务\" class=\"headerlink\" title=\"放弃事务\"></a>放弃事务</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; MULTI</span><br><span class=\"line\">OK</span><br><span class=\"line\"></span><br><span class=\"line\">127.0.0.1:6379&gt; SET k1 v11</span><br><span class=\"line\">QUEUED</span><br><span class=\"line\"></span><br><span class=\"line\">127.0.0.1:6379&gt; DISCARD</span><br><span class=\"line\">OK</span><br><span class=\"line\"></span><br><span class=\"line\">127.0.0.1:6379&gt; GET k1</span><br><span class=\"line\"><span class=\"string\">&quot;v1&quot;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"事务中的错误\"><a href=\"#事务中的错误\" class=\"headerlink\" title=\"事务中的错误\"></a>事务中的错误</h3><h4 id=\"语法错误\"><a href=\"#语法错误\" class=\"headerlink\" title=\"语法错误\"></a>语法错误</h4><ul>\n<li>提交事务前出现错误，则全都不执行</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; MULTI</span><br><span class=\"line\">OK</span><br><span class=\"line\"></span><br><span class=\"line\">127.0.0.1:6379&gt; SET k3 v3</span><br><span class=\"line\">QUEUED</span><br><span class=\"line\"></span><br><span class=\"line\">127.0.0.1:6379&gt; SET k4</span><br><span class=\"line\">(error) ERR wrong number of arguments <span class=\"keyword\">for</span> <span class=\"string\">&#x27;set&#x27;</span> <span class=\"built_in\">command</span></span><br><span class=\"line\"></span><br><span class=\"line\">127.0.0.1:6379&gt; EXEC</span><br><span class=\"line\">(error) EXECABORT Transaction discarded because of previous errors.</span><br><span class=\"line\"></span><br><span class=\"line\">127.0.0.1:6379&gt; GET k3</span><br><span class=\"line\">(nil)</span><br></pre></td></tr></table></figure>\n<h4 id=\"运行错误\"><a href=\"#运行错误\" class=\"headerlink\" title=\"运行错误\"></a>运行错误</h4><ul>\n<li>提交事务后出现错误，则部分执行</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; MULTI</span><br><span class=\"line\">OK</span><br><span class=\"line\"></span><br><span class=\"line\">127.0.0.1:6379&gt; SET k3 v3</span><br><span class=\"line\">QUEUED</span><br><span class=\"line\"></span><br><span class=\"line\">127.0.0.1:6379&gt; INCR k1</span><br><span class=\"line\">QUEUED</span><br><span class=\"line\"></span><br><span class=\"line\">127.0.0.1:6379&gt; EXEC</span><br><span class=\"line\">1) OK</span><br><span class=\"line\">2) (error) ERR value is not an <span class=\"built_in\">integer</span> or out of range</span><br><span class=\"line\"></span><br><span class=\"line\">127.0.0.1:6379&gt; GET k3</span><br><span class=\"line\"><span class=\"string\">&quot;v3&quot;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Watch监控\"><a href=\"#Watch监控\" class=\"headerlink\" title=\"Watch监控\"></a>Watch监控</h3><ul>\n<li>实现 INCR 函数<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 监视 key ，如果在事务执行之前 key 被其他命令所改动，那么事务将被打断</span></span><br><span class=\"line\">WATCH mykey</span><br><span class=\"line\"></span><br><span class=\"line\">val = GET mykey</span><br><span class=\"line\">val = val + 1</span><br><span class=\"line\"></span><br><span class=\"line\">MULTI</span><br><span class=\"line\">SET mykey <span class=\"variable\">$val</span></span><br><span class=\"line\">EXEC</span><br></pre></td></tr></table></figure></li>\n</ul>\n<!-- ## Redis复制\n- 主从复制，主机数据更新后根据配置和策略，自动同步到备机的master/slaver机制，Master以写为主，Slave以读为主。\n\n### 建立复制\n- <span>1. </span>在 `redis.conf` 文件中配置 `slaveof <masterip> <masterport>` 然后指定该配置文件启动Redis生效。\n- <span>2. </span>在 `redis-server` 启动命令后加上 `--slaveof <masterip> <masterport>` 启动生效。\n- <span>3. </span>直接使用 `slaveof <masterip> <masterport>` 命令在从节点执行生效。\n\n### 复制原理\n- Slave 启动成功连接到 Master 后会发送一个 sync 命令\n- Master 接到命令启动后台的存盘进程，同时收集所有接收到的用于修改数据集命令，在后台进程执行完毕之后，Master 将传送整个数据文件到 Slave，以完成一次完全同步\n\nhttps://ningg.top/redis-lesson-8-redis-master-slave/\n【一主二从】\n实时动态复制\n读写分离\n主挂，从不断开连接，不反客为主\n从挂，则断开连接，可redis.conf配置SLAVEOF，重启后还是连接\n\n【薪火相传】\n主-从-从\n\n【反客为主】\n主挂，从1SLAVEOF NO ONE，从2还是连接主，但数据原由是从1 -->\n\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><ul>\n<li><a href=\"https://redis.io/commands\">Redis 官网命令</a></li>\n<li><a href=\"http://doc.redisfans.com/\">Redis 命令参考</a></li>\n<li><a href=\"http://redisdoc.com/\">Redis 命令参考</a></li>\n</ul>\n","categories":["Redis"],"tags":["后端","Redis"]},{"title":"SpringCloud：概述","url":"/SpringCloud/SpringCloud%EF%BC%9A%E6%A6%82%E8%BF%B0/","content":"<h2 id=\"微服务\"><a href=\"#微服务\" class=\"headerlink\" title=\"微服务\"></a>微服务</h2><h3 id=\"微服务是什么\"><a href=\"#微服务是什么\" class=\"headerlink\" title=\"微服务是什么\"></a>微服务是什么</h3><ul>\n<li>微服务化的核心就是将传统的一站式应用，根据业务拆分成一个一个的服务，彻底地去耦合,每一个微服务提供单个业务功能的服务，一个服务做一件事，从技术角度看就是一种小而独立的处理过程，类似进程概念，能够自行单独启动或销毁，拥有自己独立的数据库。</li>\n</ul>\n<span id=\"more\"></span>\n\n<h3 id=\"微服务与微服务架构\"><a href=\"#微服务与微服务架构\" class=\"headerlink\" title=\"微服务与微服务架构\"></a>微服务与微服务架构</h3><ul>\n<li><code>微服务： </code>强调的是服务的大小，它关注的是某一个点，是具体解决某一个问题&#x2F;提供落地对应服务的一个服务应用。</li>\n<li><code>微服务架构：</code>是⼀种架构模式，它提倡将单⼀应⽤程序划分成⼀组⼩的服务，服务之间互相协调、互相配合，为⽤户提供最终价值。每个服务运⾏在其<code>独⽴的进程中</code>，服务与服务间采⽤轻量级的通信机制互相协作（通常是基于HTTP协议RESTful API）。每个服务都围绕着具体业务进⾏构建，并且能够被独⽴的部署到⽣产环境、类⽣产环境等。另外， <code>应当尽量避免统⼀的、集中式的服务管理机制</code>， 对具体的⼀个服务⽽⾔，应根据业务上下⽂，选择合适的语⾔、⼯具对其进⾏构建。</li>\n</ul>\n<h3 id=\"微服务优点\"><a href=\"#微服务优点\" class=\"headerlink\" title=\"微服务优点\"></a>微服务优点</h3><ul>\n<li>每个服务足够内聚，足够小，代码容易理解这样能聚焦一个指定的业务功能或业务需求 </li>\n<li>开发简单、开发效率提高，一个服务可能就是专一的只干一件事。 </li>\n<li>微服务是松耦合的，是有功能意义的服务，无论是在开发阶段或部署阶段都是独立的。 </li>\n<li>微服务能使用不同的语言开发。 </li>\n<li>易于和第三方集成，微服务允许容易且灵活的方式集成自动部署，通过持续集成工具，如Jenkins, Hudson, bamboo 。 </li>\n<li>微服务只是业务逻辑的代码，不会和HTML,CSS 或其他界面组件混合。 </li>\n<li>每个微服务都有自己的存储能力，可以有自己的数据库。也可以有统一数据库。</li>\n</ul>\n<h3 id=\"微服务缺点\"><a href=\"#微服务缺点\" class=\"headerlink\" title=\"微服务缺点\"></a>微服务缺点</h3><ul>\n<li>开发人员要处理分布式系统的复杂性 </li>\n<li>多服务运维难度，随着服务的增加，运维的压力也在增大 </li>\n<li>系统部署依赖 </li>\n<li>服务间通信成本 </li>\n<li>数据一致性 </li>\n<li>系统集成测试 </li>\n<li>性能监控</li>\n</ul>\n<h3 id=\"微服务技术栈\"><a href=\"#微服务技术栈\" class=\"headerlink\" title=\"微服务技术栈\"></a>微服务技术栈</h3><table>\n<thead>\n<tr>\n<th>微服务条目</th>\n<th>落地技术</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>服务开发</td>\n<td>Springboot、Spring、SpringMVC</td>\n</tr>\n<tr>\n<td>服务配置与管理</td>\n<td>Netflix公司的Archaius、阿里的Diamond等</td>\n</tr>\n<tr>\n<td>服务注册与发现</td>\n<td>Eureka、Consul、Zookeeper等</td>\n</tr>\n<tr>\n<td>服务调用</td>\n<td>Rest、RPC、gRPC</td>\n</tr>\n<tr>\n<td>服务熔断器</td>\n<td>Hystrix、Envoy等</td>\n</tr>\n<tr>\n<td>负载均衡</td>\n<td>Ribbon、Nginx等</td>\n</tr>\n<tr>\n<td>服务接口调用</td>\n<td>Feign等</td>\n</tr>\n<tr>\n<td>消息队列</td>\n<td>Kafka、RabbitMQ、ActiveMQ等</td>\n</tr>\n<tr>\n<td>服务配置中心管理</td>\n<td>SpringCloudConfig、Chef等</td>\n</tr>\n<tr>\n<td>服务路由（API网关）</td>\n<td>Zuul等</td>\n</tr>\n<tr>\n<td>服务监控</td>\n<td>Zabbix、Nagios、Metrics、Spectator等</td>\n</tr>\n<tr>\n<td>全链路追踪</td>\n<td>Zipkin，Brave、Dapper等</td>\n</tr>\n<tr>\n<td>服务部署</td>\n<td>Docker、OpenStack、Kubernetes等</td>\n</tr>\n<tr>\n<td>数据流操作开发包</td>\n<td>SpringCloud Stream（封装与Redis、Rabbit、Kafka等发送接收消息）</td>\n</tr>\n<tr>\n<td>事件消息总线</td>\n<td>Spring Cloud Bus</td>\n</tr>\n<tr>\n<td>…</td>\n<td></td>\n</tr>\n</tbody></table>\n<h2 id=\"SpringCloud\"><a href=\"#SpringCloud\" class=\"headerlink\" title=\"SpringCloud\"></a>SpringCloud</h2><h3 id=\"SpringCloud是什么\"><a href=\"#SpringCloud是什么\" class=\"headerlink\" title=\"SpringCloud是什么\"></a>SpringCloud是什么</h3><ul>\n<li>分布式微服务架构下的一站式解决方案，是各个微服务架构落地技术的集合体，俗称微服务全家桶。</li>\n</ul>\n<h3 id=\"SpringCloud与SpringBoot关系\"><a href=\"#SpringCloud与SpringBoot关系\" class=\"headerlink\" title=\"SpringCloud与SpringBoot关系\"></a>SpringCloud与SpringBoot关系</h3><ul>\n<li>SpringBoot专注于快速方便的开发单个个体微服务。</li>\n<li>SpringCloud是关注全局的微服务协调整理治理框架，它将SpringBoot开发的一个个单体微服务整合并管理起来， 为各个微服务之间提供，配置管理、服务发现、断路器、路由、微代理、事件总线、全局锁、决策竞选、分布式会话等等集成服务。 </li>\n<li>SpringBoot可以离开SpringCloud独立使用开发项目，<code>但是SpringCloud离不开SpringBoot</code>，属于依赖的关系。</li>\n<li><code>SpringBoot专注于快速、方便的开发单个微服务个体，SpringCloud关注全局的服务治理框架。</code></li>\n</ul>\n<h3 id=\"SpringCloud与Dubbo区别\"><a href=\"#SpringCloud与Dubbo区别\" class=\"headerlink\" title=\"SpringCloud与Dubbo区别\"></a>SpringCloud与Dubbo区别</h3><p>最大区别：SpringCloud抛弃了Dubbo的RPC通信，采用的是基于HTTP的REST方式</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>Dubbo</th>\n<th>Spring Cloud</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>服务注册中心</td>\n<td>Zookeeper</td>\n<td>Spring Cloud Netflix Eureka</td>\n</tr>\n<tr>\n<td>服务调用方式</td>\n<td>RPC</td>\n<td>REST API</td>\n</tr>\n<tr>\n<td>服务监控</td>\n<td>Dubbo-monitor</td>\n<td>Spring Boot Admin</td>\n</tr>\n<tr>\n<td>断路器</td>\n<td>无</td>\n<td>Spring Cloud Netflix Hystrix</td>\n</tr>\n<tr>\n<td>服务网关</td>\n<td>无</td>\n<td>Spring Cloud Netflix Zuul</td>\n</tr>\n<tr>\n<td>分布式配置</td>\n<td>无</td>\n<td>Spring Cloud Config</td>\n</tr>\n<tr>\n<td>服务跟踪</td>\n<td>无</td>\n<td>Spring Cloud Sleuth</td>\n</tr>\n<tr>\n<td>消息总线</td>\n<td>无</td>\n<td>Spring Cloud Bus</td>\n</tr>\n<tr>\n<td>数据流</td>\n<td>无</td>\n<td>Spring Cloud Stream</td>\n</tr>\n<tr>\n<td>批量任务</td>\n<td>无</td>\n<td>Spring Cloud Task</td>\n</tr>\n<tr>\n<td>…</td>\n<td></td>\n<td></td>\n</tr>\n</tbody></table>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><ul>\n<li><a href=\"https://spring.io/projects/spring-cloud\">SpringCloud 官网</a></li>\n<li><a href=\"https://github.com/spring-cloud\">SpringCloud Git</a></li>\n<li><a href=\"https://springcloud.cc/spring-cloud-dalston.html\">SpringCloud 中文文档</a></li>\n<li><a href=\"https://springcloud.cc/\">SpringCloud 中文网</a></li>\n<li><a href=\"http://springcloud.cn/\">SpringCloud 中国社区</a></li>\n</ul>\n","categories":["SpringCloud"],"tags":["后端","Spring","SpringCloud"]},{"title":"SpringMVC：HelloWorld","url":"/SpringMVC/SpringMVC%EF%BC%9AHelloWorld/","content":"<h2 id=\"SpringMVC概述\"><a href=\"#SpringMVC概述\" class=\"headerlink\" title=\"SpringMVC概述\"></a>SpringMVC概述</h2><ul>\n<li>Spring MVC框架提供了MVC(模型、视图、控制器)架构和用于开发灵活和松散耦合的Web应用程序的组件。 MVC模式导致应用程序的不同方面(输入逻辑，业务逻辑和UI逻辑)分离，同时提供这些元素之间的松散耦合。</li>\n<li><code>模型(Model)</code> 封装了应用程序数据，通常它们将由POJO类组成。</li>\n<li><code>视图(View)</code> 负责渲染模型数据，一般来说它生成客户端浏览器可以解释HTML输出。</li>\n<li><code>控制器(Controller)</code> 负责处理用户请求并构建适当的模型，并将其传递给视图进行渲染。</li>\n</ul>\n<span id=\"more\"></span>\n\n<h2 id=\"HelloWorld示例\"><a href=\"#HelloWorld示例\" class=\"headerlink\" title=\"HelloWorld示例\"></a>HelloWorld示例</h2><p>jar包</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">servlet-api-x.y.z.jar</span><br><span class=\"line\">commons-logging-x.y.z.jar</span><br><span class=\"line\">spring-aop-x.y.z.jar</span><br><span class=\"line\">spring-beans-x.y.z.jar</span><br><span class=\"line\">spring-context-x.y.z.jar</span><br><span class=\"line\">spring-core-x.y.z.jar</span><br><span class=\"line\">spring-expression-x.y.z.jar</span><br><span class=\"line\">spring-webmvc-x.y.z.jar</span><br><span class=\"line\">spring-web-x.y.z.jar</span><br></pre></td></tr></table></figure>\n\n<p>web.xml</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=<span class=\"string\">&quot;1.0&quot;</span> encoding=<span class=\"string\">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">web-app</span> <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">\t<span class=\"attr\">xmlns</span>=<span class=\"string\">&quot;http://java.sun.com/xml/ns/javaee&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">\t<span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">&quot;http://java.sun.com/xml/ns/javaee </span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"tag\">\thttp://java.sun.com/xml/ns/javaee/web-app_2_5.xsd&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">\t<span class=\"attr\">id</span>=<span class=\"string\">&quot;WebApp_ID&quot;</span> <span class=\"attr\">version</span>=<span class=\"string\">&quot;2.5&quot;</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">display-name</span>&gt;</span>Spring MVC Application<span class=\"tag\">&lt;/<span class=\"name\">display-name</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">servlet</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">servlet-name</span>&gt;</span>dispatcherServlet<span class=\"tag\">&lt;/<span class=\"name\">servlet-name</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class=\"tag\">&lt;/<span class=\"name\">servlet-class</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">init-param</span>&gt;</span></span><br><span class=\"line\">         <span class=\"tag\">&lt;<span class=\"name\">param-name</span>&gt;</span>contextConfigLocation<span class=\"tag\">&lt;/<span class=\"name\">param-name</span>&gt;</span></span><br><span class=\"line\">         <span class=\"tag\">&lt;<span class=\"name\">param-value</span>&gt;</span>classpath:spring/springmvc.xml<span class=\"tag\">&lt;/<span class=\"name\">param-value</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">init-param</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">load-on-startup</span>&gt;</span>1<span class=\"tag\">&lt;/<span class=\"name\">load-on-startup</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;/<span class=\"name\">servlet</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">servlet-mapping</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">servlet-name</span>&gt;</span>dispatcherServlet<span class=\"tag\">&lt;/<span class=\"name\">servlet-name</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">url-pattern</span>&gt;</span>/<span class=\"tag\">&lt;/<span class=\"name\">url-pattern</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;/<span class=\"name\">servlet-mapping</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>springmvc.xml</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=<span class=\"string\">&quot;1.0&quot;</span> encoding=<span class=\"string\">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">beans</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">\t<span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">\t<span class=\"attr\">xmlns:context</span>=<span class=\"string\">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">\t<span class=\"attr\">xmlns:mvc</span>=<span class=\"string\">&quot;http://www.springframework.org/schema/mvc&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">\t<span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">&quot;http://www.springframework.org/schema/beans </span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"tag\">\t\thttp://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"tag\">\t\thttp://www.springframework.org/schema/context </span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"tag\">\t\thttp://www.springframework.org/schema/context/spring-context-4.0.xsd</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"tag\">\t\thttp://www.springframework.org/schema/mvc </span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"tag\">\t\thttp://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd&quot;</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">&lt;!-- 配置自动扫描的包 --&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">context:component-scan</span> <span class=\"attr\">base-package</span>=<span class=\"string\">&quot;com.example&quot;</span> /&gt;</span></span><br><span class=\"line\">   </span><br><span class=\"line\">   <span class=\"comment\">&lt;!-- 配置注解驱动 --&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">mvc:annotation-driven</span> /&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">&lt;!-- 配置视图解析器 --&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;prefix&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;/WEB-INF/src/views/&quot;</span> /&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;suffix&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;.jsp&quot;</span> /&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\">   </span><br><span class=\"line\">   <span class=\"comment\">&lt;!-- 配置静态资源 --&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">mvc:default-servlet-handler</span>/&gt;</span></span><br><span class=\"line\">   <span class=\"comment\">&lt;!-- 配置资源映射 --&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">mvc:resources</span> <span class=\"attr\">mapping</span>=<span class=\"string\">&quot;image/**&quot;</span> <span class=\"attr\">location</span>=<span class=\"string\">&quot;/WEB-INF/src/image/&quot;</span> /&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">mvc:resources</span> <span class=\"attr\">mapping</span>=<span class=\"string\">&quot;css/**&quot;</span> <span class=\"attr\">location</span>=<span class=\"string\">&quot;/WEB-INF/src/css/&quot;</span> /&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">mvc:resources</span> <span class=\"attr\">mapping</span>=<span class=\"string\">&quot;js/**&quot;</span> <span class=\"attr\">location</span>=<span class=\"string\">&quot;/WEB-INF/src/js/&quot;</span> /&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">mvc:resources</span> <span class=\"attr\">mapping</span>=<span class=\"string\">&quot;views/**&quot;</span> <span class=\"attr\">location</span>=<span class=\"string\">&quot;/WEB-INF/src/views/&quot;</span> /&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>HelloController.java</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.example.springmvc;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.stereotype.Controller;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RequestMethod;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.ui.Model;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Controller</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">HelloController</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping(&quot;/hello&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">hello</span><span class=\"params\">(Model model)</span> &#123;</span><br><span class=\"line\">        model.addAttribute(<span class=\"string\">&quot;message&quot;</span>, <span class=\"string\">&quot;Hello Spring MVC Framework!&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;hello&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>hello.jsp</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;%@ page contentType=&quot;text/html; charset=UTF-8&quot; %&gt;</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Hello World<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>$&#123;message&#125;<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>","categories":["SpringMVC"],"tags":["后端","Spring","SpringMVC"]},{"title":"SpringMVC：处理模型数据","url":"/SpringMVC/SpringMVC%EF%BC%9A%E5%A4%84%E7%90%86%E6%A8%A1%E5%9E%8B%E6%95%B0%E6%8D%AE/","content":"<h2 id=\"模型数据\"><a href=\"#模型数据\" class=\"headerlink\" title=\"模型数据\"></a>模型数据</h2><ul>\n<li><code>ModelAndView</code> 处理方法返回值类型为ModelAndView时, 方法体即可通过该对象添加模型数据。</li>\n<li><code>Map</code> 、<code>Model</code> 入参为org.springframework.ui.Model、org.springframework.ui.ModelMap 或 java.uti.Map 时，处理方法返回时，Map中的数据会自动添加到模型中。</li>\n<li><code>@SessionAttributes</code> 将模型中的某个属性暂存到HttpSession中，以便多个请求之间可以共享这个属性。</li>\n<li><code>@ModelAttribute</code> 方法入参标注该注解后，入参的对象就会放到数据模型中。</li>\n</ul>\n<span id=\"more\"></span>\n\n<h2 id=\"ModelAndView\"><a href=\"#ModelAndView\" class=\"headerlink\" title=\"ModelAndView\"></a>ModelAndView</h2><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * ModelAndView：既包含视图信息，也包含模型数据信息</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping(&quot;/hello&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> ModelAndView <span class=\"title function_\">hello</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">ModelAndView</span> <span class=\"variable\">modelAndView</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ModelAndView</span>(<span class=\"string\">&quot;success&quot;</span>);</span><br><span class=\"line\">\tmodelAndView.addObject(<span class=\"string\">&quot;message&quot;</span>, <span class=\"string\">&quot;Hello World&quot;</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> modelAndView;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"Map、Model\"><a href=\"#Map、Model\" class=\"headerlink\" title=\"Map、Model\"></a>Map、Model</h2><img src=\"/SpringMVC/SpringMVC%EF%BC%9A%E5%A4%84%E7%90%86%E6%A8%A1%E5%9E%8B%E6%95%B0%E6%8D%AE/Map%E3%80%81Model.png\" class=\"\" title=\"Map、Model\">\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 目标方法可以添加 Map 类型(实际上也可以是 Model 类型或 ModelMap 类型)的参数.</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> map</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping(&quot;/hello&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> String <span class=\"title function_\">hello</span><span class=\"params\">(Map&lt;String, Object&gt; map)</span>&#123;</span><br><span class=\"line\">\tmap.put(<span class=\"string\">&quot;message&quot;</span>, <span class=\"string\">&quot;Hello World&quot;</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"string\">&quot;success&quot;</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"SessionAttributes\"><a href=\"#SessionAttributes\" class=\"headerlink\" title=\"@SessionAttributes\"></a>@SessionAttributes</h2><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@SessionAttributes</span></span></span><br><span class=\"line\"><span class=\"comment\"> * 属性：</span></span><br><span class=\"line\"><span class=\"comment\"> *    value：通过model的属性名存放到request和session里</span></span><br><span class=\"line\"><span class=\"comment\"> *    types：通过model的属性值类型存放到request和session里</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@SessionAttributes(value=&#123;&quot;message&quot;&#125;)</span></span><br><span class=\"line\"><span class=\"meta\">@Controller</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">HelloWorld</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@RequestMapping(&quot;/hello&quot;)</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> String <span class=\"title function_\">hello</span><span class=\"params\">(Map&lt;String, Object&gt; map)</span>&#123;</span><br><span class=\"line\">\t\tmap.put(<span class=\"string\">&quot;message&quot;</span>, <span class=\"string\">&quot;Hello World&quot;</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"string\">&quot;success&quot;</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"ModelAttribute\"><a href=\"#ModelAttribute\" class=\"headerlink\" title=\"@ModelAttribute\"></a>@ModelAttribute</h2><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@ModelAttribute</span></span></span><br><span class=\"line\"><span class=\"comment\"> * 方法上定义：</span></span><br><span class=\"line\"><span class=\"comment\"> *    - Spring MVC在调用目标处理方法前，会先逐个调用在方法级上标注了<span class=\"doctag\">@ModelAttribute</span> 的方法。</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * 方法入参定义：</span></span><br><span class=\"line\"><span class=\"comment\"> *    - 可以从隐含对象中获取隐含的模型数据中获取对象，再将请求参数绑定到对象中，再传入入参</span></span><br><span class=\"line\"><span class=\"comment\"> *    - 将方法入参对象添加到模型中</span></span><br><span class=\"line\"><span class=\"comment\"> *\t</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@ModelAttribute</span>源码流程</span></span><br><span class=\"line\"><span class=\"comment\"> * 1. 调用 <span class=\"doctag\">@ModelAttribute</span> 注解修饰的方法. 实际上把 <span class=\"doctag\">@ModelAttribute</span> 方法中 Map 中的数据放在 implicitModel</span></span><br><span class=\"line\"><span class=\"comment\"> * 2. 解析请求处理器的目标参数, 实际上该目标参数来自于 WebDataBinder 对象的 target 属性</span></span><br><span class=\"line\"><span class=\"comment\"> *    1). 创建 WebDataBinder 对象:</span></span><br><span class=\"line\"><span class=\"comment\"> *        ①. 确定 objectName 属性: </span></span><br><span class=\"line\"><span class=\"comment\"> *            若<span class=\"doctag\">@ModelAttribute</span>的value有设值，则为ModelAttribute的value值，否则为类名(第一个字母小写)</span></span><br><span class=\"line\"><span class=\"comment\"> *        ②. 确定 target 属性:</span></span><br><span class=\"line\"><span class=\"comment\"> *            在 implicitModel 中查找 objectName 对应的属性值，</span></span><br><span class=\"line\"><span class=\"comment\"> *            若存在，则获取，若不存在，则验证当前 Handler 是否使用了 <span class=\"doctag\">@SessionAttributes</span> </span></span><br><span class=\"line\"><span class=\"comment\"> *                若使用, 且存在匹配key则尝试从 Session 中获取，不存在则抛出异常</span></span><br><span class=\"line\"><span class=\"comment\"> *                若未使用, 则通过反射创建了 POJO 对象</span></span><br><span class=\"line\"><span class=\"comment\"> *    2). SpringMVC 把请求参数赋给了 WebDataBinder 的 target 对应的属性.</span></span><br><span class=\"line\"><span class=\"comment\"> *    3). SpringMVC 会把 WebDataBinder 的 objectName 和 target 给到 implicitModel.</span></span><br><span class=\"line\"><span class=\"comment\"> *    4). 把 WebDataBinder 的 target 作为参数传递给目标方法的入参.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@ModelAttribute</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">before</span><span class=\"params\">(Map&lt;String, Object&gt; map)</span> &#123;</span><br><span class=\"line\">\tmap.put(<span class=\"string\">&quot;message&quot;</span>, <span class=\"string\">&quot;Hello World&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping(&quot;/hello&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> String <span class=\"title function_\">hello</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"string\">&quot;success&quot;</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":["SpringMVC"],"tags":["后端","Spring","SpringMVC"]},{"title":"SpringMVC：工作流程","url":"/SpringMVC/SpringMVC%EF%BC%9A%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B/","content":"<h2 id=\"工作流程\"><a href=\"#工作流程\" class=\"headerlink\" title=\"工作流程\"></a>工作流程</h2><img src=\"/SpringMVC/SpringMVC%EF%BC%9A%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B/SpringMVC%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B%E5%9B%BE.png\" class=\"\" title=\"SpringMVC工作流程图\">\n\n<span id=\"more\"></span>\n\n<ul>\n<li>1、用户发送请求至前端控制器DispatcherServlet。</li>\n<li>2、DispatcherServlet收到请求调用HandlerMapping处理器映射器。</li>\n<li>3、处理器映射器找到具体的处理器，生成处理器对象及处理器拦截器(如果有则生成)一并返回给DispatcherServlet。</li>\n<li>4、DispatcherServlet调用HandlerAdapter处理器适配器。</li>\n<li>5、HandlerAdapter经过适配调用具体的处理器(Controller，也叫后端控制器)。</li>\n<li>6、Controller执行完成返回ModelAndView。</li>\n<li>7、HandlerAdapter将controller执行结果ModelAndView返回给DispatcherServlet。</li>\n<li>8、DispatcherServlet将ModelAndView传给ViewReslover视图解析器。</li>\n<li>9、ViewReslover解析后返回具体View。</li>\n<li>10、DispatcherServlet根据View进行渲染视图（即将模型数据填充至视图中）。</li>\n<li>11、DispatcherServlet响应用户。</li>\n</ul>\n","categories":["SpringMVC"],"tags":["后端","Spring","SpringMVC"]},{"title":"SpringMVC：拦截器","url":"/SpringMVC/SpringMVC%EF%BC%9A%E6%8B%A6%E6%88%AA%E5%99%A8/","content":"<h2 id=\"拦截器\"><a href=\"#拦截器\" class=\"headerlink\" title=\"拦截器\"></a>拦截器</h2><p>Spring MVC也可以使用拦截器对请求进行拦截处理，用户可以自定义拦截器来实现特定的功能，自定义的拦截器必须实现HandlerInterceptor接口。</p>\n<ul>\n<li><code>preHandle()</code> 该方法在业务处理器处理请求之前被调用，可以做权限、日志、事务等操作。</li>\n<li><code>postHandle()</code> 该方法在业务处理器处理完请求后，但是渲染视图之前被调用，可以对请求域中的属性或视图做出修改等操作。</li>\n<li><code>afterCompletion()</code> 该方法在渲染视图之后被调用，可以做释放资源等操作。</li>\n</ul>\n<span id=\"more\"></span>\n\n<h2 id=\"使用示例\"><a href=\"#使用示例\" class=\"headerlink\" title=\"使用示例\"></a>使用示例</h2><p>Interceptor.java</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.servlet.HandlerInterceptor;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.servlet.ModelAndView;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">FirstInterceptor</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">HandlerInterceptor</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * 该方法在目标方法之前被调用</span></span><br><span class=\"line\"><span class=\"comment\">\t * 若返回值为 true, 则继续调用后续的拦截器和目标方法.</span></span><br><span class=\"line\"><span class=\"comment\">\t * 若返回值为 false, 则不会再调用后续的拦截器和目标方法</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">preHandle</span><span class=\"params\">(HttpServletRequest request,</span></span><br><span class=\"line\"><span class=\"params\">\t\t\tHttpServletResponse response, Object handler)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;[FirstInterceptor] preHandle&quot;</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * 调用目标方法之后, 但渲染视图之前</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">postHandle</span><span class=\"params\">(HttpServletRequest request,</span></span><br><span class=\"line\"><span class=\"params\">\t\t\tHttpServletResponse response, Object handler,</span></span><br><span class=\"line\"><span class=\"params\">\t\t\tModelAndView modelAndView)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;[FirstInterceptor] postHandle&quot;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * 渲染视图之后被调用</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">afterCompletion</span><span class=\"params\">(HttpServletRequest request,</span></span><br><span class=\"line\"><span class=\"params\">\t\t\tHttpServletResponse response, Object handler, Exception ex)</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;[FirstInterceptor] afterCompletion&quot;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>springmvc.xml</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 配置自定义的拦截器 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">mvc:interceptors</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;com.example.springmvc.interceptors.FirstInterceptor&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">mvc:interceptors</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"拦截范围\"><a href=\"#拦截范围\" class=\"headerlink\" title=\"拦截范围\"></a>拦截范围</h2><figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">mvc:interceptors</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">&lt;!-- 拦截所有请求 --&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;com.example.springmvc.interceptors.FirstInterceptor&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">&lt;!-- 拦截(不)作用的请求 --&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">mvc:interceptor</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">mvc:mapping</span> <span class=\"attr\">path</span>=<span class=\"string\">&quot;/user/*&quot;</span>/&gt;</span> <span class=\"comment\">&lt;!-- 拦截请求 --&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">mvc:exclude-mapping</span> <span class=\"attr\">path</span>=<span class=\"string\">&quot;/user/login.*&quot;</span>/&gt;</span> <span class=\"comment\">&lt;!--不拦截请求 --&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;com.example.springmvc.interceptor.UserLoginInterceptor&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">mvc:interceptor</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">mvc:interceptors</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"执行顺序\"><a href=\"#执行顺序\" class=\"headerlink\" title=\"执行顺序\"></a>执行顺序</h2><ul>\n<li><p>当所有拦截器<code>preHandle</code>返回<code>true</code>时</p>\n<img src=\"/SpringMVC/SpringMVC%EF%BC%9A%E6%8B%A6%E6%88%AA%E5%99%A8/all-pre-true.png\" class=\"\" title=\"all-pre-true\">\n</li>\n<li><p>当<code>C</code>拦截器<code>preHandle</code>返回<code>fasle</code>时</p>\n<img src=\"/SpringMVC/SpringMVC%EF%BC%9A%E6%8B%A6%E6%88%AA%E5%99%A8/c-pre-false.png\" class=\"\" title=\"c-pre-false\"></li>\n</ul>\n","categories":["SpringMVC"],"tags":["后端","Spring","SpringMVC"]},{"title":"SpringMVC：请求参数","url":"/SpringMVC/SpringMVC%EF%BC%9A%E8%AF%B7%E6%B1%82%E5%8F%82%E6%95%B0/","content":"<h2 id=\"RequestParam\"><a href=\"#RequestParam\" class=\"headerlink\" title=\"@RequestParam\"></a>@RequestParam</h2><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@RequestParam</span> 请求参数值</span></span><br><span class=\"line\"><span class=\"comment\"> * 属性：</span></span><br><span class=\"line\"><span class=\"comment\"> * \t  value：参数名</span></span><br><span class=\"line\"><span class=\"comment\"> * \t  required：是否必须，默认true，若不存在将抛出异常</span></span><br><span class=\"line\"><span class=\"comment\"> * \t  defaultValue：默认值</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping(&quot;/getParam&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> String <span class=\"title function_\">getParam</span><span class=\"params\">(<span class=\"meta\">@RequestParam(value=&quot;num&quot;, required=false, defaultValue=&quot;100&quot;)</span> <span class=\"type\">int</span> num)</span>&#123;</span><br><span class=\"line\">\tSystem.out.println(num);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"string\">&quot;success&quot;</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<span id=\"more\"></span>\n\n<h2 id=\"RequestHeader\"><a href=\"#RequestHeader\" class=\"headerlink\" title=\"@RequestHeader\"></a>@RequestHeader</h2><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@RequestHeader</span> 请求报头</span></span><br><span class=\"line\"><span class=\"comment\"> * 属性：</span></span><br><span class=\"line\"><span class=\"comment\"> * \t  value：参数名</span></span><br><span class=\"line\"><span class=\"comment\"> * \t  required：是否必须，默认true，若不存在将抛出异常</span></span><br><span class=\"line\"><span class=\"comment\"> * \t  defaultValue：默认值</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping(&quot;/getHeader&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> String <span class=\"title function_\">getHeader</span><span class=\"params\">(<span class=\"meta\">@RequestHeader(value=&quot;User-Agent&quot;)</span> String userAgent)</span>&#123;</span><br><span class=\"line\">\tSystem.out.println(userAgent);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"string\">&quot;success&quot;</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"CookieValue\"><a href=\"#CookieValue\" class=\"headerlink\" title=\"@CookieValue\"></a>@CookieValue</h2><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@CookieValue</span> 请求Cookie值</span></span><br><span class=\"line\"><span class=\"comment\"> * 属性：</span></span><br><span class=\"line\"><span class=\"comment\"> * \t  value：参数名</span></span><br><span class=\"line\"><span class=\"comment\"> * \t  required：是否必须，默认true，若不存在将抛出异常</span></span><br><span class=\"line\"><span class=\"comment\"> * \t  defaultValue：默认值</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping(&quot;/getCookie&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> String <span class=\"title function_\">getCookie</span><span class=\"params\">(<span class=\"meta\">@CookieValue(value=&quot;JSESSIONID&quot;)</span> String sessionId)</span>&#123;</span><br><span class=\"line\">\tSystem.out.println(sessionId);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"string\">&quot;success&quot;</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"支持Servlet-API类型参数\"><a href=\"#支持Servlet-API类型参数\" class=\"headerlink\" title=\"支持Servlet API类型参数\"></a>支持Servlet API类型参数</h2><ul>\n<li>HttpServletRequest</li>\n<li>HttpServletResponse</li>\n<li>HttpSession</li>\n<li>java.security.Principal</li>\n<li>Locale</li>\n<li>InputStream</li>\n<li>OutputStream</li>\n<li>Reader</li>\n<li>Writer</li>\n</ul>\n","categories":["SpringMVC"],"tags":["后端","Spring","SpringMVC"]},{"title":"SpringMVC：请求映射","url":"/SpringMVC/SpringMVC%EF%BC%9A%E8%AF%B7%E6%B1%82%E6%98%A0%E5%B0%84/","content":"<h2 id=\"RequestMapping\"><a href=\"#RequestMapping\" class=\"headerlink\" title=\"@RequestMapping\"></a>@RequestMapping</h2><ul>\n<li><code>DispatcherServlet</code>截获请求后，通过控制器上<code>@RequestMapping</code>提供的映射信息确定请求所对应的处理方法</li>\n</ul>\n<p>示例：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 类处定义：提供初步的请求映射信息。相对于 WEB 应用的根目录</span></span><br><span class=\"line\"><span class=\"comment\"> * 方法处定义：提供进一步的细分映射信息。相对于类定义处的 URL。</span></span><br><span class=\"line\"><span class=\"comment\"> * \t\t      若类定义处未标注 <span class=\"doctag\">@RequestMapping</span>，则方法处标记的 URL 相对于 WEB 应用的根目录</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * 如：1. 类处定义 + 方法处定义：/api/hello</span></span><br><span class=\"line\"><span class=\"comment\"> * \t  2. 只在方法处定义：/hello</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Controller</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping(&quot;/api&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">HelloWorld</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@RequestMapping(&quot;/hello&quot;)</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> String <span class=\"title function_\">hello</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;hello world&quot;</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"string\">&quot;success&quot;</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<span id=\"more\"></span>\n\n<h2 id=\"参数表达式\"><a href=\"#参数表达式\" class=\"headerlink\" title=\"参数表达式\"></a>参数表达式</h2><p><code>params</code> 和 <code>headers</code> 参数支持简单的表达式</p>\n<ul>\n<li><code>param1</code> 表示请求必须包含名为 param1 的请求参数</li>\n<li><code>!param1</code> 表示请求不能包含名为 param1 的请求参数</li>\n<li><code>param1 != value1</code> 表示请求包含名为 param1 的请求参数，但其值不能为 value1</li>\n<li><code>&#123;“param1=value1”, “param2”&#125;</code> 表示请求必须包含名为 param1 和param2的两个请求参数，且 param1 参数的值必须为 value1</li>\n</ul>\n<p>示例：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 了解: 可以使用 params 和 headers 来更加精确的映射请求. params 和 headers 支持简单的表达式</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping(value=&quot;/hello&quot;, params=&#123;&quot;name&quot;, &quot;age!=10&quot;&#125;, </span></span><br><span class=\"line\"><span class=\"meta\">\t\theaders=&#123;&quot;Content-Type=text/plain;charset=UTF-8&quot;&#125;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> String <span class=\"title function_\">hello</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">\tSystem.out.println(<span class=\"string\">&quot;hello world&quot;</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"string\">&quot;success&quot;</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Ant路径\"><a href=\"#Ant路径\" class=\"headerlink\" title=\"Ant路径\"></a>Ant路径</h2><ul>\n<li><code>?</code> 匹配资源地址中的一个字符</li>\n<li><code>*</code> 匹配资源地址中的任意字符</li>\n<li><code>**</code> 匹配多层资源地址中的任意字符</li>\n</ul>\n<p>示例：</p>\n<blockquote>\n<p><code>/user/createUser??</code>：匹配&#x2F;user&#x2F;createUser<span style=\"color:#E9694B\">aa</span>、&#x2F;user&#x2F;createUser<span style=\"color:#E9694B\">bb</span> 等 URL<br><code>/user/*/createUser</code>：匹配&#x2F;user&#x2F;<span style=\"color:#E9694B\">aaa</span>&#x2F;createUser、&#x2F;user&#x2F;<span style=\"color:#E9694B\">bbb</span>&#x2F;createUser 等 URL<br><code>/user/**/createUser</code>：匹配&#x2F;user&#x2F;createUser、&#x2F;user&#x2F;<span style=\"color:#E9694B\">aaa&#x2F;bbb&#x2F;</span>createUser 等 URL</p>\n</blockquote>\n<h2 id=\"占位符\"><a href=\"#占位符\" class=\"headerlink\" title=\"占位符\"></a>占位符</h2><ul>\n<li>通过 <code>@PathVariable(&quot;xxx&quot;)</code>  可以将 URL 中的 <code>&#123;xxx&#125;</code> 占位符参数绑定到控制器处理方法的入参中。</li>\n</ul>\n<p>示例：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RequestMapping(&quot;/hello/&#123;id&#125;&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> String <span class=\"title function_\">hello</span><span class=\"params\">(<span class=\"meta\">@PathVariable(&quot;id&quot;)</span> Integer id)</span>&#123;</span><br><span class=\"line\">\tSystem.out.println(<span class=\"string\">&quot;hello world&quot;</span> + id);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"string\">&quot;success&quot;</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"REST风格\"><a href=\"#REST风格\" class=\"headerlink\" title=\"REST风格\"></a>REST风格</h2><ul>\n<li><code>REST</code> 即 Representational State Transfer。<code>（资源）表现层状态转化</code>，表示URL定位资源，用HTTP动词（GET，POST，PUT，DELETE）描述操作。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">/user           HTTP POST\t\t新增user</span><br><span class=\"line\">/user/<span class=\"number\">1</span>        HTTP GET\t\t获取id为<span class=\"number\">1</span>的user</span><br><span class=\"line\">/user/<span class=\"number\">1</span>        HTTP DELETE\t\t删除id为<span class=\"number\">1</span>的user</span><br><span class=\"line\">/user/<span class=\"number\">1</span>        HTTP PUT\t\t更新id为<span class=\"number\">1</span>的user</span><br></pre></td></tr></table></figure>\n\n<p>示例：<br>web.xml</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 配置 HiddenHttpMethodFilter：可以把 POST 请求转为 DELETE 或 PUT 请求 --&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 浏览器 form 表单只支持 GET 与 POST 请求，而DELETE、PUT 等并不支持，Spring3.0 添加了一个过滤器，可以将这些请求转换为标准的 http 方法 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">filter</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">filter-name</span>&gt;</span>hiddenHttpMethodFilter<span class=\"tag\">&lt;/<span class=\"name\">filter-name</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">filter-class</span>&gt;</span>org.springframework.web.filter.HiddenHttpMethodFilter<span class=\"tag\">&lt;/<span class=\"name\">filter-class</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">filter</span>&gt;</span>    </span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">filter-mapping</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">filter-name</span>&gt;</span>hiddenHttpMethodFilter<span class=\"tag\">&lt;/<span class=\"name\">filter-name</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">url-pattern</span>&gt;</span>/*<span class=\"tag\">&lt;/<span class=\"name\">url-pattern</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>index.jsp</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=UTF-8&quot; pageEncoding=&quot;UTF-8&quot;%&gt;</span><br><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Spring MVC<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"> \t<span class=\"comment\">&lt;!-- 得到id为1的user --&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;user/1&quot;</span>&gt;</span>Test Rest GET<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">&lt;!-- 新建id为1的user --&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">action</span>=<span class=\"string\">&quot;user&quot;</span> <span class=\"attr\">method</span>=<span class=\"string\">&quot;post&quot;</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;submit&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;Test Rest POST&quot;</span>/&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">&lt;!-- 更新id为1的user --&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">action</span>=<span class=\"string\">&quot;user/1&quot;</span> <span class=\"attr\">method</span>=<span class=\"string\">&quot;post&quot;</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"comment\">&lt;!-- HiddenHttpMethodFilter 源码需要 _method 属性识别请求方式 --&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;hidden&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;_method&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;PUT&quot;</span>/&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;submit&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;Test Rest PUT&quot;</span>/&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">&lt;!-- 删除id为1的user --&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">action</span>=<span class=\"string\">&quot;user/1&quot;</span> <span class=\"attr\">method</span>=<span class=\"string\">&quot;post&quot;</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;hidden&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;_method&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;DELETE&quot;</span>/&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;submit&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;Test Rest DELETE&quot;</span>/&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>controller.java</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.stereotype.Controller;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.PathVariable;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RequestMethod;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Controller</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping(path = &quot;/user&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">UserController</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@RequestMapping(value=&quot;&quot;, method=RequestMethod.POST)</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> String <span class=\"title function_\">create</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;新建user&quot;</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"string\">&quot;success&quot;</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@RequestMapping(value=&quot;/&#123;id&#125;&quot;, method=RequestMethod.GET)</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> String <span class=\"title function_\">show</span><span class=\"params\">(<span class=\"meta\">@PathVariable(&quot;id&quot;)</span> Integer id)</span> &#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;查看id为：&quot;</span> + id + <span class=\"string\">&quot;的user&quot;</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"string\">&quot;success&quot;</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"meta\">@RequestMapping(value=&quot;/&#123;id&#125;&quot;, method=RequestMethod.PUT)</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> String <span class=\"title function_\">update</span><span class=\"params\">(<span class=\"meta\">@PathVariable(&quot;id&quot;)</span> Integer id)</span> &#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;更新id为：&quot;</span> + id + <span class=\"string\">&quot;的user&quot;</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"string\">&quot;success&quot;</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"meta\">@RequestMapping(value=&quot;/&#123;id&#125;&quot;, method=RequestMethod.DELETE)</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> String <span class=\"title function_\">destroy</span><span class=\"params\">(<span class=\"meta\">@PathVariable(&quot;id&quot;)</span> Integer id)</span> &#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;删除id为：&quot;</span> + id + <span class=\"string\">&quot;的user&quot;</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"string\">&quot;success&quot;</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":["SpringMVC"],"tags":["后端","Spring","SpringMVC"]},{"title":"UML类图","url":"/UML/UML%E7%B1%BB%E5%9B%BE/","content":"<style>\n[title=\"类之间的关系\"] {\n    width: 360px;\n}\n</style>\n\n<h2 id=\"UML图分类\"><a href=\"#UML图分类\" class=\"headerlink\" title=\"UML图分类\"></a>UML图分类</h2><ul>\n<li>用例图(use case)</li>\n<li>静态结构图：类图、对象图、包图、组件图、部署图</li>\n<li>动态行为图：交互图(时序图与协作图)、状态图、活动图</li>\n</ul>\n<span id=\"more\"></span>\n\n<h2 id=\"UML类图\"><a href=\"#UML类图\" class=\"headerlink\" title=\"UML类图\"></a>UML类图</h2><ul>\n<li>用于描述系统中的类(对象)本身的组成和类(对象)之间的各种静态关系</li>\n</ul>\n<h3 id=\"属性、方法表达式\"><a href=\"#属性、方法表达式\" class=\"headerlink\" title=\"属性、方法表达式\"></a>属性、方法表达式</h3><ul>\n<li>属性：<code>可见性 名称:类型 [ = 缺省值 ]</code></li>\n<li>方法：<code>可见性 名称(参数列表) [ : 返回类型]</code></li>\n</ul>\n<p>可见性说明：<code>- private</code>、<code>～ default</code>、<code># protected</code>、<code>+ public</code></p>\n<h3 id=\"类之间的关系\"><a href=\"#类之间的关系\" class=\"headerlink\" title=\"类之间的关系\"></a>类之间的关系</h3><img src=\"/UML/UML%E7%B1%BB%E5%9B%BE/%E7%B1%BB%E4%B9%8B%E9%97%B4%E7%9A%84%E5%85%B3%E7%B3%BB.png\" class=\"\" title=\"类之间的关系\">\n\n<h2 id=\"依赖关系-Dependence\"><a href=\"#依赖关系-Dependence\" class=\"headerlink\" title=\"依赖关系(Dependence)\"></a>依赖关系(Dependence)</h2><img src=\"/UML/UML%E7%B1%BB%E5%9B%BE/%E4%BE%9D%E8%B5%96%E5%85%B3%E7%B3%BB.png\" class=\"\" title=\"依赖关系\">\n\n<h2 id=\"关联关系-Association\"><a href=\"#关联关系-Association\" class=\"headerlink\" title=\"关联关系(Association)\"></a>关联关系(Association)</h2><img src=\"/UML/UML%E7%B1%BB%E5%9B%BE/%E5%85%B3%E8%81%94%E5%85%B3%E7%B3%BB.png\" class=\"\" title=\"关联关系\">\n\n<h2 id=\"泛化关系-Generalization\"><a href=\"#泛化关系-Generalization\" class=\"headerlink\" title=\"泛化关系(Generalization)\"></a>泛化关系(Generalization)</h2><img src=\"/UML/UML%E7%B1%BB%E5%9B%BE/%E6%B3%9B%E5%8C%96%E5%85%B3%E7%B3%BB.png\" class=\"\" title=\"泛化关系\">\n\n<h2 id=\"实现关系-Implementation\"><a href=\"#实现关系-Implementation\" class=\"headerlink\" title=\"实现关系(Implementation)\"></a>实现关系(Implementation)</h2><img src=\"/UML/UML%E7%B1%BB%E5%9B%BE/%E5%AE%9E%E7%8E%B0%E5%85%B3%E7%B3%BB.png\" class=\"\" title=\"实现关系\">\n\n<h2 id=\"聚合关系-Aggregation\"><a href=\"#聚合关系-Aggregation\" class=\"headerlink\" title=\"聚合关系(Aggregation)\"></a>聚合关系(Aggregation)</h2><img src=\"/UML/UML%E7%B1%BB%E5%9B%BE/%E8%81%9A%E5%90%88%E5%85%B3%E7%B3%BB.png\" class=\"\" title=\"聚合关系\">\n\n<h2 id=\"组合关系-Composition\"><a href=\"#组合关系-Composition\" class=\"headerlink\" title=\"组合关系(Composition)\"></a>组合关系(Composition)</h2><img src=\"/UML/UML%E7%B1%BB%E5%9B%BE/%E7%BB%84%E5%90%88%E5%85%B3%E7%B3%BB.png\" class=\"\" title=\"组合关系\">\n\n","categories":["UML"],"tags":["后端","UML"]},{"title":"分布式_事务：解决方案","url":"/%E5%88%86%E5%B8%83%E5%BC%8F/%E5%88%86%E5%B8%83%E5%BC%8F_%E4%BA%8B%E5%8A%A1%EF%BC%9A%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/","content":"<h2 id=\"CAP理论\"><a href=\"#CAP理论\" class=\"headerlink\" title=\"CAP理论\"></a>CAP理论</h2><ul>\n<li><p><code>一致性 (Consistency)</code> 执行操作后数据库中的数据保持一致。</p>\n</li>\n<li><p><code>可用性 (Availability)</code> 系统始终处于打开状态（服务保证可用性），没有停机时间。</p>\n</li>\n<li><p><code>分区容错性 (Partition tolerance)</code> 即使服务器之间的通信不可靠，系统也可以继续运行。</p>\n</li>\n<li><p><code>CA</code> 单站点群集，因此所有节点始终保持联系。发生分区时，系统将阻塞。</p>\n</li>\n<li><p><code>CP</code> 某些数据可能无法访问，但其余数据仍然一致&#x2F;准确。</p>\n</li>\n<li><p><code>AP</code> 分区下系统仍然可用，但是返回的某些数据可能不正确。</p>\n</li>\n</ul>\n<span id=\"more\"></span>\n\n<img src=\"/%E5%88%86%E5%B8%83%E5%BC%8F/%E5%88%86%E5%B8%83%E5%BC%8F_%E4%BA%8B%E5%8A%A1%EF%BC%9A%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/CAP.png\" class=\"\" title=\"CAP\">\n\n<h2 id=\"BASE理论\"><a href=\"#BASE理论\" class=\"headerlink\" title=\"BASE理论\"></a>BASE理论</h2><ul>\n<li><code>基本可用 (Basically Available)</code> 分布式系统在出现故障时，允许损失部分可用功能，保证核心功能可用。</li>\n<li><code>软状态 (Soft state)</code> 允许系统中存在<strong>中间状态</strong>，这个状态不影响系统可用性，这里指的是CAP中的不一致。</li>\n<li><code>最终一致 (Eventually consistent)</code> 最终一致是指经过一段时间后，所有节点数据都将会达到一致。</li>\n</ul>\n<h2 id=\"XA-JTA方案\"><a href=\"#XA-JTA方案\" class=\"headerlink\" title=\"XA&#x2F;JTA方案\"></a>XA&#x2F;JTA方案</h2><h2 id=\"TCC两阶段补偿型方案\"><a href=\"#TCC两阶段补偿型方案\" class=\"headerlink\" title=\"TCC两阶段补偿型方案\"></a>TCC两阶段补偿型方案</h2><img src=\"/%E5%88%86%E5%B8%83%E5%BC%8F/%E5%88%86%E5%B8%83%E5%BC%8F_%E4%BA%8B%E5%8A%A1%EF%BC%9A%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/TCC%E4%B8%A4%E9%98%B6%E6%AE%B5%E8%A1%A5%E5%81%BF%E5%9E%8B%E6%96%B9%E6%A1%88.png\" class=\"\" title=\"TCC两阶段补偿型方案\">\n\n\n<h2 id=\"最大努力通知方案\"><a href=\"#最大努力通知方案\" class=\"headerlink\" title=\"最大努力通知方案\"></a>最大努力通知方案</h2><ul>\n<li>最简单的一种柔性事务，适用于一些最终一致性时间敏感度低的业务，且被动方处理结果不影响主动方的处理结果。典型的使用场景：如银行通知、商户通知等<img src=\"/%E5%88%86%E5%B8%83%E5%BC%8F/%E5%88%86%E5%B8%83%E5%BC%8F_%E4%BA%8B%E5%8A%A1%EF%BC%9A%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/%E6%9C%80%E5%A4%A7%E5%8A%AA%E5%8A%9B%E9%80%9A%E7%9F%A5%E6%96%B9%E6%A1%88.png\" class=\"\" title=\"最大努力通知方案\"></li>\n</ul>\n<h2 id=\"可靠消息最终一致性方案\"><a href=\"#可靠消息最终一致性方案\" class=\"headerlink\" title=\"可靠消息最终一致性方案\"></a>可靠消息最终一致性方案</h2><h3 id=\"基于普通消息队列中间件\"><a href=\"#基于普通消息队列中间件\" class=\"headerlink\" title=\"基于普通消息队列中间件\"></a>基于普通消息队列中间件</h3><img src=\"/%E5%88%86%E5%B8%83%E5%BC%8F/%E5%88%86%E5%B8%83%E5%BC%8F_%E4%BA%8B%E5%8A%A1%EF%BC%9A%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/%E5%8F%AF%E9%9D%A0%E6%B6%88%E6%81%AF%E6%9C%80%E7%BB%88%E4%B8%80%E8%87%B4%E6%80%A7%E6%96%B9%E6%A1%88_%E6%99%AE%E9%80%9A%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97.png\" class=\"\" title=\"基于普通消息队列中间件\">\n\n<h3 id=\"基于Rocket-MQ\"><a href=\"#基于Rocket-MQ\" class=\"headerlink\" title=\"基于Rocket MQ\"></a>基于Rocket MQ</h3><img src=\"/%E5%88%86%E5%B8%83%E5%BC%8F/%E5%88%86%E5%B8%83%E5%BC%8F_%E4%BA%8B%E5%8A%A1%EF%BC%9A%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/%E5%8F%AF%E9%9D%A0%E6%B6%88%E6%81%AF%E6%9C%80%E7%BB%88%E4%B8%80%E8%87%B4%E6%80%A7%E6%96%B9%E6%A1%88_RocketMQ.png\" class=\"\" title=\"基于Rocket MQ\">","categories":["分布式"],"tags":["后端","分布式"]},{"title":"设计模式：单利模式","url":"/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%9A%E5%8D%95%E5%88%A9%E6%A8%A1%E5%BC%8F/","content":"<h2 id=\"懒汉模式，线程不安全\"><a href=\"#懒汉模式，线程不安全\" class=\"headerlink\" title=\"懒汉模式，线程不安全\"></a>懒汉模式，线程不安全</h2><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 懒汉模式</span></span><br><span class=\"line\"><span class=\"comment\"> * </span></span><br><span class=\"line\"><span class=\"comment\"> * 是否 Lazy 初始化：是</span></span><br><span class=\"line\"><span class=\"comment\"> * 是否多线程安全：否</span></span><br><span class=\"line\"><span class=\"comment\"> * </span></span><br><span class=\"line\"><span class=\"comment\"> * 描述：这种方式 lazy loading 很明显，但是致命的是在多线程不能正常工作。</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Singleton</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Singleton instance;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"title function_\">Singleton</span><span class=\"params\">()</span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Singleton <span class=\"title function_\">getInstance</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(instance == <span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">            instance = <span class=\"keyword\">new</span> <span class=\"title class_\">Singleton</span>();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> instance;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<span id=\"more\"></span>\n\n<h2 id=\"懒汉模式，线程安全\"><a href=\"#懒汉模式，线程安全\" class=\"headerlink\" title=\"懒汉模式，线程安全\"></a>懒汉模式，线程安全</h2><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 懒汉模式   </span></span><br><span class=\"line\"><span class=\"comment\"> * </span></span><br><span class=\"line\"><span class=\"comment\"> * 是否 Lazy 初始化：是</span></span><br><span class=\"line\"><span class=\"comment\"> * 是否多线程安全：是</span></span><br><span class=\"line\"><span class=\"comment\"> * </span></span><br><span class=\"line\"><span class=\"comment\"> * 描述：这种方式具备很好的 lazy loading，能够在多线程中很好的工作，但是效率很低，99% 情况下不需要同步。</span></span><br><span class=\"line\"><span class=\"comment\"> * </span></span><br><span class=\"line\"><span class=\"comment\"> * 优点：第一次调用才初始化，避免内存浪费。</span></span><br><span class=\"line\"><span class=\"comment\"> * 缺点：必须加锁 synchronized 才能保证单例，但加锁会影响效率。</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Singleton</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Singleton instance;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"title function_\">Singleton</span><span class=\"params\">()</span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">synchronized</span> Singleton <span class=\"title function_\">getInstance</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(instance == <span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">            instance = <span class=\"keyword\">new</span> <span class=\"title class_\">Singleton</span>();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> instance;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"懒汉模式-双重校验锁-，线程安全\"><a href=\"#懒汉模式-双重校验锁-，线程安全\" class=\"headerlink\" title=\"懒汉模式 (双重校验锁)，线程安全\"></a>懒汉模式 (双重校验锁)，线程安全</h2><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 懒汉模式（双检锁/双重校验锁）  </span></span><br><span class=\"line\"><span class=\"comment\"> * </span></span><br><span class=\"line\"><span class=\"comment\"> * 是否 Lazy 初始化：是</span></span><br><span class=\"line\"><span class=\"comment\"> * 是否多线程安全：是</span></span><br><span class=\"line\"><span class=\"comment\"> * </span></span><br><span class=\"line\"><span class=\"comment\"> * 描述：这种方式采用双锁机制，安全且在多线程情况下能保持高性能。</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Singleton</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">volatile</span> <span class=\"keyword\">static</span> Singleton instance;  </span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"title function_\">Singleton</span> <span class=\"params\">()</span>&#123;&#125;  </span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Singleton <span class=\"title function_\">getInstance</span><span class=\"params\">()</span> &#123;  </span><br><span class=\"line\">        <span class=\"keyword\">if</span> (instance == <span class=\"literal\">null</span>) &#123;  </span><br><span class=\"line\">            <span class=\"keyword\">synchronized</span> (Singleton.class) &#123;  </span><br><span class=\"line\">                <span class=\"keyword\">if</span> (instance == <span class=\"literal\">null</span>) &#123;  </span><br><span class=\"line\">                    instance = <span class=\"keyword\">new</span> <span class=\"title class_\">Singleton</span>();  </span><br><span class=\"line\">                &#125;  </span><br><span class=\"line\">            &#125;  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> instance;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"饿汉模式-实例公有化-，线程安全\"><a href=\"#饿汉模式-实例公有化-，线程安全\" class=\"headerlink\" title=\"饿汉模式 (实例公有化)，线程安全\"></a>饿汉模式 (实例公有化)，线程安全</h2><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 饿汉模式</span></span><br><span class=\"line\"><span class=\"comment\"> * </span></span><br><span class=\"line\"><span class=\"comment\"> * 是否 Lazy 初始化：否</span></span><br><span class=\"line\"><span class=\"comment\"> * 是否多线程安全：是</span></span><br><span class=\"line\"><span class=\"comment\"> * </span></span><br><span class=\"line\"><span class=\"comment\"> * 描述：写法比较简洁</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Singleton</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">Singleton</span> <span class=\"variable\">instance</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Singleton</span>(); </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"title function_\">Singleton</span> <span class=\"params\">()</span>&#123;&#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"饿汉模式-实例私有化-，线程安全\"><a href=\"#饿汉模式-实例私有化-，线程安全\" class=\"headerlink\" title=\"饿汉模式 (实例私有化)，线程安全\"></a>饿汉模式 (实例私有化)，线程安全</h2><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 饿汉模式</span></span><br><span class=\"line\"><span class=\"comment\"> * </span></span><br><span class=\"line\"><span class=\"comment\"> * 是否 Lazy 初始化：否</span></span><br><span class=\"line\"><span class=\"comment\"> * 是否多线程安全：是</span></span><br><span class=\"line\"><span class=\"comment\"> * </span></span><br><span class=\"line\"><span class=\"comment\"> * 描述：这种方式比较常用，但容易产生垃圾对象。</span></span><br><span class=\"line\"><span class=\"comment\"> * </span></span><br><span class=\"line\"><span class=\"comment\"> * 优点：没有加锁，执行效率会提高。</span></span><br><span class=\"line\"><span class=\"comment\"> * 缺点：类加载时就初始化，浪费内存。</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Singleton</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"type\">Singleton</span> <span class=\"variable\">instance</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Singleton</span>(); </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"title function_\">Singleton</span> <span class=\"params\">()</span>&#123;&#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Singleton <span class=\"title function_\">getInstance</span><span class=\"params\">()</span> &#123;  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> instance;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"饿汉模式-静态代码块-，线程安全\"><a href=\"#饿汉模式-静态代码块-，线程安全\" class=\"headerlink\" title=\"饿汉模式 (静态代码块)，线程安全\"></a>饿汉模式 (静态代码块)，线程安全</h2><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 饿汉模式（变种）</span></span><br><span class=\"line\"><span class=\"comment\"> * </span></span><br><span class=\"line\"><span class=\"comment\"> * 是否 Lazy 初始化：否</span></span><br><span class=\"line\"><span class=\"comment\"> * 是否多线程安全：是</span></span><br><span class=\"line\"><span class=\"comment\"> * </span></span><br><span class=\"line\"><span class=\"comment\"> * 描述：和上一种饿汉模式差不多，都是在类初始化即实例化instance。</span></span><br><span class=\"line\"><span class=\"comment\"> * </span></span><br><span class=\"line\"><span class=\"comment\"> * 优点：没有加锁，执行效率会提高。</span></span><br><span class=\"line\"><span class=\"comment\"> * 缺点：类加载时就初始化，浪费内存。</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Singleton</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Singleton instance;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">        instance = <span class=\"keyword\">new</span> <span class=\"title class_\">Singleton</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"title function_\">Singleton</span> <span class=\"params\">()</span>&#123;&#125; </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Singleton <span class=\"title function_\">getInstance</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> instance;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"静态内部类，线程安全\"><a href=\"#静态内部类，线程安全\" class=\"headerlink\" title=\"静态内部类，线程安全\"></a>静态内部类，线程安全</h2><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 静态内部类</span></span><br><span class=\"line\"><span class=\"comment\"> * </span></span><br><span class=\"line\"><span class=\"comment\"> * 是否 Lazy 初始化：是</span></span><br><span class=\"line\"><span class=\"comment\"> * 是否多线程安全：是</span></span><br><span class=\"line\"><span class=\"comment\"> * </span></span><br><span class=\"line\"><span class=\"comment\"> * 描述：这种方式能达到双检锁方式一样的功效，但实现更简单。</span></span><br><span class=\"line\"><span class=\"comment\"> *          对静态域使用延迟初始化，应使用这种方式而不是双检锁方式。</span></span><br><span class=\"line\"><span class=\"comment\"> *          这种方式只适用于静态域的情况，双检锁方式可在实例域需要延迟初始化时使用。</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Singleton</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SingletonHolder</span> &#123;  </span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">Singleton</span> <span class=\"variable\">INSTANCE</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Singleton</span>();  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"title function_\">Singleton</span> <span class=\"params\">()</span>&#123;&#125;  </span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Singleton <span class=\"title function_\">getInstance</span><span class=\"params\">()</span> &#123;  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> SingletonHolder.INSTANCE;  </span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"CAS方式，线程安全\"><a href=\"#CAS方式，线程安全\" class=\"headerlink\" title=\"CAS方式，线程安全\"></a>CAS方式，线程安全</h2><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * CAS方式</span></span><br><span class=\"line\"><span class=\"comment\"> * </span></span><br><span class=\"line\"><span class=\"comment\"> * 是否 Lazy 初始化：是</span></span><br><span class=\"line\"><span class=\"comment\"> * 是否多线程安全：是</span></span><br><span class=\"line\"><span class=\"comment\"> * </span></span><br><span class=\"line\"><span class=\"comment\"> * 描述：通过自旋 + CAS方式无锁方式实现</span></span><br><span class=\"line\"><span class=\"comment\"> * </span></span><br><span class=\"line\"><span class=\"comment\"> * 优点：不需要使用传统的锁机制来保证线程安全。</span></span><br><span class=\"line\"><span class=\"comment\"> * 缺点：自旋CAS如果长时间不成功，会给CPU带来非常大的执行开销。</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.atomic.AtomicReference;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Singleton</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> AtomicReference&lt;Singleton&gt; INSTANCE = <span class=\"keyword\">new</span> <span class=\"title class_\">AtomicReference</span>&lt;Singleton&gt; ();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"title function_\">Singleton</span><span class=\"params\">()</span> &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Singleton <span class=\"title function_\">getInstance</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(;;) &#123;</span><br><span class=\"line\">            <span class=\"type\">Singleton</span> <span class=\"variable\">instance</span> <span class=\"operator\">=</span> INSTANCE.get();</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(instance != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> instance;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            </span><br><span class=\"line\">            instance = <span class=\"keyword\">new</span> <span class=\"title class_\">Singleton</span>();</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(INSTANCE.compareAndSet(<span class=\"literal\">null</span>, instance)) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> instance;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"枚举，线程安全\"><a href=\"#枚举，线程安全\" class=\"headerlink\" title=\"枚举，线程安全\"></a>枚举，线程安全</h2><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 枚举</span></span><br><span class=\"line\"><span class=\"comment\"> * </span></span><br><span class=\"line\"><span class=\"comment\"> * 是否 Lazy 初始化：否</span></span><br><span class=\"line\"><span class=\"comment\"> * 是否多线程安全：是</span></span><br><span class=\"line\"><span class=\"comment\"> * </span></span><br><span class=\"line\"><span class=\"comment\"> * 描述：这种实现方式还没有被广泛采用，但这是实现单例模式的最佳方法。</span></span><br><span class=\"line\"><span class=\"comment\"> *          它更简洁，自动支持序列化机制，绝对防止多次实例化。</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">enum</span> <span class=\"title class_\">Singleton</span> &#123;  </span><br><span class=\"line\">    </span><br><span class=\"line\">    INSTANCE;  </span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><ul>\n<li><a href=\"http://24suixinsuoyu.com/2019/03/09/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%B3%BB%E5%88%97%EF%BC%88%E4%B8%80%EF%BC%89%EF%BC%9A%E8%AF%A6%E8%A7%A3%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F%E7%9A%84%E5%8D%81%E7%A7%8D%E5%86%99%E6%B3%95\">24隋心所欲’s Blog</a></li>\n</ul>\n","categories":["设计模式"],"tags":["后端","设计模式"]},{"title":"设计模式：七大原则","url":"/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%9A%E4%B8%83%E5%A4%A7%E5%8E%9F%E5%88%99/","content":"<h2 id=\"设计模式目的\"><a href=\"#设计模式目的\" class=\"headerlink\" title=\"设计模式目的\"></a>设计模式目的</h2><ul>\n<li><code>重用性</code>  相同功能的代码，不用多次编写</li>\n<li><code>可读性</code> 编程规范性, 便于其他程序员的阅读和理解</li>\n<li><code>可扩展性</code> 当需要增加新的功能时，非常的方便，称为”可维护”</li>\n<li><code>可靠性</code> 当我们增加新的功能后，对原来的功能没有影响</li>\n<li>使程序呈现<code>高内聚</code>，<code>低耦合</code>的特性</li>\n</ul>\n<span id=\"more\"></span>\n\n<h2 id=\"设计模式七大原则\"><a href=\"#设计模式七大原则\" class=\"headerlink\" title=\"设计模式七大原则\"></a>设计模式七大原则</h2><h3 id=\"单一职责原则\"><a href=\"#单一职责原则\" class=\"headerlink\" title=\"单一职责原则\"></a>单一职责原则</h3><ul>\n<li><code>Single Responsibility Principle (SRP)</code> 即一个类应该只负责一项职责</li>\n</ul>\n<h4 id=\"问题案例\"><a href=\"#问题案例\" class=\"headerlink\" title=\"问题案例\"></a>问题案例</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 1. 违反了单一职责原则</span></span><br><span class=\"line\"><span class=\"comment\"> * 2. 解决的方案非常的简单，根据交通工具运行方法不同，分解成不同类即可</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SingleResponsibility</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Vehicle</span> <span class=\"variable\">vehicle</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Vehicle</span>();</span><br><span class=\"line\">        vehicle.run(<span class=\"string\">&quot;汽车&quot;</span>);</span><br><span class=\"line\">        vehicle.run(<span class=\"string\">&quot;摩托车&quot;</span>);</span><br><span class=\"line\">        vehicle.run(<span class=\"string\">&quot;飞机&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Vehicle</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">run</span><span class=\"params\">(String vehicle)</span> &#123;</span><br><span class=\"line\">        System.out.println(vehicle + <span class=\"string\">&quot; 在公路上行驶....&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"解决案例一\"><a href=\"#解决案例一\" class=\"headerlink\" title=\"解决案例一\"></a>解决案例一</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 1. 遵守单一职责原则</span></span><br><span class=\"line\"><span class=\"comment\"> * 2. 但是这样做的改动很大，即将类分解，同时修改客户端</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SingleResponsibility</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">RoadVehicle</span> <span class=\"variable\">roadVehicle</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">RoadVehicle</span>();</span><br><span class=\"line\">        roadVehicle.run(<span class=\"string\">&quot;汽车&quot;</span>);</span><br><span class=\"line\">        roadVehicle.run(<span class=\"string\">&quot;摩托车&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">AirVehicle</span> <span class=\"variable\">airVehicle</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">AirVehicle</span>();</span><br><span class=\"line\">        airVehicle.run(<span class=\"string\">&quot;飞机&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">RoadVehicle</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">run</span><span class=\"params\">(String vehicle)</span> &#123;</span><br><span class=\"line\">        System.out.println(vehicle + <span class=\"string\">&quot; 在公路上行驶....&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">AirVehicle</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">run</span><span class=\"params\">(String vehicle)</span> &#123;</span><br><span class=\"line\">        System.out.println(vehicle + <span class=\"string\">&quot; 在天空上行驶....&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"解决案例二\"><a href=\"#解决案例二\" class=\"headerlink\" title=\"解决案例二\"></a>解决案例二</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 1. 没有在类级别上遵守单一职责原则，但是在方法级别上仍然是遵守单一职责</span></span><br><span class=\"line\"><span class=\"comment\"> * 2. 这种修改方法没有对原来的类做大的修改，只是增加方法</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SingleResponsibility</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Vehicle</span> <span class=\"variable\">vehicle</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Vehicle</span>();</span><br><span class=\"line\">        vehicle.roadRun(<span class=\"string\">&quot;汽车&quot;</span>);</span><br><span class=\"line\">        vehicle.roadRun(<span class=\"string\">&quot;摩托车&quot;</span>);</span><br><span class=\"line\">        vehicle.airRun(<span class=\"string\">&quot;飞机&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Vehicle</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">roadRun</span><span class=\"params\">(String vehicle)</span> &#123;</span><br><span class=\"line\">        System.out.println(vehicle + <span class=\"string\">&quot; 在公路上行驶....&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">airRun</span><span class=\"params\">(String vehicle)</span> &#123;</span><br><span class=\"line\">        System.out.println(vehicle + <span class=\"string\">&quot; 在天空上行驶....&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"接口隔离原则\"><a href=\"#接口隔离原则\" class=\"headerlink\" title=\"接口隔离原则\"></a>接口隔离原则</h3><ul>\n<li><code>Interface Segregation Principle (ISP)</code> 使用多个专门的接口，而不使用单一的总接口，即客户端不应该依赖那些它不需要的接口</li>\n</ul>\n<h4 id=\"问题案例-1\"><a href=\"#问题案例-1\" class=\"headerlink\" title=\"问题案例\"></a>问题案例</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 类A通过接口I会依赖(使用)类B，但类A中只会使用到接口的1、2、3三个方法</span></span><br><span class=\"line\"><span class=\"comment\"> * 类C通过接口I会依赖(使用)类D，但类C中只会使用到接口的1、4、5三个方法</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">InterfaceSegregation</span> &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span>&#123;</span><br><span class=\"line\">        <span class=\"type\">A</span> <span class=\"variable\">a</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">A</span>();</span><br><span class=\"line\">        a.depend1(<span class=\"keyword\">new</span> <span class=\"title class_\">B</span>());</span><br><span class=\"line\">        a.depend2(<span class=\"keyword\">new</span> <span class=\"title class_\">B</span>());</span><br><span class=\"line\">        a.depend3(<span class=\"keyword\">new</span> <span class=\"title class_\">B</span>());</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">C</span> <span class=\"variable\">c</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">C</span>();</span><br><span class=\"line\">        c.depend1(<span class=\"keyword\">new</span> <span class=\"title class_\">D</span>());</span><br><span class=\"line\">        c.depend4(<span class=\"keyword\">new</span> <span class=\"title class_\">D</span>());</span><br><span class=\"line\">        c.depend5(<span class=\"keyword\">new</span> <span class=\"title class_\">D</span>());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">I</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">method1</span><span class=\"params\">()</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">method2</span><span class=\"params\">()</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">method3</span><span class=\"params\">()</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">method4</span><span class=\"params\">()</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">method5</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">A</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">depend1</span><span class=\"params\">(I i)</span>&#123;</span><br><span class=\"line\">        i.method1();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">depend2</span><span class=\"params\">(I i)</span>&#123;</span><br><span class=\"line\">        i.method2();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">depend3</span><span class=\"params\">(I i)</span>&#123;</span><br><span class=\"line\">        i.method3();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">B</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">I</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 类 B 只需要实现方法 1，2, 3，而其它方法它并不需要，但是也需要实现</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">method1</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;类 B 实现接口 I 的方法 1&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">method2</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;类 B 实现接口 I 的方法 2&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">method3</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;类 B 实现接口 I 的方法 3&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">method4</span><span class=\"params\">()</span> &#123;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">method5</span><span class=\"params\">()</span> &#123;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">C</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">depend1</span><span class=\"params\">(I i)</span>&#123;</span><br><span class=\"line\">        i.method1();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">depend4</span><span class=\"params\">(I i)</span>&#123;</span><br><span class=\"line\">        i.method4();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">depend5</span><span class=\"params\">(I i)</span>&#123;</span><br><span class=\"line\">        i.method5();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">D</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">I</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 类 D 只需要实现方法 1，4，5，而其它方法它并不需要，但是也需要实现</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">method1</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;类 D 实现接口 I 的方法 1&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">method2</span><span class=\"params\">()</span> &#123;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">method3</span><span class=\"params\">()</span> &#123;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">method4</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;类 D 实现接口 I 的方法 4&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">method5</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;类 D 实现接口 I 的方法 5&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"解决案例\"><a href=\"#解决案例\" class=\"headerlink\" title=\"解决案例\"></a>解决案例</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 将接口I拆分为独立的几个接口，类A和类C分别与他们需要的接口建立依赖关系。也就是采用接口隔离原则</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">InterfaceSegregation</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span>&#123;</span><br><span class=\"line\">        <span class=\"type\">A</span> <span class=\"variable\">a</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">A</span>();</span><br><span class=\"line\">        a.depend1(<span class=\"keyword\">new</span> <span class=\"title class_\">B</span>());</span><br><span class=\"line\">        a.depend2(<span class=\"keyword\">new</span> <span class=\"title class_\">B</span>());</span><br><span class=\"line\">        a.depend3(<span class=\"keyword\">new</span> <span class=\"title class_\">B</span>());</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">C</span> <span class=\"variable\">c</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">C</span>();</span><br><span class=\"line\">        c.depend1(<span class=\"keyword\">new</span> <span class=\"title class_\">D</span>());</span><br><span class=\"line\">        c.depend4(<span class=\"keyword\">new</span> <span class=\"title class_\">D</span>());</span><br><span class=\"line\">        c.depend5(<span class=\"keyword\">new</span> <span class=\"title class_\">D</span>());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">I1</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">method1</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">I2</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">method2</span><span class=\"params\">()</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">method3</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">I3</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">method4</span><span class=\"params\">()</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">method5</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">A</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">depend1</span><span class=\"params\">(I1 i)</span>&#123;</span><br><span class=\"line\">        i.method1();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">depend2</span><span class=\"params\">(I2 i)</span>&#123;</span><br><span class=\"line\">        i.method2();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">depend3</span><span class=\"params\">(I2 i)</span>&#123;</span><br><span class=\"line\">        i.method3();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">B</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">I1</span>, I2&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">method1</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;类 B 实现接口 I1 的方法 1&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">method2</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;类 B 实现接口 I2 的方法 2&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">method3</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;类 B 实现接口 I2 的方法 3&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">C</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">depend1</span><span class=\"params\">(I1 i)</span>&#123;</span><br><span class=\"line\">        i.method1();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">depend4</span><span class=\"params\">(I3 i)</span>&#123;</span><br><span class=\"line\">        i.method4();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">depend5</span><span class=\"params\">(I3 i)</span>&#123;</span><br><span class=\"line\">        i.method5();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">D</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">I1</span>, I3&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">method1</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;类 D 实现接口 I1 的方法 1&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">method4</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;类 D 实现接口 I3 的方法 4&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">method5</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;类 D 实现接口 I3 的方法 5&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"依赖倒转原则\"><a href=\"#依赖倒转原则\" class=\"headerlink\" title=\"依赖倒转原则\"></a>依赖倒转原则</h3><ul>\n<li><code>Dependency Inversion Principle (DIP)</code> 抽象不应该依赖于细节，细节应当依赖于抽象。换言之，要针对接口编程，而不是针对实现编程</li>\n</ul>\n<h4 id=\"问题案例-2\"><a href=\"#问题案例-2\" class=\"headerlink\" title=\"问题案例\"></a>问题案例</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 如果获取的对象是微信，短信等等，则新增类，同时 Perons 也要增加相应的接收方法</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">DependenceInversion</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Person</span> <span class=\"variable\">person</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Person</span>();</span><br><span class=\"line\">        person.receive(<span class=\"keyword\">new</span> <span class=\"title class_\">Email</span>());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Email</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">getInfo</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;电子邮件信息...&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Person</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">receive</span><span class=\"params\">(Email email)</span> &#123;</span><br><span class=\"line\">        System.out.println(email.getInfo());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"解决案例-1\"><a href=\"#解决案例-1\" class=\"headerlink\" title=\"解决案例\"></a>解决案例</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 引入一个抽象的接口 IReceiver 表示接收者, 这样 Person 类与接口 IReceiver 发生依赖</span></span><br><span class=\"line\"><span class=\"comment\"> * 让他们各自实现 IReceiver 接口, 这样就符合依赖倒置原则了</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">DependenceInversion</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Person</span> <span class=\"variable\">person</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Person</span>();</span><br><span class=\"line\">        person.receive(<span class=\"keyword\">new</span> <span class=\"title class_\">Email</span>());</span><br><span class=\"line\">        person.receive(<span class=\"keyword\">new</span> <span class=\"title class_\">SMS</span>());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">IReceiver</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">getInfo</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Email</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">IReceiver</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">getInfo</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;电子邮件信息...&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">SMS</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">IReceiver</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">getInfo</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;短信信息...&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Person</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">receive</span><span class=\"params\">(IReceiver iReceiver)</span> &#123;</span><br><span class=\"line\">        System.out.println(iReceiver.getInfo());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"里氏替换原则\"><a href=\"#里氏替换原则\" class=\"headerlink\" title=\"里氏替换原则\"></a>里氏替换原则</h3><ul>\n<li><code>Liskov Substitution Principle (LSP)</code> 所有引用基类（父类） 的地方必须能透明地使用其子类的对象</li>\n</ul>\n<h4 id=\"问题案例-3\"><a href=\"#问题案例-3\" class=\"headerlink\" title=\"问题案例\"></a>问题案例</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 类B无意中重写了父类的方法，造成原有功能出现错误</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">LiskovSubstitution</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">A</span> <span class=\"variable\">a</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">A</span>();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;11-3=&quot;</span> + a.func1(<span class=\"number\">11</span>, <span class=\"number\">3</span>));</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;1-8=&quot;</span> + a.func1(<span class=\"number\">1</span>, <span class=\"number\">8</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;-----------------------&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">B</span> <span class=\"variable\">b</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">B</span>();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;11-3=&quot;</span> + b.func1(<span class=\"number\">11</span>, <span class=\"number\">3</span>)); <span class=\"comment\">//这里本意其实是要求出 11-3</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;1-8=&quot;</span> + b.func1(<span class=\"number\">1</span>, <span class=\"number\">8</span>)); <span class=\"comment\">//这里本意其实是要求出 1-8</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">A</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">func1</span><span class=\"params\">(<span class=\"type\">int</span> num1, <span class=\"type\">int</span> num2)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> num1 - num2;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">B</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">A</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">func1</span><span class=\"params\">(<span class=\"type\">int</span> num1, <span class=\"type\">int</span> num2)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> num1 + num2;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"解决案例-2\"><a href=\"#解决案例-2\" class=\"headerlink\" title=\"解决案例\"></a>解决案例</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 原来的父类和子类都继承一个更通俗的基类，原有的继承关系去掉，采用依赖，聚合，组合等 关系代替</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">LiskovSubstitution</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">A</span> <span class=\"variable\">a</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">A</span>();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;11-3=&quot;</span> + a.func1(<span class=\"number\">11</span>, <span class=\"number\">3</span>));</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;1-8=&quot;</span> + a.func1(<span class=\"number\">1</span>, <span class=\"number\">8</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;-----------------------&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">//因为 B 类不再继承 A 类，因此调用者，不会再 func1 是求减法</span></span><br><span class=\"line\">        <span class=\"type\">B</span> <span class=\"variable\">b</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">B</span>();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;11+3=&quot;</span> + b.func1(<span class=\"number\">11</span>, <span class=\"number\">3</span>));</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;1+8=&quot;</span> + b.func1(<span class=\"number\">1</span>, <span class=\"number\">8</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//使用组合仍然可以使用到 A 类相关方法</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;11-3=&quot;</span> + b.func2(<span class=\"number\">11</span>, <span class=\"number\">3</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Base</span> &#123; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">A</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Base</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">func1</span><span class=\"params\">(<span class=\"type\">int</span> num1, <span class=\"type\">int</span> num2)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> num1 - num2;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">B</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Base</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">A</span> <span class=\"variable\">a</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">A</span>();</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">func1</span><span class=\"params\">(<span class=\"type\">int</span> num1, <span class=\"type\">int</span> num2)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> num1 + num2;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">func2</span><span class=\"params\">(<span class=\"type\">int</span> num1, <span class=\"type\">int</span> num2)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> a.func1(num1, num2); </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"开闭原则\"><a href=\"#开闭原则\" class=\"headerlink\" title=\"开闭原则\"></a>开闭原则</h3><ul>\n<li><code>Open-Closed Principle (OCP)</code> 一个软件实体应当对扩展开放，对修改关闭。即软件实体应尽量在不修改原有代码的情况下进行扩展</li>\n</ul>\n<h4 id=\"问题案例-4\"><a href=\"#问题案例-4\" class=\"headerlink\" title=\"问题案例\"></a>问题案例</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 违反了开闭原则，对扩展开放(提供方)，对修改关闭(使用方)</span></span><br><span class=\"line\"><span class=\"comment\"> * 即当增加新图形类的时候，尽量不修改代码，或者尽可能少修改代码</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">OpenClosed</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">GraphicEditor</span> <span class=\"variable\">graphicEditor</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">GraphicEditor</span>();</span><br><span class=\"line\">        graphicEditor.drawShape(<span class=\"keyword\">new</span> <span class=\"title class_\">Rectangle</span>());</span><br><span class=\"line\">        graphicEditor.drawShape(<span class=\"keyword\">new</span> <span class=\"title class_\">Circle</span>());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Shape</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> type;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Rectangle</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Shape</span> &#123;</span><br><span class=\"line\">    Rectangle() &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>.type = <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Circle</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Shape</span> &#123;</span><br><span class=\"line\">    Circle() &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>.type = <span class=\"number\">2</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">GraphicEditor</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">drawShape</span><span class=\"params\">(Shape s)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (s.type == <span class=\"number\">1</span>)</span><br><span class=\"line\">            drawRectangle(s);</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (s.type == <span class=\"number\">2</span>)</span><br><span class=\"line\">            drawCircle(s);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">drawRectangle</span><span class=\"params\">(Shape r)</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;绘制矩形...&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">drawCircle</span><span class=\"params\">(Shape r)</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;绘制圆形...&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"解决案例-3\"><a href=\"#解决案例-3\" class=\"headerlink\" title=\"解决案例\"></a>解决案例</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 把创建 Shape 类做成抽象类，并提供一个抽象的 draw 方法, 让子类去实现即可</span></span><br><span class=\"line\"><span class=\"comment\"> * 当增加新图形类时, 只需继承 Shape 并实现 draw 方法即可, 使用方的代码就不需要修改, 满足了开闭原则</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">OpenClosed</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">GraphicEditor</span> <span class=\"variable\">graphicEditor</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">GraphicEditor</span>();</span><br><span class=\"line\">        graphicEditor.drawShape(<span class=\"keyword\">new</span> <span class=\"title class_\">Rectangle</span>());</span><br><span class=\"line\">        graphicEditor.drawShape(<span class=\"keyword\">new</span> <span class=\"title class_\">Circle</span>());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">abstract</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Shape</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title function_\">draw</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Rectangle</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Shape</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">draw</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;绘制矩形...&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Circle</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Shape</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">draw</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;绘制圆形...&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">GraphicEditor</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">drawShape</span><span class=\"params\">(Shape s)</span> &#123;</span><br><span class=\"line\">        s.draw();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"迪米特法则\"><a href=\"#迪米特法则\" class=\"headerlink\" title=\"迪米特法则\"></a>迪米特法则</h3><ul>\n<li><code>Law Of Demeter (LOD)</code> 一个对象就尽可能少的去了解其它对象，从而实现松耦合</li>\n</ul>\n<h4 id=\"问题案例-5\"><a href=\"#问题案例-5\" class=\"headerlink\" title=\"问题案例\"></a>问题案例</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 迪米特法则更简单的定义：只与直接的朋友通信</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * 直接的朋友：</span></span><br><span class=\"line\"><span class=\"comment\"> *  出现在成员变量，方法参数，方法返回值中的类称为直接的朋友</span></span><br><span class=\"line\"><span class=\"comment\"> *  出现在局部变量中的类不是直接的朋友。也就是说，陌生的类最好不要以局部变量的形式出现在类的内部</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">LawOfDemeter</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">CompanyManager</span> <span class=\"variable\">e</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">CompanyManager</span>();</span><br><span class=\"line\">        e.printAllEmployee(<span class=\"keyword\">new</span> <span class=\"title class_\">SubCompanyManager</span>());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Employee</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String id;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setId</span><span class=\"params\">(String id)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.id = id;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">getId</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> id;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">SubEmployee</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String id;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setId</span><span class=\"params\">(String id)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.id = id;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">getId</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> id;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">SubCompanyManager</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> List&lt;SubEmployee&gt; <span class=\"title function_\">getSubEmployee</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        List&lt;SubEmployee&gt; list = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>; i&lt;<span class=\"number\">10</span>; i++)&#123;</span><br><span class=\"line\">            <span class=\"type\">SubEmployee</span> <span class=\"variable\">emp</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">SubEmployee</span>();</span><br><span class=\"line\">            emp.setId(<span class=\"string\">&quot;分公司员工：&quot;</span>+i);</span><br><span class=\"line\">            list.add(emp);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> list;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">CompanyManager</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> List&lt;Employee&gt; <span class=\"title function_\">getEmployee</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        List&lt;Employee&gt; list = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;Employee&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>; i&lt;<span class=\"number\">5</span>; i++)&#123;</span><br><span class=\"line\">            <span class=\"type\">Employee</span> <span class=\"variable\">emp</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Employee</span>();</span><br><span class=\"line\">            emp.setId(<span class=\"string\">&quot;总公司员工：&quot;</span>+i);</span><br><span class=\"line\">            list.add(emp);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> list;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 1. 这里的 SubEmployee 以局部变量方式出现，不是 CompanyManager 的直接朋友</span></span><br><span class=\"line\"><span class=\"comment\">     * 2. 违反了 迪米特法则</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">printAllEmployee</span><span class=\"params\">(SubCompanyManager sub)</span>&#123;</span><br><span class=\"line\">        List&lt;SubEmployee&gt; list1 = sub.getSubEmployee();</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(SubEmployee e:list1)&#123;</span><br><span class=\"line\">            System.out.println(e.getId());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        List&lt;Employee&gt; list2 = <span class=\"built_in\">this</span>.getEmployee();</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(Employee e:list2)&#123;</span><br><span class=\"line\">            System.out.println(e.getId());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"解决案例-4\"><a href=\"#解决案例-4\" class=\"headerlink\" title=\"解决案例\"></a>解决案例</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 为分公司增加了打印人员ID的方法，总公司直接调用来打印，从而避免了与分公司的员工发生耦合</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">LawOfDemeter</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">CompanyManager</span> <span class=\"variable\">e</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">CompanyManager</span>();</span><br><span class=\"line\">        e.printAllEmployee(<span class=\"keyword\">new</span> <span class=\"title class_\">SubCompanyManager</span>());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Employee</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String id;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setId</span><span class=\"params\">(String id)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.id = id;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">getId</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> id;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">SubEmployee</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String id;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setId</span><span class=\"params\">(String id)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.id = id;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">getId</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> id;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">SubCompanyManager</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> List&lt;SubEmployee&gt; <span class=\"title function_\">getSubEmployee</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        List&lt;SubEmployee&gt; list = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>; i&lt;<span class=\"number\">10</span>; i++)&#123;</span><br><span class=\"line\">            <span class=\"type\">SubEmployee</span> <span class=\"variable\">emp</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">SubEmployee</span>();</span><br><span class=\"line\">            emp.setId(<span class=\"string\">&quot;分公司员工：&quot;</span>+i);</span><br><span class=\"line\">            list.add(emp);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> list;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">printSubEmployee</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        List&lt;SubEmployee&gt; list = <span class=\"built_in\">this</span>.getSubEmployee();</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(SubEmployee e:list)&#123;</span><br><span class=\"line\">            System.out.println(e.getId());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">CompanyManager</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> List&lt;Employee&gt; <span class=\"title function_\">getEmployee</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        List&lt;Employee&gt; list = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;Employee&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>; i&lt;<span class=\"number\">5</span>; i++)&#123;</span><br><span class=\"line\">            <span class=\"type\">Employee</span> <span class=\"variable\">emp</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Employee</span>();</span><br><span class=\"line\">            emp.setId(<span class=\"string\">&quot;总公司员工：&quot;</span>+i);</span><br><span class=\"line\">            list.add(emp);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> list;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">printAllEmployee</span><span class=\"params\">(SubCompanyManager sub)</span>&#123;</span><br><span class=\"line\">        sub.printSubEmployee();</span><br><span class=\"line\"></span><br><span class=\"line\">        List&lt;Employee&gt; list = <span class=\"built_in\">this</span>.getEmployee();</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(Employee e:list)&#123;</span><br><span class=\"line\">            System.out.println(e.getId());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"组合-聚合复用原则\"><a href=\"#组合-聚合复用原则\" class=\"headerlink\" title=\"组合&#x2F;聚合复用原则\"></a>组合&#x2F;聚合复用原则</h3><ul>\n<li><code>Composite/Aggregate Reuse Principle (CRP)</code> 如果只是达到代码复用的目的，尽量使用组合与聚合，而不是继承</li>\n</ul>\n<h4 id=\"问题案例-6\"><a href=\"#问题案例-6\" class=\"headerlink\" title=\"问题案例\"></a>问题案例</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 1. 如果基类的实现发生改变，那么派生类的实现也不得不发生改变</span></span><br><span class=\"line\"><span class=\"comment\"> * 2. 应用中需要变化之处应该把它们独立出来，不要和那些不需要变化的代码混在一起</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">CompositeReuse</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">DebitCard</span> <span class=\"variable\">debitCard</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">DebitCard</span>(<span class=\"string\">&quot;储蓄卡&quot;</span>);</span><br><span class=\"line\">        debitCard.deposit();</span><br><span class=\"line\">        debitCard.withdrawals();</span><br><span class=\"line\">        debitCard.overdraft();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">CreditCard</span> <span class=\"variable\">creditCard</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">CreditCard</span>(<span class=\"string\">&quot;信用卡&quot;</span>);</span><br><span class=\"line\">        creditCard.deposit();</span><br><span class=\"line\">        creditCard.withdrawals();</span><br><span class=\"line\">        creditCard.overdraft();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">BankCard</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> String cardType;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">deposit</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(cardType + <span class=\"string\">&quot;存款...&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">withdrawals</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(cardType + <span class=\"string\">&quot;取款...&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">overdraft</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(cardType + <span class=\"string\">&quot;透支...&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">DebitCard</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">BankCard</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">DebitCard</span><span class=\"params\">(String cardType)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>.cardType = cardType;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">CreditCard</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">BankCard</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">CreditCard</span><span class=\"params\">(String cardType)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>.cardType = cardType;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"解决案例-5\"><a href=\"#解决案例-5\" class=\"headerlink\" title=\"解决案例\"></a>解决案例</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 如果只是达到代码复用的目的，尽量使用组合与聚合，而不是继承</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">CompositeReuse</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">DebitCard</span> <span class=\"variable\">debitCard</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">DebitCard</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">BankCard</span>(), <span class=\"string\">&quot;储蓄卡&quot;</span>);</span><br><span class=\"line\">        debitCard.deposit();</span><br><span class=\"line\">        debitCard.withdrawals();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">CreditCard</span> <span class=\"variable\">creditCard</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">CreditCard</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">BankCard</span>(), <span class=\"string\">&quot;信用卡&quot;</span>);</span><br><span class=\"line\">        creditCard.overdraft();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">BankCard</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> String cardType;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">deposit</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(cardType + <span class=\"string\">&quot;存款...&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">withdrawals</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(cardType + <span class=\"string\">&quot;取款...&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">overdraft</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(cardType + <span class=\"string\">&quot;透支...&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">DebitCard</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> BankCard bankCard;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">DebitCard</span><span class=\"params\">(BankCard bankCard, String cardType)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.bankCard = bankCard;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.bankCard.cardType = cardType;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">deposit</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        bankCard.deposit();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">withdrawals</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        bankCard.withdrawals();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">CreditCard</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> BankCard bankCard;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">CreditCard</span><span class=\"params\">(BankCard bankCard, String cardType)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.bankCard = bankCard;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.bankCard.cardType = cardType;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">overdraft</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.bankCard.overdraft();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><ul>\n<li><a href=\"https://github.com/AlfredTheBest/Design-Pattern\">Design-Pattern</a></li>\n<li><a href=\"https://zhuanlan.zhihu.com/p/24614363\">设计模式之七大基本原则</a></li>\n</ul>\n","categories":["设计模式"],"tags":["后端","设计模式"]},{"title":"面试题","url":"/%E9%9D%A2%E8%AF%95%E9%A2%98/%E9%9D%A2%E8%AF%95%E9%A2%98/","content":"<h2 id=\"Java基础\"><a href=\"#Java基础\" class=\"headerlink\" title=\"Java基础\"></a>Java基础</h2><h3 id=\"ArrayList\"><a href=\"#ArrayList\" class=\"headerlink\" title=\"ArrayList\"></a><em>ArrayList</em></h3><h3 id=\"HashMap\"><a href=\"#HashMap\" class=\"headerlink\" title=\"HashMap\"></a><em>HashMap</em></h3><p><strong>结构</strong></p>\n<ul>\n<li><strong>JDK1.7：</strong> 数组 + 链表</li>\n<li><strong>JDK1.8：</strong> 数组 + 链表&#x2F;红黑树</li>\n</ul>\n<p><strong>红黑树转换</strong></p>\n<ul>\n<li><strong>条件：</strong> 数组长度 ≥ 64（<code>MIN_TREEIFY_CAPACITY</code>） &amp;&amp; 链表长度 &gt; 8（<code>TREEIFY_THRESHOLD</code>）。</li>\n<li><strong>逻辑：</strong> 若数组长度 &lt; 64，优先扩容。若满足条件，链表转为红黑树。</li>\n<li><strong>回退：</strong> 红黑树节点数 ≤ 6（<code>UNTREEIFY_THRESHOLD</code>）时，退化为链表。</li>\n</ul>\n<p><strong>扩容机制</strong></p>\n<ul>\n<li><strong>关键参数：</strong><ul>\n<li><strong>capacity：</strong> 数组容量，始终为 2^n，初始默认 16，扩容后翻倍。</li>\n<li><strong>loadFactor：</strong> 负载因子，默认 0.75，平衡时间与空间。<ul>\n<li>接近 1：存储密集，链表变长，查询慢。</li>\n<li>接近 0：存储稀疏，空间浪费。</li>\n</ul>\n</li>\n<li><strong>threshold：</strong> 扩容阈值 &#x3D; <code>capacity * loadFactor</code>。</li>\n</ul>\n</li>\n<li><strong>扩容触发：</strong> 键值对数量超过 <code>threshold</code> 时，数组容量翻倍。</li>\n</ul>\n<p><strong>插入流程</strong></p>\n<ol>\n<li><strong>检查数组：</strong> 若数组 table[i] 为空或 null，执行 resize() 扩容。</li>\n<li><strong>计算索引：</strong> 根据 key 的 hashCode 计算索引 i（hash &amp; (capacity - 1)）。 若 table[i] 为空，直接插入新节点，跳至第 6 步。</li>\n<li><strong>检查冲突：</strong> 若 table[i] 的首个元素与 key 相同（hashCode 和 equals 相等），覆盖 value。 否则继续。</li>\n<li><strong>判断节点类型：</strong> 若 table[i] 是红黑树（TreeNode），在树中插入。 否则进入链表处理。</li>\n<li><strong>链表处理：</strong> 遍历链表，若 key 存在，覆盖 value。 若链表长度 &gt; 8 且数组长度 ≥ 64，转为红黑树插入。 否则插入链表尾部。</li>\n<li><strong>更新状态：</strong> 插入后，若键值对数量 &gt; threshold，触发扩容。</li>\n</ol>\n<p><strong>哈希冲突解决方法</strong></p>\n<ul>\n<li><strong>链地址法：</strong> 每个位置存一个链表，冲突的键值对都加到这个链表里</li>\n<li><strong>线性探测法：</strong> 冲突时，顺序检查下一个位置（index + 1），直到找到空位存放</li>\n<li><strong>二次探测法：</strong> 冲突时，按二次方跳跃（<code>index + 1², +2², +3²...</code>）找空位</li>\n<li><strong>双重哈希法：</strong> 用第二个哈希函数算步长（<code>step = hash2(key)</code>），冲突时按 <code>index + step, +2*step...</code> 找空位，查找时用同样步长检查</li>\n</ul>\n<h3 id=\"HashSet\"><a href=\"#HashSet\" class=\"headerlink\" title=\"HashSet\"></a><em>HashSet</em></h3><h3 id=\"ConcurrentHashMap\"><a href=\"#ConcurrentHashMap\" class=\"headerlink\" title=\"ConcurrentHashMap\"></a><em>ConcurrentHashMap</em></h3><h3 id=\"CopyOnWriteArrayList\"><a href=\"#CopyOnWriteArrayList\" class=\"headerlink\" title=\"CopyOnWriteArrayList\"></a><em>CopyOnWriteArrayList</em></h3><h3 id=\"int-a-10是原子操作吗\"><a href=\"#int-a-10是原子操作吗\" class=\"headerlink\" title=\"int a&#x3D;10是原子操作吗\"></a><em>int a&#x3D;10是原子操作吗</em></h3><p><code>int a = 10</code> <strong>原子操作</strong>，直接将常量 10 赋值给变量 a，通常编译为单条指令<br><strong>注意：</strong></p>\n<ol>\n<li><code>i++</code>（或<code>++i</code>）<strong>非原子操作</strong>，包含三步：读取 i 值、计算 i+1、赋值给 i，多步操作可能被中断</li>\n<li><code>int a = b</code> <strong>非原子操作</strong>，需要从内存读取变量 b 的值，再赋值给 a，通常涉及多条指令<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">mov eax, dword ptr [b]  // 将 b 值载入寄存器</span><br><span class=\"line\">mov dword ptr [a], eax  // 将寄存器值赋给 a</span><br></pre></td></tr></table></figure>\n<span id=\"more\"></span></li>\n</ol>\n<h3 id=\"byte-300-byte-100-short-200\"><a href=\"#byte-300-byte-100-short-200\" class=\"headerlink\" title=\"(byte)300&#x3D;&#x3D;(byte)100+(short)200\"></a><em>(byte)300&#x3D;&#x3D;(byte)100+(short)200</em></h3><ul>\n<li>byte最大值是 127， 超过300 会溢出变为 -56</li>\n</ul>\n<h3 id=\"类初始化顺序\"><a href=\"#类初始化顺序\" class=\"headerlink\" title=\"类初始化顺序\"></a><em>类初始化顺序</em></h3><p><code>父类静态变量/静态初始化块</code> -&gt; <code>子类静态变量/静态初始化块</code> -&gt; <code>父类变量/初始化块</code> -&gt; <code>父类构造器</code> -&gt; <code>子类变量/初始化块</code> -&gt; <code>子类构造器</code></p>\n<h3 id=\"访问修饰符的区别\"><a href=\"#访问修饰符的区别\" class=\"headerlink\" title=\"访问修饰符的区别\"></a><em>访问修饰符的区别</em></h3><table>\n<thead>\n<tr>\n<th>修饰符</th>\n<th>类内访问</th>\n<th>同包访问</th>\n<th>子类访问</th>\n<th>全局访问</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>public</td>\n<td>√</td>\n<td>√</td>\n<td>√</td>\n<td>√</td>\n</tr>\n<tr>\n<td>protected</td>\n<td>√</td>\n<td>√</td>\n<td>√</td>\n<td>-</td>\n</tr>\n<tr>\n<td>default</td>\n<td>√</td>\n<td>√</td>\n<td>-</td>\n<td>-</td>\n</tr>\n<tr>\n<td>private</td>\n<td>√</td>\n<td>-</td>\n<td>-</td>\n<td>-</td>\n</tr>\n</tbody></table>\n<h3 id=\"BIO、NIO、AIO-有什么区别\"><a href=\"#BIO、NIO、AIO-有什么区别\" class=\"headerlink\" title=\"BIO、NIO、AIO 有什么区别\"></a><em>BIO、NIO、AIO 有什么区别</em></h3><ul>\n<li><code>BIO</code> 阻塞模式，一个线程处理一个连接，平常使用的传统 IO</li>\n<li><code>NIO</code> 非阻塞模式，一个线程处理多个连接，通过Selector实现非阻塞I&#x2F;O，客户端和服务器端通过 Channel（通道）通讯，实现了多路复用。</li>\n<li><code>AIO</code> 异步模式，多线程无阻塞基于回调，通过回调函数来处理I&#x2F;O操作的完成事件</li>\n</ul>\n<h3 id=\"TCP-与-UDP区别\"><a href=\"#TCP-与-UDP区别\" class=\"headerlink\" title=\"TCP 与 UDP区别\"></a><em>TCP 与 UDP区别</em></h3><table>\n<thead>\n<tr>\n<th>特性</th>\n<th>TCP</th>\n<th>UDP</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>连接性</td>\n<td>面向连接（三次握手建立连接）</td>\n<td>无连接（直接发送数据）</td>\n</tr>\n<tr>\n<td>可靠性</td>\n<td>可靠（重传、确认、流量控制）</td>\n<td>不可靠（无确认，可能丢包）</td>\n</tr>\n<tr>\n<td>传输方式</td>\n<td>字节流（数据有序、无边界）</td>\n<td>数据报（独立报文，可能乱序）</td>\n</tr>\n<tr>\n<td>开销</td>\n<td>高（头部 20 字节，机制复杂）</td>\n<td>低（头部 8 字节，机制简单）</td>\n</tr>\n<tr>\n<td>速度</td>\n<td>较慢（因可靠性机制）</td>\n<td>较快（无额外控制）</td>\n</tr>\n<tr>\n<td>应用场景</td>\n<td>需要可靠传输（如 HTTP、FTP）</td>\n<td>实时性优先（如视频通话、直播）</td>\n</tr>\n</tbody></table>\n<h3 id=\"TCP-三次握手\"><a href=\"#TCP-三次握手\" class=\"headerlink\" title=\"TCP 三次握手\"></a><em>TCP 三次握手</em></h3><ul>\n<li>客户端发送 <code>SYN</code>（Seq&#x3D;X），请求连接。</li>\n<li>服务器响应 <code>SYN+ACK</code>（Ack&#x3D;X+1, Seq&#x3D;Y），同意连接。</li>\n<li>客户端发送 <code>ACK</code>（Ack&#x3D;Y+1），连接建立。</li>\n</ul>\n<h3 id=\"TCP-四次挥手\"><a href=\"#TCP-四次挥手\" class=\"headerlink\" title=\"TCP 四次挥手\"></a><em>TCP 四次挥手</em></h3><ul>\n<li>客户端发送 <code>FIN</code>，请求断开。</li>\n<li>服务器发送 <code>ACK</code>，确认收到。</li>\n<li>服务器发送 <code>FIN</code>，准备断开。</li>\n<li>客户端发送 <code>ACK</code>，确认断开。</li>\n</ul>\n<h3 id=\"创建线程的几种方式\"><a href=\"#创建线程的几种方式\" class=\"headerlink\" title=\"创建线程的几种方式\"></a><em>创建线程的几种方式</em></h3><ul>\n<li><p>继承Thread类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>实现Runnable接口</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>实现Callable接口</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>使用线程池方式</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"为什么不建议使用ExecutorService创建线程池\"><a href=\"#为什么不建议使用ExecutorService创建线程池\" class=\"headerlink\" title=\"为什么不建议使用ExecutorService创建线程池\"></a><em>为什么不建议使用ExecutorService创建线程池</em></h3><ul>\n<li><code>FixedThreadPool</code>、<code>SingleThreadExecutor</code> 允许的请求队列长度为Integer.MAX_VALUE，可能会堆积大量的请求，从而导致OOM。</li>\n<li><code>CachedThreadPool</code>、<code>ScheduledThreadPool</code> 允许的创建线程数量为Integer.MAX_VALUE，可能会创建大量的线程，从而导致OOM。</li>\n</ul>\n<h3 id=\"线程池有哪几种状态\"><a href=\"#线程池有哪几种状态\" class=\"headerlink\" title=\"线程池有哪几种状态\"></a><em>线程池有哪几种状态</em></h3><img src=\"/%E9%9D%A2%E8%AF%95%E9%A2%98/%E9%9D%A2%E8%AF%95%E9%A2%98/%E7%BA%BF%E7%A8%8B%E6%B1%A0%E7%8A%B6%E6%80%81.png\" class=\"\" title=\"线程池状态\">\n\n<h3 id=\"Sychronized-和-ReentrantLock-区别\"><a href=\"#Sychronized-和-ReentrantLock-区别\" class=\"headerlink\" title=\"Sychronized 和 ReentrantLock 区别\"></a><em>Sychronized 和 ReentrantLock 区别</em></h3><table>\n<thead>\n<tr>\n<th>Sychronized</th>\n<th>ReentrantLock</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Java中的一个关键字</td>\n<td>JDK提供的一个类</td>\n</tr>\n<tr>\n<td>JVM层面的锁</td>\n<td>API层面的锁</td>\n</tr>\n<tr>\n<td>自动加锁与释放锁</td>\n<td>需要手动加锁与释放锁</td>\n</tr>\n<tr>\n<td>不可获取当前线程是否上锁</td>\n<td>可获取当前线程是否上锁isHeldByCurrentThread</td>\n</tr>\n<tr>\n<td>非公平锁</td>\n<td>公平锁或非公平锁</td>\n</tr>\n<tr>\n<td>不可中断</td>\n<td>可中断：<br/>1.调用设置超时方法tryLock(long timeout, TimeUnit unit)<br/>2.调用lockInterruptibly()放到代码块中，然后调用interrupt()方法可中断</td>\n</tr>\n<tr>\n<td>锁的是对象，锁信息保存在对象头中</td>\n<td>int类型的state标识来标识锁的状态</td>\n</tr>\n<tr>\n<td>底层有锁升级过程</td>\n<td>没有锁升级过程</td>\n</tr>\n</tbody></table>\n<h3 id=\"ThreadLocal-底层原理\"><a href=\"#ThreadLocal-底层原理\" class=\"headerlink\" title=\"ThreadLocal 底层原理\"></a><em>ThreadLocal 底层原理</em></h3><ul>\n<li>1.ThreadLocal是java中所提供的线程本地存储机制，可以利用该机制将数据<code>缓存在某个线程内部</code>，该线程可以在任意时刻、任意方法中获取缓存的数据</li>\n<li>2.ThreadLocal底层是通过ThreadLocalMap来实现的，每个Thread对象（注意不是ThreadLocal对象）中都存在一个ThreadLocalMap，Map的Key为ThreadLocal对象，Map的value为需要缓存的值</li>\n<li>3.如果在线程池中使用ThreadLocal</li>\n</ul>\n<h2 id=\"JUC\"><a href=\"#JUC\" class=\"headerlink\" title=\"JUC\"></a>JUC</h2><h3 id=\"并发三大特性\"><a href=\"#并发三大特性\" class=\"headerlink\" title=\"并发三大特性\"></a><em>并发三大特性</em></h3><h3 id=\"volatile\"><a href=\"#volatile\" class=\"headerlink\" title=\"volatile\"></a><em>volatile</em></h3><ul>\n<li><code>可见性</code> 当一个线程修改了 volatile 变量的值时，其他线程可以立即看到最新的值</li>\n<li><code>有序性</code> 防止 JVM 的指令重排序，确保了线程在访问 volatile 变量时的有序性</li>\n<li><code>不保证原子性</code> 不能保证线程安全。要实现原子性操作可使用 synchronized 或 juc 包下的原子类</li>\n</ul>\n<h3 id=\"JMM-的操作和-Happens-Before-关系\"><a href=\"#JMM-的操作和-Happens-Before-关系\" class=\"headerlink\" title=\"JMM 的操作和 Happens-Before 关系\"></a><em>JMM 的操作和 Happens-Before 关系</em></h3><p>JMM 定义了线程与内存交互的 8 种原子操作</p>\n<ul>\n<li><code>lock（锁定）</code> 锁定主内存中的变量。</li>\n<li><code>unlock（解锁）</code> 释放锁定的变量。</li>\n<li><code>read（读取）</code> 从主内存读取变量到工作内存。</li>\n<li><code>load（加载）</code> 将 read 的值加载到工作内存的变量副本。</li>\n<li><code>use（使用）</code> 线程使用工作内存中的变量。</li>\n<li><code>assign（赋值）</code> 线程修改工作内存中的变量。</li>\n<li><code>store（存储）</code> 将工作内存中的变量值存储到主内存。</li>\n<li><code>write（写入）</code> 将 store 的值写入主内存。</li>\n</ul>\n<h3 id=\"Synchronized-底层原理\"><a href=\"#Synchronized-底层原理\" class=\"headerlink\" title=\"Synchronized 底层原理\"></a><em>Synchronized 底层原理</em></h3><h3 id=\"Synchronized-锁升级过程\"><a href=\"#Synchronized-锁升级过程\" class=\"headerlink\" title=\"Synchronized 锁升级过程\"></a><em>Synchronized 锁升级过程</em></h3><ul>\n<li><code>无锁</code>：无竞争，线程直接访问。</li>\n<li><code>偏向锁</code>：首线程获取，Mark Word 存线程 ID，重入免竞争。</li>\n<li><code>轻量级锁</code>：新线程竞争，转为 CAS轻量级锁，失败则自旋，多次失败升级。</li>\n<li><code>重量级锁</code>：多线程争抢，升级为操作系统级 互斥锁，等待线程阻塞。</li>\n<li></li>\n</ul>\n<h3 id=\"AQS-底层原理\"><a href=\"#AQS-底层原理\" class=\"headerlink\" title=\"AQS 底层原理\"></a><em>AQS 底层原理</em></h3><h3 id=\"CAS-乐观锁\"><a href=\"#CAS-乐观锁\" class=\"headerlink\" title=\"CAS 乐观锁\"></a><em>CAS 乐观锁</em></h3><h3 id=\"等待、唤醒的三种方式\"><a href=\"#等待、唤醒的三种方式\" class=\"headerlink\" title=\"等待、唤醒的三种方式\"></a><em>等待、唤醒的三种方式</em></h3><ul>\n<li><code>Object</code>类 <code>wait/notify</code>方法</li>\n<li><code>Condition</code>接口 <code>await/signal</code> 方法</li>\n<li><code>LockSupport</code>类 <code>park/unpark</code> 方法</li>\n</ul>\n<h2 id=\"JVM\"><a href=\"#JVM\" class=\"headerlink\" title=\"JVM\"></a>JVM</h2><h3 id=\"JVM-内存结构\"><a href=\"#JVM-内存结构\" class=\"headerlink\" title=\"JVM 内存结构\"></a><em>JVM 内存结构</em></h3><p><strong>线程共享</strong></p>\n<ul>\n<li><strong>堆：</strong><ul>\n<li>存储对象实例和数组。</li>\n<li>垃圾回收器主要管理区域，分为新生代（Eden、Survivor）和老年代。</li>\n</ul>\n</li>\n<li><strong>方法区&#x2F;元空间：</strong><ul>\n<li>方法区（JDK 7 及之前）：存储类信息、常量池、静态变量、方法字节码。</li>\n<li>元空间（JDK 8 及之后）：取代方法区，存储类元数据，使用本地内存，减少 OOM。</li>\n<li>包含运行时常量池（如字符串常量）。</li>\n</ul>\n</li>\n</ul>\n<p><strong>线程私有</strong></p>\n<ul>\n<li><strong>虚拟机栈（JVM 栈）：</strong><ul>\n<li>每个线程私有，存储栈帧。</li>\n<li>栈帧包含：局部变量表、操作数栈、动态链接、方法返回地址。</li>\n<li>用于方法调用和执行。</li>\n</ul>\n</li>\n<li><strong>程序计数器：</strong><ul>\n<li>线程私有，记录当前线程执行的字节码指令地址。</li>\n<li>若执行本地方法，则为空（undefined）。</li>\n</ul>\n</li>\n<li><strong>本地方法栈：</strong><ul>\n<li>线程私有，类似虚拟机栈，但服务于本地方法（由 C&#x2F;C++ 实现）。</li>\n<li>支持 JNI（Java Native Interface）调用。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"方法区和元空间的区别\"><a href=\"#方法区和元空间的区别\" class=\"headerlink\" title=\"方法区和元空间的区别\"></a><em>方法区和元空间的区别</em></h3><table>\n<thead>\n<tr>\n<th>特性</th>\n<th>方法区（JDK 7 及之前）</th>\n<th>元空间（JDK 8 及之后）</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>存储位置</td>\n<td>Java 堆内（永久代，PermGen）</td>\n<td>本地内存（Native Memory）</td>\n</tr>\n<tr>\n<td>内存管理</td>\n<td>由堆的垃圾回收器管理，易 OOM</td>\n<td>使用本地内存，无堆限制，GC 独立</td>\n</tr>\n<tr>\n<td>动态性与性能</td>\n<td>固定大小，调整困难，性能较低</td>\n<td>动态调整大小，灵活，性能更高</td>\n</tr>\n</tbody></table>\n<h3 id=\"JVM-类加载器\"><a href=\"#JVM-类加载器\" class=\"headerlink\" title=\"JVM 类加载器\"></a><em>JVM 类加载器</em></h3><h3 id=\"JVM-双亲委派\"><a href=\"#JVM-双亲委派\" class=\"headerlink\" title=\"JVM 双亲委派\"></a><em>JVM 双亲委派</em></h3><ul>\n<li><strong>定义：</strong> 当一个类需要加载时，类加载器先将加载任务委托给父类加载器，父加载器无法加载时，才由当前类加载器尝试加载。</li>\n<li><strong>目标：</strong><ul>\n<li>确保类的 <strong>唯一性</strong>（同一类只加载一次）。</li>\n<li>提高 <strong>安全性</strong>（防止核心类被篡改）。</li>\n<li>避免 <strong>重复加载</strong>（节省资源）。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"JVM-类加载过程\"><a href=\"#JVM-类加载过程\" class=\"headerlink\" title=\"JVM 类加载过程\"></a><em>JVM 类加载过程</em></h3><h3 id=\"对象创建过程\"><a href=\"#对象创建过程\" class=\"headerlink\" title=\"对象创建过程\"></a><em>对象创建过程</em></h3><h3 id=\"垃圾回收-GC-类型\"><a href=\"#垃圾回收-GC-类型\" class=\"headerlink\" title=\"垃圾回收 GC 类型\"></a><em>垃圾回收 GC 类型</em></h3><ol>\n<li><strong>Minor GC</strong></li>\n</ol>\n<ul>\n<li><strong>定义：</strong> 回收年轻代（Eden + Survivor 区）。</li>\n<li><strong>特点：</strong> 频率高，速度快，暂停时间短（通常毫秒级）。</li>\n<li><strong>触发条件：</strong> Eden 区满，新对象无法分配。</li>\n<li><strong>影响：</strong> 仅清理短生命周期对象，存活对象移到 Survivor 或晋升老年代。</li>\n</ul>\n<ol start=\"2\">\n<li><strong>Major GC</strong></li>\n</ol>\n<ul>\n<li><strong>定义：</strong> 回收老年代。</li>\n<li><strong>特点：</strong> 频率较低，速度慢，暂停时间较长（几十毫秒到秒级）。</li>\n<li><strong>触发条件：</strong><ul>\n<li>老年代空间不足。</li>\n<li>年轻代晋升失败（Survivor 空间不足）。</li>\n</ul>\n</li>\n<li><strong>影响：</strong> 清理长期存活对象，耗时取决于老年代大小和对象存活率。</li>\n</ul>\n<ol start=\"3\">\n<li><strong>Full GC</strong></li>\n</ol>\n<ul>\n<li><strong>定义：</strong> 回收整个堆（年轻代 + 老年代）+ 元空间（部分情况）。</li>\n<li><strong>特点：</strong> 频率最低，速度最慢，暂停时间最长（秒级或更高）。</li>\n<li><strong>触发条件：</strong><ul>\n<li>老年代或元空间不足。</li>\n<li>晋升老年代失败。</li>\n<li>显式调用 <code>System.gc()</code>。</li>\n<li>CMS GC 失败（如碎片过多）</li>\n</ul>\n</li>\n<li><strong>影响：</strong> 全局清理，严重影响服务性能。</li>\n</ul>\n<h3 id=\"JVM-垃圾回收算法\"><a href=\"#JVM-垃圾回收算法\" class=\"headerlink\" title=\"JVM 垃圾回收算法\"></a><em>JVM 垃圾回收算法</em></h3><ol>\n<li><strong>标记-清除（Mark-Sweep）</strong></li>\n</ol>\n<ul>\n<li><strong>过程：</strong> 标记需回收对象，统一清除。</li>\n<li><strong>优点：</strong> 不需要移动对象，适合大对象回收。</li>\n<li><strong>缺点：</strong> 会产生内存碎片，可能需后续内存整理。</li>\n</ul>\n<ol start=\"2\">\n<li><strong>复制（Copying）</strong></li>\n</ol>\n<ul>\n<li><strong>过程：</strong> 堆分两区（活动区、闲置区），存活对象从活动区复制到闲置区，交换角色。</li>\n<li><strong>优点：</strong> 无碎片，适合存活对象少的场景（如新生代）。</li>\n<li><strong>缺点：</strong> 内存利用率低（需预留空间）。</li>\n</ul>\n<ol start=\"3\">\n<li><strong>标记-整理（Mark-Compact）</strong></li>\n</ol>\n<ul>\n<li><strong>过程：</strong> 标记存活对象，移动到堆一端，清除边界外对象。</li>\n<li><strong>优点：</strong> 无碎片，适合存活对象多的场景（如老年代）。</li>\n<li><strong>缺点：</strong> 移动对象增加性能开销。</li>\n</ul>\n<ol start=\"4\">\n<li><strong>分代收集（Generational Collection）</strong></li>\n</ol>\n<ul>\n<li><strong>过程：</strong> 堆分新生代和老年代。新生代：用复制算法（存活对象少）。 老年代：用标记-清除或标记-整理（存活对象多）。</li>\n<li><strong>优点：</strong> 结合对象生命周期优化效率。</li>\n<li><strong>缺点：</strong> 实现复杂，需额外内存管理。</li>\n</ul>\n<h3 id=\"线上垃圾收集器选择\"><a href=\"#线上垃圾收集器选择\" class=\"headerlink\" title=\"线上垃圾收集器选择\"></a><em>线上垃圾收集器选择</em></h3><p><strong>Parallel Scavenge + Parallel Old：</strong></p>\n<ul>\n<li><strong>新生代：</strong> Parallel Scavenge（复制算法，并行，吞吐量优先）</li>\n<li><strong>老年代：</strong> Parallel Old（标记-整理，并行）</li>\n<li><strong>适用场景：</strong> 高吞吐，&lt; 4GB，批量任务</li>\n<li><strong>原因：</strong><ul>\n<li>最大化吞吐量，适合多核、非延迟敏感任务</li>\n<li>标记-整理无碎片，内存利用率高</li>\n<li><strong>缺点：</strong> 停顿时间长</li>\n</ul>\n</li>\n</ul>\n<p><strong>ParNew + CMS：</strong></p>\n<ul>\n<li><strong>新生代：</strong> ParNew（复制算法，并行）</li>\n<li><strong>老年代：</strong> CMS（标记-清除，并发）</li>\n<li><strong>适用场景：</strong> 低延迟，4-8GB，Web 应用</li>\n<li><strong>原因：</strong><ul>\n<li>CMS 并发清理，减少停顿（STW），适合响应时间敏感应用</li>\n<li>ParNew 多核下高效清理新生代</li>\n<li><strong>缺点：</strong> 标记-清除产生碎片，偶发 Full GC</li>\n</ul>\n</li>\n</ul>\n<p><strong>G1（Garbage First）：</strong></p>\n<ul>\n<li><strong>新生代：</strong> 复制算法</li>\n<li><strong>老年代：</strong> 标记-整理，区域化管理</li>\n<li><strong>适用场景：</strong> 平衡停顿，&gt; 8GB，企业应用</li>\n<li><strong>原因：</strong><ul>\n<li>JDK 9+ 默认，平衡延迟与吞吐量</li>\n<li>区域化管理，优先回收垃圾多区域，停顿可预测，适合大堆</li>\n<li><strong>缺点：</strong> 小堆性能不如 CMS，CPU 开销高</li>\n</ul>\n</li>\n</ul>\n<p><strong>ZGC：</strong></p>\n<ul>\n<li><strong>全堆：</strong> 标记-复制，染色指针</li>\n<li><strong>适用场景：</strong> 超低延迟，大堆（几十 GB），金融&#x2F;云服务</li>\n<li><strong>原因：</strong><ul>\n<li>停顿 &lt; 10ms，适合延迟敏感应用</li>\n<li>支持 TB 级堆，扩展性强</li>\n<li><strong>缺点：</strong> 吞吐量略低，需 JDK 11+（JDK 15+ 稳定）</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"对象一定分配在堆中吗\"><a href=\"#对象一定分配在堆中吗\" class=\"headerlink\" title=\"对象一定分配在堆中吗\"></a><em>对象一定分配在堆中吗</em></h3><p><strong>默认情况：</strong></p>\n<ul>\n<li><strong>堆分配：</strong><ul>\n<li><strong>描述：</strong> 通过 new 创建的对象通常分配在堆中（新生代或老年代），由垃圾回收器管理。</li>\n<li><strong>示例：</strong> <code>new HashMap()</code> 分配在堆（Eden 区），GC 回收</li>\n</ul>\n</li>\n</ul>\n<p><strong>特殊情况：</strong></p>\n<ul>\n<li><p><strong>栈分配（逃逸分析）：</strong></p>\n<ul>\n<li><strong>描述：</strong> 小对象、基本数据类型包装类、局部变量等（仅在方法内使用），若对象未逃逸，JVM 通过逃逸分析（<code>-XX:+DoEscapeAnalysis</code>，JDK6 默认启用）可将其分配在栈上。</li>\n<li><strong>示例：</strong> 方法内 <code>Integer x = 10;</code>，若未逃逸，优化到栈上，方法结束即释放，无需 GC。</li>\n</ul>\n</li>\n<li><p><strong>方法区&#x2F;元空间分配：</strong></p>\n<ul>\n<li><strong>描述：</strong> 某些特殊对象（如类的元数据、字符串常量）存储在方法区（JDK 7 前）或元空间（JDK 8 后）。</li>\n<li><strong>示例：</strong> <code>String s = &quot;hello&quot;;</code>字符串常量池中的 “hello”（JDK 7 后部分移至堆）。</li>\n</ul>\n</li>\n<li><p><strong>本地内存分配（堆外内存）：</strong></p>\n<ul>\n<li><strong>描述：</strong> 通过 <code>JNI</code>、<code>Unsafe</code> 或 <code>DirectByteBuffer</code> 分配的对象可能在本地内存。</li>\n<li><strong>示例：</strong> <code>ByteBuffer.allocateDirect(1024);</code> 分配堆外，需手动释放。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"哪些对象可以作为-GC-Roots\"><a href=\"#哪些对象可以作为-GC-Roots\" class=\"headerlink\" title=\"哪些对象可以作为 GC Roots\"></a><em>哪些对象可以作为 GC Roots</em></h3><ol>\n<li>虚拟机栈中局部变量引用的对象：</li>\n</ol>\n<ul>\n<li>示例：<code>Object obj = new Object(); // obj 是 GC Root</code></li>\n</ul>\n<ol start=\"2\">\n<li>类的 static 字段引用的对象：</li>\n</ol>\n<ul>\n<li>示例：<code>static Object staticObj = new Object(); // staticObj 是 GC Root</code></li>\n</ul>\n<ol start=\"3\">\n<li>常量池中的对象（如字符串常量）：</li>\n</ol>\n<ul>\n<li>示例：<code>String constant = &quot;hello&quot;; // &quot;hello&quot; 可能是 GC Root</code></li>\n</ul>\n<ol start=\"4\">\n<li>运行中的 Thread 或线程池中的线程：</li>\n</ol>\n<ul>\n<li>示例：<code>ExecutorService pool = Executors.newFixedThreadPool(10); // pool 是 GC Root</code></li>\n</ul>\n<ol start=\"5\">\n<li>本地方法（JNI）中引用的 Java 对象。</li>\n<li>类加载器 ClassLoader 实例及其加载的类和对象。</li>\n<li>JNI 创建的全局引用（如 NewGlobalRef）。</li>\n<li>某些 JVM 内部持有的对象（如synchronized 锁对象、java.lang.System 实例等）。</li>\n</ol>\n<h3 id=\"排查与解决频繁新生代-Minor-GC\"><a href=\"#排查与解决频繁新生代-Minor-GC\" class=\"headerlink\" title=\"排查与解决频繁新生代 Minor GC\"></a><em>排查与解决频繁新生代 Minor GC</em></h3><ol>\n<li><strong>确认 Minor GC 频率</strong> <code>jstat -gc &lt;进程PID&gt; &lt;间隔毫秒&gt;</code><ul>\n<li><strong>重点关注：</strong> <code>YGC</code>（新生代 GC 次数）、<code>YGCT</code>（新生代 GC 总耗时）。</li>\n<li><strong>判断标准：</strong> 若每 10 秒左右发生一次 Minor GC，通常算频繁（视业务场景而定）。</li>\n</ul>\n</li>\n<li><strong>增大新生代空间</strong> <code>-Xmn</code></li>\n</ol>\n<h3 id=\"排查与解决频繁老年代-Full-GC\"><a href=\"#排查与解决频繁老年代-Full-GC\" class=\"headerlink\" title=\"排查与解决频繁老年代 Full GC\"></a><em>排查与解决频繁老年代 Full GC</em></h3><ol>\n<li><strong>确认 Full GC 频率</strong> <code>jstat -gc &lt;进程PID&gt; &lt;间隔毫秒&gt;</code></li>\n</ol>\n<ul>\n<li><strong>重点关注：</strong> <code>OC</code>（老年代总量）、<code>OU</code>（当前老年代使用量）、<code>FGC</code>（Full GC 次数）、<code>FGCT</code>（Full GC 总耗时）。</li>\n<li><strong>判断标准：</strong> 频繁 Full GC（如每小时多次）通常表明老年代压力大，可能引发性能瓶颈。</li>\n</ul>\n<ol start=\"2\">\n<li><strong>排查内存泄漏</strong> <code>jmap -dump:live,file=./file.hprof &lt;进程PID&gt;</code></li>\n<li><strong>增大老年代空间</strong> <code>-Xmx</code></li>\n</ol>\n<h3 id=\"Tomcat的类加载器\"><a href=\"#Tomcat的类加载器\" class=\"headerlink\" title=\"Tomcat的类加载器\"></a><em>Tomcat的类加载器</em></h3><h3 id=\"JVM-监控工具\"><a href=\"#JVM-监控工具\" class=\"headerlink\" title=\"JVM 监控工具\"></a><em>JVM 监控工具</em></h3><ol>\n<li><strong>jps：</strong> 列出运行的 Java 进程 ID 和主类名。</li>\n<li><strong>jinfo：</strong> 查看和修改运行中 Java 进程的配置参数。</li>\n<li><strong>jstat：</strong> 监控 JVM 统计信息（内存、GC、类加载等）。</li>\n<li><strong>jmap：</strong> 生成堆转储文件，分析堆内存使用和内存泄漏。</li>\n<li><strong>jstack：</strong> 生成线程堆栈快照，分析线程问题和死锁。</li>\n</ol>\n<h2 id=\"Spring\"><a href=\"#Spring\" class=\"headerlink\" title=\"Spring\"></a>Spring</h2><h3 id=\"Spring-Bean-生命周期\"><a href=\"#Spring-Bean-生命周期\" class=\"headerlink\" title=\"Spring Bean 生命周期\"></a><em>Spring Bean 生命周期</em></h3><p>Spring Bean 的生命周期可概括为<strong>实例化 → 属性赋值 → 初始化 → 销毁</strong><br><strong>1. 实例化</strong></p>\n<ul>\n<li>通过 Java 反射 API 根据 Bean 定义创建实例。</li>\n</ul>\n<p><strong>2. 属性赋值</strong></p>\n<ul>\n<li>注入依赖和值：<ul>\n<li><code>@Autowired</code>、<code>@Resource</code> 注入依赖。</li>\n<li><code>@Value</code> 注入配置值。</li>\n<li>构造函数或 setter 方法注入。</li>\n</ul>\n</li>\n</ul>\n<p><strong>3. 初始化</strong></p>\n<ul>\n<li><strong>Aware 接口回调</strong>（注入 Spring 容器相关资源）：<ul>\n<li><code>BeanNameAware</code>：调用 <code>setBeanName()</code>，传入 Bean 名称。</li>\n<li><code>BeanClassLoaderAware</code>：调用 <code>setBeanClassLoader()</code>，传入类加载器。</li>\n<li><code>BeanFactoryAware</code>：调用 <code>setBeanFactory()</code>，传入 BeanFactory。</li>\n<li>其他 Aware 接口（如 <code>ApplicationContextAware</code>）类似。</li>\n</ul>\n</li>\n<li><strong>前置处理：</strong><ul>\n<li>执行 <code>BeanPostProcessor</code> 的 <code>postProcessBeforeInitialization()</code>。</li>\n</ul>\n</li>\n<li><strong>初始化方法：</strong><ul>\n<li>若实现 <code>InitializingBean</code>，调用 <code>afterPropertiesSet()</code>。</li>\n<li>若配置 <code>init-method</code>（或 <code>@PostConstruct</code>），执行指定方法。</li>\n</ul>\n</li>\n<li><strong>后置处理：</strong><ul>\n<li>执行 <code>BeanPostProcessor</code> 的 <code>postProcessAfterInitialization()</code>。</li>\n</ul>\n</li>\n</ul>\n<p><strong>4. 销毁</strong></p>\n<ul>\n<li>注册销毁回调，容器关闭时执行：<ul>\n<li>若实现 <code>DisposableBean</code>，调用 <code>destroy()</code>。</li>\n<li>若配置 <code>destroy-method</code>（或 <code>@PreDestroy</code>），执行指定方法。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"循环依赖\"><a href=\"#循环依赖\" class=\"headerlink\" title=\"循环依赖\"></a><em>循环依赖</em></h3><p><strong>三级缓存：</strong></p>\n<ul>\n<li><code>一级（singletonObjects）</code> 存完全初始化的 Bean</li>\n<li><code>二级（earlySingletonObjects）</code> 存实例化但未初始化的 Bean</li>\n<li><code>三级（singletonFactories）</code> 存 ObjectFactory，生成原始或代理 Bean</li>\n</ul>\n<p><strong>循环依赖解决过程：</strong></p>\n<ol>\n<li>A 实例化，放入三级缓存，触发 B 创建。</li>\n<li>B 实例化，找到三级缓存中的 A，移至二级缓存，B 完成创建，放入一级缓存。</li>\n<li>A 从一级缓存获取 B，完成创建，放入一级缓存。</li>\n</ol>\n<h3 id=\"为什么要三级缓存-二级缓存已经可以解决循环依赖了\"><a href=\"#为什么要三级缓存-二级缓存已经可以解决循环依赖了\" class=\"headerlink\" title=\"为什么要三级缓存 二级缓存已经可以解决循环依赖了\"></a><em>为什么要三级缓存 二级缓存已经可以解决循环依赖了</em></h3><ul>\n<li><strong>提前暴露对象：</strong> 当A和B互相依赖时，Spring先把A给B用。二级缓存存的是“半成品”，但A需要代理如AOP就不行了。三级缓存像“加工厂”，随时变出成品A</li>\n<li><strong>避免重复创建对象：</strong> 二级缓存只存未完成的对象，每次用的时候可能得重新搞一个完成的对象，浪费资源</li>\n<li><strong>支持复杂的循环链：</strong> 如果不只是A依赖B、B依赖A，而是好几个Bean形成一个依赖链，二级缓存就应付不下了，只能管直接依赖</li>\n</ul>\n<h3 id=\"为什么构造器注入无法解决-Spring-循环依赖\"><a href=\"#为什么构造器注入无法解决-Spring-循环依赖\" class=\"headerlink\" title=\"为什么构造器注入无法解决 Spring 循环依赖\"></a><em>为什么构造器注入无法解决 Spring 循环依赖</em></h3><ul>\n<li><strong>构造器注入要求：</strong> Bean 在构造时必须提供所有依赖，依赖对象需先完全实例化。</li>\n<li><strong>冲突：</strong><ul>\n<li>A 构造需要 B，但 B 未创建；B 构造需要 A，A 也是半成品。</li>\n<li>Spring 无法提前暴露 A 的半成品给 B 的构造器，因为构造器注入要求依赖立即可用。</li>\n</ul>\n</li>\n<li><strong>结果：</strong> 循环依赖无法解析，Spring 抛出 <code>BeanCurrentlyInCreationException</code>。</li>\n</ul>\n<h3 id=\"为什么-Async-导致-Spring-循环依赖解决失败\"><a href=\"#为什么-Async-导致-Spring-循环依赖解决失败\" class=\"headerlink\" title=\"为什么 @Async 导致 Spring 循环依赖解决失败\"></a><em>为什么 @Async 导致 Spring 循环依赖解决失败</em></h3><ul>\n<li><code>@Async</code> 需要代理：<code>@Async</code> 标记的 Bean（如 A）需通过代理（如 CGLIB&#x2F;JDK 动态代理）包装，以实现异步调用。</li>\n<li><strong>代理生成时机：</strong> 代理对象需在 Bean 完全初始化（属性注入和初始化后）后生成，半成品 Bean 无法直接生成代理。</li>\n<li><strong>冲突：</strong><ul>\n<li>A 是半成品时被 B 使用（通过二级缓存提前暴露），但 A 的代理对象尚未生成。</li>\n<li>B 试图使用 A 的代理对象（因 <code>@Async</code>），却发现 A 未完成初始化，导致依赖无法解析。</li>\n</ul>\n</li>\n<li><strong>结果：</strong> Spring 检测到循环依赖无法解决，抛出 <code>BeanCurrentlyInCreationException</code>。</li>\n</ul>\n<h3 id=\"Spring-MVC-工作流程\"><a href=\"#Spring-MVC-工作流程\" class=\"headerlink\" title=\"Spring MVC 工作流程\"></a><em>Spring MVC 工作流程</em></h3><p><strong>流程：</strong> 请求 -&gt; 映射 -&gt; 处理 -&gt; 视图解析 -&gt; 渲染 -&gt; 响应</p>\n<ol>\n<li><strong>请求接收：</strong> 客户端请求发送到 <code>DispatcherServlet</code>（前端控制器）。</li>\n<li><strong>映射处理器：</strong> <code>DispatcherServlet</code> 通过 <code>HandlerMapping</code> 根据 URL 匹配对应的 Controller 和方法。</li>\n<li><strong>请求处理：</strong> <code>DispatcherServlet</code> 调用 <code>HandlerAdapter</code> 执行 Controller 方法，处理请求，返回 <code>ModelAndView</code>（模型数据 + 视图名）。</li>\n<li><strong>视图解析：</strong> <code>DispatcherServlet</code> 通过 <code>ViewResolver</code> 解析视图名，获取具体视图。</li>\n<li><strong>视图渲染：</strong> 视图使用模型数据渲染，生成 HTML。</li>\n<li><strong>响应返回：</strong> <code>DispatcherServlet</code> 将响应返回客户端，完成请求。</li>\n</ol>\n<h2 id=\"Mybaits\"><a href=\"#Mybaits\" class=\"headerlink\" title=\"Mybaits\"></a>Mybaits</h2><h3 id=\"MyBatis-的优缺点\"><a href=\"#MyBatis-的优缺点\" class=\"headerlink\" title=\"MyBatis 的优缺点\"></a><em>MyBatis 的优缺点</em></h3><p><strong>优点：</strong></p>\n<ol>\n<li><strong>灵活性高：</strong> 基于 SQL 编程，SQL 写在 XML 或注解中，解耦代码与 SQL，便于维护。支持动态 SQL（XML 标签如 <if>、<foreach>），适应复杂查询。</li>\n<li><strong>代码简洁：</strong> 相比 JDBC，减少超 50% 代码量，自动处理连接开关、参数映射、结果集转换。</li>\n<li><strong>兼容性强：</strong> 通过 JDBC 连接数据库，支持所有 JDBC 兼容的数据库。</li>\n<li><strong>集成性好：</strong> 与 Spring 无缝集成，支持 Spring 的事务管理和依赖注入。</li>\n<li><strong>ORM 支持：</strong> 提供映射标签（<resultMap>），支持对象与数据库字段映射。支持对象关系维护（如一对多、多对多）。</li>\n</ol>\n<p><strong>缺点：</strong></p>\n<ol>\n<li><strong>SQL 编写工作量大：</strong> 需手动编写 SQL，字段多或关联表多时工作量增加。对开发者 SQL 能力要求较高。</li>\n<li><strong>数据库移植性差：</strong> SQL 语句依赖特定数据库（如 MySQL、Oracle），更换数据库需重写 SQL。</li>\n</ol>\n<h3 id=\"MyBatis-缓存机制\"><a href=\"#MyBatis-缓存机制\" class=\"headerlink\" title=\"MyBatis 缓存机制\"></a><em>MyBatis 缓存机制</em></h3><p><strong>一级缓存（Local Cache）：</strong></p>\n<ul>\n<li><strong>定义：</strong> 会话级缓存，存在于 <code>SqlSession</code> 内部。</li>\n<li><strong>作用：</strong> 缓存同一 <code>SqlSession</code> 内相同 SQL 的查询结果。</li>\n<li><strong>特点：</strong><ul>\n<li><strong>默认开启，</strong> 无法关闭。</li>\n<li><strong>线程安全：</strong> 每个 <code>SqlSession</code> 独立，互不干扰。</li>\n<li><strong>生命周期：</strong> 随 <code>SqlSession</code> 关闭而清空。</li>\n<li><strong>失效场景：</strong><ul>\n<li>执行增删改操作（<code>insert</code>、<code>update</code>、<code>delete</code>），清空缓存。</li>\n<li>手动调用 <code>session.clearCache()</code>。</li>\n<li><code>SqlSession</code> 提交（<code>commit</code>）或关闭（<code>close</code>）。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><strong>实现：</strong> 基于 <code>PerpetualCache</code>（HashMap 实现）。</li>\n<li><strong>示例：</strong><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span> (<span class=\"type\">SqlSession</span> <span class=\"variable\">session</span> <span class=\"operator\">=</span> factory.openSession()) &#123;</span><br><span class=\"line\">    <span class=\"type\">UserMapper</span> <span class=\"variable\">mapper</span> <span class=\"operator\">=</span> session.getMapper(UserMapper.class);</span><br><span class=\"line\">    <span class=\"type\">User</span> <span class=\"variable\">user1</span> <span class=\"operator\">=</span> mapper.selectUser(<span class=\"number\">1</span>); <span class=\"comment\">// 查数据库</span></span><br><span class=\"line\">    <span class=\"type\">User</span> <span class=\"variable\">user2</span> <span class=\"operator\">=</span> mapper.selectUser(<span class=\"number\">1</span>); <span class=\"comment\">// 命中一级缓存</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<p><strong>二级缓存（Global Cache）：</strong></p>\n<ul>\n<li><strong>定义：</strong> Mapper 级缓存，跨 <code>SqlSession</code>，作用于同一 Mapper 命名空间。</li>\n<li><strong>作用：</strong> 缓存不同 SqlSession 对同一 Mapper 的查询结果。</li>\n<li><strong>特点：</strong><ul>\n<li><strong>默认关闭，</strong> 需手动启用：<ul>\n<li>全局配置：<code>mybatis-config.xml</code> 中 <code>&lt;setting name=&quot;cacheEnabled&quot; value=&quot;true&quot;/&gt;</code>。</li>\n<li>Mapper 配置：在 XML 或接口上添加 <code>&lt;cache&gt;</code> 或 <code>@CacheNamespace</code>。</li>\n</ul>\n</li>\n<li><strong>线程安全：</strong> 支持并发访问，通常使用 <code>SynchronizedCache</code> 或第三方缓存（如 Ehcache、Redis）。</li>\n<li><strong>生命周期：</strong> 随应用存活，除非手动清空或失效。</li>\n<li><strong>失效场景：</strong><ul>\n<li>Mapper 命名空间内执行增删改，清除该 Mapper 缓存。</li>\n<li>配置的缓存过期策略触发（如 LRU、TTL）。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><strong>实现：</strong> 支持自定义缓存（如 <code>EhcacheCache</code>），默认基于 <code>PerpetualCache</code>。</li>\n<li><strong>示例：</strong><figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- Mapper XML --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">cache</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;org.apache.ibatis.cache.impl.PerpetualCache&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">SqlSession</span> <span class=\"variable\">session1</span> <span class=\"operator\">=</span> factory.openSession();</span><br><span class=\"line\"><span class=\"type\">UserMapper</span> <span class=\"variable\">mapper1</span> <span class=\"operator\">=</span> session1.getMapper(UserMapper.class);</span><br><span class=\"line\"><span class=\"type\">User</span> <span class=\"variable\">user1</span> <span class=\"operator\">=</span> mapper1.selectUser(<span class=\"number\">1</span>); <span class=\"comment\">// 查数据库，存二级缓存</span></span><br><span class=\"line\">session1.close();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">SqlSession</span> <span class=\"variable\">session2</span> <span class=\"operator\">=</span> factory.openSession();</span><br><span class=\"line\"><span class=\"type\">UserMapper</span> <span class=\"variable\">mapper2</span> <span class=\"operator\">=</span> session2.getMapper(UserMapper.class);</span><br><span class=\"line\"><span class=\"type\">User</span> <span class=\"variable\">user2</span> <span class=\"operator\">=</span> mapper2.selectUser(<span class=\"number\">1</span>); <span class=\"comment\">// 命中二级缓存</span></span><br><span class=\"line\">session2.close();</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"SqlSession-与-SqlSessionFactory\"><a href=\"#SqlSession-与-SqlSessionFactory\" class=\"headerlink\" title=\"SqlSession 与 SqlSessionFactory\"></a><em>SqlSession 与 SqlSessionFactory</em></h3><p><strong>SqlSessionFactory</strong></p>\n<ul>\n<li><strong>作用：</strong> 工厂类，负责创建 <code>SqlSession</code> 实例。</li>\n<li><strong>功能：</strong><ol>\n<li><strong>创建 SqlSession：</strong> 根据配置生成 <code>SqlSession</code> 用于数据库交互。</li>\n<li><strong>管理配置：</strong> 存储并解析 MyBatis 配置（数据源、Mapper、缓存等）。</li>\n<li><strong>提升性能：</strong> 初始化时缓存配置，避免重复解析。</li>\n</ol>\n</li>\n<li><strong>特点：</strong><ul>\n<li><strong>线程安全：</strong> 单例模式，全局唯一，多个线程共享。</li>\n<li><strong>生命周期：</strong> 应用启动时创建，存活至应用结束。</li>\n</ul>\n</li>\n</ul>\n<p><strong>SqlSession</strong></p>\n<ul>\n<li><strong>作用：</strong> 会话对象，执行 SQL 操作，与数据库直接交互。</li>\n<li><strong>功能：</strong><ol>\n<li><strong>执行 SQL：</strong> 通过 Mapper 或直接调用 <code>selectList</code>、<code>insert</code> 等方法。</li>\n<li><strong>管理事务：</strong> 支持提交（<code>commit</code>）、回滚（<code>rollback</code>）。</li>\n<li><strong>获取 Mapper：</strong> 通过 <code>getMapper</code> 获取 Mapper 接口实例。</li>\n</ol>\n</li>\n<li><strong>特点：</strong><ul>\n<li><strong>非线程安全：</strong> 每个线程需独立创建，使用后关闭。</li>\n<li><strong>生命周期：</strong> 短生命周期，通常在一次数据库操作中创建和销毁。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"分布式\"><a href=\"#分布式\" class=\"headerlink\" title=\"分布式\"></a>分布式</h2><h3 id=\"CAP理论\"><a href=\"#CAP理论\" class=\"headerlink\" title=\"CAP理论\"></a><em>CAP理论</em></h3><h3 id=\"BASE理论\"><a href=\"#BASE理论\" class=\"headerlink\" title=\"BASE理论\"></a><em>BASE理论</em></h3><h3 id=\"分布式锁\"><a href=\"#分布式锁\" class=\"headerlink\" title=\"分布式锁\"></a><em>分布式锁</em></h3><h3 id=\"分布式事务\"><a href=\"#分布式事务\" class=\"headerlink\" title=\"分布式事务\"></a><em>分布式事务</em></h3><h2 id=\"MySQL\"><a href=\"#MySQL\" class=\"headerlink\" title=\"MySQL\"></a>MySQL</h2><h3 id=\"SQL执行顺序\"><a href=\"#SQL执行顺序\" class=\"headerlink\" title=\"SQL执行顺序\"></a><em>SQL执行顺序</em></h3><p><code>FROM</code> -&gt; <code>JOIN</code> -&gt; <code>ON</code> -&gt; <code>WHERE</code> -&gt; <code>GROUP BY</code> -&gt; <code>HAVING</code> -&gt; <code>SELECT</code> -&gt; <code>ORDER BY</code> -&gt; <code>LIMIT</code></p>\n<h3 id=\"SQL-执行过程\"><a href=\"#SQL-执行过程\" class=\"headerlink\" title=\"SQL 执行过程\"></a><em>SQL 执行过程</em></h3><p><strong>SQL 执行流程：</strong> <code>缓存</code> -&gt; <code>解析（词法、语法）</code> -&gt; <code>预处理</code> -&gt; <code>优化</code> -&gt; <code>执行（操作 Buffer Pool/磁盘，记录日志）</code><br>缓存：检查查询缓存（key：SQL，value：结果），MySQL 5.7 默认关闭，8.0 默认启用<br>解析器：词法解析：将 SQL 拆分为 token，语法解析：验证 SQL 语法，生成解析树。<br>预处理器：检查表名、字段名等是否存在，验证语义合法性<br>优化器：优化sql，选择最佳的执行路径，生成执行计划<br>执行器：操作存储引擎，返回执行结果</p>\n<h3 id=\"事务ACID特性\"><a href=\"#事务ACID特性\" class=\"headerlink\" title=\"事务ACID特性\"></a><em>事务ACID特性</em></h3><ul>\n<li><code>原子性（Atomicity）</code> 事务作为一个整体被执行，要么全部完成，要么全部不执行</li>\n<li><code>一致性（Consistency）</code> 事务必须使数据库从一个一致性状态转换到另一个一致性状态</li>\n<li><code>隔离性（Isolation）</code> 事务的执行不被其他事务干扰</li>\n<li><code>持久性（Durability）</code> 一旦事务完成，所做的变更完全保存在数据库中</li>\n</ul>\n<h3 id=\"事务ACID实现原理\"><a href=\"#事务ACID实现原理\" class=\"headerlink\" title=\"事务ACID实现原理\"></a><em>事务ACID实现原理</em></h3><ul>\n<li><code>原子性</code> 通过 undo log（回滚日志） 来保证的</li>\n<li><code>持久性</code> 通过 redo log （重做日志）来保证的</li>\n<li><code>隔离性</code> 通过 MVCC（多版本并发控制） 或锁机制来保证的</li>\n<li><code>一致性</code> 通过原子性+持久性+隔离性来保证</li>\n</ul>\n<h3 id=\"事务隔离级别\"><a href=\"#事务隔离级别\" class=\"headerlink\" title=\"事务隔离级别\"></a><em>事务隔离级别</em></h3><table>\n<thead>\n<tr>\n<th>隔离级别</th>\n<th>描述</th>\n<th>脏读</th>\n<th>不可重复读</th>\n<th>幻读</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Read Uncommitted</td>\n<td>未提交读，无锁，允许读取未提交数据</td>\n<td>√</td>\n<td>√</td>\n<td>√</td>\n</tr>\n<tr>\n<td>Read Committed</td>\n<td>已提交读，共享锁，仅读已提交数据</td>\n<td>-</td>\n<td>√</td>\n<td>√</td>\n</tr>\n<tr>\n<td>Repeatable Read（默认）</td>\n<td>可重复读，共享锁，事务内读一致</td>\n<td>-</td>\n<td>-</td>\n<td>√</td>\n</tr>\n<tr>\n<td>Serializable</td>\n<td>序列化，排他锁，事务完全隔离</td>\n<td>-</td>\n<td>-</td>\n<td>-</td>\n</tr>\n</tbody></table>\n<p><strong>说明：</strong></p>\n<ul>\n<li><strong>脏读：</strong> 读取未提交的数据（可能回滚）。</li>\n<li><strong>不可重复读：</strong> 同一事务内多次读取同一数据，结果不一致。</li>\n<li><strong>幻读：</strong> 同一事务内多次查询同一范围，记录条数变化。</li>\n</ul>\n<h3 id=\"事务隔离实现原理\"><a href=\"#事务隔离实现原理\" class=\"headerlink\" title=\"事务隔离实现原理\"></a><em>事务隔离实现原理</em></h3><p><strong>未提交读（Read Uncommitted）</strong> - 读不加锁</p>\n<ul>\n<li><strong>原理：</strong> <ul>\n<li>读操作不加锁，不阻塞其他事务的读写。</li>\n<li>写操作加锁，阻塞其他事务的写，但不阻塞读。</li>\n</ul>\n</li>\n</ul>\n<p><strong>已提交读（Read Committed）</strong> - MVCC + ReadView</p>\n<ul>\n<li><strong>原理：</strong> <ul>\n<li>使用 MVCC，每次查询生成新的 ReadView，仅读取已提交的数据版本。</li>\n<li>ReadView 包含事务 ID 和可见版本，确保不读未提交数据。</li>\n</ul>\n</li>\n</ul>\n<p><strong>可重复读（Repeatable Read）</strong> - MVCC + 单一 ReadView</p>\n<ul>\n<li><strong>原理：</strong> <ul>\n<li>使用 MVCC，事务开始时生成一次 ReadView，事务内所有查询复用此 ReadView。</li>\n<li>确保事务内读数据一致，基于版本控制避免修改干扰。</li>\n</ul>\n</li>\n</ul>\n<p><strong>串行化（Serializable）</strong> - 表锁</p>\n<ul>\n<li><strong>原理：</strong> <ul>\n<li>读操作加共享锁（读锁），写操作加排他锁（写锁）。</li>\n<li>读写锁冲突时，后续事务等待前事务完成，强制串行执行。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"MVCC\"><a href=\"#MVCC\" class=\"headerlink\" title=\"MVCC\"></a><em>MVCC</em></h3><p><strong>隐藏字段：</strong></p>\n<ul>\n<li><strong>事务 ID（DB_TRX_ID）：</strong> 记录创建或最后修改记录的事务 ID。</li>\n<li><strong>回滚指针（DB_ROLL_PTR）：</strong> 指向 undo log 中记录的上一版本。</li>\n<li><strong>删除标记（DB_ROW_ID）：</strong> 标记记录是否删除。</li>\n</ul>\n<p><strong>ReadView：</strong></p>\n<ul>\n<li>事务开始时生成 ReadView，包含：<ul>\n<li>当前活跃事务 ID 列表（未提交事务）。</li>\n<li>最小事务 ID（up_limit_id）和最大事务 ID（low_limit_id）。</li>\n</ul>\n</li>\n<li>ReadView 决定事务能看到的数据版本：<ul>\n<li>记录的事务 ID &lt; up_limit_id：已提交，可见。</li>\n<li>记录的事务 ID 在活跃列表中：未提交，不可见。</li>\n<li>记录的事务 ID &gt; low_limit_id：未来事务，不可见。</li>\n</ul>\n</li>\n</ul>\n<p><strong>版本链：</strong></p>\n<ul>\n<li>修改记录时，旧版本存入 undo log，新版本记录新事务 ID。</li>\n<li>版本链通过回滚指针连接，允许读取历史版本。</li>\n</ul>\n<h3 id=\"MyISAM-与-InnoDB-的区别\"><a href=\"#MyISAM-与-InnoDB-的区别\" class=\"headerlink\" title=\"MyISAM 与 InnoDB 的区别\"></a><em>MyISAM 与 InnoDB 的区别</em></h3><table>\n<thead>\n<tr>\n<th>特性</th>\n<th>MyISAM</th>\n<th>InnoDB</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>数据与索引关系</td>\n<td>非聚集索引，数据和索引分离</td>\n<td>聚集索引，数据按主键存储</td>\n</tr>\n<tr>\n<td>索引类型</td>\n<td>B+ 树（主键和二级索引一致）</td>\n<td>B+ 树（主键索引含数据）</td>\n</tr>\n<tr>\n<td>主键处理</td>\n<td>可无主键，无排序要求</td>\n<td>必须有主键（显式或隐式）</td>\n</tr>\n<tr>\n<td>文件结构</td>\n<td>frm表结构，MYI索引，MYD数据</td>\n<td>frm表结构（8.0整合到ibd文件中），ibd数据和索引</td>\n</tr>\n<tr>\n<td>事务支持</td>\n<td>不支持</td>\n<td>支持（MVCC、日志机制）</td>\n</tr>\n<tr>\n<td>锁粒度</td>\n<td>表级锁</td>\n<td>行级锁</td>\n</tr>\n<tr>\n<td>外键支持</td>\n<td>不支持</td>\n<td>支持</td>\n</tr>\n<tr>\n<td>崩溃恢复</td>\n<td>无日志支持，恢复较弱</td>\n<td>有 redo&#x2F;undo log，恢复能力强</td>\n</tr>\n</tbody></table>\n<h3 id=\"聚集索引和聚集索引区别\"><a href=\"#聚集索引和聚集索引区别\" class=\"headerlink\" title=\"聚集索引和聚集索引区别\"></a><em>聚集索引和聚集索引区别</em></h3><ul>\n<li><code>聚集索引</code> 仅一个，主键(默认) &gt; 唯一非空索引 &gt; 隐藏列GEN_CLUST_INDEX</li>\n<li><code>非聚集索引</code> 可多个，普通索引</li>\n</ul>\n<h3 id=\"一个表中如果没有创建索引，那么还会创建b-树吗\"><a href=\"#一个表中如果没有创建索引，那么还会创建b-树吗\" class=\"headerlink\" title=\"一个表中如果没有创建索引，那么还会创建b+树吗\"></a><em>一个表中如果没有创建索引，那么还会创建b+树吗</em></h3><ul>\n<li><code>MyISAM</code> 如果没有显式创建任何索引，就不会有 B+ 树</li>\n<li><code>InnoDB</code> 有主键自动创建B+ 树，无主键则非空的唯一索引作为聚集索引创建，唯一索引也没有则会隐式生成一个内部的 ROWID（6 字节的隐藏列）作为主键构建B+ 树</li>\n</ul>\n<h3 id=\"B树-和-B-树-的区别\"><a href=\"#B树-和-B-树-的区别\" class=\"headerlink\" title=\"B树 和 B+树 的区别\"></a><em>B树 和 B+树 的区别</em></h3><img src=\"/%E9%9D%A2%E8%AF%95%E9%A2%98/%E9%9D%A2%E8%AF%95%E9%A2%98/B%E6%A0%91%E5%92%8CB+%E6%A0%91%E7%9A%84%E5%8C%BA%E5%88%AB.png\" class=\"\" title=\"B树和B+树的区别\">\n<ol>\n<li>提高数据检索性能：数据放在叶子节点，可以腾出空间让分支节点可以组织更宽的树</li>\n<li>对范围查询和排序性能更好：叶子节点双向链表，所有数据都维护在叶子节点</li>\n</ol>\n<h3 id=\"一张表最好不超过几个索引\"><a href=\"#一张表最好不超过几个索引\" class=\"headerlink\" title=\"一张表最好不超过几个索引\"></a><em>一张表最好不超过几个索引</em></h3><ul>\n<li>最好不超过5个，索引可以增加查询效率，但同样也会降低插入和更新的效率，甚至有些情况下会降低查询效率</li>\n</ul>\n<h3 id=\"索引失效\"><a href=\"#索引失效\" class=\"headerlink\" title=\"索引失效\"></a><em>索引失效</em></h3><ul>\n<li><code>模：</code> 模糊查询。like查询以%开头，会导致索引失效，可以有两种方式优化：a.使用覆盖索引优化，只查询索引列；b.把%放后面，索引生效</li>\n<li><code>数：</code> 数据类型。要保证索引字段与匹配数据类型一致。</li>\n<li><code>函：</code> 函数。索引字段不做函数处理</li>\n<li><code>空：</code> null值。唯一索引有null值 not null 或 null</li>\n<li><code>运：</code> 运算。索引字段不做运算</li>\n<li><code>左：</code> 最左匹配原则</li>\n<li><code>回：</code> 回表超过临界值。避免回表尽量覆盖索引</li>\n<li><code>其他：</code><ul>\n<li>查询条件包含OR，可能导致索引失效</li>\n<li>在索引字段上使用（!&#x3D; 或者&lt;&gt;，not in）时， 索引失效</li>\n<li>mysql优化器估计使用全表扫描要比使用索引快，则不使用索引</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"索引下推\"><a href=\"#索引下推\" class=\"headerlink\" title=\"索引下推\"></a><em>索引下推</em></h3><p><strong>作用：</strong> 优化非主键索引查询，减少回表次数，提升效率。<br><strong>MySQL5.6之前：</strong> 利用索引（如 name）定位记录后，逐一回表查询完整数据，再过滤其他条件（如 age &gt; 30）<br><strong>MySQL5.6之后：</strong> 将索引包含的条件（如 age &gt; 30）下推到存储引擎，索引层过滤记录，减少回表</p>\n<p><strong>示例:</strong> <code>SELECT * FROM users WHERE name = &#39;Alice&#39; AND age &gt; 30;</code></p>\n<ul>\n<li><p><strong>无索引下推：</strong></p>\n<ul>\n<li>用 <code>idx_name_age</code> 索引，找到 <code>name = &#39;Alice&#39;</code> 的记录（id&#x3D;1, id&#x3D;3）</li>\n<li>回表读取完整记录：id&#x3D;1 (Alice, 25), id&#x3D;3 (Alice, 35)</li>\n<li>服务器层过滤 <code>age &gt; 30</code>，保留 id&#x3D;3（回表两次）</li>\n</ul>\n</li>\n<li><p><strong>有索引下推：</strong></p>\n<ul>\n<li>用 <code>idx_name_age</code> 索引，找到 <code>name = &#39;Alice&#39;</code> 的记录</li>\n<li>索引层过滤 <code>age &gt; 30</code>：id&#x3D;1 (age&#x3D;25) 丢弃，id&#x3D;3 (age&#x3D;35) 保留</li>\n<li>仅对 id&#x3D;3 回表，读取记录 (Alice, 35)（回表一次）</li>\n</ul>\n</li>\n<li><p><strong>标识：</strong> <code>EXPLAIN</code> 输出中 <code>Using index condition</code> 表示启用索引下推</p>\n</li>\n</ul>\n<h3 id=\"order-by双路排序和单路排序\"><a href=\"#order-by双路排序和单路排序\" class=\"headerlink\" title=\"order by双路排序和单路排序\"></a><em>order by双路排序和单路排序</em></h3><ul>\n<li><code>单路排序</code> 一次取出所有字段进行排序，内存不够用的时候会使用磁盘</li>\n<li><code>双路排序</code> 取出排序字段进行排序，排序完成后再次回表查询所需要的其他字段</li>\n</ul>\n<h3 id=\"InnoDB如何管理Page页\"><a href=\"#InnoDB如何管理Page页\" class=\"headerlink\" title=\"InnoDB如何管理Page页\"></a><em>InnoDB如何管理Page页</em></h3><h3 id=\"Buffer-Pool-缓存池内存结构\"><a href=\"#Buffer-Pool-缓存池内存结构\" class=\"headerlink\" title=\"Buffer Pool 缓存池内存结构\"></a><em>Buffer Pool 缓存池内存结构</em></h3><p><strong>作用：</strong> 缓存数据库页到内存，减少磁盘 I&#x2F;O，提升读写性能。默认大小 128MB（<code>innodb_buffer_pool_size</code>）<br><strong>三大链表：</strong></p>\n<ol>\n<li><p><strong>Free 链表（空闲链表）：</strong></p>\n<ul>\n<li><strong>内容：</strong> 未使用的空闲缓冲页。</li>\n<li><strong>作用：</strong> 新数据页读取时，从 Free 链表分配空闲页。</li>\n</ul>\n</li>\n<li><p><strong>Flush 链表（刷新链表）：</strong></p>\n<ul>\n<li><strong>内容：</strong> 被修改的脏页（内存与磁盘不一致）。</li>\n<li><strong>作用：</strong> 管理脏页，定期刷回磁盘以确保数据一致性。</li>\n</ul>\n</li>\n<li><p><strong>LRU 链表（最近最少使用链表）：</strong></p>\n<ul>\n<li><strong>内容：</strong> 缓存最近访问的数据页。</li>\n<li><strong>作用：</strong> 实现淘汰策略，空间不足时移除最久未用页。</li>\n<li><strong>分区：</strong><ul>\n<li>热数据区（5&#x2F;8）：存储频繁访问页。</li>\n<li>冷数据区（3&#x2F;8）：存储新加载页。</li>\n<li><strong>转移规则：</strong> 冷数据页再次访问且时间差 &gt; 1 秒（<code>innodb_old_blocks_time</code>），移至热数据区</li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n<p><strong>工作流程：</strong></p>\n<ol>\n<li><strong>数据读取：</strong> 检查 LRU 链表：若页存在，直接使用；若不存在，从 Free 链表取空闲页加载数据；Free 链表无空闲页时，LRU 淘汰最久未用页。</li>\n<li><strong>数据修改：</strong> 修改页后标记为脏页，加入 Flush 链表和 LRU 头部。</li>\n<li><strong>数据刷新：</strong> 后台线程根据策略（如脏页比例、时间）将 Flush 链表脏页刷回磁盘，并移除。</li>\n</ol>\n<h3 id=\"批量插入，如何不插入重复数据\"><a href=\"#批量插入，如何不插入重复数据\" class=\"headerlink\" title=\"批量插入，如何不插入重复数据\"></a><em>批量插入，如何不插入重复数据</em></h3><ul>\n<li><code>INSERT IGNORE INTO</code></li>\n</ul>\n<h3 id=\"Redolog-与-Binlog-区别\"><a href=\"#Redolog-与-Binlog-区别\" class=\"headerlink\" title=\"Redolog 与 Binlog 区别\"></a><em>Redolog 与 Binlog 区别</em></h3><table>\n<thead>\n<tr>\n<th>特性</th>\n<th>Redolog</th>\n<th>Binlog</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>层面</td>\n<td>InnoDB 存储引擎</td>\n<td>MySQL 服务层</td>\n</tr>\n<tr>\n<td>作用</td>\n<td>保证事务持久性，崩溃后恢复内存数据</td>\n<td>记录操作历史，支持数据同步与恢复</td>\n</tr>\n<tr>\n<td>存储目标</td>\n<td>Buffer Pool（内存数据）</td>\n<td>磁盘数据</td>\n</tr>\n<tr>\n<td>日志类型</td>\n<td>物理日志（页修改）</td>\n<td>逻辑日志（记录 SQL&#x2F;行操作）</td>\n</tr>\n<tr>\n<td>记录范围</td>\n<td>仅 InnoDB 表事务操作</td>\n<td>所有数据库操作</td>\n</tr>\n<tr>\n<td>用途</td>\n<td>崩溃恢复</td>\n<td>主从复制、误删恢复、数据归档</td>\n</tr>\n<tr>\n<td>写入时机</td>\n<td>事务中，循环覆盖</td>\n<td>事务提交，顺序追加</td>\n</tr>\n</tbody></table>\n<h2 id=\"MQ-消息队列\"><a href=\"#MQ-消息队列\" class=\"headerlink\" title=\"MQ 消息队列\"></a>MQ 消息队列</h2><h2 id=\"Redis\"><a href=\"#Redis\" class=\"headerlink\" title=\"Redis\"></a>Redis</h2><h3 id=\"Redis-数据类型\"><a href=\"#Redis-数据类型\" class=\"headerlink\" title=\"Redis 数据类型\"></a><em>Redis 数据类型</em></h3><ul>\n<li>5种基础数据类型：<code>String（字符串）</code>、<code>List（列表）</code>、<code>Set（集合）</code>、<code>Hash（散列）</code>、<code>Zset（有序集合）</code></li>\n<li>3种特殊数据类型：<code>HyperLogLog（基数统计）</code>、<code>Bitmap （位图）</code>、<code>Geospatial（地理位置）</code></li>\n</ul>\n<h3 id=\"数据结构中哪些是线程安全的\"><a href=\"#数据结构中哪些是线程安全的\" class=\"headerlink\" title=\"数据结构中哪些是线程安全的\"></a><em>数据结构中哪些是线程安全的</em></h3><ul>\n<li>线程安全：<code>String（字符串）</code>、<code>Bitmap （位图）</code></li>\n</ul>\n<h3 id=\"Redis优缺点\"><a href=\"#Redis优缺点\" class=\"headerlink\" title=\"Redis优缺点\"></a><em>Redis优缺点</em></h3><ul>\n<li>优点：<ul>\n<li>高性能：Redis将数据存储在内存中，读取和写入速度非常快</li>\n<li>丰富的数据类型：支持多种数据类型</li>\n<li>持久化：提供持久化</li>\n<li>分布式和高可用性：支持主从复制、哨兵模式和Redis集群</li>\n<li>事务支持：通过MULTI、EXEC、DISCARD和WATCH命令</li>\n<li>Lua脚本：支持通过Lua脚本进行原子操作</li>\n</ul>\n</li>\n<li>缺点：<ul>\n<li>内存限制：由于数据存储在内存中，不能处理非常大的数据集</li>\n<li>有限的查询功能：Redis不支持复杂的查询操作</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"Redis单线程还是多线程\"><a href=\"#Redis单线程还是多线程\" class=\"headerlink\" title=\"Redis单线程还是多线程\"></a><em>Redis单线程还是多线程</em></h3><ul>\n<li><strong>命令处理：</strong> Redis 的核心（网络 I&#x2F;O、键值读写、命令解析与执行）由单线程顺序处理，确保命令原子性和高性能。</li>\n<li><strong>多线程部分：</strong><ul>\n<li><strong>持久化：</strong> RDB 快照、AOF 重写由子线程&#x2F;进程执行。</li>\n<li><strong>异步删除：</strong> 大键删除（如 UNLINK）使用后台线程。</li>\n<li><strong>集群同步：</strong> 集群数据同步可能涉及额外线程。</li>\n<li><strong>I&#x2F;O 多线程（6.0+）：</strong> 网络 I&#x2F;O 可由多线程处理，但命令执行仍单线程。</li>\n</ul>\n</li>\n<li><strong>总结：</strong> Redis 命令执行是单线程，但持久化、异步任务等辅助功能使用多线程，整体为多线程架构。</li>\n</ul>\n<h3 id=\"Redis单线程为什么还那么快\"><a href=\"#Redis单线程为什么还那么快\" class=\"headerlink\" title=\"Redis单线程为什么还那么快\"></a><em>Redis单线程为什么还那么快</em></h3><ul>\n<li><strong>基于内存操作：</strong> 数据存储在内存中，运算速度快</li>\n<li><strong>数据结构简单：</strong> 专门设计的数据结构，查找和操作多为O(1)</li>\n<li><strong>多路复用和非阻塞IO：</strong> 监听多个socket连接，用单线程处理多请求，减少切换开销，避免IO阻塞</li>\n<li><strong>无上下文切换：</strong> 单线程避免了多线程竞争和切换消耗，且无死锁问题</li>\n</ul>\n<h3 id=\"Redis4-0之前一直采用单线程的主要原因\"><a href=\"#Redis4-0之前一直采用单线程的主要原因\" class=\"headerlink\" title=\"Redis4.0之前一直采用单线程的主要原因\"></a><em>Redis4.0之前一直采用单线程的主要原因</em></h3><ol>\n<li>单线程模型简化开发和调试</li>\n<li>通过 IO 多路复用和非阻塞 IO，实现多客户端并发处理</li>\n<li>性能瓶颈主要在内存或网络带宽，而非 CPU</li>\n</ol>\n<h3 id=\"Redis-内存大小配置\"><a href=\"#Redis-内存大小配置\" class=\"headerlink\" title=\"Redis 内存大小配置\"></a><em>Redis 内存大小配置</em></h3><p><strong>配置方式:</strong> <code>redis.conf</code> 中的 <code>maxmemory</code> 参数设置最大内存限制<br><strong>生产推荐配置:</strong> 设置为最大物理内存的3&#x2F;4</p>\n<h3 id=\"生产中可能阻塞的命令\"><a href=\"#生产中可能阻塞的命令\" class=\"headerlink\" title=\"生产中可能阻塞的命令\"></a><em>生产中可能阻塞的命令</em></h3><ul>\n<li><code>KEYS *</code>：获取所有键。<strong>替代：</strong> 用 <code>SCAN</code> 增量迭代，避免一次性扫描</li>\n<li><code>DEL</code>：删除BigKey。<strong>替代：</strong> 用 <code>UNLINK</code> 异步删除</li>\n<li><code>SMEMBERS</code>：返回 Set 的所有成员。<strong>替代：</strong> 用 <code>SSCAN</code> 分批获取</li>\n<li><code>HGETALL</code>：返回 Hash 的所有键值对。<strong>替代：</strong> 用 <code>HSCAN</code> 分批获取</li>\n<li><code>LRANGE 0 -1</code>：返回 List 的全部元素。<strong>替代：</strong> 指定小范围（如 <code>LRANGE 0 99</code>），或用 <code>LPOP/RPOP</code> 分批取</li>\n<li><code>ZREMRANGEBYRANK / ZREMRANGEBYSCORE</code>：处理大 ZSet。<strong>替代：</strong> 用 <code>ZSCAN + 分批删除</code></li>\n<li><code>FLUSHDB / FLUSHALL</code>：同步清空当前&#x2F;所有数据库。<strong>替代：</strong> 异步 <code>FLUSHDB ASYNC</code> 或 <code>FLUSHALL ASYNC</code></li>\n<li><code>SAVE</code>：同步生成 RDB 快照。<strong>替代：</strong> 用 <code>BGSAVE</code> 异步生成快照</li>\n</ul>\n<h3 id=\"限制生产上阻塞的命令\"><a href=\"#限制生产上阻塞的命令\" class=\"headerlink\" title=\"限制生产上阻塞的命令\"></a><em>限制生产上阻塞的命令</em></h3><p><strong>配置方式:</strong> <code>redis.conf</code> 文件的 <code>SECURITY</code> 部分重命名或禁用命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">rename-command KEYS <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">rename-command FLUSHDB <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">rename-command FLUSHALL <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">.....</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"BigKey\"><a href=\"#BigKey\" class=\"headerlink\" title=\"BigKey\"></a><em>BigKey</em></h3><p><strong>BigKey 的定义 （参考阿里开发规范）</strong></p>\n<ul>\n<li><strong>String 类型：</strong> Value 大小 ≥ 10KB</li>\n<li><strong>List、Hash、Set、ZSet 类型：</strong> 元素个数 &gt; 5000</li>\n</ul>\n<p><strong>如何查找 BigKey</strong></p>\n<ul>\n<li><code>redis-cli --bigkeys</code>：扫描数据库，统计每种类型的最大键</li>\n<li><code>MEMORY USAGE &lt;key&gt;</code>：返回指定键的内存占用（字节）</li>\n</ul>\n<p><strong>如何删除 BigKey</strong></p>\n<ul>\n<li><strong>String：</strong> <code>DEL</code>：直接删除，适合小键。<code>UNLINK</code>：异步删除，释放内存放后台处理，推荐</li>\n<li><strong>Hash：</strong> <code>HSCAN + HDEL</code>：分批扫描和删除字段</li>\n<li><strong>List：</strong> <code>LTRIM</code>：裁剪列表，保留指定范围，逐步清空。配合 <code>LPOP/RPOP</code> 分批移除</li>\n<li><strong>Set：</strong> <code>SSCAN + SREM</code>：分批扫描和移除成员</li>\n<li><strong>ZSet：</strong> <code>ZSCAN + ZREMRANGEBYRANK</code>：分批扫描并按排名删除</li>\n</ul>\n<p><strong>BigKey 调优</strong><br><strong>配置懒惰释放：</strong></p>\n<ul>\n<li><strong>作用：</strong> 异步释放 BigKey 内存，主线程仅标记，实际清理后台异步完成，减少阻塞。</li>\n<li><strong>配置文件：</strong> <code>redis.conf</code> 中启用以下选项<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">lazyfree-lazy-server-del <span class=\"built_in\">yes</span> <span class=\"comment\"># 优化大键删除（如 DEL）</span></span><br><span class=\"line\">replica-lazy-flush <span class=\"built_in\">yes</span> <span class=\"comment\"># 副本同步时减少延迟</span></span><br><span class=\"line\">lazyfree-lazy-user-del <span class=\"built_in\">yes</span> <span class=\"comment\"># 高并发清理用户连接</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"处理-Redis-大量-Key-集中过期\"><a href=\"#处理-Redis-大量-Key-集中过期\" class=\"headerlink\" title=\"处理 Redis 大量 Key 集中过期\"></a><em>处理 Redis 大量 Key 集中过期</em></h3><ol>\n<li><strong>避免集中过期:</strong> 设置过期时间时添加随机偏移（如 <code>EXPIRE key 3600</code> 改为 <code>EXPIRE key $((3600 + RANDOM % 600))</code>）</li>\n<li><strong>启用 Lazyfree 机制:</strong> 配置 redis.conf 启用 <code>lazyfree-lazy-expire yes</code>，过期 Key 由后台线程异步删除，不阻塞主线程</li>\n</ol>\n<h3 id=\"Redis-事务\"><a href=\"#Redis-事务\" class=\"headerlink\" title=\"Redis 事务\"></a><em>Redis 事务</em></h3><p><strong>机制：</strong></p>\n<ul>\n<li>通过 <code>MULTI</code> 开启事务，<code>EXEC</code> 提交命令序列。</li>\n<li>使用 <code>WATCH</code> 监听键，提供 CAS 乐观锁机制，若监听的键变化，事务中止。</li>\n<li><code>DISCARD</code> 可主动取消事务。</li>\n</ul>\n<p><strong>特性：</strong></p>\n<ol>\n<li><strong>连续执行：</strong> 单线程架构确保事务命令连续执行，不被其他客户端中断。</li>\n<li><strong>无隔离级别：</strong> 命令在 <code>EXEC</code> 前不执行，无隔离问题。</li>\n<li><strong>非原子性：</strong> 不保证所有命令同时成功，无回滚，仅决定是否执行全部命令。</li>\n<li><strong>排他性：</strong> 命令按序执行，不被其他命令插入。</li>\n</ol>\n<p><strong>限制：</strong></p>\n<ul>\n<li>不支持回滚，错误命令不影响其他命令，保持简单性和性能。</li>\n</ul>\n<h3 id=\"Redis-主从复制\"><a href=\"#Redis-主从复制\" class=\"headerlink\" title=\"Redis 主从复制\"></a><em>Redis 主从复制</em></h3><h3 id=\"Redis-主从复制原理和工作流程\"><a href=\"#Redis-主从复制原理和工作流程\" class=\"headerlink\" title=\"Redis 主从复制原理和工作流程\"></a><em>Redis 主从复制原理和工作流程</em></h3><ol>\n<li><strong>从机启动，发起同步：</strong> Slave启动后连接Master，发送sync命令。首次连接触发全量复制，Slave原有数据将被Master覆盖</li>\n<li><strong>首次连接，全量复制：</strong> Master接收sync后，后台生成RDB快照并缓存后续写命令。完成后，将RDB文件和缓存命令发送给Slave。Slave保存RDB文件并加载到内存，完成初始化</li>\n<li><strong>心跳持续，保持通信：</strong> Master默认每10秒发送ping，确保与Slave连接稳定</li>\n<li><strong>平稳阶段，增量同步：</strong> Master实时转发新写命令给Slave，保持数据一致</li>\n<li><strong>从机重连，断点续传：</strong> Master通过backlog中的offset记录复制进度，仅将未同步的数据传给Slave，实现高效续传</li>\n</ol>\n<h3 id=\"Redis-哨兵模式流程与选举原理\"><a href=\"#Redis-哨兵模式流程与选举原理\" class=\"headerlink\" title=\"Redis 哨兵模式流程与选举原理\"></a><em>Redis 哨兵模式流程与选举原理</em></h3><ul>\n<li><strong>主观下线：</strong> 单个哨兵在指定时间内未收到主机的有效响应（PING无回复或错误），则认为主机不可用，标记为主观下线</li>\n<li><strong>客观下线：</strong> 多个哨兵通过通信确认主机不可用，达到 quorum（法定票数）后，标记为客观下线</li>\n<li><strong>领导者选举：</strong> 哨兵通过 Raft 算法选举领导者：哨兵 A 发起选举，若未被其他哨兵拒绝（半数以上同意），当选领导者，若失败，重新选举</li>\n<li><strong>故障恢复：</strong> <ol>\n<li><strong>挑选新 Master：</strong> 从Slave中选择，优先级：配置优先级高 &gt; 复制偏移量大 &gt; runid 小</li>\n<li><strong>复制切换：</strong> 领导者向其他从机发送 slaveof 命令，使其复制新 Master</li>\n<li><strong>原 Master 恢复：</strong> 原 Master 上线后，领导者将其配置为新 Master 的从机</li>\n</ol>\n</li>\n</ul>\n<h3 id=\"Redis-集群\"><a href=\"#Redis-集群\" class=\"headerlink\" title=\"Redis 集群\"></a><em>Redis 集群</em></h3><h3 id=\"缓存穿透（不存在数据）\"><a href=\"#缓存穿透（不存在数据）\" class=\"headerlink\" title=\"缓存穿透（不存在数据）\"></a><em>缓存穿透（不存在数据）</em></h3><p>定义：请求数据库和Redis都没有的数据。</p>\n<ul>\n<li>解决方案一：缓存空数据</li>\n<li>解决方案二：布隆过滤器</li>\n</ul>\n<h3 id=\"缓存击穿（热点失效）\"><a href=\"#缓存击穿（热点失效）\" class=\"headerlink\" title=\"缓存击穿（热点失效）\"></a><em>缓存击穿（热点失效）</em></h3><p>定义：热点数据过期。</p>\n<ul>\n<li>解决方案一：不设置过期时间</li>\n<li>解决方案二：互斥锁</li>\n<li>解决方案三：逻辑过期</li>\n</ul>\n<h3 id=\"缓存雪崩（集体失效）\"><a href=\"#缓存雪崩（集体失效）\" class=\"headerlink\" title=\"缓存雪崩（集体失效）\"></a><em>缓存雪崩（集体失效）</em></h3><p>定义：大量数据过期或Redis服务器宕机。</p>\n<ul>\n<li>解决方案一：随机过期时间</li>\n<li>解决方案二：主从+哨兵的集群</li>\n</ul>\n<h3 id=\"双写一致性问题\"><a href=\"#双写一致性问题\" class=\"headerlink\" title=\"双写一致性问题\"></a><em>双写一致性问题</em></h3><h3 id=\"数据持久化策略有哪些\"><a href=\"#数据持久化策略有哪些\" class=\"headerlink\" title=\"数据持久化策略有哪些\"></a><em>数据持久化策略有哪些</em></h3><table>\n<thead>\n<tr>\n<th>特性</th>\n<th>AOF</th>\n<th>RDB</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>机制</td>\n<td>记录每个写操作，追加到文本文件</td>\n<td>保存某时间点数据快照</td>\n</tr>\n<tr>\n<td>优点</td>\n<td>安全性高，因为每个写操作都被记录，可读性强</td>\n<td>文件小，恢复快</td>\n</tr>\n<tr>\n<td>缺点</td>\n<td>文件大，恢复慢</td>\n<td>可能丢失最后一次生成快照之后的数据变更</td>\n</tr>\n</tbody></table>\n<p><strong>总结：</strong> 通常配合使用（AOF + RDB）</p>\n<h3 id=\"AOF写回策略\"><a href=\"#AOF写回策略\" class=\"headerlink\" title=\"AOF写回策略\"></a><em>AOF写回策略</em></h3><ul>\n<li><code>Always</code> 每次写命令立即同步到磁盘，安全但慢</li>\n<li><code>Everysec</code> 写命令存缓冲区，每秒同步到磁盘，平衡性能与安全</li>\n<li><code>No</code> 写命令存缓冲区，依赖 OS 同步（间隔长，如 30 秒），快但风险高</li>\n</ul>\n<h3 id=\"数据过期策略有哪些\"><a href=\"#数据过期策略有哪些\" class=\"headerlink\" title=\"数据过期策略有哪些\"></a><em>数据过期策略有哪些</em></h3><ul>\n<li><code>立即删除</code> key到期立即删除，确保无过期键。（CPU压力大，时间换空间）</li>\n<li><code>惰性删除</code> 查询键时检查是否过期，过期则删除，可能导致很多过期 key 没有被删掉。（内存压力大，空间换时间）</li>\n<li><code>定期删除</code> 定期随机抽查过期键，逐一删除过期键</li>\n</ul>\n<p><strong>总结：</strong> 通常配合使用（定期删除 + 惰性删除）</p>\n<h3 id=\"数据淘汰策略有哪些\"><a href=\"#数据淘汰策略有哪些\" class=\"headerlink\" title=\"数据淘汰策略有哪些\"></a><em>数据淘汰策略有哪些</em></h3><ul>\n<li><p><strong>针对过期时间的key做处理：</strong></p>\n<ul>\n<li><code>volatile-ttl</code> 从已设置过期时间的数据集中挑选将要过期的数据淘汰</li>\n<li><code>volatile-random</code> 从已设置过期时间的数据集中随机选择数据淘汰</li>\n<li><code>volatile-lru</code> 从已设置过期时间的数据集中挑选最近最少使用的数据淘汰</li>\n<li><code>volatile-lfu</code> 从已设置过期时间的数据集中挑选最不经常使用的数据淘汰</li>\n</ul>\n</li>\n<li><p><strong>针对所有的key做处理：</strong></p>\n<ul>\n<li><code>allkeys-random</code> 从数据集中随机选择数据淘汰</li>\n<li><code>allkeys-lru（推荐）</code> 从数据集中移除最近最少使用的数据淘汰</li>\n<li><code>allkeys-lfu</code> 从数据集中移除最不经常使用的数据淘汰</li>\n</ul>\n</li>\n<li><p><strong>不处理：</strong></p>\n<ul>\n<li><code>no-eviction（默认）</code> 禁止驱逐数据，当内存不足以容纳新写入数据时，新写入操作会报错</li>\n</ul>\n</li>\n<li><p><strong>说明：</strong></p>\n<ul>\n<li><code>allkeys-xxx</code> 表示从所有的键值中淘汰数据</li>\n<li><code>volatile-xxx</code> 表示从设置了过期时间的键值中淘汰数据</li>\n<li><code>xxx-lru</code> 表示最近最少使用，淘汰很久没被访问过的数据，以最近一次访问时间作为参考</li>\n<li><code>xxx-lfu</code> 表示最不经常使用，淘汰最近一段时间被访问次数最少的数据，以次数作为参考</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Linux\"><a href=\"#Linux\" class=\"headerlink\" title=\"Linux\"></a>Linux</h2><h3 id=\"硬件故障排查命令\"><a href=\"#硬件故障排查命令\" class=\"headerlink\" title=\"硬件故障排查命令\"></a><em>硬件故障排查命令</em></h3><p><strong>网络相关</strong></p>\n<ul>\n<li><strong>当前连接：</strong> <code>ss -antp &gt; $DUMP_DIR/ss.dump 2&gt;&amp;1</code></li>\n<li><strong>统计信息：</strong> <code>netstat -s &gt; $DUMP_DIR/netstat-s.dump 2&gt;&amp;1</code></li>\n<li><strong>接口活动：</strong> <code>sar -n DEV 1 2 &gt; $DUMP_DIR/sar-traffic.dump 2&gt;&amp;1</code></li>\n</ul>\n<p><strong>进程相关</strong></p>\n<ul>\n<li><strong>资源占用：</strong> <code>lsof -p $PID &gt; $DUMP_DIR/lsof-$PID.dump 2&gt;&amp;1</code></li>\n<li><strong>全局进程：</strong> <code>ps -ef &gt; $DUMP_DIR/ps.dump 2&gt;&amp;1</code></li>\n</ul>\n<p><strong>CPU 相关</strong></p>\n<ul>\n<li><strong>CPU 统计：</strong> <code>mpstat &gt; $DUMP_DIR/mpstat.dump 2&gt;&amp;1</code></li>\n<li><strong>资源使用：</strong> <code>vmstat 1 3 &gt; $DUMP_DIR/vmstat.dump 2&gt;&amp;1</code></li>\n<li><strong>全核性能：</strong> <code>sar -p ALL &gt; $DUMP_DIR/sar-cpu.dump 2&gt;&amp;1</code></li>\n<li><strong>负载：</strong> <code>uptime &gt; $DUMP_DIR/uptime.dump 2&gt;&amp;1</code></li>\n</ul>\n<p><strong>I&#x2F;O 相关</strong></p>\n<ul>\n<li><strong>磁盘 I&#x2F;O：</strong> <code>iostat -x &gt; $DUMP_DIR/iostat.dump 2&gt;&amp;1</code></li>\n</ul>\n<p><strong>内存相关</strong></p>\n<ul>\n<li><strong>内存使用：</strong> <code>free -h &gt; $DUMP_DIR/free.dump 2&gt;&amp;1</code></li>\n</ul>\n<p><strong>系统全局</strong></p>\n<ul>\n<li><strong>内核日志：</strong> <code>dmesg &gt; $DUMP_DIR/dmesg.dump 2&gt;&amp;1</code></li>\n<li><strong>系统配置：</strong> <code>sysctl -a &gt; $DUMP_DIR/sysctl.dump 2&gt;&amp;1</code></li>\n</ul>\n<p><strong>JVM 相关</strong></p>\n<ul>\n<li><strong>进程配置：</strong> <code>$&#123;JDK_BIN&#125;jinfo $PID &gt; $DUMP_DIR/jinfo.dump 2&gt;&amp;1</code></li>\n<li><strong>GC 统计：</strong><ul>\n<li><code>$&#123;JDK_BIN&#125;jstat -gcutil $PID &gt; $DUMP_DIR/jstat-gcutil.dump 2&gt;&amp;1</code></li>\n<li><code>$&#123;JDK_BIN&#125;jstat -gccapacity $PID &gt; $DUMP_DIR/jstat-gccapacity.dump 2&gt;&amp;1</code></li>\n</ul>\n</li>\n<li><strong>堆信息：</strong><ul>\n<li><code>$&#123;JDK_BIN&#125;jmap $PID &gt; $DUMP_DIR/jmap.dump 2&gt;&amp;1</code></li>\n<li><code>$&#123;JDK_BIN&#125;jmap -heap $PID &gt; $DUMP_DIR/jmap-heap.dump 2&gt;&amp;1</code></li>\n<li><code>$&#123;JDK_BIN&#125;jmap -histo $PID &gt; $DUMP_DIR/jmap-histo.dump 2&gt;&amp;1</code></li>\n<li><code>$&#123;JDK_BIN&#125;jmap -dump:format=b,file=$DUMP_DIR/heap.bin $PID &gt; /dev/null 2&gt;&amp;1</code></li>\n</ul>\n</li>\n<li><strong>线程栈：</strong><ul>\n<li><code>$&#123;JDK_BIN&#125;jstack $PID &gt; $DUMP_DIR/jstack.dump 2&gt;&amp;1</code></li>\n<li><code>top -Hp $PID -b -n 1 -c &gt; $DUMP_DIR/top-$PID.dump 2&gt;&amp;1</code></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"基本系统监控命令\"><a href=\"#基本系统监控命令\" class=\"headerlink\" title=\"基本系统监控命令\"></a><em>基本系统监控命令</em></h3><p><strong>进程：</strong></p>\n<ul>\n<li><strong>ps：</strong> 列出运行进程信息（如 PID、命令）。</li>\n<li><strong>top：</strong> 实时显示进程资源占用（CPU、内存、SWAP）。</li>\n</ul>\n<p><strong>内存：</strong></p>\n<ul>\n<li><strong>vmstat：</strong> 展示虚拟内存、进程、磁盘、CPU 状态。</li>\n<li><strong>free：</strong> 显示内存使用情况（总计、已用、可用）。</li>\n</ul>\n<p><strong>磁盘：</strong></p>\n<ul>\n<li><strong>df：</strong> 显示文件系统磁盘使用情况。</li>\n<li><strong>iostat：</strong> 监控 CPU 和磁盘 I&#x2F;O 性能。</li>\n</ul>\n<p><strong>性能：</strong></p>\n<ul>\n<li><strong>sar：</strong> 收集和报告系统性能（CPU、内存、I&#x2F;O 等）。</li>\n</ul>\n<p><strong>网络：</strong></p>\n<ul>\n<li><strong>netstat：</strong> 查看网络连接、路由、接口信息。</li>\n<li><strong>iftop：</strong> 实时监控网络接口流量。</li>\n<li><strong>tcpdump：</strong> 捕获网络数据包，分析网络通信。</li>\n</ul>\n<h3 id=\"排查线上服务-CPU-占用过高\"><a href=\"#排查线上服务-CPU-占用过高\" class=\"headerlink\" title=\"排查线上服务 CPU 占用过高\"></a><em>排查线上服务 CPU 占用过高</em></h3><ol>\n<li><strong>定位高 CPU 进程：</strong> <code>top</code></li>\n<li><strong>查找高 CPU 线程：</strong> <code>top -H -p &lt;PID&gt;</code></li>\n<li><strong>转换线程 PID 为 16 进制：</strong> <code>printf &#39;0x%x\\n&#39; &lt;线程PID&gt;</code></li>\n<li><strong>分析问题代码：</strong> <code>jstack &lt;进程PID&gt; | grep &lt;16进制线程PID&gt; -A 20</code></li>\n</ol>\n<h3 id=\"排查线上服务内存占用过高\"><a href=\"#排查线上服务内存占用过高\" class=\"headerlink\" title=\"排查线上服务内存占用过高\"></a><em>排查线上服务内存占用过高</em></h3><ol>\n<li><strong>检查垃圾回收（GC）是否正常：</strong> <code>jstat -gc &lt;进程PID&gt; &lt;间隔毫秒&gt;</code><ul>\n<li><strong>重点关注：</strong> <code>OC</code>（老年代总量）、<code>OU</code>（当前老年代使用量）。</li>\n</ul>\n</li>\n<li><strong>导出堆快照（hprof 文件）分析：</strong> <code>jmap -dump:live,file=./file.hprof &lt;进程PID&gt;</code></li>\n</ol>\n<h3 id=\"如何定位线上服务-OOM\"><a href=\"#如何定位线上服务-OOM\" class=\"headerlink\" title=\"如何定位线上服务 OOM\"></a><em>如何定位线上服务 OOM</em></h3><ol>\n<li><strong>系统已发生 OOM 并挂掉</strong></li>\n</ol>\n<ul>\n<li><strong>提前配置 JVM 参数：</strong> <code>-XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=./file.hprof</code></li>\n</ul>\n<ol start=\"2\">\n<li><strong>系统运行中但还未 OOM</strong><ul>\n<li><strong>导出堆快照：</strong> <code>jmap -dump:live,format=b,file=./file.hprof &lt;进程PID&gt;</code></li>\n<li><strong>使用 Arthas 工具</strong></li>\n</ul>\n</li>\n</ol>\n<h3 id=\"解决线上服务-OOM-问题\"><a href=\"#解决线上服务-OOM-问题\" class=\"headerlink\" title=\"解决线上服务 OOM 问题\"></a><em>解决线上服务 OOM 问题</em></h3><ol>\n<li><p><strong>堆 OOM：</strong> （Java heap space）</p>\n<ul>\n<li>堆内存太小：调整 <code>-Xmx</code> 参数增加堆大小</li>\n<li>内存泄露：导出堆快照 <code>jmap -dump:live,format=b,file=./file.hprof &lt;进程PID&gt;</code></li>\n</ul>\n</li>\n<li><p><strong>栈溢出：</strong> （StackOverflowError）</p>\n<ul>\n<li>线程栈太小：调整 <code>-Xss</code> 参数增加线程栈大小</li>\n<li>无限递归：使用<code>jstack &lt;进程PID&gt;</code> 导出线程堆栈，检查递归调用链</li>\n</ul>\n</li>\n<li><p><strong>元空间 OOM：</strong> （Metaspace）</p>\n<ul>\n<li>类加载过多：调整 <code>-XX: MaxMetaSpaceSize</code> 参数增加元空间大小</li>\n</ul>\n</li>\n<li><p><strong>直接内存 OOM：</strong> （Direct buffer memory）</p>\n<ul>\n<li>堆外内存耗尽：调整 <code>-XX:MaxDirectMemorySize</code> 参数增加内存大小</li>\n</ul>\n</li>\n<li><p><strong>GC 回收时间过长：</strong> （GC overhead limit exceeded）</p>\n<ul>\n<li>GC 耗时高，回收效率低：调整 <code>-Xmx</code> 参数增加堆大小</li>\n</ul>\n</li>\n<li><p><strong>线程数限制：</strong> （unable to create new native thread）</p>\n<ul>\n<li>排查线程数：使用 <code>ps -T -p &lt;进程PID&gt;</code> 查看进程的线程数</li>\n<li>当前用户最大线程数：<code>ulimit -u</code> </li>\n<li>调整线程数：<code>/etc/security/limits.conf</code></li>\n</ul>\n</li>\n</ol>\n<h2 id=\"场景题\"><a href=\"#场景题\" class=\"headerlink\" title=\"场景题\"></a>场景题</h2><h3 id=\"SQL深分页如何进行性能优化\"><a href=\"#SQL深分页如何进行性能优化\" class=\"headerlink\" title=\"SQL深分页如何进行性能优化\"></a><em>SQL深分页如何进行性能优化</em></h3><p><strong>问题：</strong> LIMIT 50000,100会导致数据库扫描50100条记录，然后再二次回表</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> id,age,name <span class=\"keyword\">FROM</span> <span class=\"keyword\">user</span> <span class=\"keyword\">WHERE</span> age<span class=\"operator\">&gt;</span><span class=\"number\">1</span> LIMIT <span class=\"number\">50000</span>,<span class=\"number\">100</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>优先：</strong> 游标分页 + 索引优化</p>\n<ul>\n<li>使用游标分页，自增ID，且age需有索引。</li>\n<li>适合大多数场景，性能稳定，开发简单。</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> id,age,name <span class=\"keyword\">FROM</span> <span class=\"keyword\">user</span> u</span><br><span class=\"line\"><span class=\"keyword\">INNER</span> <span class=\"keyword\">JOIN</span> (<span class=\"keyword\">SELECT</span> id <span class=\"keyword\">FROm</span> <span class=\"keyword\">user</span> <span class=\"keyword\">WHERE</span> id <span class=\"operator\">&gt;</span> 上一页最大ID <span class=\"keyword\">and</span> age<span class=\"operator\">&gt;</span><span class=\"number\">1</span> LIMIT <span class=\"number\">100</span>) temp</span><br><span class=\"line\"><span class=\"keyword\">ON</span> u.id <span class=\"operator\">=</span> temp.id</span><br></pre></td></tr></table></figure>\n\n<p><strong>辅助：</strong> 业务限制 + 缓存</p>\n<ul>\n<li>限制最大页数（如100页）。</li>\n<li>缓存热门页（如前10页），减少数据库查询。</li>\n</ul>\n<p><strong>扩展：</strong> 分库分表或ES搜索引擎</p>\n<ul>\n<li>数据量超千万时，考虑分库分表。</li>\n<li>复杂查询或深分页频繁时，引入ES。</li>\n</ul>\n<h3 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h3>","categories":["面试题"],"tags":["后端","面试题"]},{"title":"Java_IO：IO类型","url":"/Java/Java_IO%EF%BC%9AIO%E7%B1%BB%E5%9E%8B/","content":"<img src=\"/Java/Java_IO%EF%BC%9AIO%E7%B1%BB%E5%9E%8B/IO%E7%B1%BB%E5%9E%8B.png\" class=\"\" title=\"IO类型\">\n\n<span id=\"more\"></span>\n\n<h2 id=\"BIO、NIO、AIO基本说明\"><a href=\"#BIO、NIO、AIO基本说明\" class=\"headerlink\" title=\"BIO、NIO、AIO基本说明\"></a>BIO、NIO、AIO基本说明</h2><ul>\n<li><code>BIO:</code> 同步并阻塞(传统阻塞型)，服务器实现模式为一个连接一个线程，即客户端 有连接请求时服务器端就需要启动一个线程进行处理，如果这个连接不做任何事情会造成不必要的线程开销</li>\n<li><code>NIO:</code> 同步非阻塞，服务器实现模式为一个线程处理多个请求(连接)，即客户端发 送的连接请求都会注册到多路复用器上，多路复用器轮询到连接有I&#x2F;O请求就进行处理</li>\n<li><code>AIO:</code> 异步非阻塞，AIO引入异步通道的概念，采用了 Proactor 模式，简化了程序编写，有效的请求才启动线程，它的特点是先由操作系统完成后才通知服务端程序启动线程去处理，一般使用于连接数较多且连接时间较长的应用</li>\n</ul>\n<h2 id=\"BIO、NIO、AIO适用场景分析\"><a href=\"#BIO、NIO、AIO适用场景分析\" class=\"headerlink\" title=\"BIO、NIO、AIO适用场景分析\"></a>BIO、NIO、AIO适用场景分析</h2><ul>\n<li><code>BIO:</code> 适用于连接数目比较小且固定的架构，这种方式对服务器资源要求比较高， 并发局限于应用中，JDK1.4以前的唯一选择，但程序简单易理解。</li>\n<li><code>NIO:</code> 适用于连接数目多且连接比较短(轻操作)的架构，比如聊天服务器，弹幕 系统，服务器间通讯等。编程比较复杂，JDK1.4开始支持。</li>\n<li><code>AIO:</code> 使用于连接数目多且连接比较长(重操作)的架构，比如相册服务器，充分 调用OS参与并发操作，编程比较复杂，JDK7开始支持。</li>\n</ul>\n<h2 id=\"BIO、NIO、AIO对比\"><a href=\"#BIO、NIO、AIO对比\" class=\"headerlink\" title=\"BIO、NIO、AIO对比\"></a>BIO、NIO、AIO对比</h2><table>\n<thead>\n<tr>\n<th></th>\n<th>BIO</th>\n<th>NIO</th>\n<th>AIO</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>IO 模型</td>\n<td>同步阻塞</td>\n<td>同步非阻塞(多路复用)</td>\n<td>异步非阻塞</td>\n</tr>\n<tr>\n<td>编程难度</td>\n<td>简单</td>\n<td>复杂</td>\n<td>复杂</td>\n</tr>\n<tr>\n<td>可靠性</td>\n<td>差</td>\n<td>好</td>\n<td>好</td>\n</tr>\n<tr>\n<td>吞吐量</td>\n<td>低</td>\n<td>高</td>\n<td>高</td>\n</tr>\n</tbody></table>\n","categories":["Java"],"tags":["后端","Java","IO"]},{"title":"Java_IO：流体系","url":"/Java/Java_IO%EF%BC%9A%E6%B5%81%E4%BD%93%E7%B3%BB/","content":"<table>\n<thead>\n<tr>\n<th>分类</th>\n<th>字节输入流</th>\n<th>字节输出流</th>\n<th>字符输入流</th>\n<th>字符输出流</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>基类</td>\n<td>InputStream</td>\n<td>OutputStream</td>\n<td>Reader</td>\n<td>Writer</td>\n</tr>\n<tr>\n<td>文件流</td>\n<td>FileInputStream</td>\n<td>FileOutputStream</td>\n<td>FileReader</td>\n<td>FileWriter</td>\n</tr>\n<tr>\n<td>数组流</td>\n<td>ByteArrayInputStream</td>\n<td>ByteArrayOutputStream</td>\n<td>CharArrayReader</td>\n<td>CharArrayWriter</td>\n</tr>\n<tr>\n<td>管道流</td>\n<td>PipedInputStream</td>\n<td>PipedOutputStream</td>\n<td>PipedReader</td>\n<td>PipedWriter</td>\n</tr>\n<tr>\n<td>序列流</td>\n<td>SequenceInputStream</td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>对象流</td>\n<td>ObjectInputStream</td>\n<td>ObjectOutputStream</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>字符串流</td>\n<td></td>\n<td></td>\n<td>StringReader</td>\n<td>StringWriter</td>\n</tr>\n<tr>\n<td>转换流</td>\n<td></td>\n<td></td>\n<td>InputStreamReader</td>\n<td>OutputStreamWriter</td>\n</tr>\n<tr>\n<td>过滤流</td>\n<td>FilterInputStream</td>\n<td>FilterOutputStream</td>\n<td>FilterReader</td>\n<td>FilterWriter</td>\n</tr>\n<tr>\n<td>– 缓冲流</td>\n<td>BufferedInputStream</td>\n<td>BufferedOutputStream</td>\n<td>BufferedReader</td>\n<td>BufferedWriter</td>\n</tr>\n<tr>\n<td>– 数据流</td>\n<td>DataInputStream</td>\n<td>DataOutputStream</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>– 推回输入流</td>\n<td>PushbackInputStream</td>\n<td></td>\n<td>PushbackReader</td>\n<td></td>\n</tr>\n<tr>\n<td>– 打印流</td>\n<td></td>\n<td>PrintStream</td>\n<td></td>\n<td>PrintWriter</td>\n</tr>\n</tbody></table>\n","categories":["Java"],"tags":["后端","Java","IO"]},{"title":"Java_基础：Files工具类","url":"/Java/Java_%E5%9F%BA%E7%A1%80%EF%BC%9AFiles%E5%B7%A5%E5%85%B7%E7%B1%BB/","content":"<h2 id=\"案例\"><a href=\"#案例\" class=\"headerlink\" title=\"案例\"></a>案例</h2><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 检查文件是否存在</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test1</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">Path</span> <span class=\"variable\">path</span> <span class=\"operator\">=</span> Paths.get(<span class=\"string\">&quot;helloword/data.txt&quot;</span>);</span><br><span class=\"line\">    System.out.println(Files.exists(path));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 创建一级目录</span></span><br><span class=\"line\"><span class=\"comment\"> *   - 如果目录已存在，会抛异常 FileAlreadyExistsException</span></span><br><span class=\"line\"><span class=\"comment\"> *   - 不能一次创建多级目录，否则会抛异常 NoSuchFileException</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test2</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception&#123;</span><br><span class=\"line\">    <span class=\"type\">Path</span> <span class=\"variable\">path</span> <span class=\"operator\">=</span> Paths.get(<span class=\"string\">&quot;helloword/d1&quot;</span>);</span><br><span class=\"line\">    Files.createDirectory(path);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 创建多级目录用</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test3</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception&#123;</span><br><span class=\"line\">    <span class=\"type\">Path</span> <span class=\"variable\">path</span> <span class=\"operator\">=</span> Paths.get(<span class=\"string\">&quot;helloword/d1/d2&quot;</span>);</span><br><span class=\"line\">    Files.createDirectories(path);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 拷贝文件</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test4</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception&#123;</span><br><span class=\"line\">    <span class=\"type\">Path</span> <span class=\"variable\">source</span> <span class=\"operator\">=</span> Paths.get(<span class=\"string\">&quot;helloword/data.txt&quot;</span>);</span><br><span class=\"line\">    <span class=\"type\">Path</span> <span class=\"variable\">target</span> <span class=\"operator\">=</span> Paths.get(<span class=\"string\">&quot;helloword/target.txt&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 如果文件已存在，会抛异常 FileAlreadyExistsException</span></span><br><span class=\"line\">    Files.copy(source, target);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 如果希望用 source 覆盖掉 target，需要用 StandardCopyOption 来控制</span></span><br><span class=\"line\">    <span class=\"comment\">//Files.copy(source, target, StandardCopyOption.REPLACE_EXISTING);</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 拷贝多级目录</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test5</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception&#123;</span><br><span class=\"line\">    <span class=\"type\">String</span> <span class=\"variable\">source</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;D:\\\\dir1&quot;</span>;</span><br><span class=\"line\">    <span class=\"type\">String</span> <span class=\"variable\">target</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;D:\\\\dir2&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    Files.walk(Paths.get(source)).forEach(path -&gt; &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"type\">String</span> <span class=\"variable\">targetName</span> <span class=\"operator\">=</span> path.toString().replace(source, target);</span><br><span class=\"line\">            <span class=\"comment\">// 是目录</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (Files.isDirectory(path)) &#123;</span><br><span class=\"line\">                Files.createDirectory(Paths.get(targetName));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">// 是普通文件</span></span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (Files.isRegularFile(path)) &#123;</span><br><span class=\"line\">                Files.copy(path, Paths.get(targetName));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 移动文件</span></span><br><span class=\"line\"><span class=\"comment\"> *   - StandardCopyOption.ATOMIC_MOVE 保证文件移动的原子性</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test6</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception&#123;</span><br><span class=\"line\">    <span class=\"type\">Path</span> <span class=\"variable\">source</span> <span class=\"operator\">=</span> Paths.get(<span class=\"string\">&quot;helloword/data.txt&quot;</span>);</span><br><span class=\"line\">    <span class=\"type\">Path</span> <span class=\"variable\">target</span> <span class=\"operator\">=</span> Paths.get(<span class=\"string\">&quot;helloword/data.txt&quot;</span>);</span><br><span class=\"line\">    Files.move(source, target, StandardCopyOption.ATOMIC_MOVE);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 删除文件</span></span><br><span class=\"line\"><span class=\"comment\"> *   - 如果文件不存在，会抛异常 NoSuchFileException</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test7</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception&#123;</span><br><span class=\"line\">    <span class=\"type\">Path</span> <span class=\"variable\">target</span> <span class=\"operator\">=</span> Paths.get(<span class=\"string\">&quot;helloword/target.txt&quot;</span>);</span><br><span class=\"line\">    Files.delete(target);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 删除目录</span></span><br><span class=\"line\"><span class=\"comment\"> *   - 如果目录还有内容，会抛异常 DirectoryNotEmptyException</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test8</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception&#123;</span><br><span class=\"line\">    <span class=\"type\">Path</span> <span class=\"variable\">target</span> <span class=\"operator\">=</span> Paths.get(<span class=\"string\">&quot;helloword/d1&quot;</span>);</span><br><span class=\"line\">    Files.delete(target);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 删除多级目录</span></span><br><span class=\"line\"><span class=\"comment\"> *   - 注意：删除是危险操作，确保要递归删除的文件夹没有重要内容</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test9</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception&#123;</span><br><span class=\"line\">    <span class=\"type\">Path</span> <span class=\"variable\">path</span> <span class=\"operator\">=</span> Paths.get(<span class=\"string\">&quot;d:\\\\a&quot;</span>);</span><br><span class=\"line\">    Files.walkFileTree(path, <span class=\"keyword\">new</span> <span class=\"title class_\">SimpleFileVisitor</span>&lt;Path&gt;()&#123;</span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> FileVisitResult <span class=\"title function_\">visitFile</span><span class=\"params\">(Path file, BasicFileAttributes attrs)</span></span><br><span class=\"line\">            <span class=\"keyword\">throws</span> IOException &#123;</span><br><span class=\"line\">                Files.delete(file);</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"built_in\">super</span>.visitFile(file, attrs);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> FileVisitResult <span class=\"title function_\">postVisitDirectory</span><span class=\"params\">(Path dir, IOException exc)</span></span><br><span class=\"line\">            <span class=\"keyword\">throws</span> IOException &#123;</span><br><span class=\"line\">                Files.delete(dir);</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"built_in\">super</span>.postVisitDirectory(dir, exc);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 遍历目录文件</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test10</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception&#123;</span><br><span class=\"line\">    <span class=\"type\">Path</span> <span class=\"variable\">path</span> <span class=\"operator\">=</span> Paths.get(<span class=\"string\">&quot;C:\\\\Program Files\\\\Java\\\\jdk1.8.0_91&quot;</span>);</span><br><span class=\"line\">    <span class=\"type\">AtomicInteger</span> <span class=\"variable\">dirCount</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">AtomicInteger</span>();</span><br><span class=\"line\">    <span class=\"type\">AtomicInteger</span> <span class=\"variable\">fileCount</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">AtomicInteger</span>();</span><br><span class=\"line\">    Files.walkFileTree(path, <span class=\"keyword\">new</span> <span class=\"title class_\">SimpleFileVisitor</span>&lt;Path&gt;()&#123;</span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> FileVisitResult <span class=\"title function_\">preVisitDirectory</span><span class=\"params\">(Path dir, BasicFileAttributes attrs)</span></span><br><span class=\"line\">            <span class=\"keyword\">throws</span> IOException &#123;</span><br><span class=\"line\">                System.out.println(dir);</span><br><span class=\"line\">                dirCount.incrementAndGet();</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"built_in\">super</span>.preVisitDirectory(dir, attrs);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> FileVisitResult <span class=\"title function_\">visitFile</span><span class=\"params\">(Path file, BasicFileAttributes attrs)</span></span><br><span class=\"line\">            <span class=\"keyword\">throws</span> IOException &#123;</span><br><span class=\"line\">                System.out.println(file);</span><br><span class=\"line\">                fileCount.incrementAndGet();</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"built_in\">super</span>.visitFile(file, attrs);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    System.out.println(dirCount);</span><br><span class=\"line\">    System.out.println(fileCount);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 统计 jar 的数目</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test11</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception&#123;</span><br><span class=\"line\">    <span class=\"type\">Path</span> <span class=\"variable\">path</span> <span class=\"operator\">=</span> Paths.get(<span class=\"string\">&quot;C:\\\\Program Files\\\\Java\\\\jdk1.8.0_91&quot;</span>);</span><br><span class=\"line\">    <span class=\"type\">AtomicInteger</span> <span class=\"variable\">fileCount</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">AtomicInteger</span>();</span><br><span class=\"line\">    Files.walkFileTree(path, <span class=\"keyword\">new</span> <span class=\"title class_\">SimpleFileVisitor</span>&lt;Path&gt;()&#123;</span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> FileVisitResult <span class=\"title function_\">visitFile</span><span class=\"params\">(Path file, BasicFileAttributes attrs)</span></span><br><span class=\"line\">            <span class=\"keyword\">throws</span> IOException &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (file.toFile().getName().endsWith(<span class=\"string\">&quot;.jar&quot;</span>)) &#123;</span><br><span class=\"line\">                    fileCount.incrementAndGet();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"built_in\">super</span>.visitFile(file, attrs);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    System.out.println(fileCount);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","categories":["Java"],"tags":["后端","Java","基础"]},{"title":"Java_基础：Paths工具类","url":"/Java/Java_%E5%9F%BA%E7%A1%80%EF%BC%9APaths%E5%B7%A5%E5%85%B7%E7%B1%BB/","content":"<h2 id=\"案例\"><a href=\"#案例\" class=\"headerlink\" title=\"案例\"></a>案例</h2><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * jdk7 引入了 Path 和 Paths 类</span></span><br><span class=\"line\"><span class=\"comment\"> *    - Path 用来表示文件路径</span></span><br><span class=\"line\"><span class=\"comment\"> *    - Paths 是工具类，用来获取 Path 实例</span></span><br><span class=\"line\"><span class=\"comment\"> *    - . 代表了当前路径</span></span><br><span class=\"line\"><span class=\"comment\"> *    - .. 代表了上一级路径</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">Path</span> <span class=\"variable\">source</span> <span class=\"operator\">=</span> Paths.get(<span class=\"string\">&quot;1.txt&quot;</span>); <span class=\"comment\">// 相对路径 使用 user.dir 环境变量来定位 1.txt</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">Path</span> <span class=\"variable\">source</span> <span class=\"operator\">=</span> Paths.get(<span class=\"string\">&quot;d:\\\\1.txt&quot;</span>); <span class=\"comment\">// 绝对路径 代表了  d:\\1.txt</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">Path</span> <span class=\"variable\">source</span> <span class=\"operator\">=</span> Paths.get(<span class=\"string\">&quot;d:/1.txt&quot;</span>); <span class=\"comment\">// 绝对路径 同样代表了  d:\\1.txt</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">Path</span> <span class=\"variable\">projects</span> <span class=\"operator\">=</span> Paths.get(<span class=\"string\">&quot;d:\\\\data&quot;</span>, <span class=\"string\">&quot;projects&quot;</span>); <span class=\"comment\">// 代表了  d:\\data\\projects</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">Path</span> <span class=\"variable\">path</span> <span class=\"operator\">=</span> Paths.get(<span class=\"string\">&quot;d:\\\\data\\\\projects\\\\a\\\\..\\\\b&quot;</span>);</span><br><span class=\"line\">    System.out.println(path);   <span class=\"comment\">// 输出：d:\\data\\projects\\a\\..\\b</span></span><br><span class=\"line\">    System.out.println(path.normalize()); <span class=\"comment\">// 正常化路径，输出：d:\\data\\projects\\b</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":["Java"],"tags":["后端","Java","基础"]},{"title":"Java_基础：String类intern方法","url":"/Java/Java_%E5%9F%BA%E7%A1%80%EF%BC%9AString%E7%B1%BBintern%E6%96%B9%E6%B3%95/","content":"<h2 id=\"String-intern\"><a href=\"#String-intern\" class=\"headerlink\" title=\"String::intern()\"></a>String::intern()</h2><p><code>String::intern</code> 是本地方法，检查字符串常量池：若已有相同字符串，返回其引用；否则，添加该字符串到池中并返回引用</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">native</span> String <span class=\"title function_\">intern</span><span class=\"params\">()</span>;</span><br></pre></td></tr></table></figure>\n\n<span id=\"more\"></span>\n\n<h3 id=\"面试题1\"><a href=\"#面试题1\" class=\"headerlink\" title=\"面试题1\"></a>面试题1</h3><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Demo</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">str1</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">StringBuilder</span>(<span class=\"string\">&quot;hello&quot;</span>).append(<span class=\"string\">&quot;world&quot;</span>).toString();</span><br><span class=\"line\">        System.out.println(str1 == str1.intern());  <span class=\"comment\">// true</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">str2</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">StringBuilder</span>(<span class=\"string\">&quot;ja&quot;</span>).append(<span class=\"string\">&quot;va&quot;</span>).toString();</span><br><span class=\"line\">        System.out.println(str2 == str2.intern());  <span class=\"comment\">// false</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>解释：</strong> Java系统初始化自带的字符串</p>\n<img src=\"/Java/Java_%E5%9F%BA%E7%A1%80%EF%BC%9AString%E7%B1%BBintern%E6%96%B9%E6%B3%95/intern.png\" class=\"\" title=\"intern\">\n\n<h3 id=\"面试题2\"><a href=\"#面试题2\" class=\"headerlink\" title=\"面试题2\"></a>面试题2</h3><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">str1</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">String</span>(<span class=\"string\">&quot;hello&quot;</span>) + <span class=\"keyword\">new</span> <span class=\"title class_\">String</span>(<span class=\"string\">&quot;world&quot;</span>);</span><br><span class=\"line\">str1.intern();</span><br><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">str2</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;helloworld&quot;</span>;</span><br><span class=\"line\">System.out.println(str1 == str2); <span class=\"comment\">// true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">str1</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">String</span>(<span class=\"string\">&quot;hello&quot;</span>) + <span class=\"keyword\">new</span> <span class=\"title class_\">String</span>(<span class=\"string\">&quot;world&quot;</span>);</span><br><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">str2</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;helloworld&quot;</span>;</span><br><span class=\"line\">str1.intern();</span><br><span class=\"line\">System.out.println(str1 == str2); <span class=\"comment\">// false</span></span><br></pre></td></tr></table></figure>\n<p><strong>解释：</strong><br><strong>代码片段一 (<code>true</code>)</strong></p>\n<ul>\n<li><code>String str1 = new String(&quot;hello&quot;) + new String(&quot;world&quot;);</code>：str1 在堆中创建了一个新的 “helloworld” 对象。</li>\n<li><code>str1.intern();</code>：尝试将 str1 的引用放入字符串常量池。<strong>由于池中没有 “helloworld”，所以将 str1 的引用放入池中</strong>。</li>\n<li><code>String str2 = &quot;helloworld&quot;;</code>：str2 创建时，发现池中已有 “helloworld”（str1 的引用），所以 str2 直接指向池中 str1 引用的对象。</li>\n<li><code>str1 == str2</code>：str1 和 str2 指向同一个堆中的对象，所以结果是 true。</li>\n</ul>\n<p><strong>代码片段二 (<code>false</code>)</strong></p>\n<ul>\n<li><code>String str1 = new String(&quot;hello&quot;) + new String(&quot;world&quot;);</code>：str1 在堆中创建了一个新的 “helloworld” 对象。</li>\n<li><code>String str2 = &quot;helloworld&quot;;</code>：str2 创建时，发现池中没有 “helloworld”，<strong>所以在池中创建了一个新的 “helloworld” 对象，str2 指向池中的这个新对象</strong>。</li>\n<li><code>str1.intern();</code>：尝试将 str1 的引用放入字符串常量池。<strong>由于池中已经存在 “helloworld”（str2 引用），所以 intern() 返回池中 str2 引用的对象，但 str1 的引用没有改变</strong>。</li>\n<li><code>str1 == str2</code>：str1 指向堆中的对象，str2 指向池中的另一个对象，它们不是同一个对象，所以结果是 false。</li>\n</ul>\n","categories":["Java"],"tags":["后端","Java","基础"]},{"title":"Java_基础：volatile","url":"/Java/Java_%E5%9F%BA%E7%A1%80%EF%BC%9Avolatile/","content":"<h2 id=\"volatile-定义\"><a href=\"#volatile-定义\" class=\"headerlink\" title=\"volatile 定义\"></a>volatile 定义</h2><img src=\"/Java/Java_%E5%9F%BA%E7%A1%80%EF%BC%9Avolatile/volatile.jpeg\" class=\"\" title=\"volatile\">\n<ul>\n<li>volatile是Java虚拟机提供的<code>轻量级的同步机制</code>。</li>\n<li>volatile特性：<code>保证可见性</code>、<code>不保证原子性</code>、<code>禁止指令重排</code>。</li>\n</ul>\n<span id=\"more\"></span>\n\n<h2 id=\"volatile-特性\"><a href=\"#volatile-特性\" class=\"headerlink\" title=\"volatile 特性\"></a>volatile 特性</h2><h3 id=\"保证可见性\"><a href=\"#保证可见性\" class=\"headerlink\" title=\"保证可见性\"></a>保证可见性</h3><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.TimeUnit;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">VolatileDemo</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//private int number = 0;</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">volatile</span> <span class=\"type\">int</span> <span class=\"variable\">number</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">inc</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        number++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">VolatileDemo</span> <span class=\"variable\">demo</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">VolatileDemo</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(() -&gt; &#123;</span><br><span class=\"line\">            System.out.println(Thread.currentThread().getName() + <span class=\"string\">&quot;\\t come in&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                TimeUnit.SECONDS.sleep(<span class=\"number\">3</span>);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            demo.inc();</span><br><span class=\"line\">            System.out.println(Thread.currentThread().getName() + <span class=\"string\">&quot;\\t updated number value: &quot;</span> + demo.number);</span><br><span class=\"line\">        &#125;).start();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// main线程一直循环等待，直到number值不再等于零</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (demo.number == <span class=\"number\">0</span>) &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(Thread.currentThread().getName() + <span class=\"string\">&quot;\\t mission is over&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"不保证原子性\"><a href=\"#不保证原子性\" class=\"headerlink\" title=\"不保证原子性\"></a>不保证原子性</h3><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.atomic.AtomicInteger;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * volatile不保证原子性</span></span><br><span class=\"line\"><span class=\"comment\"> * 解决方案：</span></span><br><span class=\"line\"><span class=\"comment\"> *     1. 通过synchronized或lock进行加锁</span></span><br><span class=\"line\"><span class=\"comment\"> *     2. 使用java.util.concurrent.atomic包下原子操作类</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">VolatileDemo</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">volatile</span> <span class=\"type\">int</span> <span class=\"variable\">number</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">inc</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        number++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">AtomicInteger</span> <span class=\"variable\">atomicInteger</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">AtomicInteger</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">atomicInc</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        atomicInteger.getAndIncrement();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">VolatileDemo</span> <span class=\"variable\">demo</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">VolatileDemo</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; <span class=\"number\">20</span>; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(() -&gt; &#123;</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; j &lt; <span class=\"number\">1000</span>; j++) &#123;</span><br><span class=\"line\">                    demo.inc();</span><br><span class=\"line\">                    demo.atomicInc();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;).start();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 等待上面20个线程执行完成</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (Thread.activeCount() &gt; <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">            Thread.<span class=\"keyword\">yield</span>();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(Thread.currentThread().getName() + <span class=\"string\">&quot;\\t finally number value: &quot;</span> + demo.number);</span><br><span class=\"line\">        System.out.println(Thread.currentThread().getName() + <span class=\"string\">&quot;\\t finally atomicInteger value: &quot;</span> + demo.atomicInteger);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"禁止指令重排\"><a href=\"#禁止指令重排\" class=\"headerlink\" title=\"禁止指令重排\"></a>禁止指令重排</h3><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"variable\">x</span> <span class=\"operator\">=</span> <span class=\"number\">11</span>;  <span class=\"comment\">// 语句1</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"variable\">y</span> <span class=\"operator\">=</span> <span class=\"number\">12</span>;  <span class=\"comment\">// 语句2</span></span><br><span class=\"line\">x = x + <span class=\"number\">5</span>;  <span class=\"comment\">// 语句3</span></span><br><span class=\"line\">y = x * x;  <span class=\"comment\">// 语句4</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 正常顺序：①②③④</span></span><br><span class=\"line\"><span class=\"comment\">// 指令重排：②①③④ 或 ①③②④</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 1. 单线程环境里面确保程序最终执行结果和代码顺序执行结果一致。</span></span><br><span class=\"line\"><span class=\"comment\"> * 2. 多线程环境中线程交替执行，由于编译器优化重排的存在，</span></span><br><span class=\"line\"><span class=\"comment\"> *     两个线程中使用的变量能否保证一致性是无法确定的，结果无法预测。</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">VolatileDemo</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">a</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"type\">boolean</span> <span class=\"variable\">flag</span> <span class=\"operator\">=</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"comment\">//volatile禁止指令重排</span></span><br><span class=\"line\">    <span class=\"comment\">//volatile boolean flag = false;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">writer</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        a = <span class=\"number\">1</span>;                    <span class=\"comment\">// 语句1</span></span><br><span class=\"line\">        flag = <span class=\"literal\">true</span>;            <span class=\"comment\">// 语句2</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">reader</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (flag) &#123;</span><br><span class=\"line\">            a =  a + <span class=\"number\">5</span>;         <span class=\"comment\">// 语句3</span></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// 正常顺序①②③, a=6;</span></span><br><span class=\"line\">            <span class=\"comment\">// 指令重排②③①, a=5;</span></span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;a=&quot;</span> + a);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><ul>\n<li><a href=\"http://www.iocoder.cn/JUC/sike/jmm-2-volatile/\">芋道源码</a></li>\n<li><a href=\"https://benjaminwhx.com/2018/05/13/%E3%80%90%E7%BB%86%E8%B0%88Java%E5%B9%B6%E5%8F%91%E3%80%91%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B%E4%B9%8Bvolatile/\">蹲厕所的熊</a></li>\n</ul>\n","categories":["Java"],"tags":["后端","Java","基础"]},{"title":"Java_基础：二进制","url":"/Java/Java_%E5%9F%BA%E7%A1%80%EF%BC%9A%E4%BA%8C%E8%BF%9B%E5%88%B6/","content":"<h2 id=\"进制\"><a href=\"#进制\" class=\"headerlink\" title=\"进制\"></a>进制</h2><p><code>二进制(binary)</code>0-1，满2进1，以 <span style=\"color:red\">0b或0B</span> 开头。<br><code>十进制(decimal)</code>0-9，满10进1。<br><code>八进制(octal)</code>0-7，满8进1, 以数字 <span style=\"color:red\">0</span> 开头表示。<br><code>十六进制(hex)</code>0-9及A-F，满16进1，以 <span style=\"color:red\">0x或0X</span> 开头表示。此处的A-F不区分大小写。 如：0x21AF +1&#x3D; 0X21B0</p>\n<table>\n<thead>\n<tr>\n<th>0</th>\n<th>1</th>\n<th>2</th>\n<th>3</th>\n<th>4</th>\n<th>5</th>\n<th>6</th>\n<th>7</th>\n<th>8</th>\n<th>9</th>\n<th>10</th>\n<th>11</th>\n<th>12</th>\n<th>13</th>\n<th>14</th>\n<th>15</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>0</td>\n<td>1</td>\n<td>2</td>\n<td>3</td>\n<td>4</td>\n<td>5</td>\n<td>6</td>\n<td>7</td>\n<td>8</td>\n<td>9</td>\n<td>A</td>\n<td>B</td>\n<td>C</td>\n<td>D</td>\n<td>E</td>\n<td>F</td>\n</tr>\n</tbody></table>\n<span id=\"more\"></span>\n\n<h2 id=\"二进制\"><a href=\"#二进制\" class=\"headerlink\" title=\"二进制\"></a>二进制</h2><ul>\n<li>Java整数常量默认是int类型，当用二进制定义整数时，其第32位符号位；当是long类型时，二进制默认占64位，第63位是符号位</li>\n<li>二进制的整数有如下三种形式：<ul>\n<li><code>原码：</code>直接将一个数值换成二进制数。最高位是符号位</li>\n<li><code>负数的反码：</code>是对原码按位取反，只是最高位（符号位）确定为1</li>\n<li><code>负数的补码：</code>其反码加1</li>\n</ul>\n</li>\n<li>计算机以二进制 <span style=\"color:red\">补码</span> 的形式保存所有的整数<ul>\n<li>正数的原码、反码、补码都相同</li>\n<li>负数的补码是其反码+1</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"原码、反码、补码\"><a href=\"#原码、反码、补码\" class=\"headerlink\" title=\"原码、反码、补码\"></a>原码、反码、补码</h2><img src=\"/Java/Java_%E5%9F%BA%E7%A1%80%EF%BC%9A%E4%BA%8C%E8%BF%9B%E5%88%B6/%E5%8E%9F%E7%A0%81%E3%80%81%E5%8F%8D%E7%A0%81%E3%80%81%E8%A1%A5%E7%A0%811.jpeg\" class=\"\" title=\"原码、反码、补码1\">\n\n<img src=\"/Java/Java_%E5%9F%BA%E7%A1%80%EF%BC%9A%E4%BA%8C%E8%BF%9B%E5%88%B6/%E5%8E%9F%E7%A0%81%E3%80%81%E5%8F%8D%E7%A0%81%E3%80%81%E8%A1%A5%E7%A0%812.jpeg\" class=\"\" title=\"原码、反码、补码2\">\n\n\n<h2 id=\"进制间转化\"><a href=\"#进制间转化\" class=\"headerlink\" title=\"进制间转化\"></a>进制间转化</h2><img src=\"/Java/Java_%E5%9F%BA%E7%A1%80%EF%BC%9A%E4%BA%8C%E8%BF%9B%E5%88%B6/%E8%BF%9B%E5%88%B6%E9%97%B4%E8%BD%AC%E5%8C%96.jpeg\" class=\"\" title=\"进制间转化\">\n<h3 id=\"二与十进制互转\"><a href=\"#二与十进制互转\" class=\"headerlink\" title=\"二与十进制互转\"></a>二与十进制互转</h3><ul>\n<li>二进制转十进制  乘以2的幂数</li>\n<li>十进制转二进制  除以2取余数<img src=\"/Java/Java_%E5%9F%BA%E7%A1%80%EF%BC%9A%E4%BA%8C%E8%BF%9B%E5%88%B6/%E8%BF%9B%E5%88%B6%E9%97%B4%E8%BD%AC%E5%8C%96_%E5%8D%81%E4%B8%8E%E4%BA%8C%E4%BA%92%E8%BD%AC.png\" class=\"\" title=\"进制间转化_十与二互转\"></li>\n</ul>\n<h3 id=\"二与八-十六进制互转\"><a href=\"#二与八-十六进制互转\" class=\"headerlink\" title=\"二与八&#x2F;十六进制互转\"></a>二与八&#x2F;十六进制互转</h3><img src=\"/Java/Java_%E5%9F%BA%E7%A1%80%EF%BC%9A%E4%BA%8C%E8%BF%9B%E5%88%B6/%E8%BF%9B%E5%88%B6%E9%97%B4%E8%BD%AC%E5%8C%96_%E4%BA%8C%E8%BD%AC%E5%85%AB%E4%B8%8E%E5%8D%81%E5%85%AD.jpeg\" class=\"\" title=\"进制间转化_二转八与十六\">\n\n<img src=\"/Java/Java_%E5%9F%BA%E7%A1%80%EF%BC%9A%E4%BA%8C%E8%BF%9B%E5%88%B6/%E8%BF%9B%E5%88%B6%E9%97%B4%E8%BD%AC%E5%8C%96_%E5%85%AB%E4%B8%8E%E5%8D%81%E5%85%AD%E8%BD%AC%E4%BA%8C.jpeg\" class=\"\" title=\"进制间转化_八与十六转二\">\n\n<h2 id=\"二进制位运算\"><a href=\"#二进制位运算\" class=\"headerlink\" title=\"二进制位运算\"></a>二进制位运算</h2><table>\n<thead>\n<tr>\n<th>符号</th>\n<th>含义</th>\n<th>规则</th>\n<th>示例</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>&amp;</td>\n<td>与</td>\n<td>两个位都为1时，结果为1</td>\n<td>6 &amp; 3 &#x3D; 2</td>\n</tr>\n<tr>\n<td>&#124;</td>\n<td>或</td>\n<td>有一个位为1时，结果为1</td>\n<td>6 &#124; 3 &#x3D; 7</td>\n</tr>\n<tr>\n<td>^</td>\n<td>异或</td>\n<td>两个位相同为0，不同为1</td>\n<td>6 ^ 3 &#x3D; 5</td>\n</tr>\n<tr>\n<td>~</td>\n<td>取反</td>\n<td>0和1全部取反</td>\n<td>~ 6 &#x3D; -7</td>\n</tr>\n<tr>\n<td>&lt;&lt;</td>\n<td>左移</td>\n<td>位全部左移若干位，高位丢弃，低位补0</td>\n<td>3 &lt;&lt; 2 &#x3D; 12<span>&nbsp;&nbsp;&nbsp;&nbsp;</span>3 &#42;  2 &#42;  2 &#x3D; 12</td>\n</tr>\n<tr>\n<td>&gt;&gt;</td>\n<td>右移</td>\n<td>位全部右移若干位，高位正数补0负数补1，低位丢弃</td>\n<td>3 &gt;&gt; 1 &#x3D;1<span>&nbsp;&nbsp;&nbsp;&nbsp;</span>3 &#x2F; 2 &#x3D; 1</td>\n</tr>\n<tr>\n<td>&gt;&gt;&gt;</td>\n<td>无符号右移</td>\n<td>位全部右移若干位，高位补0，低位丢弃</td>\n<td>3 &gt;&gt;&gt; 1 &#x3D; 1<span>&nbsp;&nbsp;&nbsp;&nbsp;</span>3 &#x2F; 2 &#x3D;1</td>\n</tr>\n</tbody></table>\n<h2 id=\"JDK内置进制转换\"><a href=\"#JDK内置进制转换\" class=\"headerlink\" title=\"JDK内置进制转换\"></a>JDK内置进制转换</h2><h3 id=\"十进制转其他进制\"><a href=\"#十进制转其他进制\" class=\"headerlink\" title=\"十进制转其他进制\"></a>十进制转其他进制</h3><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">Integer.toBinaryString(<span class=\"number\">20</span>);   <span class=\"comment\">// 转为二进制</span></span><br><span class=\"line\">Integer.toHexString(<span class=\"number\">20</span>);   <span class=\"comment\">// 转为十六制</span></span><br><span class=\"line\">Integer.toOctalString(<span class=\"number\">20</span>);   <span class=\"comment\">// 转为八进制</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"其他进制转十进制\"><a href=\"#其他进制转十进制\" class=\"headerlink\" title=\"其他进制转十进制\"></a>其他进制转十进制</h3><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">Integer.parseInt(<span class=\"string\">&quot;00001101&quot;</span>,<span class=\"number\">2</span>);   <span class=\"comment\">// 二进制</span></span><br><span class=\"line\">Integer.parseInt(<span class=\"string\">&quot;17&quot;</span>,<span class=\"number\">8</span>);   <span class=\"comment\">// 八进制</span></span><br><span class=\"line\">Integer.parseInt(<span class=\"string\">&quot;A8&quot;</span>,<span class=\"number\">16</span>);   <span class=\"comment\">// 十六进制得</span></span><br></pre></td></tr></table></figure>\n\n\n\n\n","categories":["Java"],"tags":["后端","Java","基础"]},{"title":"Java_基础：参数传递","url":"/Java/Java_%E5%9F%BA%E7%A1%80%EF%BC%9A%E5%8F%82%E6%95%B0%E4%BC%A0%E9%80%92/","content":"<h2 id=\"传递方式\"><a href=\"#传递方式\" class=\"headerlink\" title=\"传递方式\"></a>传递方式</h2><ul>\n<li><code>值传递</code> 传递的是值的副本。方法中对副本的修改，不会影响到调用方</li>\n<li><code>引用传递</code> 传递的是对象的引用。共用一个内存，会影响到调用方。如果方法中对象的引用重新指向其他对象的引用，不会影响到调用方</li>\n</ul>\n<span id=\"more\"></span>\n\n<h2 id=\"传递类型\"><a href=\"#传递类型\" class=\"headerlink\" title=\"传递类型\"></a>传递类型</h2><ul>\n<li><code>对象、数组、容器</code> 传递引用</li>\n<li><code>基本类型、包装集</code> 传递值</li>\n<li><code>String类型</code> 传递引用<strong>（注意：String是不可变对象，每次对String类型进行改变时，都会生成一个新的String对象，重新指向新对象，不会影响到调用方）</strong></li>\n</ul>\n<h2 id=\"案例\"><a href=\"#案例\" class=\"headerlink\" title=\"案例\"></a>案例</h2><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Demo</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">str</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">String</span>(<span class=\"string\">&quot;yes&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">char</span>[] ch = &#123;<span class=\"string\">&#x27;a&#x27;</span>,<span class=\"string\">&#x27;b&#x27;</span>,<span class=\"string\">&#x27;c&#x27;</span>&#125;;</span><br><span class=\"line\">        <span class=\"type\">Integer</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">x</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"type\">Obj</span> <span class=\"variable\">o1</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Obj</span>();</span><br><span class=\"line\">        <span class=\"type\">Obj</span> <span class=\"variable\">o2</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Obj</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">Demo</span> <span class=\"variable\">demo</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Demo</span>();</span><br><span class=\"line\">        demo.change(str, ch, i, x, o1, o2);</span><br><span class=\"line\">        System.out.printf(<span class=\"string\">&quot;str=%s, ch=%s, i=%d, x=%d, o1=%d, o2=%d&quot;</span>,</span><br><span class=\"line\">                str, String.valueOf(ch), i, x, o1.getA(), o2.getA());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">change</span><span class=\"params\">(String str, <span class=\"type\">char</span> ch[], Integer i, <span class=\"type\">int</span> x, Obj o1, Obj o2)</span>&#123;</span><br><span class=\"line\">        str=<span class=\"string\">&quot;no&quot;</span>;</span><br><span class=\"line\">        ch[<span class=\"number\">0</span>]=<span class=\"string\">&#x27;z&#x27;</span>;</span><br><span class=\"line\">        i = <span class=\"number\">1</span>;</span><br><span class=\"line\">        x = <span class=\"number\">2</span>;</span><br><span class=\"line\">        <span class=\"type\">Obj</span> <span class=\"variable\">newObj</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Obj</span>();</span><br><span class=\"line\">        newObj.setA(<span class=\"number\">100</span>);</span><br><span class=\"line\">        o1 = newObj;</span><br><span class=\"line\">        o2.setA(<span class=\"number\">200</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Obj</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">int</span> a;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setA</span><span class=\"params\">(<span class=\"type\">int</span> a)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.a = a;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">getA</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> a;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>运行结果：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">str=yes, ch=zbc, i=<span class=\"number\">0</span>, x=<span class=\"number\">0</span>, o1=<span class=\"number\">0</span>, o2=<span class=\"number\">200</span></span><br></pre></td></tr></table></figure>\n\n","categories":["Java"],"tags":["后端","Java","基础"]},{"title":"Java_基础：反射","url":"/Java/Java_%E5%9F%BA%E7%A1%80%EF%BC%9A%E5%8F%8D%E5%B0%84/","content":"<h2 id=\"反射机制\"><a href=\"#反射机制\" class=\"headerlink\" title=\"反射机制\"></a>反射机制</h2><h3 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h3><ul>\n<li>Java反射机制是指在运行状态中，对于任意一个类，都能够知道这个类的所有属性和方法；对于任意一个对象，都能够调用它的任意一个方法和属性；这种动态获取的信息以及动态调用对象的方法的功能称为java语言的反射机制。用一句话总结就是<code>反射可以实现在运行时可以知道任意一个类的属性和方法</code>。</li>\n</ul>\n<span id=\"more\"></span>\n\n<h3 id=\"动-静态编译\"><a href=\"#动-静态编译\" class=\"headerlink\" title=\"动&#x2F;静态编译\"></a>动&#x2F;静态编译</h3><ul>\n<li><code>静态编译</code> 在编译时确定类型，绑定对象，即通过</li>\n<li><code>动态编译</code> 运行时确定类型，绑定对象，动态编译最大限度发挥了java的灵活性，体现了多态的应用，有以降低类之间的耦合性</li>\n</ul>\n<h3 id=\"优-缺点\"><a href=\"#优-缺点\" class=\"headerlink\" title=\"优&#x2F;缺点\"></a>优&#x2F;缺点</h3><ul>\n<li><code>优点</code> 增加程序的灵活性，避免将程序写死到代码里</li>\n<li><code>缺点</code> 对性能有影响</li>\n</ul>\n<h2 id=\"反射相关操作\"><a href=\"#反射相关操作\" class=\"headerlink\" title=\"反射相关操作\"></a>反射相关操作</h2><h3 id=\"获取Class实例\"><a href=\"#获取Class实例\" class=\"headerlink\" title=\"获取Class实例\"></a>获取Class实例</h3><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 方式一：调用运行时类的属性.class</span></span><br><span class=\"line\"><span class=\"type\">Class</span> <span class=\"variable\">clazz1</span> <span class=\"operator\">=</span> Person.class;</span><br><span class=\"line\">System.out.println(clazz1);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 方式二：通过运行时类的对象调用getClass()</span></span><br><span class=\"line\"><span class=\"type\">Class</span> <span class=\"variable\">clazz2</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Person</span>().getClass();</span><br><span class=\"line\">System.out.println(clazz2);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 方式三：调用Class的静态方法forName(String classPath)</span></span><br><span class=\"line\"><span class=\"type\">Class</span> <span class=\"variable\">clazz3</span> <span class=\"operator\">=</span> Class.forName(<span class=\"string\">&quot;com.example.reflect.Person&quot;</span>);</span><br><span class=\"line\">System.out.println(clazz3);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 方式四：使用类的加载器ClassLoader  (了解)</span></span><br><span class=\"line\"><span class=\"type\">ClassLoader</span> <span class=\"variable\">classLoader</span> <span class=\"operator\">=</span> <span class=\"built_in\">this</span>.getClass().getClassLoader();</span><br><span class=\"line\"><span class=\"type\">Class</span> <span class=\"variable\">clazz4</span> <span class=\"operator\">=</span> classLoader.loadClass(<span class=\"string\">&quot;com.example.reflect.Person&quot;</span>);</span><br><span class=\"line\">System.out.println(clazz4);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"构造函数\"><a href=\"#构造函数\" class=\"headerlink\" title=\"构造函数\"></a>构造函数</h3><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Class</span> <span class=\"variable\">clazz</span> <span class=\"operator\">=</span> Class.forName(<span class=\"string\">&quot;com.example.reflect.Person&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 获取一个类的所有公共的构造函数</span></span><br><span class=\"line\">Constructor[] publicConstructors = clazz.getConstructors();</span><br><span class=\"line\"><span class=\"keyword\">for</span>(Constructor constructor : publicConstructors)&#123;</span><br><span class=\"line\">\tSystem.out.println(constructor);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 获取一个类的所有构造函数，包括私有的在内</span></span><br><span class=\"line\">Constructor[] allConstructors =  clazz.getDeclaredConstructors();</span><br><span class=\"line\"><span class=\"keyword\">for</span>(Constructor constructor : allConstructors)&#123;</span><br><span class=\"line\">\tSystem.out.println(constructor);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 获取指定的公共构造函数</span></span><br><span class=\"line\"><span class=\"type\">Constructor</span> <span class=\"variable\">publicConstructor</span> <span class=\"operator\">=</span> clazz.getConstructor();</span><br><span class=\"line\">System.out.println(publicConstructor);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 获取指定的构造函数，包括私有的在内</span></span><br><span class=\"line\"><span class=\"type\">Constructor</span> <span class=\"variable\">privateConstructor</span> <span class=\"operator\">=</span> clazz.getDeclaredConstructor(String.class);</span><br><span class=\"line\">System.out.println(privateConstructor);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 创建公共的运行时类的对象</span></span><br><span class=\"line\"><span class=\"type\">Person</span> <span class=\"variable\">person1</span> <span class=\"operator\">=</span> (Person)publicConstructor.newInstance();</span><br><span class=\"line\">System.out.println(person1);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 创建私有的运行时类的对象</span></span><br><span class=\"line\">privateConstructor.setAccessible(<span class=\"literal\">true</span>);<span class=\"comment\">//设置私有访问权限</span></span><br><span class=\"line\"><span class=\"type\">Person</span> <span class=\"variable\">person2</span> <span class=\"operator\">=</span> (Person)privateConstructor.newInstance(<span class=\"string\">&quot;tom&quot;</span>);</span><br><span class=\"line\">System.out.println(person2);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"成员方法\"><a href=\"#成员方法\" class=\"headerlink\" title=\"成员方法\"></a>成员方法</h3><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Class</span> <span class=\"variable\">clazz</span> <span class=\"operator\">=</span> Class.forName(<span class=\"string\">&quot;com.example.reflect.Person&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 获取一个类及父类的所有公共成员方法</span></span><br><span class=\"line\">Method[] publicMethods = clazz.getMethods();</span><br><span class=\"line\"><span class=\"keyword\">for</span>(Method method : publicMethods)&#123;</span><br><span class=\"line\">    System.out.println(method);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 获取一个类的所有成员方法，包括私有的在内</span></span><br><span class=\"line\">Method[] allMethods =  clazz.getDeclaredMethods();</span><br><span class=\"line\"><span class=\"keyword\">for</span>(Method method : allMethods)&#123;</span><br><span class=\"line\">    System.out.println(method);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 获取指定的公共成员方法</span></span><br><span class=\"line\"><span class=\"type\">Method</span> <span class=\"variable\">publicMethod</span> <span class=\"operator\">=</span> clazz.getMethod(<span class=\"string\">&quot;toString&quot;</span>);</span><br><span class=\"line\">System.out.println(publicMethod);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 获取指定的成员方法，包括私有的在内</span></span><br><span class=\"line\"><span class=\"type\">Method</span> <span class=\"variable\">privateMethod</span> <span class=\"operator\">=</span> clazz.getDeclaredMethod(<span class=\"string\">&quot;show&quot;</span>, String.class);</span><br><span class=\"line\">System.out.println(privateMethod);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">Person</span> <span class=\"variable\">person</span> <span class=\"operator\">=</span> (Person)clazz.newInstance();</span><br><span class=\"line\"><span class=\"comment\">// 调用指定的公共的成员方法</span></span><br><span class=\"line\"><span class=\"type\">Object</span> <span class=\"variable\">publicReturnValue</span> <span class=\"operator\">=</span> publicMethod.invoke(person);</span><br><span class=\"line\">System.out.println(publicReturnValue);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 调用指定的私有的成员方法</span></span><br><span class=\"line\">privateMethod.setAccessible(<span class=\"literal\">true</span>);<span class=\"comment\">//设置私有访问权限</span></span><br><span class=\"line\"><span class=\"type\">Object</span> <span class=\"variable\">privateReturnValue</span> <span class=\"operator\">=</span> privateMethod.invoke(person, <span class=\"string\">&quot;哈哈&quot;</span>);</span><br><span class=\"line\">System.out.println(privateReturnValue);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"成员属性\"><a href=\"#成员属性\" class=\"headerlink\" title=\"成员属性\"></a>成员属性</h3><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Class</span> <span class=\"variable\">clazz</span> <span class=\"operator\">=</span> Class.forName(<span class=\"string\">&quot;com.example.reflect.Person&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 获取一个类及父类的所有公共成员属性</span></span><br><span class=\"line\">Field[] publicFields = clazz.getFields();</span><br><span class=\"line\"><span class=\"keyword\">for</span>(Field field : publicFields)&#123;</span><br><span class=\"line\">    System.out.println(field);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 获取一个类的所有成员属性，包括私有的在内</span></span><br><span class=\"line\">Field[] allFields =  clazz.getDeclaredFields();</span><br><span class=\"line\"><span class=\"keyword\">for</span>(Field field : allFields)&#123;</span><br><span class=\"line\">    System.out.println(field);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 获取指定的公共成员属性</span></span><br><span class=\"line\"><span class=\"type\">Field</span> <span class=\"variable\">publicField</span> <span class=\"operator\">=</span> clazz.getField(<span class=\"string\">&quot;id&quot;</span>);</span><br><span class=\"line\">System.out.println(publicField);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 获取指定的成员属性，包括私有的在内</span></span><br><span class=\"line\"><span class=\"type\">Field</span> <span class=\"variable\">privateField</span> <span class=\"operator\">=</span> clazz.getDeclaredField(<span class=\"string\">&quot;name&quot;</span>);</span><br><span class=\"line\">System.out.println(privateField);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">Person</span> <span class=\"variable\">person</span> <span class=\"operator\">=</span> (Person)clazz.newInstance();</span><br><span class=\"line\"><span class=\"comment\">// 设置指定的公共的成员属性</span></span><br><span class=\"line\">publicField.set(person, <span class=\"number\">1001</span>);</span><br><span class=\"line\">System.out.println(person);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设置指定的私有的成员属性</span></span><br><span class=\"line\">privateField.setAccessible(<span class=\"literal\">true</span>);<span class=\"comment\">//设置私有访问权限</span></span><br><span class=\"line\">privateField.set(person, <span class=\"string\">&quot;tom&quot;</span>);</span><br><span class=\"line\">System.out.println(person);</span><br></pre></td></tr></table></figure>","categories":["Java"],"tags":["后端","Java","基础"]},{"title":"Java_基础：注解","url":"/Java/Java_%E5%9F%BA%E7%A1%80%EF%BC%9A%E6%B3%A8%E8%A7%A3/","content":"<h2 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h2><ul>\n<li>从 JDK 5.0 开始, Java 增加了对元数据(MetaData) 的支持, 也就是 Annotation(注解)。</li>\n<li>Annotation 其实就是代码里的<code>特殊标记</code>, 这些标记可以在编译, 类加载, 运行时被读取, 并执行相应的处理。</li>\n<li>Annotation 可以像修饰符一样被使用, 可用于<code>修饰包、类、构造器、方法、成员变量、参数、局部变量的声明</code>, 这些信息被保存在 Annotation 的 “name&#x3D;value” 对中。</li>\n</ul>\n<span id=\"more\"></span>\n\n<h2 id=\"文档相关注解\"><a href=\"#文档相关注解\" class=\"headerlink\" title=\"文档相关注解\"></a>文档相关注解</h2><ul>\n<li><code>@author</code> 标明开发该类模块的作者，多个作者之间使用,分割 @version 标明该类模块的版本。</li>\n<li><code>@see</code> 参考转向，也就是相关主题。</li>\n<li><code>@since</code> 从哪个版本开始增加的。</li>\n<li><code>@param</code> 对方法中某参数的说明，如果没有参数就不能写。</li>\n<li><code>@return</code> 对方法返回值的说明，如果方法的返回值类型是void就不能写。</li>\n<li><code>@exception</code> 对方法可能抛出的异常进行说明，如果方法没有用throws显式抛出的异常就不能写其中。</li>\n</ul>\n<h2 id=\"内置注解\"><a href=\"#内置注解\" class=\"headerlink\" title=\"内置注解\"></a>内置注解</h2><ul>\n<li><code>@Override</code> 限定重写父类方法, 该注解只能用于方法。</li>\n<li><code>@Deprecated</code> 用于表示所修饰的元素(类, 方法等)已过时。通常是因为所修饰的结构危险或存在更好的选择。</li>\n<li><code>@SuppressWarnings</code> 抑制编译器警告。</li>\n</ul>\n<h2 id=\"元注解\"><a href=\"#元注解\" class=\"headerlink\" title=\"元注解\"></a>元注解</h2><ul>\n<li><code>@Target</code> 用于描述注解的使用范围（即：被描述的注解可以用在什么地方）。</li>\n<li><code>@Retention</code> 表示需要在什么级别保存该注释信息，用于描述注解的生命周期（SOURCE &lt; CLASS &lt; RUNTIME）。</li>\n<li><code>@Documented</code> 说明该注解将被包含在javadoc中。</li>\n<li><code>@Inherited</code> 说明子类可以继承父类中的该注解。</li>\n</ul>\n<h3 id=\"Target参数说明\"><a href=\"#Target参数说明\" class=\"headerlink\" title=\"@Target参数说明\"></a>@Target参数说明</h3><ul>\n<li><code>TYPE</code> 用于描述类、接口（包括注解类型）或enum声明。</li>\n<li><code>FIELD</code> 用于描述域。</li>\n<li><code>METHOD</code> 用于描述方法。</li>\n<li><code>PARAMETER</code> 用于描述参数。</li>\n<li><code>CONSTRUCTOR</code> 用于描述构造器。</li>\n<li><code>LOCAL_VARIABLE</code> 用于描述局部变量。</li>\n<li><code>ANNOTATION_TYPE</code> 用于描述对注解B进行声明，包括第三方注解B、自定义注解B。</li>\n<li><code>PACKAGE</code> 用于描述包。</li>\n<li><code>TYPE_PARAMETER</code> JDK1.8之后,用于描述在类型变量的声明语句中（如：泛型声明）。</li>\n<li><code>TYPE_USE</code> JDK1.8之后,用于描述在使用类型的任何语句中。</li>\n</ul>\n<h3 id=\"Retention参数说明\"><a href=\"#Retention参数说明\" class=\"headerlink\" title=\"@Retention参数说明\"></a>@Retention参数说明</h3><ul>\n<li><code>SOURCE</code> 在源文件中有效，即java文件中保留注释。</li>\n<li><code>CLASS</code> 在class文件中有效，即class文件中保留注释。</li>\n<li><code>RUNTIME</code> 在运行时有效，即运行程序时保留注释。</li>\n</ul>\n<h2 id=\"自定义注解\"><a href=\"#自定义注解\" class=\"headerlink\" title=\"自定义注解\"></a>自定义注解</h2><ul>\n<li>定义新的 Annotation 类型使用 <code>@interface</code> 关键字。</li>\n<li>自定义注解自动继承了<code>java.lang.annotation.Annotation</code>接口。</li>\n<li>Annotation 的成员变量在定义中以无参数方法的形式来声明。其方法名和返回值定义了该成员的名字和类型，称为配置参数。类型只能是<code>八种基本数据类型、String类型、Class类型、enum类型、Annotation类型、以上所有类型的数组</code>。</li>\n<li>可以在定义 Annotation 的成员变量时为其指定初始值, 指定成员变量的初始值可使用 <code>default</code> 关键字。</li>\n<li>如果只有一个参数成员，建议使用参数名为<code>value</code>。</li>\n<li>如果定义的注解含有配置参数，那么使用时必须指定参数值，除非它有默认值。格式是“参数名 &#x3D; 参数值”，如果只有一个参数成员，且名称为value， 可以省略“value&#x3D;”。</li>\n<li>没有成员定义的 Annotation 称为<code>标记</code>; 包含成员变量的 Annotation 称为元数据 Annotation。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Target(&#123;TYPE, FIELD, METHOD, PARAMETER, CONSTRUCTOR, LOCAL_VARIABLE&#125;)</span></span><br><span class=\"line\"><span class=\"meta\">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> MyAnnotation &#123;</span><br><span class=\"line\">    String <span class=\"title function_\">value</span><span class=\"params\">()</span> <span class=\"keyword\">default</span> <span class=\"string\">&quot;hello&quot;</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","categories":["Java"],"tags":["后端","Java","基础"]},{"title":"Java_基础：类初始化顺序","url":"/Java/Java_%E5%9F%BA%E7%A1%80%EF%BC%9A%E7%B1%BB%E5%88%9D%E5%A7%8B%E5%8C%96%E9%A1%BA%E5%BA%8F/","content":"<h2 id=\"类初始化顺序\"><a href=\"#类初始化顺序\" class=\"headerlink\" title=\"类初始化顺序\"></a>类初始化顺序</h2><ul>\n<li><code>父类静态变量/静态初始化块</code> -&gt; <code>子类静态变量/静态初始化块</code> -&gt; <code>父类变量/初始化块</code> -&gt;  <code>父类构造器</code> -&gt; <code>子类变量/初始化块</code> -&gt; <code>子类构造器</code></li>\n</ul>\n<span id=\"more\"></span>\n\n<h2 id=\"普通类初始化\"><a href=\"#普通类初始化\" class=\"headerlink\" title=\"普通类初始化\"></a>普通类初始化</h2><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Base</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"type\">String</span> <span class=\"variable\">sVariable</span> <span class=\"operator\">=</span> sPrint(<span class=\"string\">&quot;静态变量&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">String</span> <span class=\"variable\">variable</span> <span class=\"operator\">=</span> print(<span class=\"string\">&quot;普通变量&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;静态代码块&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;普通代码块&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">Base</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;构造函数&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title function_\">sPrint</span><span class=\"params\">(String str)</span> &#123;</span><br><span class=\"line\">        System.out.println(str);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> str;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">print</span><span class=\"params\">(String str)</span> &#123;</span><br><span class=\"line\">        System.out.println(str);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> str;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Base</span> <span class=\"variable\">base</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Base</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>运行结果：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">静态变量</span><br><span class=\"line\">静态代码块</span><br><span class=\"line\">普通变量</span><br><span class=\"line\">普通代码块</span><br><span class=\"line\">构造函数</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"继承类初始化\"><a href=\"#继承类初始化\" class=\"headerlink\" title=\"继承类初始化\"></a>继承类初始化</h2><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Base</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"type\">String</span> <span class=\"variable\">sVariable</span> <span class=\"operator\">=</span> sPrint(<span class=\"string\">&quot;父类静态变量&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">String</span> <span class=\"variable\">variable</span> <span class=\"operator\">=</span> print(<span class=\"string\">&quot;父类普通变量&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;父类静态代码块&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;父类普通代码块&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">Base</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;父类构造函数&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title function_\">sPrint</span><span class=\"params\">(String str)</span> &#123;</span><br><span class=\"line\">        System.out.println(str);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> str;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">print</span><span class=\"params\">(String str)</span> &#123;</span><br><span class=\"line\">        System.out.println(str);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> str;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Sub</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Base</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"type\">String</span> <span class=\"variable\">sVariable</span> <span class=\"operator\">=</span> sPrint(<span class=\"string\">&quot;子类静态变量&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">String</span> <span class=\"variable\">variable</span> <span class=\"operator\">=</span> print(<span class=\"string\">&quot;子类普通变量&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;子类静态代码块&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;子类普通代码块&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">Sub</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;子类构造函数&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title function_\">sPrint</span><span class=\"params\">(String str)</span> &#123;</span><br><span class=\"line\">        System.out.println(str);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> str;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">print</span><span class=\"params\">(String str)</span> &#123;</span><br><span class=\"line\">        System.out.println(str);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> str;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Base</span> <span class=\"variable\">base</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Sub</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>运行结果：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">父类静态变量</span><br><span class=\"line\">父类静态代码块</span><br><span class=\"line\">子类静态变量</span><br><span class=\"line\">子类静态代码块</span><br><span class=\"line\">父类普通变量</span><br><span class=\"line\">父类普通代码块</span><br><span class=\"line\">父类构造函数</span><br><span class=\"line\">子类普通变量</span><br><span class=\"line\">子类普通代码块</span><br><span class=\"line\">子类构造函数</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"笔试题\"><a href=\"#笔试题\" class=\"headerlink\" title=\"笔试题\"></a>笔试题</h2><h3 id=\"案例一\"><a href=\"#案例一\" class=\"headerlink\" title=\"案例一\"></a>案例一</h3><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 1. 先执行父类构造方法</span></span><br><span class=\"line\"><span class=\"comment\"> * 2. new的实例是Sub子类，所以父类构造方法调用的是子类重写的print方法</span></span><br><span class=\"line\"><span class=\"comment\"> * 3. 父类构造方法执行完后，才初始化子类变量，所以输出null</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Base</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">String</span> <span class=\"variable\">name</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;base&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">Base</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        print();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">print</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(name);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Sub</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Base</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"type\">String</span> <span class=\"variable\">name</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;sub&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">print</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">            System.out.println(name) ;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Base</span> <span class=\"variable\">b</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Sub</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>运行结果：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"literal\">null</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"案例二\"><a href=\"#案例二\" class=\"headerlink\" title=\"案例二\"></a>案例二</h3><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 规则1：在类第一次加载的时候，将会进行静态域的初始化：</span></span><br><span class=\"line\"><span class=\"comment\"> *      1.将所有的静态数据域初始化为默认值（0、false 和 null）；</span></span><br><span class=\"line\"><span class=\"comment\"> *      2.按照在类中定义的顺序依次执行静态初始化语句和静态初始化块。</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * 规则2：调用构造器的具体处理步骤：</span></span><br><span class=\"line\"><span class=\"comment\"> *      1.将所有的数据域初始化为默认值（0、false 和 null）；</span></span><br><span class=\"line\"><span class=\"comment\"> *      2.按照在类中定义的顺序依次执行初始化语句和初始化块；</span></span><br><span class=\"line\"><span class=\"comment\"> *      3.如果构造器调用的其他的构造器，则转而执行另一构造器；</span></span><br><span class=\"line\"><span class=\"comment\"> *      4.执行构造器主体。</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Base</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span> <span class=\"variable\">k</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">Base</span> <span class=\"variable\">b1</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Base</span>(<span class=\"string\">&quot;b1&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">Base</span> <span class=\"variable\">b2</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Base</span>(<span class=\"string\">&quot;b2&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> print(<span class=\"string\">&quot;i&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span> <span class=\"variable\">n</span> <span class=\"operator\">=</span> <span class=\"number\">99</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">int</span> <span class=\"variable\">a</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> print(<span class=\"string\">&quot;j&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        print(<span class=\"string\">&quot;构造块&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">        print(<span class=\"string\">&quot;静态块&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">Base</span><span class=\"params\">(String str)</span> &#123;</span><br><span class=\"line\">        System.out.println((++k) + <span class=\"string\">&quot;:&quot;</span> + str + <span class=\"string\">&quot;    i=&quot;</span> + i + <span class=\"string\">&quot;    n=&quot;</span> + n);</span><br><span class=\"line\">        ++i;</span><br><span class=\"line\">        ++n;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span> <span class=\"title function_\">print</span><span class=\"params\">(String str)</span> &#123;</span><br><span class=\"line\">        System.out.println((++k) + <span class=\"string\">&quot;:&quot;</span> + str + <span class=\"string\">&quot;    i=&quot;</span> + i + <span class=\"string\">&quot;    n=&quot;</span> + n);</span><br><span class=\"line\">        ++n;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ++i;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String args[])</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Base</span> <span class=\"variable\">t</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Base</span>(<span class=\"string\">&quot;init&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>运行结果：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1</span>:j    i=<span class=\"number\">0</span>    n=<span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"number\">2</span>:构造块    i=<span class=\"number\">1</span>    n=<span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"number\">3</span>:b1    i=<span class=\"number\">2</span>    n=<span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"number\">4</span>:j    i=<span class=\"number\">3</span>    n=<span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"number\">5</span>:构造块    i=<span class=\"number\">4</span>    n=<span class=\"number\">4</span></span><br><span class=\"line\"><span class=\"number\">6</span>:b2    i=<span class=\"number\">5</span>    n=<span class=\"number\">5</span></span><br><span class=\"line\"><span class=\"number\">7</span>:i    i=<span class=\"number\">6</span>    n=<span class=\"number\">6</span></span><br><span class=\"line\"><span class=\"number\">8</span>:静态块    i=<span class=\"number\">7</span>    n=<span class=\"number\">99</span></span><br><span class=\"line\"><span class=\"number\">9</span>:j    i=<span class=\"number\">8</span>    n=<span class=\"number\">100</span></span><br><span class=\"line\"><span class=\"number\">10</span>:构造块    i=<span class=\"number\">9</span>    n=<span class=\"number\">101</span></span><br><span class=\"line\"><span class=\"number\">11</span>:init    i=<span class=\"number\">10</span>    n=<span class=\"number\">102</span></span><br></pre></td></tr></table></figure>\n\n","categories":["Java"],"tags":["后端","Java","基础"]},{"title":"Java_基础：自增变量","url":"/Java/Java_%E5%9F%BA%E7%A1%80%EF%BC%9A%E8%87%AA%E5%A2%9E%E5%8F%98%E9%87%8F/","content":"<h2 id=\"案例\"><a href=\"#案例\" class=\"headerlink\" title=\"案例\"></a>案例</h2><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Test</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">        i = i++;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> i++;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">k</span> <span class=\"operator\">=</span> i + ++i * i++;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;i=&quot;</span> + i);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;j=&quot;</span> + j);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;k=&quot;</span> + k);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>运行结果：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">i=4</span><br><span class=\"line\">j=1</span><br><span class=\"line\">k=11</span><br></pre></td></tr></table></figure>\n\n<span id=\"more\"></span>\n\n<h2 id=\"案例解析\"><a href=\"#案例解析\" class=\"headerlink\" title=\"案例解析\"></a>案例解析</h2><img src=\"/Java/Java_%E5%9F%BA%E7%A1%80%EF%BC%9A%E8%87%AA%E5%A2%9E%E5%8F%98%E9%87%8F/1.gif\" class=\"\" title=\"a\">\n<img src=\"/Java/Java_%E5%9F%BA%E7%A1%80%EF%BC%9A%E8%87%AA%E5%A2%9E%E5%8F%98%E9%87%8F/2.gif\" class=\"\" title=\"b\">\n<img src=\"/Java/Java_%E5%9F%BA%E7%A1%80%EF%BC%9A%E8%87%AA%E5%A2%9E%E5%8F%98%E9%87%8F/3.gif\" class=\"\" title=\"c\">","categories":["Java"],"tags":["后端","Java","基础"]},{"title":"Java_多线程：线程","url":"/Java/Java_%E5%A4%9A%E7%BA%BF%E7%A8%8B%EF%BC%9A%E7%BA%BF%E7%A8%8B/","content":"<h2 id=\"线程\"><a href=\"#线程\" class=\"headerlink\" title=\"线程\"></a>线程</h2><h3 id=\"进程和线程\"><a href=\"#进程和线程\" class=\"headerlink\" title=\"进程和线程\"></a>进程和线程</h3><ul>\n<li><code>进程: </code>是程序的一次执行过程，或是正在运行的一个程序</li>\n<li><code>线程: </code>进程可进一步细化为线程，是一个程序内部的一条执行路径</li>\n</ul>\n<span id=\"more\"></span>\n\n<h3 id=\"并发和并行\"><a href=\"#并发和并行\" class=\"headerlink\" title=\"并发和并行\"></a>并发和并行</h3><ul>\n<li><code>单核并发: </code>一个CPU(采用时间片)同时执行多个任务。比如：多个人做同一件事</li>\n<li><code>多核并行: </code>多个CPU同时执行多个任务。比如：多个人同时做不同的事</li>\n</ul>\n<h3 id=\"多线程的好处\"><a href=\"#多线程的好处\" class=\"headerlink\" title=\"多线程的好处\"></a>多线程的好处</h3><ul>\n<li>解决了一个进程里面可以同时运行多个任务（执行路径）</li>\n<li>提供资源的利用率，而不是提供效率</li>\n</ul>\n<h3 id=\"多线程的弊端\"><a href=\"#多线程的弊端\" class=\"headerlink\" title=\"多线程的弊端\"></a>多线程的弊端</h3><ul>\n<li>降低了一个进程里面的线程的执行频率</li>\n<li>对线程进行管理要求额外的 CPU开销。线程的使用会给系统带来上下文切换的额外负担</li>\n<li>公有变量的同时读或写。当多个线程需要对公有变量进行写操作时，后一个线程往往会修改掉前一个线程存放的数据，发生线程安全问题</li>\n<li>线程的死锁。即较长时间的等待或资源竞争以及死锁等多线程症状</li>\n</ul>\n<h2 id=\"线程创建方式\"><a href=\"#线程创建方式\" class=\"headerlink\" title=\"线程创建方式\"></a>线程创建方式</h2><h3 id=\"继承Thread\"><a href=\"#继承Thread\" class=\"headerlink\" title=\"继承Thread\"></a>继承Thread</h3><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 方式一: 继承Thread</span></span><br><span class=\"line\"><span class=\"comment\"> *   1) 继承Thread类</span></span><br><span class=\"line\"><span class=\"comment\"> *   2) 重写Thread类中的run方法</span></span><br><span class=\"line\"><span class=\"comment\"> *   3) 调用Thread实现类的start方法启动</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ThreadDemo1</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Thread</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">run</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;当前线程：&quot;</span> + Thread.currentThread().getName());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">ThreadDemo1</span>().start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"实现Runnable\"><a href=\"#实现Runnable\" class=\"headerlink\" title=\"实现Runnable\"></a>实现Runnable</h3><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 方式二: 实现Runnable</span></span><br><span class=\"line\"><span class=\"comment\"> *   1) 实现Runnable接口</span></span><br><span class=\"line\"><span class=\"comment\"> *   2) 重写Runnable接口中的run方法</span></span><br><span class=\"line\"><span class=\"comment\"> *   3) 通过Runnable实现类创建线程对象</span></span><br><span class=\"line\"><span class=\"comment\"> *   4) 调用Thread类的start方法启动</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ThreadDemo2</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Runnable</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">run</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;当前线程：&quot;</span> + Thread.currentThread().getName());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">ThreadDemo2</span>()).start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"实现Callable\"><a href=\"#实现Callable\" class=\"headerlink\" title=\"实现Callable\"></a>实现Callable</h3><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.Callable;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.ExecutionException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.FutureTask;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 方式三: 实现Callable</span></span><br><span class=\"line\"><span class=\"comment\"> *   1) 实现Callable&lt;V&gt;接口</span></span><br><span class=\"line\"><span class=\"comment\"> *   2) 重写Callable接口中的call方法</span></span><br><span class=\"line\"><span class=\"comment\"> *   3) 通过FutureTask类创建线程对象</span></span><br><span class=\"line\"><span class=\"comment\"> *   4) 调用Thread类的start方法启动</span></span><br><span class=\"line\"><span class=\"comment\"> *   5) 输出FutureTask返回值</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ThreadDemo3</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Callable</span>&lt;Integer&gt; &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Integer <span class=\"title function_\">call</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;当前线程：&quot;</span> + Thread.currentThread().getName());</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">123</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            FutureTask&lt;Integer&gt; task = <span class=\"keyword\">new</span> <span class=\"title class_\">FutureTask</span>&lt;Integer&gt;(<span class=\"keyword\">new</span> <span class=\"title class_\">ThreadDemo3</span>());</span><br><span class=\"line\">            <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(task).start();</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;线程返回值：&quot;</span> + task.get());</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (ExecutionException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"线程生命周期\"><a href=\"#线程生命周期\" class=\"headerlink\" title=\"线程生命周期\"></a>线程生命周期</h2><ul>\n<li><code>新建: </code>当一个 <strong>Thread</strong> 类或其子类的对象被声明并创建时，新生的线程对象处于新建 状态</li>\n<li><code>就绪: </code>处于新建状态的线程被 <strong>start()</strong> 后，将进入线程队列等待 <strong>CPU</strong> 时间片，此时它已 具备了运行的条件，只是没分配到 <strong>CPU</strong> 资源</li>\n<li><code>运行: </code>当就绪的线程被调度并获得 <strong>CPU</strong> 资源时,便进入运行状态， <strong>run()</strong> 方法定义了线 程的操作和功能</li>\n<li><code>堵塞: </code>在某种特殊情况下，被人为挂起或执行输入输出操作时，让出 <strong>CPU</strong> 并临时中止自己的执行，进入阻塞状态</li>\n<li><code>死亡: </code>线程完成了它的全部工作或线程被提前强制性地中止或出现异常导致结束</li>\n</ul>\n<img src=\"/Java/Java_%E5%A4%9A%E7%BA%BF%E7%A8%8B%EF%BC%9A%E7%BA%BF%E7%A8%8B/%E7%BA%BF%E7%A8%8B%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F.jpg\" class=\"\" title=\"线程生命周期\">\n\n<h2 id=\"线程优先级\"><a href=\"#线程优先级\" class=\"headerlink\" title=\"线程优先级\"></a>线程优先级</h2><ul>\n<li>线程创建时继承父线程的优先级 </li>\n<li>低优先级只是获得调度的概率低，并非一定是在高优先级线程之后才被调用</li>\n</ul>\n<h3 id=\"优先级等级\"><a href=\"#优先级等级\" class=\"headerlink\" title=\"优先级等级\"></a>优先级等级</h3><ul>\n<li><code>MAX_PRIORITY=10: </code>最大优先级</li>\n<li><code>MIN _PRIORITY=1: </code> 最小优先级</li>\n<li><code>NORM_PRIORITY=5: </code> 默认优先级</li>\n</ul>\n<h3 id=\"涉及方法\"><a href=\"#涉及方法\" class=\"headerlink\" title=\"涉及方法\"></a>涉及方法</h3><ul>\n<li>getPriority()：返回线程优先值</li>\n<li>setPriority(int newPriority)：改变线程的优先级</li>\n</ul>\n<h2 id=\"守护线程\"><a href=\"#守护线程\" class=\"headerlink\" title=\"守护线程\"></a>守护线程</h2><h3 id=\"线程分类\"><a href=\"#线程分类\" class=\"headerlink\" title=\"线程分类\"></a>线程分类</h3><ul>\n<li><code>用户线程: </code>高优先级线程。JVM 会在终止之前等待任何用户线程完成其任务</li>\n<li><code>守护线程: </code>低优先级线程。其唯一作用是为用户线程提供服务，并且仅在用户线程运行时才需要，因此一旦所有用户线程完成执行，JVM 就会终止。也就是说守护线程不会阻止 JVM 退出</li>\n</ul>\n<h3 id=\"注意项\"><a href=\"#注意项\" class=\"headerlink\" title=\"注意项\"></a>注意项</h3><ul>\n<li>thread.setDaemon(true)必须在thread.start()之前设置，否则会跑出一个IllegalThreadStateException异常。不能把正在运行的常规线程设置为守护线程</li>\n<li>在Daemon线程中产生的新线程也是Daemon的</li>\n<li>守护线程不能用于去访问固有资源，如文件、数据库，因为它会在任何时候甚至在一个操作的中间发生中断</li>\n<li>Java自带的多线程框架，比如ExecutorService，会将守护线程转换为用户线程，所以如果要使用后台线程就不能用Java的线程池</li>\n</ul>\n<h3 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h3><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * isDaemon()：判断线程是否为守护线程</span></span><br><span class=\"line\"><span class=\"comment\"> * setDaemon(boolean on)：设置线程为守护线程，true守护，false非守护</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">DaemonThreadDemo</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Runnable</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">run</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;i=&quot;</span> + i++);</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                Thread.sleep(<span class=\"number\">1000</span>);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Thread</span> <span class=\"variable\">thread</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">DaemonThreadDemo</span>());</span><br><span class=\"line\">        <span class=\"comment\">// 设置守护线程</span></span><br><span class=\"line\">        thread.setDaemon(<span class=\"literal\">true</span>);</span><br><span class=\"line\">        thread.start();</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            Thread.sleep(<span class=\"number\">5000</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;main线程离开，守护线程也停止了！&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"join方法\"><a href=\"#join方法\" class=\"headerlink\" title=\"join方法\"></a>join方法</h2><ul>\n<li>当线程使用join()加入至另一个线程时，另一个线程会等待这个被加入的线程工作完毕，然后再继续它的动作</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">JoinThreadDemo</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Runnable</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">run</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;Thread B 开始..&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; <span class=\"number\">3</span>; i++) &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;Thread B 执行..&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                Thread.sleep(<span class=\"number\">1000</span>);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;Thread B 结束..&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;Thread A 开始..&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">Thread</span> <span class=\"variable\">thread</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">JoinThreadDemo</span>());</span><br><span class=\"line\">        thread.start();</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            thread.join();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;Thread A 结束..&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"线程停止\"><a href=\"#线程停止\" class=\"headerlink\" title=\"线程停止\"></a>线程停止</h2><p>未完，更新中…</p>\n<h2 id=\"线程通讯\"><a href=\"#线程通讯\" class=\"headerlink\" title=\"线程通讯\"></a>线程通讯</h2><h2 id=\"线程同步\"><a href=\"#线程同步\" class=\"headerlink\" title=\"线程同步\"></a>线程同步</h2><h2 id=\"线程池\"><a href=\"#线程池\" class=\"headerlink\" title=\"线程池\"></a>线程池</h2>","categories":["Java"],"tags":["后端","Java","多线程"]},{"title":"Java_多线程：线程池","url":"/Java/Java_%E5%A4%9A%E7%BA%BF%E7%A8%8B%EF%BC%9A%E7%BA%BF%E7%A8%8B%E6%B1%A0/","content":"<h2 id=\"线程池\"><a href=\"#线程池\" class=\"headerlink\" title=\"线程池\"></a>线程池</h2><ul>\n<li><code>线程池 </code> 主要是控制运行的线程数量。<code>处理过程中将任务放入队列</code>，然后在线程创建后启动这些任务，<code>如果线程数量超过了最大数量超出数量大线程排队等候</code>，等其他线程执行完毕，再从队列中取出任务来执行。</li>\n<li>主要特点：<code>线程复用</code>、<code>控制最大并发数</code>、<code>管理线程</code>。</li>\n</ul>\n<span id=\"more\"></span>\n\n<h2 id=\"线程池优势\"><a href=\"#线程池优势\" class=\"headerlink\" title=\"线程池优势\"></a>线程池优势</h2><ul>\n<li><code>降低资源消耗 </code> 通过复用利用已创建的线程降低线程创建和销毁造成的消耗。</li>\n<li><code>提高响应速度 </code> 当任务到达时，任务可以不需要的等到线程创建就能立即执行。</li>\n<li><code>提高线程的可管理性 </code> 线程数稀缺资源，如果无限制的创建，不仅会消耗系统资源，还会降低系统的稳定性，使用线程池可以进行统一分配，调优和监控。</li>\n</ul>\n<h2 id=\"线程池分类\"><a href=\"#线程池分类\" class=\"headerlink\" title=\"线程池分类\"></a>线程池分类</h2><ul>\n<li><code>FixedThreadPool</code> 创建一个定长线程池，可控制线程最大并发数，超出的线程会在队列中等待。</li>\n<li><code>SingleThreadExecutor</code> 创建一个单线程化的线程池，它只会用唯一的工作线程来执行任务，保证所有任务按照指定顺序(FIFO, LIFO, 优先级)执行。</li>\n<li><code>CachedThreadPool</code> 创建一个可缓存线程池，如果线程池长度超过处理需要，可灵活回收空闲线程，若无可回收，则新建线程。</li>\n<li><code>ScheduledThreadPool</code> 创建一个定长线程池，支持定时及周期性任务执行。</li>\n</ul>\n<h2 id=\"线程池弊端\"><a href=\"#线程池弊端\" class=\"headerlink\" title=\"线程池弊端\"></a>线程池弊端</h2><ul>\n<li><code>FixedThreadPool</code>、<code>SingleThreadExecutor</code> 允许的请求队列长度为Integer.MAX_VALUE，可能会堆积大量的请求，从而导致OOM。</li>\n<li><code>CachedThreadPool</code>、<code>ScheduledThreadPool</code> 允许的创建线程数量为Integer.MAX_VALUE，可能会创建大量的线程，从而导致OOM。</li>\n</ul>\n<h2 id=\"线程池示意图\"><a href=\"#线程池示意图\" class=\"headerlink\" title=\"线程池示意图\"></a>线程池示意图</h2><img src=\"/Java/Java_%E5%A4%9A%E7%BA%BF%E7%A8%8B%EF%BC%9A%E7%BA%BF%E7%A8%8B%E6%B1%A0/%E7%BA%BF%E7%A8%8B%E6%B1%A0%E7%A4%BA%E6%84%8F%E5%9B%BE.png\" class=\"\" title=\"线程池示意图\">\n\n<h2 id=\"7大参数\"><a href=\"#7大参数\" class=\"headerlink\" title=\"7大参数\"></a>7大参数</h2><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> corePoolSize 初始化线程数</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> maximumPoolSize 最大线程数</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> keepAliveTime 多余的空闲线程等待新任务的最长时间</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> unit keepAliveTime单位</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> workQueue 任务等待队列</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> threadFactory 线程工厂，用于创建线程</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> handler 拒绝策略</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"title function_\">ThreadPoolExecutor</span><span class=\"params\">(<span class=\"type\">int</span> corePoolSize,</span></span><br><span class=\"line\"><span class=\"params\">                          <span class=\"type\">int</span> maximumPoolSize,</span></span><br><span class=\"line\"><span class=\"params\">                          <span class=\"type\">long</span> keepAliveTime,</span></span><br><span class=\"line\"><span class=\"params\">                          TimeUnit unit,</span></span><br><span class=\"line\"><span class=\"params\">                          BlockingQueue&lt;Runnable&gt; workQueue,</span></span><br><span class=\"line\"><span class=\"params\">                          ThreadFactory threadFactory,</span></span><br><span class=\"line\"><span class=\"params\">                          RejectedExecutionHandler handler)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (corePoolSize &lt; <span class=\"number\">0</span> ||</span><br><span class=\"line\">            maximumPoolSize &lt;= <span class=\"number\">0</span> ||</span><br><span class=\"line\">            maximumPoolSize &lt; corePoolSize ||</span><br><span class=\"line\">            keepAliveTime &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">IllegalArgumentException</span>();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (workQueue == <span class=\"literal\">null</span> || threadFactory == <span class=\"literal\">null</span> || handler == <span class=\"literal\">null</span>)</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">NullPointerException</span>();</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.acc = System.getSecurityManager() == <span class=\"literal\">null</span> ?</span><br><span class=\"line\">            <span class=\"literal\">null</span> :</span><br><span class=\"line\">            AccessController.getContext();</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.corePoolSize = corePoolSize;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.maximumPoolSize = maximumPoolSize;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.workQueue = workQueue;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.keepAliveTime = unit.toNanos(keepAliveTime);</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.threadFactory = threadFactory;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.handler = handler;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"4种拒绝策略\"><a href=\"#4种拒绝策略\" class=\"headerlink\" title=\"4种拒绝策略\"></a>4种拒绝策略</h2><ul>\n<li><code>AbortPolicy</code> 默认策略，终止任务，抛出RejectedException。</li>\n<li><code>CallerRunsPolicy</code> 在调用者线程执行当前任务，不抛异常。</li>\n<li><code>DiscardPolicy</code> 抛弃策略，直接丢弃任务，不抛异常。</li>\n<li><code>DiscardOldersPolicy</code> 抛弃最老的任务，执行当前任务，不抛异常。</li>\n</ul>\n<h2 id=\"线程池合理配置（最大线程数）\"><a href=\"#线程池合理配置（最大线程数）\" class=\"headerlink\" title=\"线程池合理配置（最大线程数）\"></a>线程池合理配置（最大线程数）</h2><h3 id=\"CPU密集型\"><a href=\"#CPU密集型\" class=\"headerlink\" title=\"CPU密集型\"></a>CPU密集型</h3><ul>\n<li>该任务需要大量的运算，而没有阻塞，CPU一直全速运行。公式：<code>CPU核数 + 1个线程数</code></li>\n</ul>\n<h3 id=\"IO密集型\"><a href=\"#IO密集型\" class=\"headerlink\" title=\"IO密集型\"></a>IO密集型</h3><ul>\n<li>方式一：由于IO密集型任务线程并不是一直在执行任务，则应配置尽可能多的线程。公式：<code>CPU核数 * 2</code></li>\n<li>方式二：IO密集型时，大部分线程都阻塞，故需要多配置线程数。公式：<code>CPU核数 / (1 - 阻塞系数)</code>，说明：阻塞系数在0.8～0.9之间</li>\n</ul>\n<h2 id=\"线程池优雅关闭\"><a href=\"#线程池优雅关闭\" class=\"headerlink\" title=\"线程池优雅关闭\"></a>线程池优雅关闭</h2><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">gracefulShutDown</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    Runtime.getRuntime().addShutdownHook(<span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(() -&gt; shutDownThreadPool(threadPool, <span class=\"string\">&quot;threadPoolName&quot;</span>)));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 优雅关闭线程池（自身关闭，await 60s，强制关闭）</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> threadPool</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> alias</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">shutdownThreadPool</span><span class=\"params\">(ExecutorService threadPool, String alias)</span> &#123;</span><br><span class=\"line\">   log.info(<span class=\"string\">&quot;Start to shutdown the thead pool: &#123;&#125;&quot;</span>, alias);</span><br><span class=\"line\"></span><br><span class=\"line\">   threadPool.shutdown(); <span class=\"comment\">// 使新任务无法提交.</span></span><br><span class=\"line\">   <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 等待未完成任务结束</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!threadPool.awaitTermination(<span class=\"number\">60</span>, TimeUnit.SECONDS)) &#123;</span><br><span class=\"line\">         threadPool.shutdownNow(); <span class=\"comment\">// 取消当前执行的任务</span></span><br><span class=\"line\">         log.warn(<span class=\"string\">&quot;Interrupt the worker, which may cause some task inconsistent.&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">         <span class=\"comment\">// 等待任务取消的响应</span></span><br><span class=\"line\">         <span class=\"keyword\">if</span> (!threadPool.awaitTermination(<span class=\"number\">60</span>, TimeUnit.SECONDS))</span><br><span class=\"line\">            log.error(<span class=\"string\">&quot;Thread pool can&#x27;t be shutdown even with interrupting worker threads, which may cause some task inconsistent. &quot;</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">   &#125; <span class=\"keyword\">catch</span> (InterruptedException ie) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 重新取消当前线程进行中断</span></span><br><span class=\"line\">      threadPool.shutdownNow();</span><br><span class=\"line\">      log.error(<span class=\"string\">&quot;The current server thread is interrupted when it is trying to stop the worker threads. This may leave an inconcistent state.&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// 保留中断状态</span></span><br><span class=\"line\">      Thread.currentThread().interrupt();</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   log.info(<span class=\"string\">&quot;Finally shutdown the thead pool: &#123;&#125;&quot;</span>, alias);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n","categories":["Java"],"tags":["后端","Java","多线程"]},{"title":"Java_多线程：线程等待与唤醒","url":"/Java/Java_%E5%A4%9A%E7%BA%BF%E7%A8%8B%EF%BC%9A%E7%BA%BF%E7%A8%8B%E7%AD%89%E5%BE%85%E4%B8%8E%E5%94%A4%E9%86%92/","content":"<h2 id=\"Object类wait-notify方法\"><a href=\"#Object类wait-notify方法\" class=\"headerlink\" title=\"Object类wait&#x2F;notify方法\"></a>Object类wait&#x2F;notify方法</h2><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Demo</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"type\">Object</span> <span class=\"variable\">objlock</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Object</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(() -&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">synchronized</span> (objlock) &#123;</span><br><span class=\"line\">                System.out.println(Thread.currentThread().getName() + <span class=\"string\">&quot; -&gt; start&quot;</span>);</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    System.out.println(Thread.currentThread().getName() + <span class=\"string\">&quot; -&gt; wait&quot;</span>);</span><br><span class=\"line\">                    objlock.wait();</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">                    e.printStackTrace();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                System.out.println(Thread.currentThread().getName() + <span class=\"string\">&quot; -&gt; end&quot;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;, <span class=\"string\">&quot;A&quot;</span>).start();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(() -&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">synchronized</span> (objlock) &#123;</span><br><span class=\"line\">                System.out.println(Thread.currentThread().getName() + <span class=\"string\">&quot; -&gt; notify&quot;</span>);</span><br><span class=\"line\">                objlock.notify();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;, <span class=\"string\">&quot;B&quot;</span>).start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// A -&gt; start</span></span><br><span class=\"line\"><span class=\"comment\">// A -&gt; wait</span></span><br><span class=\"line\"><span class=\"comment\">// B -&gt; notify</span></span><br><span class=\"line\"><span class=\"comment\">// A -&gt; end</span></span><br></pre></td></tr></table></figure>\n\n<span id=\"more\"></span>\n\n<h2 id=\"Condition接口await-signal方法\"><a href=\"#Condition接口await-signal方法\" class=\"headerlink\" title=\"Condition接口await&#x2F;signal方法\"></a>Condition接口await&#x2F;signal方法</h2><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Demo</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"type\">Lock</span> <span class=\"variable\">lock</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ReentrantLock</span>();</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"type\">Condition</span> <span class=\"variable\">condition</span> <span class=\"operator\">=</span> lock.newCondition();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(() -&gt; &#123;</span><br><span class=\"line\">            lock.lock();</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                System.out.println(Thread.currentThread().getName() + <span class=\"string\">&quot; -&gt; start&quot;</span>);</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    System.out.println(Thread.currentThread().getName() + <span class=\"string\">&quot; -&gt; await&quot;</span>);</span><br><span class=\"line\">                    condition.await();</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">                    e.printStackTrace();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                System.out.println(Thread.currentThread().getName() + <span class=\"string\">&quot; -&gt; end&quot;</span>);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">                lock.unlock();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;, <span class=\"string\">&quot;A&quot;</span>).start();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(() -&gt; &#123;</span><br><span class=\"line\">            lock.lock();</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                System.out.println(Thread.currentThread().getName() + <span class=\"string\">&quot; -&gt; signal&quot;</span>);</span><br><span class=\"line\">                condition.signal();</span><br><span class=\"line\">            &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">                lock.unlock();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;, <span class=\"string\">&quot;B&quot;</span>).start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// A -&gt; start</span></span><br><span class=\"line\"><span class=\"comment\">// A -&gt; await</span></span><br><span class=\"line\"><span class=\"comment\">// B -&gt; signal</span></span><br><span class=\"line\"><span class=\"comment\">// A -&gt; end</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"LockSupport类park-unpark方法\"><a href=\"#LockSupport类park-unpark方法\" class=\"headerlink\" title=\"LockSupport类park&#x2F;unpark方法\"></a>LockSupport类park&#x2F;unpark方法</h2><p>park和unpark方法阻塞与解除线程阻塞的过程</p>\n<ul>\n<li>每个使用LockSupport的线程都有一个许可(permit)关联。permit相当于1，0的开关，默认是0；</li>\n<li>调用一次unpark，permit就变为1，调用一次park，permit就变成0；</li>\n<li>如果多次调用unpark和park，是否会堵塞则取决于permit是1还是0；</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Demo</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Thread</span> <span class=\"variable\">a</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(() -&gt; &#123;</span><br><span class=\"line\">            System.out.println(Thread.currentThread().getName() + <span class=\"string\">&quot; -&gt; start&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">            System.out.println(Thread.currentThread().getName() + <span class=\"string\">&quot; -&gt; park&quot;</span>);</span><br><span class=\"line\">            LockSupport.park(); <span class=\"comment\">// 被阻塞，等待通知放行</span></span><br><span class=\"line\"></span><br><span class=\"line\">            System.out.println(Thread.currentThread().getName() + <span class=\"string\">&quot; -&gt; end&quot;</span>);</span><br><span class=\"line\">        &#125;, <span class=\"string\">&quot;A&quot;</span>);</span><br><span class=\"line\">        a.start();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(() -&gt; &#123;</span><br><span class=\"line\">            System.out.println(Thread.currentThread().getName() + <span class=\"string\">&quot; -&gt; unpark&quot;</span>);</span><br><span class=\"line\">            LockSupport.unpark(a);  <span class=\"comment\">// 唤醒指定线程，如果先执行unpark再执行park，park相当于无效作用</span></span><br><span class=\"line\">        &#125;, <span class=\"string\">&quot;B&quot;</span>).start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// A -&gt; start</span></span><br><span class=\"line\"><span class=\"comment\">// A -&gt; park</span></span><br><span class=\"line\"><span class=\"comment\">// B -&gt; unpark</span></span><br><span class=\"line\"><span class=\"comment\">// A -&gt; end</span></span><br></pre></td></tr></table></figure>","categories":["Java"],"tags":["后端","Java","多线程"]},{"title":"Java_并发：CAS","url":"/Java/Java_%E5%B9%B6%E5%8F%91%EF%BC%9ACAS/","content":"<h2 id=\"CAS\"><a href=\"#CAS\" class=\"headerlink\" title=\"CAS\"></a>CAS</h2><ul>\n<li>CAS 全称是 <code>Compare And Swap</code>，即<code>比较并交换</code>，一种用于在多线程环境下实现同步功能的机制，是利用底层硬件平台特性，实现原子性操作的算法。</li>\n<li>CAS 的思想很简单：三个参数，一个当前内存值 V、旧的预期值 A、即将更新的值 B，当且仅当预期值 A 和内存值 V 相同时，将内存值修改为 B 并返回 true，否则什么都不做，并返回 false。</li>\n</ul>\n<span id=\"more\"></span>\n\n<h2 id=\"CAS源码分析\"><a href=\"#CAS源码分析\" class=\"headerlink\" title=\"CAS源码分析\"></a>CAS源码分析</h2><h3 id=\"AtomicInteger\"><a href=\"#AtomicInteger\" class=\"headerlink\" title=\"AtomicInteger\"></a>AtomicInteger</h3><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"type\">int</span> <span class=\"title function_\">getAndIncrement</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> unsafe.getAndAddInt(<span class=\"built_in\">this</span>, valueOffset, <span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Unsafe\"><a href=\"#Unsafe\" class=\"headerlink\" title=\"Unsafe\"></a>Unsafe</h3><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 1. 用该对象当前的值与var5比较</span></span><br><span class=\"line\"><span class=\"comment\"> * 2. 如果相同, 更新var5 + var4并且返回true</span></span><br><span class=\"line\"><span class=\"comment\"> * 3. 如果不同, 继续取值然后再比较, 直到更新完成</span></span><br><span class=\"line\"><span class=\"comment\"> * </span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> var1 AtomicInteger对象本身</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> var2 该对象值的引用地址</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> var4 需要变动的值</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> var5 通过var1, var2找出的主内存中的真实值</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"type\">int</span> <span class=\"title function_\">getAndAddInt</span><span class=\"params\">(Object var1, <span class=\"type\">long</span> var2, <span class=\"type\">int</span> var4)</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> var5;</span><br><span class=\"line\">    <span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">        var5 = <span class=\"built_in\">this</span>.getIntVolatile(var1, var2);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">while</span>(!<span class=\"built_in\">this</span>.compareAndSwapInt(var1, var2, var5, var5 + var4));</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> var5;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"CAS三大问题\"><a href=\"#CAS三大问题\" class=\"headerlink\" title=\"CAS三大问题\"></a>CAS三大问题</h2><h3 id=\"ABA问题\"><a href=\"#ABA问题\" class=\"headerlink\" title=\"ABA问题\"></a>ABA问题</h3><ul>\n<li><p>因为CAS需要在操作值的时候，检查值有没有发生变化，比如没有发生变化则更新，但是如果一个值原来是A，变成了B，又变成了A，那么使用CAS进行检查时则会发现它的值没有发生变化，但是实际上却变化了。</p>\n</li>\n<li><p>ABA问题的解决思路就是使用版本号。在变量前面追加上版本号，每次变量更新的时候把版本号加1，那么A-&gt;B-&gt;A就会变成1A-&gt;2B-&gt;3A。</p>\n</li>\n<li><p>从Java 1.5开始，JDK的Atomic包里提供了一个类<code>AtomicStampedReference来解决ABA问题</code>。这个类的compareAndSet方法的作用是首先检查当前引用是否等于预期引用，并且检查当前标志是否等于预期标志，如果全部相等，则以原子方式将该引用和该标志的值设置为给定的更新值。</p>\n</li>\n</ul>\n<h3 id=\"循环时间长开销大\"><a href=\"#循环时间长开销大\" class=\"headerlink\" title=\"循环时间长开销大\"></a>循环时间长开销大</h3><ul>\n<li>自旋CAS如果长时间不成功，会给CPU带来非常大的执行开销。如果JVM能支持处理器提供的<code>pause</code>指令，那么效率会有一定的提升。pause指令有两个作用：第一，它可以延迟流水线执行命令（de-pipeline），使CPU不会消耗过多的执行资源，延迟的时间取决于具体实现的版本，在一些处理器上延迟时间是零；第二，它可以避免在退出循环的时候因内存顺序冲突（Memory Order Violation）而引起CPU流水线被清空（CPU Pipeline Flush），从而提高CPU的执行效率。</li>\n</ul>\n<h3 id=\"只能保证一个共享变量的原子操作\"><a href=\"#只能保证一个共享变量的原子操作\" class=\"headerlink\" title=\"只能保证一个共享变量的原子操作\"></a>只能保证一个共享变量的原子操作</h3><ul>\n<li><p>当对一个共享变量执行操作时，我们可以使用循环CAS的方式来保证原子操作，但是对多个共享变量操作时，循环CAS就无法保证操作的原子性，这个时候就可以用锁。</p>\n</li>\n<li><p>从Java 1.5开始，JDK提供了<code>AtomicReference</code>类来保证引用对象之间的原子性，就可以把多个变量放在一个对象里来进行CAS操作。</p>\n</li>\n</ul>\n<h2 id=\"ABA问题与解决\"><a href=\"#ABA问题与解决\" class=\"headerlink\" title=\"ABA问题与解决\"></a>ABA问题与解决</h2><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.TimeUnit;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.atomic.AtomicReference;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.atomic.AtomicStampedReference;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">CASDemo</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">abaProblemProduce</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;-----------------以下是ABA问题的产生-----------------&quot;</span>);</span><br><span class=\"line\">        AtomicReference&lt;String&gt; atomicReference = <span class=\"keyword\">new</span> <span class=\"title class_\">AtomicReference</span>(<span class=\"string\">&quot;A&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(() -&gt; &#123;</span><br><span class=\"line\">            <span class=\"type\">boolean</span> <span class=\"variable\">flag</span> <span class=\"operator\">=</span> atomicReference.compareAndSet(<span class=\"string\">&quot;A&quot;</span>, <span class=\"string\">&quot;B&quot;</span>);</span><br><span class=\"line\">            System.out.printf(<span class=\"string\">&quot;%s -&gt; 是否修改成功: %b, 当前值: %s\\n&quot;</span>,</span><br><span class=\"line\">                    Thread.currentThread().getName(), flag, atomicReference.get());</span><br><span class=\"line\"></span><br><span class=\"line\">            flag = atomicReference.compareAndSet(<span class=\"string\">&quot;B&quot;</span>, <span class=\"string\">&quot;A&quot;</span>);</span><br><span class=\"line\">            System.out.printf(<span class=\"string\">&quot;%s -&gt; 是否修改成功: %b, 当前值: %s\\n&quot;</span>,</span><br><span class=\"line\">                    Thread.currentThread().getName(), flag, atomicReference.get());</span><br><span class=\"line\">        &#125;, <span class=\"string\">&quot;Thread-1&quot;</span>).start();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(() -&gt; &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 暂停1秒, 保证Thread-1线程完成一次ABA操作</span></span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                TimeUnit.SECONDS.sleep(<span class=\"number\">1</span>);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"type\">boolean</span> <span class=\"variable\">flag</span> <span class=\"operator\">=</span> atomicReference.compareAndSet(<span class=\"string\">&quot;A&quot;</span>, <span class=\"string\">&quot;C&quot;</span>);</span><br><span class=\"line\">            System.out.printf(<span class=\"string\">&quot;%s -&gt; 是否修改成功: %b, 当前值: %s\\n&quot;</span>,</span><br><span class=\"line\">                    Thread.currentThread().getName(), flag, atomicReference.get());</span><br><span class=\"line\">        &#125;, <span class=\"string\">&quot;Thread-2&quot;</span>).start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">abaProblemSolve</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;-----------------以下是ABA问题的解决-----------------&quot;</span>);</span><br><span class=\"line\">        AtomicStampedReference&lt;String&gt; atomicStampedReference = <span class=\"keyword\">new</span> <span class=\"title class_\">AtomicStampedReference</span>(<span class=\"string\">&quot;A&quot;</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(() -&gt; &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">stamp</span> <span class=\"operator\">=</span> atomicStampedReference.getStamp();</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// 暂停1秒, 让Thread-4线程能获取到第1次版本号</span></span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                TimeUnit.SECONDS.sleep(<span class=\"number\">1</span>);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"type\">boolean</span> <span class=\"variable\">flag</span> <span class=\"operator\">=</span> atomicStampedReference.compareAndSet(<span class=\"string\">&quot;A&quot;</span>, <span class=\"string\">&quot;B&quot;</span>, stamp, stamp + <span class=\"number\">1</span>);</span><br><span class=\"line\">            System.out.printf(<span class=\"string\">&quot;%s -&gt; 是否修改成功: %b, 当前值: %s, 更新前版本号: %s\\n&quot;</span>,</span><br><span class=\"line\">                    Thread.currentThread().getName(), flag, atomicStampedReference.getReference(), stamp);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">            stamp = atomicStampedReference.getStamp();</span><br><span class=\"line\">            flag = atomicStampedReference.compareAndSet(<span class=\"string\">&quot;B&quot;</span>, <span class=\"string\">&quot;A&quot;</span>, stamp, stamp + <span class=\"number\">1</span>);</span><br><span class=\"line\">            System.out.printf(<span class=\"string\">&quot;%s -&gt; 是否修改成功: %b, 当前值: %s, 更新前版本号: %s\\n&quot;</span>,</span><br><span class=\"line\">                    Thread.currentThread().getName(), flag, atomicStampedReference.getReference(), stamp);</span><br><span class=\"line\">        &#125;, <span class=\"string\">&quot;Thread-3&quot;</span>).start();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(() -&gt; &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">stamp</span> <span class=\"operator\">=</span> atomicStampedReference.getStamp();</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// 暂停3秒, 保证Thread-3线程完成一次ABA操作</span></span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                TimeUnit.SECONDS.sleep(<span class=\"number\">3</span>);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"type\">boolean</span> <span class=\"variable\">flag</span> <span class=\"operator\">=</span> atomicStampedReference.compareAndSet(<span class=\"string\">&quot;A&quot;</span>, <span class=\"string\">&quot;C&quot;</span>, stamp, stamp + <span class=\"number\">1</span>);</span><br><span class=\"line\">            System.out.printf(<span class=\"string\">&quot;%s -&gt; 是否修改成功: %b, 当前值: %s, 更新前版本号: %s\\n&quot;</span>,</span><br><span class=\"line\">                    Thread.currentThread().getName(), flag, atomicStampedReference.getReference(), stamp);</span><br><span class=\"line\">        &#125;, <span class=\"string\">&quot;Thread-4&quot;</span>).start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">CASDemo</span> <span class=\"variable\">demo</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">CASDemo</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">        demo.abaProblemProduce();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            TimeUnit.SECONDS.sleep(<span class=\"number\">3</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        demo.abaProblemSolve();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>运行结果：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">-----------------以下是ABA问题的产生-----------------</span><br><span class=\"line\">Thread-1 -&gt; 是否修改成功: <span class=\"literal\">true</span>, 当前值: B</span><br><span class=\"line\">Thread-1 -&gt; 是否修改成功: <span class=\"literal\">true</span>, 当前值: A</span><br><span class=\"line\">Thread-2 -&gt; 是否修改成功: <span class=\"literal\">true</span>, 当前值: C</span><br><span class=\"line\">-----------------以下是ABA问题的解决-----------------</span><br><span class=\"line\">Thread-3 -&gt; 是否修改成功: <span class=\"literal\">true</span>, 当前值: B, 更新前版本号: 1</span><br><span class=\"line\">Thread-3 -&gt; 是否修改成功: <span class=\"literal\">true</span>, 当前值: A, 更新前版本号: 2</span><br><span class=\"line\">Thread-4 -&gt; 是否修改成功: <span class=\"literal\">false</span>, 当前值: A, 更新前版本号: 1</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><ul>\n<li><a href=\"https://mritd.me/2017/02/06/java-cas/\">漠然</a></li>\n</ul>\n","categories":["Java"],"tags":["后端","Java","JUC","并发"]},{"title":"Java_并发：CountDownLatch计数器","url":"/Java/Java_%E5%B9%B6%E5%8F%91%EF%BC%9ACountDownLatch%E8%AE%A1%E6%95%B0%E5%99%A8/","content":"<style>\n[alt=CountDownLatch执行流程] {\n        max-width: 50%!important;\n}\n</style>\n\n<h2 id=\"1-概述\"><a href=\"#1-概述\" class=\"headerlink\" title=\"1. 概述\"></a>1. 概述</h2><ul>\n<li><code>CountDownLatch</code>计数器，是一个同步辅助类，在完成一组正在其他线程中执行的操作之前，它允许一个或多个线程一直等待。</li>\n</ul>\n<span id=\"more\"></span>\n\n<img src=\"/Java/Java_%E5%B9%B6%E5%8F%91%EF%BC%9ACountDownLatch%E8%AE%A1%E6%95%B0%E5%99%A8/CountDownLatch%E6%89%A7%E8%A1%8C%E6%B5%81%E7%A8%8B.gif\" class=\"\" title=\"CountDownLatch执行流程\">\n\n<h2 id=\"2-使用场景\"><a href=\"#2-使用场景\" class=\"headerlink\" title=\"2. 使用场景\"></a>2. 使用场景</h2><p><code>CountDownLatch</code>的典型用法是将一个程序分成独立的N个子任务，并创建一个值为N的<code>CountDownLatch</code>，每个子任务执行完就调用<code>countDown()</code>，等待问题被解决的任务调用这个锁的<code>await()</code>，直到所有子任务执行完才能继续往下执行。</p>\n<h2 id=\"3-应用示例\"><a href=\"#3-应用示例\" class=\"headerlink\" title=\"3. 应用示例\"></a>3. 应用示例</h2><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.CountDownLatch;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">CountDownLatchDemo</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> String[] country = &#123;<span class=\"string\">&quot;齐&quot;</span>, <span class=\"string\">&quot;楚&quot;</span>, <span class=\"string\">&quot;燕&quot;</span>, <span class=\"string\">&quot;赵&quot;</span>, <span class=\"string\">&quot;魏&quot;</span>, <span class=\"string\">&quot;韩&quot;</span>&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">CountDownLatch</span> <span class=\"variable\">latch</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">CountDownLatch</span>(country.length);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; country.length; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(() -&gt; &#123;</span><br><span class=\"line\">                System.out.println(Thread.currentThread().getName() + <span class=\"string\">&quot;国被灭..&quot;</span>);</span><br><span class=\"line\">                <span class=\"comment\">// 减少锁存器的计数，如果计数达到零，释放所有等待的线程</span></span><br><span class=\"line\">                latch.countDown();</span><br><span class=\"line\">            &#125;, country[i]).start();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 等到锁存器计数到零</span></span><br><span class=\"line\">            latch.await();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;秦灭六国，一统华夏..&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>运行结果：</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">齐国被灭..</span><br><span class=\"line\">赵国被灭..</span><br><span class=\"line\">燕国被灭..</span><br><span class=\"line\">楚国被灭..</span><br><span class=\"line\">韩国被灭..</span><br><span class=\"line\">魏国被灭..</span><br><span class=\"line\">秦灭六国，一统华夏..</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"4-实现原理\"><a href=\"#4-实现原理\" class=\"headerlink\" title=\"4. 实现原理\"></a>4. 实现原理</h2><ul>\n<li><code>CountDownLatch</code>基于<code>AQS(AbstractQueuedSynchronizer，队列同步器)</code>的 <strong>“共享模式”</strong>，以<code>AQS</code>的<code>int</code>类型变量<code>state</code>记录同步状态，用一个双向链表为实现的 <strong>FIFO队列</strong> 记录每一个阻塞等待的线程，让线程自旋等待（利用<code>LockSupport.park()</code>的线程同步原语让线程阻塞），直到countDown到0，才解除线程自旋（利用<code>LockSupport.unpark()</code>的线程同步原语唤醒线程），让所有阻塞等待的线程往下执行。</li>\n</ul>\n<h2 id=\"5-源码分析\"><a href=\"#5-源码分析\" class=\"headerlink\" title=\"5. 源码分析\"></a>5. 源码分析</h2><h3 id=\"5-1-主要内部类\"><a href=\"#5-1-主要内部类\" class=\"headerlink\" title=\"5.1. 主要内部类\"></a>5.1. 主要内部类</h3><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"> <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Sync</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">AbstractQueuedSynchronizer</span> &#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">long</span> <span class=\"variable\">serialVersionUID</span> <span class=\"operator\">=</span> <span class=\"number\">4982264981922014374L</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 设置当前计数器的值</span></span><br><span class=\"line\">        Sync(<span class=\"type\">int</span> count) &#123;</span><br><span class=\"line\">            setState(count);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 获取当前计数器的值</span></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"title function_\">getCount</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> getState();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 尝试获取共享锁</span></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"keyword\">protected</span> <span class=\"type\">int</span> <span class=\"title function_\">tryAcquireShared</span><span class=\"params\">(<span class=\"type\">int</span> acquires)</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> (getState() == <span class=\"number\">0</span>) ? <span class=\"number\">1</span> : -<span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 尝试释放共享锁</span></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"keyword\">protected</span> <span class=\"type\">boolean</span> <span class=\"title function_\">tryReleaseShared</span><span class=\"params\">(<span class=\"type\">int</span> releases)</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (;;) &#123;</span><br><span class=\"line\">                <span class=\"type\">int</span> <span class=\"variable\">c</span> <span class=\"operator\">=</span> getState();</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (c == <span class=\"number\">0</span>)</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">                <span class=\"type\">int</span> <span class=\"variable\">nextc</span> <span class=\"operator\">=</span> c-<span class=\"number\">1</span>;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (compareAndSetState(c, nextc))</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> nextc == <span class=\"number\">0</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5-2-构造方法\"><a href=\"#5-2-构造方法\" class=\"headerlink\" title=\"5.2. 构造方法\"></a>5.2. 构造方法</h3><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 构造函数调用时，count参数赋值给AQS的private volatile int state;，用来记录同步状态</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"title function_\">CountDownLatch</span><span class=\"params\">(<span class=\"type\">int</span> count)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (count &lt; <span class=\"number\">0</span>) <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">IllegalArgumentException</span>(<span class=\"string\">&quot;count &lt; 0&quot;</span>);</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.sync = <span class=\"keyword\">new</span> <span class=\"title class_\">Sync</span>(count);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5-3-await-方法\"><a href=\"#5-3-await-方法\" class=\"headerlink\" title=\"5.3. await()方法\"></a>5.3. await()方法</h3><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 该方法调用内部类Sync为类型的sync变量实现。</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">await</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> InterruptedException &#123;</span><br><span class=\"line\">        sync.acquireSharedInterruptibly(<span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"5-3-1-acquireSharedInterruptibly-方法\"><a href=\"#5-3-1-acquireSharedInterruptibly-方法\" class=\"headerlink\" title=\"5.3.1. acquireSharedInterruptibly()方法\"></a>5.3.1. acquireSharedInterruptibly()方法</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 以可中断模式获取锁(共享模式)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title function_\">acquireSharedInterruptibly</span><span class=\"params\">(<span class=\"type\">int</span> arg)</span> <span class=\"keyword\">throws</span> InterruptedException &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 如果线程被中断，则抛出中断异常</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (Thread.interrupted())</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">InterruptedException</span>();</span><br><span class=\"line\">        <span class=\"comment\">// 尝试获取共享锁</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (tryAcquireShared(arg) &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">            <span class=\"comment\">// 进入等待队列</span></span><br><span class=\"line\">            doAcquireSharedInterruptibly(arg);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"5-3-2-tryAcquireShared-方法\"><a href=\"#5-3-2-tryAcquireShared-方法\" class=\"headerlink\" title=\"5.3.2. tryAcquireShared()方法\"></a>5.3.2. tryAcquireShared()方法</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 尝试获取共享锁</span></span><br><span class=\"line\"><span class=\"keyword\">protected</span> <span class=\"type\">int</span> <span class=\"title function_\">tryAcquireShared</span><span class=\"params\">(<span class=\"type\">int</span> acquires)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// state==0，表示获取成功；state&gt;0，表示获取失败</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> (getState() == <span class=\"number\">0</span>) ? <span class=\"number\">1</span> : -<span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"5-3-3-doAcquireSharedInterruptibly-方法\"><a href=\"#5-3-3-doAcquireSharedInterruptibly-方法\" class=\"headerlink\" title=\"5.3.3. doAcquireSharedInterruptibly()方法\"></a>5.3.3. doAcquireSharedInterruptibly()方法</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 进入等待队列</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">doAcquireSharedInterruptibly</span><span class=\"params\">(<span class=\"type\">int</span> arg)</span> <span class=\"keyword\">throws</span> InterruptedException &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 增加新节点到队列末端（该队列用双向链表实现），该节点持有当前线程的引用</span></span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"type\">Node</span> <span class=\"variable\">node</span> <span class=\"operator\">=</span> addWaiter(Node.SHARED);</span><br><span class=\"line\">    <span class=\"type\">boolean</span> <span class=\"variable\">failed</span> <span class=\"operator\">=</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (;;) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 判断是否是head节点</span></span><br><span class=\"line\">            <span class=\"keyword\">final</span> <span class=\"type\">Node</span> <span class=\"variable\">p</span> <span class=\"operator\">=</span> node.predecessor();</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (p == head) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 尝试获取共享锁</span></span><br><span class=\"line\">                <span class=\"type\">int</span> <span class=\"variable\">r</span> <span class=\"operator\">=</span> tryAcquireShared(arg);</span><br><span class=\"line\">                <span class=\"comment\">// 如果获取成功，把当前节点设置成head节点。并唤醒等待队列的后继节点，结束该方法</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (r &gt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                    setHeadAndPropagate(node, r);</span><br><span class=\"line\">                    p.next = <span class=\"literal\">null</span>; <span class=\"comment\">// help GC</span></span><br><span class=\"line\">                    failed = <span class=\"literal\">false</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"comment\">// 让等待节点阻塞等待</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (shouldParkAfterFailedAcquire(p, node) &amp;&amp; parkAndCheckInterrupt())</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">InterruptedException</span>();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 如果获取许可失败，则把当前节点从等待队列中移除</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (failed)</span><br><span class=\"line\">            cancelAcquire(node);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5-4-countDown-方法\"><a href=\"#5-4-countDown-方法\" class=\"headerlink\" title=\"5.4. countDown()方法\"></a>5.4. countDown()方法</h3><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 该方法调用内部类Sync为类型的sync变量实现。</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">countDown</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        sync.releaseShared(<span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"5-4-1-releaseShared-方法\"><a href=\"#5-4-1-releaseShared-方法\" class=\"headerlink\" title=\"5.4.1. releaseShared()方法\"></a>5.4.1. releaseShared()方法</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 释放操作</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"type\">boolean</span> <span class=\"title function_\">releaseShared</span><span class=\"params\">(<span class=\"type\">int</span> arg)</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 尝试释放共享锁</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (tryReleaseShared(arg)) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 共享锁释放成功则调用park唤醒AQS队列里面最先挂起的线程</span></span><br><span class=\"line\">        doReleaseShared();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"5-4-2-tryReleaseShared-方法\"><a href=\"#5-4-2-tryReleaseShared-方法\" class=\"headerlink\" title=\"5.4.2. tryReleaseShared()方法\"></a>5.4.2. tryReleaseShared()方法</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 尝试释放共享锁</span></span><br><span class=\"line\"><span class=\"keyword\">protected</span> <span class=\"type\">boolean</span> <span class=\"title function_\">tryReleaseShared</span><span class=\"params\">(<span class=\"type\">int</span> releases)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (;;) &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">c</span> <span class=\"operator\">=</span> getState();</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (c == <span class=\"number\">0</span>)</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">nextc</span> <span class=\"operator\">=</span> c-<span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"comment\">// 使用cas保证更新信号量值的原子性</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (compareAndSetState(c, nextc))</span><br><span class=\"line\">                <span class=\"keyword\">return</span> nextc == <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"5-4-3-doReleaseShared-方法\"><a href=\"#5-4-3-doReleaseShared-方法\" class=\"headerlink\" title=\"5.4.3. doReleaseShared()方法\"></a>5.4.3. doReleaseShared()方法</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 调用unparkSuccessor()唤醒head的后继节点</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">doReleaseShared</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (;;) &#123;</span><br><span class=\"line\">            <span class=\"type\">Node</span> <span class=\"variable\">h</span> <span class=\"operator\">=</span> head;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (h != <span class=\"literal\">null</span> &amp;&amp; h != tail) &#123;</span><br><span class=\"line\">                <span class=\"type\">int</span> <span class=\"variable\">ws</span> <span class=\"operator\">=</span> h.waitStatus;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (ws == Node.SIGNAL) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (!compareAndSetWaitStatus(h, Node.SIGNAL, <span class=\"number\">0</span>))</span><br><span class=\"line\">                        <span class=\"keyword\">continue</span>; <span class=\"comment\">// loop to recheck cases</span></span><br><span class=\"line\">                    unparkSuccessor(h);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (ws == <span class=\"number\">0</span> &amp;&amp;</span><br><span class=\"line\">                         !compareAndSetWaitStatus(h, <span class=\"number\">0</span>, Node.PROPAGATE))</span><br><span class=\"line\">                    <span class=\"keyword\">continue</span>; <span class=\"comment\">// loop on failed CAS</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (h == head) <span class=\"comment\">// loop if head changed</span></span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","categories":["Java"],"tags":["后端","Java","JUC","并发"]},{"title":"Java_并发：CyclicBarrier屏障","url":"/Java/Java_%E5%B9%B6%E5%8F%91%EF%BC%9ACyclicBarrier%E5%B1%8F%E9%9A%9C/","content":"<style>\n[alt=CyclicBarrier执行流程] {\n        max-width: 40%!important;\n}\n</style>\n\n<h2 id=\"1-概述\"><a href=\"#1-概述\" class=\"headerlink\" title=\"1. 概述\"></a>1. 概述</h2><ul>\n<li><code>CyclicBarrier</code>屏障，是一个同步辅助类，允许一组线程互相等待，直到到达某个公共屏障点。因为该barrier在释放等待线程后可以重用，所以称它为循环的barrier。</li>\n<li>一旦满足barrier条件后，<code>CyclicBarrier</code>可以执行一个（可选的）<code>Runnable</code>任务。</li>\n<li>所有等待线程被释放后，<code>CyclicBarrier</code>是可以重用的。</li>\n<li><code>CyclicBarrier</code>常用于复杂的并行计算。</li>\n</ul>\n<span id=\"more\"></span>\n\n<img src=\"/Java/Java_%E5%B9%B6%E5%8F%91%EF%BC%9ACyclicBarrier%E5%B1%8F%E9%9A%9C/CyclicBarrier%E6%89%A7%E8%A1%8C%E6%B5%81%E7%A8%8B.gif\" class=\"\" title=\"CyclicBarrier执行流程\">\n\n<h2 id=\"2-应用示例\"><a href=\"#2-应用示例\" class=\"headerlink\" title=\"2. 应用示例\"></a>2. 应用示例</h2><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.BrokenBarrierException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.CyclicBarrier;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">CyclicBarrierDemo</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">CyclicBarrier</span> <span class=\"variable\">cyclicBarrier</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">CyclicBarrier</span>(<span class=\"number\">7</span>, () -&gt; &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;集齐7颗龙珠，召唤神龙..&quot;</span>);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>; i &lt;= <span class=\"number\">7</span>; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(() -&gt; &#123;</span><br><span class=\"line\">                System.out.println(<span class=\"string\">&quot;收集到第&quot;</span> + Thread.currentThread().getName() + <span class=\"string\">&quot;龙珠..&quot;</span>);</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    cyclicBarrier.await();</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">                    e.printStackTrace();</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (BrokenBarrierException e) &#123;</span><br><span class=\"line\">                    e.printStackTrace();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;, String.valueOf(i)).start();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>运行结果：</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">收集到第<span class=\"number\">2</span>龙珠..</span><br><span class=\"line\">收集到第<span class=\"number\">4</span>龙珠..</span><br><span class=\"line\">收集到第<span class=\"number\">5</span>龙珠..</span><br><span class=\"line\">收集到第<span class=\"number\">3</span>龙珠..</span><br><span class=\"line\">收集到第<span class=\"number\">1</span>龙珠..</span><br><span class=\"line\">收集到第<span class=\"number\">7</span>龙珠..</span><br><span class=\"line\">收集到第<span class=\"number\">6</span>龙珠..</span><br><span class=\"line\">集齐<span class=\"number\">7</span>颗龙珠，召唤神龙..</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3-实现原理\"><a href=\"#3-实现原理\" class=\"headerlink\" title=\"3. 实现原理\"></a>3. 实现原理</h2><ul>\n<li><code>CyclicBarrier</code>是通过<code>ReentrantLock</code>（独占锁）和<code>Condition</code>来实现的。</li>\n</ul>\n<h2 id=\"4-源码分析\"><a href=\"#4-源码分析\" class=\"headerlink\" title=\"4. 源码分析\"></a>4. 源码分析</h2><h3 id=\"4-1-构造方法\"><a href=\"#4-1-构造方法\" class=\"headerlink\" title=\"4.1. 构造方法\"></a>4.1. 构造方法</h3><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 构造一个拦截线程数量为parties的屏障</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"title function_\">CyclicBarrier</span><span class=\"params\">(<span class=\"type\">int</span> parties)</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>(parties, <span class=\"literal\">null</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 当所有线程都到达屏障时，优先执行barrierAction这个线程</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"title function_\">CyclicBarrier</span><span class=\"params\">(<span class=\"type\">int</span> parties, Runnable barrierAction)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (parties &lt;= <span class=\"number\">0</span>) <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">IllegalArgumentException</span>();</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.parties = parties;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.count = parties;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.barrierCommand = barrierAction;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-2-await-方法\"><a href=\"#4-2-await-方法\" class=\"headerlink\" title=\"4.2. await()方法\"></a>4.2. await()方法</h3><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 等待所有 parties已经在这个障碍上调用了 await</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">await</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> InterruptedException, BrokenBarrierException &#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> dowait(<span class=\"literal\">false</span>, <span class=\"number\">0L</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (TimeoutException toe) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>(toe); <span class=\"comment\">// cannot happen;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 等待所有 parties已经在此屏障上调用 await ，或指定的等待时间过去</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">await</span><span class=\"params\">(<span class=\"type\">long</span> timeout, TimeUnit unit)</span> </span><br><span class=\"line\">           <span class=\"keyword\">throws</span> InterruptedException, BrokenBarrierException, TimeoutException &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> dowait(<span class=\"literal\">true</span>, unit.toNanos(timeout));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"4-2-1-dowait-方法\"><a href=\"#4-2-1-dowait-方法\" class=\"headerlink\" title=\"4.2.1. dowait()方法\"></a>4.2.1. dowait()方法</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 使用内部类Generation表示barrier，每完成一整个循环就重新生成一个Generation。</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"type\">int</span> <span class=\"title function_\">dowait</span><span class=\"params\">(<span class=\"type\">boolean</span> timed, <span class=\"type\">long</span> nanos)</span></span><br><span class=\"line\">           <span class=\"keyword\">throws</span> InterruptedException, BrokenBarrierException, TimeoutException &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 获取锁</span></span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"type\">ReentrantLock</span> <span class=\"variable\">lock</span> <span class=\"operator\">=</span> <span class=\"built_in\">this</span>.lock;</span><br><span class=\"line\">    lock.lock();</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 分代</span></span><br><span class=\"line\">        <span class=\"keyword\">final</span> <span class=\"type\">Generation</span> <span class=\"variable\">g</span> <span class=\"operator\">=</span> generation;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">// 当前generation“已损坏”，抛出BrokenBarrierException异常</span></span><br><span class=\"line\">        <span class=\"comment\">// 抛出该异常一般都是某个线程在等待某个处于“断开”状态的CyclicBarrie</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (g.broken)</span><br><span class=\"line\">            <span class=\"comment\">// 当某个线程试图等待处于断开状态的 barrier 时，</span></span><br><span class=\"line\">            <span class=\"comment\">// 或者 barrier 进入断开状态而线程处于等待状态时，抛出该异常</span></span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BrokenBarrierException</span>();</span><br><span class=\"line\">            </span><br><span class=\"line\">        <span class=\"comment\">// 如果线程中断，终止CyclicBarrier</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (Thread.interrupted()) &#123;</span><br><span class=\"line\">            breakBarrier();</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">InterruptedException</span>();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">       <span class=\"comment\">// 进来一个线程 count - 1</span></span><br><span class=\"line\">       <span class=\"type\">int</span> <span class=\"variable\">index</span> <span class=\"operator\">=</span> --count;</span><br><span class=\"line\">       <span class=\"comment\">// count == 0 表示所有线程均已到位，触发Runnable任务</span></span><br><span class=\"line\">       <span class=\"keyword\">if</span> (index == <span class=\"number\">0</span>) &#123;  <span class=\"comment\">// tripped</span></span><br><span class=\"line\">           <span class=\"type\">boolean</span> <span class=\"variable\">ranAction</span> <span class=\"operator\">=</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">           <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">               <span class=\"keyword\">final</span> <span class=\"type\">Runnable</span> <span class=\"variable\">command</span> <span class=\"operator\">=</span> barrierCommand;</span><br><span class=\"line\">               <span class=\"comment\">// 触发任务</span></span><br><span class=\"line\">               <span class=\"keyword\">if</span> (command != <span class=\"literal\">null</span>)</span><br><span class=\"line\">                   command.run();</span><br><span class=\"line\">               ranAction = <span class=\"literal\">true</span>;</span><br><span class=\"line\">               <span class=\"comment\">// 唤醒所有等待线程，并更新generation</span></span><br><span class=\"line\">               nextGeneration();</span><br><span class=\"line\">               <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">           &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">               <span class=\"comment\">// 未执行，说明 barrierCommand 执行报错，或者线程打断等等情况</span></span><br><span class=\"line\">               <span class=\"keyword\">if</span> (!ranAction)</span><br><span class=\"line\">                   breakBarrier();</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       </span><br><span class=\"line\">        <span class=\"keyword\">for</span> (;;) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 如果不是超时等待，则调用Condition.await()方法等待</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (!timed)</span><br><span class=\"line\">                    trip.await();</span><br><span class=\"line\">                <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (nanos &gt; <span class=\"number\">0L</span>)</span><br><span class=\"line\">                    <span class=\"comment\">// 超时等待，调用Condition.awaitNanos()方法等待</span></span><br><span class=\"line\">                    nanos = trip.awaitNanos(nanos);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (InterruptedException ie) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (g == generation &amp;&amp; ! g.broken) &#123;</span><br><span class=\"line\">                    breakBarrier();</span><br><span class=\"line\">                    <span class=\"keyword\">throw</span> ie;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    <span class=\"comment\">// We&#x27;re about to finish waiting even if we had not</span></span><br><span class=\"line\">                    <span class=\"comment\">// been interrupted, so this interrupt is deemed to</span></span><br><span class=\"line\">                    <span class=\"comment\">// &quot;belong&quot; to subsequent execution.</span></span><br><span class=\"line\">                    Thread.currentThread().interrupt();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"keyword\">if</span> (g.broken)</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BrokenBarrierException</span>();</span><br><span class=\"line\">                </span><br><span class=\"line\">            <span class=\"comment\">// generation已经更新，返回index</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (g != generation)</span><br><span class=\"line\">                <span class=\"keyword\">return</span> index;</span><br><span class=\"line\">                </span><br><span class=\"line\">            <span class=\"comment\">// “超时等待”，并且时间已到,终止CyclicBarrier，并抛出异常</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (timed &amp;&amp; nanos &lt;= <span class=\"number\">0L</span>) &#123;</span><br><span class=\"line\">                breakBarrier();</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">TimeoutException</span>();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 释放锁</span></span><br><span class=\"line\">        lock.unlock();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-3-reset-方法\"><a href=\"#4-3-reset-方法\" class=\"headerlink\" title=\"4.3. reset()方法\"></a>4.3. reset()方法</h3><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 将屏障重置为其初始状态</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">reset</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"type\">ReentrantLock</span> <span class=\"variable\">lock</span> <span class=\"operator\">=</span> <span class=\"built_in\">this</span>.lock;</span><br><span class=\"line\">    lock.lock();</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        breakBarrier();   <span class=\"comment\">// break the current generation</span></span><br><span class=\"line\">        nextGeneration(); <span class=\"comment\">// start a new generation</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">        lock.unlock();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"4-3-1-breakBarrier-方法\"><a href=\"#4-3-1-breakBarrier-方法\" class=\"headerlink\" title=\"4.3.1. breakBarrier()方法\"></a>4.3.1. breakBarrier()方法</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 当 barrier 损坏了，或者有一个线程中断了，则通过 breakBarrier() 方法，来终止所有的线程</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">breakBarrier</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    generation.broken = <span class=\"literal\">true</span>;</span><br><span class=\"line\">    count = parties;</span><br><span class=\"line\">    trip.signalAll();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"4-3-2-nextGeneration-方法\"><a href=\"#4-3-2-nextGeneration-方法\" class=\"headerlink\" title=\"4.3.2. nextGeneration()方法\"></a>4.3.2. nextGeneration()方法</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 唤醒所有线程，重置 count，重置 generation</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">nextGeneration</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    trip.signalAll();</span><br><span class=\"line\">    count = parties;</span><br><span class=\"line\">    generation = <span class=\"keyword\">new</span> <span class=\"title class_\">Generation</span>();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Generation 是 CyclicBarrier 内部静态类，描述了 CyclicBarrier 的更新换代。</span></span><br><span class=\"line\"><span class=\"comment\">// 在CyclicBarrier中，同一批线程属于同一代。</span></span><br><span class=\"line\"><span class=\"comment\">// 当有 parties 个线程全部到达 barrier 时，generation 就会被更新换代。</span></span><br><span class=\"line\"><span class=\"comment\">// 其中 broken 属性，标识该当前 CyclicBarrier 是否已经处于中断状态。</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Generation</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">boolean</span> <span class=\"variable\">broken</span> <span class=\"operator\">=</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","categories":["Java"],"tags":["后端","Java","JUC","并发"]},{"title":"Java_并发：Semaphore信号量","url":"/Java/Java_%E5%B9%B6%E5%8F%91%EF%BC%9ASemaphore%E4%BF%A1%E5%8F%B7%E9%87%8F/","content":"<h2 id=\"1-概述\"><a href=\"#1-概述\" class=\"headerlink\" title=\"1. 概述\"></a>1. 概述</h2><ul>\n<li><code>Semaphore</code>信号量，通过构造函数设定一定数目的许可，通过<code>acquire()</code>方法获得许可，<code>release()</code>释放许可。</li>\n<li><code>Semaphore</code>常用来限制访问某些特定资源的线程数。</li>\n<li><code>Semaphore</code>初始化为只有一个许可时，称为binary semaphore，变成了一种互斥锁。</li>\n<li><code>Semaphore</code>可以通过构造器参数设置成公平和非公平模式。</li>\n</ul>\n<span id=\"more\"></span>\n\n<h2 id=\"2-应用示例\"><a href=\"#2-应用示例\" class=\"headerlink\" title=\"2. 应用示例\"></a>2. 应用示例</h2><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.Semaphore;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SemaphoreDemo</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Semaphore</span> <span class=\"variable\">semaphore</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Semaphore</span>(<span class=\"number\">3</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; <span class=\"number\">8</span>; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(() -&gt; &#123;</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    semaphore.acquire();</span><br><span class=\"line\">                    System.out.println(Thread.currentThread().getName() + <span class=\"string\">&quot;: 开始买票&quot;</span>);</span><br><span class=\"line\">                    Thread.sleep(<span class=\"number\">2000</span>);</span><br><span class=\"line\">                    System.out.println(Thread.currentThread().getName() + <span class=\"string\">&quot;: 购票成功&quot;</span>);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">                    e.printStackTrace();</span><br><span class=\"line\">                &#125;<span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">                    semaphore.release();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;).start();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>运行结果</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">Thread-0: 开始买票</span><br><span class=\"line\">Thread-2: 开始买票</span><br><span class=\"line\">Thread-1: 开始买票</span><br><span class=\"line\">Thread-0: 购票成功</span><br><span class=\"line\">Thread-1: 购票成功</span><br><span class=\"line\">Thread-2: 购票成功</span><br><span class=\"line\">Thread-3: 开始买票</span><br><span class=\"line\">Thread-4: 开始买票</span><br><span class=\"line\">Thread-5: 开始买票</span><br><span class=\"line\">Thread-4: 购票成功</span><br><span class=\"line\">Thread-3: 购票成功</span><br><span class=\"line\">Thread-6: 开始买票</span><br><span class=\"line\">Thread-5: 购票成功</span><br><span class=\"line\">Thread-7: 开始买票</span><br><span class=\"line\">Thread-6: 购票成功</span><br><span class=\"line\">Thread-7: 购票成功</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3-实现原理\"><a href=\"#3-实现原理\" class=\"headerlink\" title=\"3. 实现原理\"></a>3. 实现原理</h2><ul>\n<li><code>Semaphore</code>使用内部类<code>Sync</code>做一系列的锁控制，该类继承自<code>AQS(AbstractQueuedSynchronizer，队列同步器)</code>，提供公平和非公平两种模式，默认是非公平模式。</li>\n</ul>\n<h2 id=\"4-源码分析\"><a href=\"#4-源码分析\" class=\"headerlink\" title=\"4. 源码分析\"></a>4. 源码分析</h2><h3 id=\"4-1-主要内部类\"><a href=\"#4-1-主要内部类\" class=\"headerlink\" title=\"4.1. 主要内部类\"></a>4.1. 主要内部类</h3><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 抽象类Sync实现了AQS的部分方法</span></span><br><span class=\"line\"><span class=\"keyword\">abstract</span> <span class=\"keyword\">static</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Sync</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">AbstractQueuedSynchronizer</span> &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// NonfairSync实现了Sync，主要用于非公平锁的获取</span></span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">class</span> <span class=\"title class_\">NonfairSync</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Sync</span> &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// FairSync实现了Sync，主要用于公平锁的获取</span></span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">class</span> <span class=\"title class_\">FairSync</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Sync</span> &#123;&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"4-2-构造方法\"><a href=\"#4-2-构造方法\" class=\"headerlink\" title=\"4.2. 构造方法\"></a>4.2. 构造方法</h3><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 构造方法，创建时要传入许可次数，默认使用非公平模式</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"title function_\">Semaphore</span><span class=\"params\">(<span class=\"type\">int</span> <span class=\"keyword\">permits</span>)</span> &#123;</span><br><span class=\"line\">    sync = <span class=\"keyword\">new</span> <span class=\"title class_\">NonfairSync</span>(<span class=\"keyword\">permits</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 构造方法，需要传入许可次数，及是否公平模式</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"title function_\">Semaphore</span><span class=\"params\">(<span class=\"type\">int</span> <span class=\"keyword\">permits</span>, <span class=\"type\">boolean</span> fair)</span> &#123;</span><br><span class=\"line\">    sync = fair ? <span class=\"keyword\">new</span> <span class=\"title class_\">FairSync</span>(<span class=\"keyword\">permits</span>) : <span class=\"keyword\">new</span> <span class=\"title class_\">NonfairSync</span>(<span class=\"keyword\">permits</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-3-acquire-方法\"><a href=\"#4-3-acquire-方法\" class=\"headerlink\" title=\"4.3. acquire()方法\"></a>4.3. acquire()方法</h3><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 获取一个许可，可中断方式，如果尝试获取许可失败，会进入AQS的队列中排队</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">acquire</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> InterruptedException &#123;</span><br><span class=\"line\">    sync.acquireSharedInterruptibly(<span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 获取多个许可，可中断方式，如果尝试获取许可失败，会进入AQS的队列中排队</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">acquire</span><span class=\"params\">(<span class=\"type\">int</span> <span class=\"keyword\">permits</span>)</span> <span class=\"keyword\">throws</span> InterruptedException &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">permits</span> &lt; <span class=\"number\">0</span>) <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">IllegalArgumentException</span>();</span><br><span class=\"line\">    sync.acquireSharedInterruptibly(<span class=\"keyword\">permits</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"4-3-1-acquireSharedInterruptibly-方法\"><a href=\"#4-3-1-acquireSharedInterruptibly-方法\" class=\"headerlink\" title=\"4.3.1. acquireSharedInterruptibly()方法\"></a>4.3.1. acquireSharedInterruptibly()方法</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 以可中断模式获取锁(共享模式)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title function_\">acquireSharedInterruptibly</span><span class=\"params\">(<span class=\"type\">int</span> arg)</span> <span class=\"keyword\">throws</span> InterruptedException &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 如果线程被中断，则抛出中断异常</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (Thread.interrupted())</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">InterruptedException</span>();</span><br><span class=\"line\">        </span><br><span class=\"line\">    <span class=\"comment\">// 调用sync子类方法尝试获取许可,这里根据构造函数确定使用公平策略</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (tryAcquireShared(arg) &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">        <span class=\"comment\">// 如果获取失败则放入阻塞队列,然后再次尝试如果失败则调用park方法挂起当前线程</span></span><br><span class=\"line\">        doAcquireSharedInterruptibly(arg);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"4-3-2-tryAcquireShared-方法\"><a href=\"#4-3-2-tryAcquireShared-方法\" class=\"headerlink\" title=\"4.3.2. tryAcquireShared()方法\"></a>4.3.2. tryAcquireShared()方法</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 非公平模式尝试获取许可</span></span><br><span class=\"line\"><span class=\"keyword\">protected</span> <span class=\"type\">int</span> <span class=\"title function_\">tryAcquireShared</span><span class=\"params\">(<span class=\"type\">int</span> acquires)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> nonfairTryAcquireShared(acquires);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">final</span> <span class=\"type\">int</span> <span class=\"title function_\">nonfairTryAcquireShared</span><span class=\"params\">(<span class=\"type\">int</span> acquires)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (;;) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 获取当前信号量值</span></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">available</span> <span class=\"operator\">=</span> getState();</span><br><span class=\"line\">        <span class=\"comment\">// 计算当前剩余值</span></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">remaining</span> <span class=\"operator\">=</span> available - acquires;</span><br><span class=\"line\">        <span class=\"comment\">// 如果当前剩余小于0或者CAS设置成功则返回</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (remaining &lt; <span class=\"number\">0</span> || compareAndSetState(available, remaining))</span><br><span class=\"line\">            <span class=\"keyword\">return</span> remaining;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 公平模式下尝试获取许可</span></span><br><span class=\"line\"><span class=\"keyword\">protected</span> <span class=\"type\">int</span> <span class=\"title function_\">tryAcquireShared</span><span class=\"params\">(<span class=\"type\">int</span> acquires)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (;;) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 判断等待队列中最长等待时间的节点持有的是否为当前线程</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (hasQueuedPredecessors())</span><br><span class=\"line\">            <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">available</span> <span class=\"operator\">=</span> getState();</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">remaining</span> <span class=\"operator\">=</span> available - acquires;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (remaining &lt; <span class=\"number\">0</span> || compareAndSetState(available, remaining))</span><br><span class=\"line\">            <span class=\"keyword\">return</span> remaining;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"4-3-3-doAcquireSharedInterruptibly-方法\"><a href=\"#4-3-3-doAcquireSharedInterruptibly-方法\" class=\"headerlink\" title=\"4.3.3. doAcquireSharedInterruptibly()方法\"></a>4.3.3. doAcquireSharedInterruptibly()方法</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 进入等待队列</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">doAcquireSharedInterruptibly</span><span class=\"params\">(<span class=\"type\">int</span> arg)</span> <span class=\"keyword\">throws</span> InterruptedException &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 增加新节点到队列末端（该队列用双向链表实现），该节点持有当前线程的引用</span></span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"type\">Node</span> <span class=\"variable\">node</span> <span class=\"operator\">=</span> addWaiter(Node.SHARED);</span><br><span class=\"line\">    <span class=\"type\">boolean</span> <span class=\"variable\">failed</span> <span class=\"operator\">=</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (;;) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 判断是否是head节点</span></span><br><span class=\"line\">            <span class=\"keyword\">final</span> <span class=\"type\">Node</span> <span class=\"variable\">p</span> <span class=\"operator\">=</span> node.predecessor();</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (p == head) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 尝试获取共享锁</span></span><br><span class=\"line\">                <span class=\"type\">int</span> <span class=\"variable\">r</span> <span class=\"operator\">=</span> tryAcquireShared(arg);</span><br><span class=\"line\">                <span class=\"comment\">// 如果获取成功，把当前节点设置成head节点。并唤醒等待队列的后继节点，结束该方法</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (r &gt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                    setHeadAndPropagate(node, r);</span><br><span class=\"line\">                    p.next = <span class=\"literal\">null</span>; <span class=\"comment\">// help GC</span></span><br><span class=\"line\">                    failed = <span class=\"literal\">false</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"comment\">// 让等待节点阻塞等待</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (shouldParkAfterFailedAcquire(p, node) &amp;&amp; parkAndCheckInterrupt())</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">InterruptedException</span>();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 如果获取许可失败，则把当前节点从等待队列中移除</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (failed)</span><br><span class=\"line\">            cancelAcquire(node);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-4-release-方法\"><a href=\"#4-4-release-方法\" class=\"headerlink\" title=\"4.4. release()方法\"></a>4.4. release()方法</h3><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 释放许可证，将其返回到信号量</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">release</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    sync.releaseShared(<span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 释放给定数量的许可证，将其返回到信号量</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">release</span><span class=\"params\">(<span class=\"type\">int</span> <span class=\"keyword\">permits</span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">permits</span> &lt; <span class=\"number\">0</span>) <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">IllegalArgumentException</span>();</span><br><span class=\"line\">    sync.releaseShared(<span class=\"keyword\">permits</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"4-4-1-releaseShared-方法\"><a href=\"#4-4-1-releaseShared-方法\" class=\"headerlink\" title=\"4.4.1. releaseShared()方法\"></a>4.4.1. releaseShared()方法</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 释放操作</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"type\">boolean</span> <span class=\"title function_\">releaseShared</span><span class=\"params\">(<span class=\"type\">int</span> arg)</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 尝试释放共享锁</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (tryReleaseShared(arg)) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 共享锁释放成功则调用park唤醒AQS队列里面最先挂起的线程</span></span><br><span class=\"line\">        doReleaseShared();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"4-4-2-tryReleaseShared-方法\"><a href=\"#4-4-2-tryReleaseShared-方法\" class=\"headerlink\" title=\"4.4.2. tryReleaseShared()方法\"></a>4.4.2. tryReleaseShared()方法</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 尝试释放共享锁</span></span><br><span class=\"line\"><span class=\"keyword\">protected</span> <span class=\"keyword\">final</span> <span class=\"type\">boolean</span> <span class=\"title function_\">tryReleaseShared</span><span class=\"params\">(<span class=\"type\">int</span> releases)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (;;) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 获取当前信号量值</span></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">current</span> <span class=\"operator\">=</span> getState();</span><br><span class=\"line\">        <span class=\"comment\">// 当前信号量值增加releases，这里为增加1</span></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">next</span> <span class=\"operator\">=</span> current + releases;</span><br><span class=\"line\">        <span class=\"comment\">// 检测溢出</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (next &lt; current) <span class=\"comment\">// overflow</span></span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>(<span class=\"string\">&quot;Maximum permit count exceeded&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 使用cas保证更新信号量值的原子性</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (compareAndSetState(current, next))</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"4-4-3-doReleaseShared-方法\"><a href=\"#4-4-3-doReleaseShared-方法\" class=\"headerlink\" title=\"4.4.3. doReleaseShared()方法\"></a>4.4.3. doReleaseShared()方法</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 调用unparkSuccessor()唤醒AQS队列里面最先挂起的线程</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">doReleaseShared</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (;;) &#123;</span><br><span class=\"line\">        <span class=\"type\">Node</span> <span class=\"variable\">h</span> <span class=\"operator\">=</span> head;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (h != <span class=\"literal\">null</span> &amp;&amp; h != tail) &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">ws</span> <span class=\"operator\">=</span> h.waitStatus;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (ws == Node.SIGNAL) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (!compareAndSetWaitStatus(h, Node.SIGNAL, <span class=\"number\">0</span>))</span><br><span class=\"line\">                    <span class=\"keyword\">continue</span>;            <span class=\"comment\">// loop to recheck cases</span></span><br><span class=\"line\">                unparkSuccessor(h);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (ws == <span class=\"number\">0</span> &amp;&amp; !compareAndSetWaitStatus(h, <span class=\"number\">0</span>, Node.PROPAGATE))</span><br><span class=\"line\">                <span class=\"keyword\">continue</span>;                <span class=\"comment\">// loop on failed CAS</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (h == head)                   <span class=\"comment\">// loop if head changed</span></span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","categories":["Java"],"tags":["后端","Java","JUC","并发"]},{"title":"Java_并发：死锁","url":"/Java/Java_%E5%B9%B6%E5%8F%91%EF%BC%9A%E6%AD%BB%E9%94%81/","content":"<style>\n[title=JConsole] {\n    max-width: 60% !important;\n    margin-left: 0px;\n}\n</style>\n\n<h2 id=\"死锁概述\"><a href=\"#死锁概述\" class=\"headerlink\" title=\"死锁概述\"></a>死锁概述</h2><h3 id=\"死锁\"><a href=\"#死锁\" class=\"headerlink\" title=\"死锁\"></a>死锁</h3><ul>\n<li>不同的线程分别占用对方需要的同步资源不放弃，都在等待对方放弃自己需要的同步资源，就形成了线程的死锁</li>\n<li>出现死锁后，不会出现异常，不会出现提示，只是所有的线程都处于阻塞状态，无法继续</li>\n</ul>\n<span id=\"more\"></span>\n\n<h3 id=\"死锁出现原因\"><a href=\"#死锁出现原因\" class=\"headerlink\" title=\"死锁出现原因\"></a>死锁出现原因</h3><ul>\n<li>存在两个或者两个以上的线程</li>\n<li>存在两个或者两个以上的共享资源</li>\n</ul>\n<h3 id=\"死锁解决方法\"><a href=\"#死锁解决方法\" class=\"headerlink\" title=\"死锁解决方法\"></a>死锁解决方法</h3><ul>\n<li>没有方案。只能尽量避免发生而已</li>\n</ul>\n<h3 id=\"死锁预防\"><a href=\"#死锁预防\" class=\"headerlink\" title=\"死锁预防\"></a>死锁预防</h3><ul>\n<li>加锁顺序（线程按照一定的顺序加锁）</li>\n<li>加锁时限（线程尝试获取锁的时候加上一定的时限，超过时限则放弃对该锁的请求，并释放自己占有的锁）</li>\n<li>死锁检测</li>\n</ul>\n<h2 id=\"死锁场景\"><a href=\"#死锁场景\" class=\"headerlink\" title=\"死锁场景\"></a>死锁场景</h2><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">DeadLockDemo</span> &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"type\">Object</span> <span class=\"variable\">A</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Object</span>(), B = <span class=\"keyword\">new</span> <span class=\"title class_\">Object</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(() -&gt; &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;线程1 开始执行...&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">synchronized</span> (A) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    System.out.println(<span class=\"string\">&quot;线程1 拿到A锁&quot;</span>);</span><br><span class=\"line\">                    Thread.sleep(<span class=\"number\">2000</span>);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">                    e.printStackTrace();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">synchronized</span> (B) &#123;</span><br><span class=\"line\">                    System.out.println(<span class=\"string\">&quot;线程1 拿到B锁&quot;</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;).start();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(() -&gt; &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;线程2 开始执行...&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">synchronized</span> (B) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    System.out.println(<span class=\"string\">&quot;线程2 拿到B锁&quot;</span>);</span><br><span class=\"line\">                    Thread.sleep(<span class=\"number\">2000</span>);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">                    e.printStackTrace();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">synchronized</span> (A) &#123;</span><br><span class=\"line\">                    System.out.println(<span class=\"string\">&quot;线程2 拿到A锁&quot;</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;).start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"死锁检测\"><a href=\"#死锁检测\" class=\"headerlink\" title=\"死锁检测\"></a>死锁检测</h2><h3 id=\"Jstack\"><a href=\"#Jstack\" class=\"headerlink\" title=\"Jstack\"></a>Jstack</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">~  jps</span><br><span class=\"line\">    35344 Launcher</span><br><span class=\"line\">    26355</span><br><span class=\"line\">    35352 Jps</span><br><span class=\"line\">    35343 DeadLockDemo</span><br><span class=\"line\"></span><br><span class=\"line\"> ~  jstack -l 35343</span><br><span class=\"line\">    .....</span><br><span class=\"line\">    .....</span><br><span class=\"line\">    Found one Java-level deadlock:</span><br><span class=\"line\">    =============================</span><br><span class=\"line\">    <span class=\"string\">&quot;Thread-1&quot;</span>:</span><br><span class=\"line\">      waiting to lock monitor 0x00007feee08090a8 (object 0x000000076acb80c8, a java.lang.Object),</span><br><span class=\"line\">      <span class=\"built_in\">which</span> is held by <span class=\"string\">&quot;Thread-0&quot;</span></span><br><span class=\"line\">    <span class=\"string\">&quot;Thread-0&quot;</span>:</span><br><span class=\"line\">      waiting to lock monitor 0x00007feee0806818 (object 0x000000076acb80d8, a java.lang.Object),</span><br><span class=\"line\">      <span class=\"built_in\">which</span> is held by <span class=\"string\">&quot;Thread-1&quot;</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    Java stack information <span class=\"keyword\">for</span> the threads listed above:</span><br><span class=\"line\">    ===================================================</span><br><span class=\"line\">    <span class=\"string\">&quot;Thread-1&quot;</span>:</span><br><span class=\"line\">    \tat com.example.demo.DeadLockDemo.lambda$main<span class=\"variable\">$1</span>(DeadLockDemo.java:34)</span><br><span class=\"line\">    \t- waiting to lock &lt;0x000000076acb80c8&gt; (a java.lang.Object)</span><br><span class=\"line\">    \t- locked &lt;0x000000076acb80d8&gt; (a java.lang.Object)</span><br><span class=\"line\">    \tat com.example.demo.DeadLockDemo$$Lambda<span class=\"variable\">$2</span>/935044096.run(Unknown Source)</span><br><span class=\"line\">    \tat java.lang.Thread.run(Thread.java:748)</span><br><span class=\"line\">    <span class=\"string\">&quot;Thread-0&quot;</span>:</span><br><span class=\"line\">    \tat com.example.demo.DeadLockDemo.lambda$main<span class=\"variable\">$0</span>(DeadLockDemo.java:19)</span><br><span class=\"line\">    \t- waiting to lock &lt;0x000000076acb80d8&gt; (a java.lang.Object)</span><br><span class=\"line\">    \t- locked &lt;0x000000076acb80c8&gt; (a java.lang.Object)</span><br><span class=\"line\">    \tat com.example.demo.DeadLockDemo$$Lambda<span class=\"variable\">$1</span>/1128032093.run(Unknown Source)</span><br><span class=\"line\">    \tat java.lang.Thread.run(Thread.java:748)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"JConsole\"><a href=\"#JConsole\" class=\"headerlink\" title=\"JConsole\"></a>JConsole</h3><ul>\n<li><p>打开JDK自带的图形化界面工具，终端输入：jconsole</p>\n<img src=\"/Java/Java_%E5%B9%B6%E5%8F%91%EF%BC%9A%E6%AD%BB%E9%94%81/JConsole.jpg\" class=\"\" title=\"JConsole\">\n</li>\n<li><p>选择 线程 -&gt; 检测死锁</p>\n<img src=\"/Java/Java_%E5%B9%B6%E5%8F%91%EF%BC%9A%E6%AD%BB%E9%94%81/JConsole%E6%AD%BB%E9%94%81%E6%A3%80%E6%B5%8B.jpg\" class=\"\" title=\"JConsole死锁检测\"></li>\n</ul>\n","categories":["Java"],"tags":["后端","Java","JUC","并发"]},{"title":"Java_并发：锁分类","url":"/Java/Java_%E5%B9%B6%E5%8F%91%EF%BC%9A%E9%94%81%E5%88%86%E7%B1%BB/","content":"<h2 id=\"1-锁分类\"><a href=\"#1-锁分类\" class=\"headerlink\" title=\"1. 锁分类\"></a>1. 锁分类</h2><img src=\"/Java/Java_%E5%B9%B6%E5%8F%91%EF%BC%9A%E9%94%81%E5%88%86%E7%B1%BB/%E9%94%81%E5%88%86%E7%B1%BB.png\" class=\"\" title=\"锁分类\">\n\n<span id=\"more\"></span>\n\n<h2 id=\"2-悲观锁-VS-乐观锁\"><a href=\"#2-悲观锁-VS-乐观锁\" class=\"headerlink\" title=\"2. 悲观锁 VS 乐观锁\"></a>2. 悲观锁 VS 乐观锁</h2><h3 id=\"2-1-概述\"><a href=\"#2-1-概述\" class=\"headerlink\" title=\"2.1. 概述\"></a>2.1. 概述</h3><ul>\n<li>对于同一个数据的并发操作，<code>悲观锁</code>认为自己在使用数据的时候一定有别的线程来修改数据，因此在获取数据的时候<code>会先加锁</code>，确保数据不会被别的线程修改。Java中，<code>synchronized</code>关键字和<code>Lock</code>的实现类都是<code>悲观锁</code>。</li>\n<li>而<code>乐观锁</code>认为自己在使用数据时不会有别的线程修改数据，所以<code>不会添加锁</code>，只是在更新数据的时候去判断之前有没有别的线程更新了这个数据。如果这个数据没有被更新，当前线程将自己修改的数据成功写入。如果数据已经被其他线程更新，则根据不同的实现方式执行不同的操作（例如报错或者自动重试）。</li>\n</ul>\n\n\n<h3 id=\"2-2-使用场景\"><a href=\"#2-2-使用场景\" class=\"headerlink\" title=\"2.2. 使用场景\"></a>2.2. 使用场景</h3><ul>\n<li><code>悲观锁</code>适合<code>写操作</code>多的场景，先加锁可以保证写操作时数据正确。</li>\n<li><code>乐观锁</code>适合<code>读操作</code>多的场景，不加锁的特点能够使其读操作的性能大幅提升。</li>\n</ul>\n<h3 id=\"2-3-使用示例\"><a href=\"#2-3-使用示例\" class=\"headerlink\" title=\"2.3. 使用示例\"></a>2.3. 使用示例</h3><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ------------------------- 悲观锁的调用方式 -------------------------</span></span><br><span class=\"line\"><span class=\"comment\">// synchronized</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title function_\">testMethod</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 操作同步资源</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// ReentrantLock</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"type\">ReentrantLock</span> <span class=\"variable\">lock</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ReentrantLock</span>(); <span class=\"comment\">// 需要保证多个线程使用的是同一个锁</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">modifyPublicResources</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\tlock.lock();</span><br><span class=\"line\">\t<span class=\"comment\">// 操作同步资源</span></span><br><span class=\"line\">\tlock.unlock();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ------------------------- 乐观锁的调用方式 -------------------------</span></span><br><span class=\"line\"><span class=\"comment\">// CAS全称 Compare And Swap（比较与交换），是一种无锁算法。</span></span><br><span class=\"line\"><span class=\"comment\">// 在不使用锁（没有线程被阻塞）的情况下实现多线程之间的变量同步。</span></span><br><span class=\"line\"><span class=\"comment\">// java.util.concurrent包中的原子类就是通过CAS来实现了乐观锁。</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"type\">AtomicInteger</span> <span class=\"variable\">atomicInteger</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">AtomicInteger</span>();  <span class=\"comment\">// 需要保证多个线程使用的是同一个AtomicInteger</span></span><br><span class=\"line\">atomicInteger.incrementAndGet(); <span class=\"comment\">//执行自增1</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3-自旋锁-VS-适应性自旋锁\"><a href=\"#3-自旋锁-VS-适应性自旋锁\" class=\"headerlink\" title=\"3. 自旋锁 VS 适应性自旋锁\"></a>3. 自旋锁 VS 适应性自旋锁</h2><h3 id=\"3-1-概述\"><a href=\"#3-1-概述\" class=\"headerlink\" title=\"3.1. 概述\"></a>3.1. 概述</h3><ul>\n<li><p><code>自旋锁概念：</code>阻塞或唤醒一个Java线程需要操作系统切换CPU状态来完成，这种状态转换需要<code>耗费处理器时间</code>。如果同步代码块中的内容过于简单，状态转换消耗的时间有可能比用户代码执行的时间还要长。</p>\n<p>在许多场景中，同步资源的锁定时间很短，为了这<code>一小段时间去切换线程，线程挂起和恢复现场的花费可能会让系统得不偿失</code>。如果物理机器有多个处理器，能够让两个或以上的线程同时并行执行，我们就可以让后面那个请求锁的线程不放弃CPU的执行时间，看看持有锁的线程是否很快就会释放锁。</p>\n<p>而为了<code>让当前线程“稍等一下”</code>，我们需让当前线程进行<code>自旋</code>，如果在自旋完成后前面锁定同步资源的线程已经释放了锁，那么当前线程就可以<code>不必阻塞</code>而是<code>直接获取同步资源</code>，从而<code>避免切换线程的开销</code>。这就是自旋锁。</p>\n</li>\n</ul>\n\n\n<h3 id=\"3-2-自旋锁缺点\"><a href=\"#3-2-自旋锁缺点\" class=\"headerlink\" title=\"3.2. 自旋锁缺点\"></a>3.2. 自旋锁缺点</h3><ul>\n<li>自旋锁本身是有缺点的，它<code>不能代替阻塞</code>。自旋等待<code>虽然避免了线程切换的开销，但它要占用处理器时间</code>。如果锁被占用的时间很短，自旋等待的效果就会非常好。反之，如果锁被占用的时间很长，那么自旋的线程只会白浪费处理器资源。所以，自旋等待的时间必须要有一定的限度，如果自旋超过了限定次数（默认是10次，可以使用-XX:PreBlockSpin来更改）没有成功获得锁，就应当挂起线程。</li>\n</ul>\n<h3 id=\"3-3-自旋锁实现原理\"><a href=\"#3-3-自旋锁实现原理\" class=\"headerlink\" title=\"3.3. 自旋锁实现原理\"></a>3.3. 自旋锁实现原理</h3><ul>\n<li>自旋锁的实现原理也是<code>CAS</code>，AtomicInteger中调用<code>unsafe</code>进行自增操作的源码中的<code>do-while循环</code>就是一个<code>自旋</code>操作，如果修改数值失败则通过循环来执行<code>自旋</code>，直至修改成功。</li>\n</ul>\n<img src=\"/Java/Java_%E5%B9%B6%E5%8F%91%EF%BC%9A%E9%94%81%E5%88%86%E7%B1%BB/%E8%87%AA%E6%97%8B.jpg\" class=\"\" title=\"自旋\">\n\n<h3 id=\"3-4-适应性自旋锁\"><a href=\"#3-4-适应性自旋锁\" class=\"headerlink\" title=\"3.4. 适应性自旋锁\"></a>3.4. 适应性自旋锁</h3><ul>\n<li>自适应意味着<code>自旋的时间（次数）不再固定</code>，而是<code>由前一次在同一个锁上的自旋时间及锁的拥有者的状态来决定</code>。如果在同一个锁对象上，自旋等待刚刚成功获得过锁，并且持有锁的线程正在运行中，那么虚拟机就会认为这次自旋也是很有可能再次成功，进而它将允许自旋等待持续相对更长的时间。如果对于某个锁，自旋很少成功获得过，那在以后尝试获取这个锁时将可能省略掉自旋过程，直接阻塞线程，避免浪费处理器资源。</li>\n</ul>\n<h2 id=\"4-无锁-VS-偏向锁-VS-轻量级锁-VS-重量级锁\"><a href=\"#4-无锁-VS-偏向锁-VS-轻量级锁-VS-重量级锁\" class=\"headerlink\" title=\"4. 无锁 VS 偏向锁 VS 轻量级锁 VS 重量级锁\"></a>4. 无锁 VS 偏向锁 VS 轻量级锁 VS 重量级锁</h2><h3 id=\"4-1-概述\"><a href=\"#4-1-概述\" class=\"headerlink\" title=\"4.1. 概述\"></a>4.1. 概述</h3><ul>\n<li>这四种锁是指锁的状态，专门针对synchronized的</li>\n<li><code>无锁</code>没有对资源进行锁定，所有的线程都能访问并修改同一个资源，但同时只有一个线程能修改成功。</li>\n<li><code>偏向锁</code>指一段同步代码一直被一个线程所访问，那么该线程会自动获取锁，降低获取锁的代价。</li>\n<li><code>轻量级锁</code>指当锁是偏向锁的时候，被另外的线程所访问，偏向锁就会升级为轻量级锁，其他线程会通过自旋的形式尝试获取锁，不会阻塞，从而提高性能。</li>\n<li><code>重量级锁</code>指当锁是轻量级锁时，另一个线程虽然是自旋，但自旋并不会一直持续，自旋一定次数后，如果还没有获取到锁，则线程会进入阻塞状态，导致锁膨胀为重量级锁。</li>\n</ul>\n<h3 id=\"4-2-synchronized实现原理\"><a href=\"#4-2-synchronized实现原理\" class=\"headerlink\" title=\"4.2. synchronized实现原理\"></a>4.2. synchronized实现原理</h3><img src=\"/Java/Java_%E5%B9%B6%E5%8F%91%EF%BC%9A%E9%94%81%E5%88%86%E7%B1%BB/synchronized%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86.png\" class=\"\" title=\"synchronized实现原理\">\n\n<h2 id=\"5-公平锁-VS-非公平锁\"><a href=\"#5-公平锁-VS-非公平锁\" class=\"headerlink\" title=\"5. 公平锁 VS 非公平锁\"></a>5. 公平锁 VS 非公平锁</h2><h3 id=\"5-1-概述\"><a href=\"#5-1-概述\" class=\"headerlink\" title=\"5.1. 概述\"></a>5.1. 概述</h3><ul>\n<li><code>公平锁</code>指多个线程按锁的申请顺序来获取锁。<ul>\n<li><code>优点</code>等待的线程不会被饿死，按序就能拿到锁。</li>\n<li><code>缺点</code>整体吞吐量和效率很低。</li>\n</ul>\n</li>\n</ul>\n<img src=\"/Java/Java_%E5%B9%B6%E5%8F%91%EF%BC%9A%E9%94%81%E5%88%86%E7%B1%BB/%E5%85%AC%E5%B9%B3%E9%94%81.png\" class=\"\" title=\"公平锁\">\n\n<ul>\n<li><code>非公平锁</code>指多个线程不按锁的申请顺序来获取锁。<ul>\n<li><code>优点</code>抢占式获取锁，整体吞吐量和效率都很高。</li>\n<li><code>缺点</code>可能有些线程会一直获取不到锁，处于等待状态，直至饿死。</li>\n</ul>\n</li>\n</ul>\n<img src=\"/Java/Java_%E5%B9%B6%E5%8F%91%EF%BC%9A%E9%94%81%E5%88%86%E7%B1%BB/%E9%9D%9E%E5%85%AC%E5%B9%B3%E9%94%81.png\" class=\"\" title=\"非公平锁\">\n\n<h3 id=\"5-2-源码分析\"><a href=\"#5-2-源码分析\" class=\"headerlink\" title=\"5.2. 源码分析\"></a>5.2. 源码分析</h3><ul>\n<li>通过<code>ReentrantLock</code>源码得知，公平锁与非公平锁的<code>lock()</code>方法唯一的区别就在于公平锁在获取同步状态时多了一个限制条件。<code>hasQueuedPredecessors()</code>方法主要是判断当前线程是否位于同步队列中的第一个。如果是则返回true，否则返回false。</li>\n</ul>\n\n\n\n<h2 id=\"6-可重入锁-VS-非可重入锁\"><a href=\"#6-可重入锁-VS-非可重入锁\" class=\"headerlink\" title=\"6. 可重入锁 VS 非可重入锁\"></a>6. 可重入锁 VS 非可重入锁</h2><h3 id=\"6-1-概述\"><a href=\"#6-1-概述\" class=\"headerlink\" title=\"6.1. 概述\"></a>6.1. 概述</h3><ul>\n<li><code>可重入锁</code>也叫<code>递归锁</code>，一定程度上能<code>避免死锁</code>。同个线程可递归获取同一个锁，锁计数+1。待层层解锁后，锁计数为0，则锁被释放。</li>\n</ul>\n<img src=\"/Java/Java_%E5%B9%B6%E5%8F%91%EF%BC%9A%E9%94%81%E5%88%86%E7%B1%BB/%E5%8F%AF%E9%87%8D%E5%85%A5%E9%94%81.png\" class=\"\" title=\"可重入锁\">\n\n<ul>\n<li><code>不可重入锁</code>指同一个线程获取锁后，必须执行完释放了该锁，才能重新获取新的锁来调用该同步代码段。</li>\n</ul>\n<img src=\"/Java/Java_%E5%B9%B6%E5%8F%91%EF%BC%9A%E9%94%81%E5%88%86%E7%B1%BB/%E9%9D%9E%E5%8F%AF%E9%87%8D%E5%85%A5%E9%94%81.png\" class=\"\" title=\"非可重入锁\">\n\n<h3 id=\"6-2-源码分析\"><a href=\"#6-2-源码分析\" class=\"headerlink\" title=\"6.2. 源码分析\"></a>6.2. 源码分析</h3><img src=\"/Java/Java_%E5%B9%B6%E5%8F%91%EF%BC%9A%E9%94%81%E5%88%86%E7%B1%BB/%E9%87%8D%E5%85%A5%E9%94%81%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90.png\" class=\"\" title=\"重入锁源码分析\">\n\n<h2 id=\"7-独享锁-VS-共享锁\"><a href=\"#7-独享锁-VS-共享锁\" class=\"headerlink\" title=\"7. 独享锁 VS 共享锁\"></a>7. 独享锁 VS 共享锁</h2><h3 id=\"7-1-概述\"><a href=\"#7-1-概述\" class=\"headerlink\" title=\"7.1. 概述\"></a>7.1. 概述</h3><ul>\n<li><code>独享锁也叫排他锁，是指该锁一次只能被一个线程所持有</code>。如果线程T对数据A加上排它锁后，则其他线程不能再对A加任何类型的锁。<code>获得排它锁的线程即能读数据又能修改数据</code>。JDK中的<code>synchronized</code>和JUC中<code>Lock</code>的实现类就是<code>互斥锁</code>。</li>\n<li><code>共享锁是指该锁可被多个线程所持有</code>。如果线程T对数据A加上共享锁后，则其他线程只能对A再加共享锁，不能加排它锁。<code>获得共享锁的线程只能读数据，不能修改数据</code>。</li>\n</ul>\n<h3 id=\"7-2-源码分析\"><a href=\"#7-2-源码分析\" class=\"headerlink\" title=\"7.2. 源码分析\"></a>7.2. 源码分析</h3><ul>\n<li>在<code>ReentrantReadWriteLock</code>里面，<code>读锁和写锁的锁主体都是Sync</code>，但读锁和写锁的加锁方式不一样。读锁是共享锁，写锁是独享锁。<code>读锁的共享锁可保证并发读非常高效，而读写、写读、写写的过程互斥，因为读锁和写锁是分离的</code>。所以ReentrantReadWriteLock的并发性相比一般的互斥锁有了很大提升。</li>\n</ul>\n\n\n<h2 id=\"8-参考来源\"><a href=\"#8-参考来源\" class=\"headerlink\" title=\"8. 参考来源\"></a>8. 参考来源</h2><ul>\n<li><a href=\"https://tech.meituan.com/2018/11/15/java-lock.html\">不可不说的Java“锁”事</a></li>\n</ul>\n","categories":["Java"],"tags":["后端","Java","JUC","并发"]},{"title":"Java_集合：手写ArrayList","url":"/Java/Java_%E9%9B%86%E5%90%88%EF%BC%9A%E6%89%8B%E5%86%99ArrayList/","content":"<h2 id=\"数据结构\"><a href=\"#数据结构\" class=\"headerlink\" title=\"数据结构\"></a>数据结构</h2><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> Object[] elementData;  </span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"type\">int</span> size;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"title function_\">MyArrayList</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>(<span class=\"number\">10</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"title function_\">MyArrayList</span><span class=\"params\">(<span class=\"type\">int</span> initialCapacity)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(initialCapacity&lt;<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Exception</span>();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    elementData = <span class=\"keyword\">new</span> <span class=\"title class_\">Object</span>[initialCapacity];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<span id=\"more\"></span>\n\n<h2 id=\"添加数据\"><a href=\"#添加数据\" class=\"headerlink\" title=\"添加数据\"></a>添加数据</h2><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">add</span><span class=\"params\">(Object obj)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(size==elementData.length)&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 创建一个新的数组，并且这个数组的长度是原数组长度的2倍</span></span><br><span class=\"line\">        Object[] newArray = <span class=\"keyword\">new</span> <span class=\"title class_\">Object</span>[size*<span class=\"number\">2</span>];</span><br><span class=\"line\">        <span class=\"comment\">// 使用底层拷贝，将原数组的内容拷贝到新数组</span></span><br><span class=\"line\">        System.arraycopy(elementData, <span class=\"number\">0</span>, newArray, <span class=\"number\">0</span>, elementData.length);</span><br><span class=\"line\">        <span class=\"comment\">// 并将新数组赋值给原数组的引用</span></span><br><span class=\"line\">        elementData = newArray;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 新来的元素，直接赋值</span></span><br><span class=\"line\">    elementData[size++]=obj;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<img src=\"/Java/Java_%E9%9B%86%E5%90%88%EF%BC%9A%E6%89%8B%E5%86%99ArrayList/%E6%B7%BB%E5%8A%A0%E6%95%B0%E6%8D%AE.jpg\" class=\"\" title=\"添加数据\">\n\n<h2 id=\"查询数据\"><a href=\"#查询数据\" class=\"headerlink\" title=\"查询数据\"></a>查询数据</h2><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> Object <span class=\"title function_\">get</span><span class=\"params\">(<span class=\"type\">int</span> index)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> elementData[index];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"删除数据\"><a href=\"#删除数据\" class=\"headerlink\" title=\"删除数据\"></a>删除数据</h2><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">remove</span><span class=\"params\">(<span class=\"type\">int</span> index)</span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">numMoved</span> <span class=\"operator\">=</span> size - index - <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (numMoved &gt; <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">    \t<span class=\"comment\">// 把指定元素后面位置的所有元素，利用System.arraycopy方法整体向前移动一个位置</span></span><br><span class=\"line\">        System.arraycopy(elementData, index+<span class=\"number\">1</span>, elementData, index, numMoved);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 最后一个位置的元素指定为null，这样让gc可以去回收它</span></span><br><span class=\"line\">    elementData[--size] = <span class=\"literal\">null</span>; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<img src=\"/Java/Java_%E9%9B%86%E5%90%88%EF%BC%9A%E6%89%8B%E5%86%99ArrayList/%E5%88%A0%E9%99%A4%E6%95%B0%E6%8D%AE.jpg\" class=\"\" title=\"删除数据\">\n\n<h2 id=\"指定位置添加数据\"><a href=\"#指定位置添加数据\" class=\"headerlink\" title=\"指定位置添加数据\"></a>指定位置添加数据</h2><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">add</span><span class=\"params\">(<span class=\"type\">int</span> index,Object obj)</span>&#123;</span><br><span class=\"line\">    ensureCapacity();  <span class=\"comment\">//数组扩容</span></span><br><span class=\"line\">    System.arraycopy(elementData, index, elementData, index + <span class=\"number\">1</span>, size - index);</span><br><span class=\"line\">    elementData[index] = obj;</span><br><span class=\"line\">    size++;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<img src=\"/Java/Java_%E9%9B%86%E5%90%88%EF%BC%9A%E6%89%8B%E5%86%99ArrayList/%E6%8C%87%E5%AE%9A%E4%BD%8D%E7%BD%AE%E6%B7%BB%E5%8A%A0%E6%95%B0%E6%8D%AE.jpg\" class=\"\" title=\"指定位置添加数据\">\n\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><ul>\n<li>ArrayList底层以数组实现，是一种随机访问模式，通过下标索引定位数据，所以查找非常快</li>\n<li>ArrayList在顺序添加一个元素的时候非常方便，只是往数组里面添加了一个元素而已(这里指的末尾添加数据)</li>\n<li>当删除元素的时候，涉及到一次元素复制移位，如果要复制的元素很多，那么就会比较耗费性能</li>\n<li>当插入元素的时候，涉及到一次元素复制移位，如果要复制的元素很多，那么就会比较耗费性能</li>\n</ul>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><ul>\n<li><a href=\"https://mp.weixin.qq.com/s?__biz=MzU3NTA5MzQ5Mg==&mid=2247484062&idx=1&sn=805c01e1d91164ab7515f0e536aae9df&chksm=fd292d05ca5ea41358201368ad9746bdef85e65aa7de80cec6021599e37330a513b38220df57&scene=21#wechat_redirect\">Java蚂蚁</a></li>\n</ul>\n","categories":["Java"],"tags":["后端","Java","集合"]},{"title":"Java_集合：手写LinkedList","url":"/Java/Java_%E9%9B%86%E5%90%88%EF%BC%9A%E6%89%8B%E5%86%99LinkedList/","content":"<h2 id=\"数据结构\"><a href=\"#数据结构\" class=\"headerlink\" title=\"数据结构\"></a>数据结构</h2><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Node</span> &#123;</span><br><span class=\"line\">    Node previous;<span class=\"comment\">// 头部，用来指向上一个节点</span></span><br><span class=\"line\">    Object obj;</span><br><span class=\"line\">    Node next;<span class=\"comment\">// 尾部，用来指向下一个节点</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">Node</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">Node</span><span class=\"params\">(Node previous, Object obj, Node next)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>();</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.previous = previous;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.obj = obj;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.next = next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Node <span class=\"title function_\">getPrevious</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> previous;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setPrevious</span><span class=\"params\">(Node previous)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.previous = previous;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Object <span class=\"title function_\">getObj</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> obj;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setObj</span><span class=\"params\">(Object obj)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.obj = obj;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Node <span class=\"title function_\">getNext</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setNext</span><span class=\"params\">(Node next)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.next = next;</span><br><span class=\"line\">    &#125;   </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<img src=\"/Java/Java_%E9%9B%86%E5%90%88%EF%BC%9A%E6%89%8B%E5%86%99LinkedList/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84.jpg\" class=\"\" title=\"数据结构\">\n\n<span id=\"more\"></span>\n\n<h2 id=\"添加数据\"><a href=\"#添加数据\" class=\"headerlink\" title=\"添加数据\"></a>添加数据</h2><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyLinkedList</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Node first;<span class=\"comment\">// 链表头节点</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Node last;<span class=\"comment\">// 链表尾节点</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">int</span> size;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">add</span><span class=\"params\">(Object obj)</span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 创建新节点</span></span><br><span class=\"line\">        <span class=\"type\">Node</span> <span class=\"variable\">n</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Node</span>();</span><br><span class=\"line\">        <span class=\"comment\">// 判断是否为第一个节点</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(first==<span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">            <span class=\"comment\">// 前后节点为null</span></span><br><span class=\"line\">            n.setPrevious(<span class=\"literal\">null</span>);</span><br><span class=\"line\">            n.setObj(obj);</span><br><span class=\"line\">            n.setNext(<span class=\"literal\">null</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// 链表头尾节点都指向同一个</span></span><br><span class=\"line\">            first = n;</span><br><span class=\"line\">            last = n;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">// 与前一节点绑定</span></span><br><span class=\"line\">            n.setPrevious(last); </span><br><span class=\"line\">            n.setObj(obj);</span><br><span class=\"line\">            n.setNext(<span class=\"literal\">null</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">            last.setNext(n); </span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"comment\">// 此时，新加进来的节点就变成了尾节点</span></span><br><span class=\"line\">            last = n;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        size++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<img src=\"/Java/Java_%E9%9B%86%E5%90%88%EF%BC%9A%E6%89%8B%E5%86%99LinkedList/%E6%B7%BB%E5%8A%A0%E6%95%B0%E6%8D%AE.jpg\" class=\"\" title=\"添加数据\">\n\n<h2 id=\"查询数据\"><a href=\"#查询数据\" class=\"headerlink\" title=\"查询数据\"></a>查询数据</h2><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> Object <span class=\"title function_\">get</span><span class=\"params\">(<span class=\"type\">int</span> index)</span>&#123;  </span><br><span class=\"line\">    <span class=\"type\">Node</span> <span class=\"variable\">temp</span> <span class=\"operator\">=</span> node(index);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">if</span>(temp!=<span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> temp.obj;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">public</span> Node <span class=\"title function_\">node</span><span class=\"params\">(<span class=\"type\">int</span> index)</span>&#123;</span><br><span class=\"line\">    <span class=\"type\">Node</span> <span class=\"variable\">temp</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(first!=<span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">        temp = first;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;index;i++)&#123;</span><br><span class=\"line\">            temp = temp.next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> temp;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<img src=\"/Java/Java_%E9%9B%86%E5%90%88%EF%BC%9A%E6%89%8B%E5%86%99LinkedList/%E6%9F%A5%E8%AF%A2%E6%95%B0%E6%8D%AE.jpg\" class=\"\" title=\"查询数据\">\n\n<h2 id=\"删除数据\"><a href=\"#删除数据\" class=\"headerlink\" title=\"删除数据\"></a>删除数据</h2><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">remove</span><span class=\"params\">(<span class=\"type\">int</span> index)</span>&#123;</span><br><span class=\"line\">    <span class=\"type\">Node</span> <span class=\"variable\">temp</span> <span class=\"operator\">=</span> node(index);</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">if</span>(temp!=<span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">        <span class=\"type\">Node</span> <span class=\"variable\">up</span> <span class=\"operator\">=</span> temp.previous;</span><br><span class=\"line\">        <span class=\"type\">Node</span> <span class=\"variable\">down</span> <span class=\"operator\">=</span> temp.next;</span><br><span class=\"line\">        up.next = down;</span><br><span class=\"line\">        down.previous = up;</span><br><span class=\"line\">        size--;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<img src=\"/Java/Java_%E9%9B%86%E5%90%88%EF%BC%9A%E6%89%8B%E5%86%99LinkedList/%E5%88%A0%E9%99%A4%E6%95%B0%E6%8D%AE.jpg\" class=\"\" title=\"删除数据\">\n\n<h2 id=\"指定位置添加数据\"><a href=\"#指定位置添加数据\" class=\"headerlink\" title=\"指定位置添加数据\"></a>指定位置添加数据</h2><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">add</span><span class=\"params\">(<span class=\"type\">int</span> index,Object obj)</span>&#123;</span><br><span class=\"line\">    <span class=\"type\">Node</span> <span class=\"variable\">temp</span> <span class=\"operator\">=</span> node(index);</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"type\">Node</span> <span class=\"variable\">newNode</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Node</span>();</span><br><span class=\"line\">    newNode.obj = obj;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">if</span>(temp!=<span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">        <span class=\"type\">Node</span> <span class=\"variable\">up</span> <span class=\"operator\">=</span> temp.previous;</span><br><span class=\"line\">        up.next = newNode;</span><br><span class=\"line\">        newNode.previous = up;</span><br><span class=\"line\"></span><br><span class=\"line\">        newNode.next = temp;</span><br><span class=\"line\">        temp.previous = newNode;</span><br><span class=\"line\"></span><br><span class=\"line\">        size++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<img src=\"/Java/Java_%E9%9B%86%E5%90%88%EF%BC%9A%E6%89%8B%E5%86%99LinkedList/%E6%8C%87%E5%AE%9A%E4%BD%8D%E7%BD%AE%E6%B7%BB%E5%8A%A0%E6%95%B0%E6%8D%AE.jpg\" class=\"\" title=\"指定位置添加数据\">\n\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><ul>\n<li>LinkedList是基于链表实现</li>\n<li>其存储数据放在节点里面</li>\n<li>插入和删除操作效率高，无需遍历数据，打断节点连接，重新连接即可</li>\n<li>遍历数据效率低，无法通过索引定位</li>\n</ul>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><ul>\n<li><a href=\"https://mp.weixin.qq.com/s?__biz=MzU3NTA5MzQ5Mg==&mid=2247483984&idx=1&sn=20d365f4565fc2ef3b95be9cf77efd02&chksm=fd292dcbca5ea4ddc119f83842f6f70dcc12df7775e18d5f1d29b494ea52d9f96ef0e5641a77&token=1439522715&lang=zh_CN#rd\">Java蚂蚁</a></li>\n</ul>\n","categories":["Java"],"tags":["后端","Java","集合"]},{"title":"Java_集合：阻塞队列分类","url":"/Java/Java_%E9%9B%86%E5%90%88%EF%BC%9A%E9%98%BB%E5%A1%9E%E9%98%9F%E5%88%97%E5%88%86%E7%B1%BB/","content":"<h2 id=\"阻塞队列\"><a href=\"#阻塞队列\" class=\"headerlink\" title=\"阻塞队列\"></a>阻塞队列</h2><ul>\n<li>当阻塞队列是空时，从队列中<code>获取</code>元素的操作将会被阻塞。</li>\n<li>当阻塞队列是满时，从队列中<code>添加</code>元素的操作将会被阻塞。</li>\n</ul>\n<span id=\"more\"></span>\n\n<h2 id=\"阻塞队列分类\"><a href=\"#阻塞队列分类\" class=\"headerlink\" title=\"阻塞队列分类\"></a>阻塞队列分类</h2><img src=\"/Java/Java_%E9%9B%86%E5%90%88%EF%BC%9A%E9%98%BB%E5%A1%9E%E9%98%9F%E5%88%97%E5%88%86%E7%B1%BB/%E9%98%BB%E5%A1%9E%E9%98%9F%E5%88%97%E7%B1%BB%E5%9B%BE.png\" class=\"\" title=\"阻塞队列类图\">\n\n<table>\n<thead>\n<tr>\n<th>队列</th>\n<th>有界性</th>\n<th>锁类型</th>\n<th>数据结构</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>ArrayBlockingQueue</td>\n<td>有界</td>\n<td>加锁</td>\n<td>数组</td>\n</tr>\n<tr>\n<td>LinkedBlockingQueue</td>\n<td>有界</td>\n<td>加锁</td>\n<td>单链表</td>\n</tr>\n<tr>\n<td>PriorityBlockingQueue</td>\n<td>无界</td>\n<td>加锁</td>\n<td>堆</td>\n</tr>\n<tr>\n<td>DelayQueue</td>\n<td>无界</td>\n<td>加锁</td>\n<td>堆</td>\n</tr>\n<tr>\n<td>SynchronousQueue</td>\n<td>有界</td>\n<td>无锁(CAS)</td>\n<td>-</td>\n</tr>\n<tr>\n<td>LinkedTransferQueue</td>\n<td>无界</td>\n<td>无锁(CAS)</td>\n<td>单链表</td>\n</tr>\n<tr>\n<td>LinkedBlockingDeque</td>\n<td>无界</td>\n<td>加锁</td>\n<td>双链表</td>\n</tr>\n</tbody></table>\n<h2 id=\"阻塞队列方法\"><a href=\"#阻塞队列方法\" class=\"headerlink\" title=\"阻塞队列方法\"></a>阻塞队列方法</h2><table>\n<thead>\n<tr>\n<th>方法\\处理方式</th>\n<th>抛出异常</th>\n<th>返回特殊值</th>\n<th>一直阻塞</th>\n<th>超时退出</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>插入方法</td>\n<td>add(e)</td>\n<td>offer(e)</td>\n<td>put(e)</td>\n<td>offer(e,time,unit)</td>\n</tr>\n<tr>\n<td>移除方法</td>\n<td>remove()</td>\n<td>poll()</td>\n<td>take()</td>\n<td>poll(time,unit)</td>\n</tr>\n<tr>\n<td>检查方法</td>\n<td>element()</td>\n<td>peek()</td>\n<td>不可用</td>\n<td>不可用</td>\n</tr>\n</tbody></table>\n<ul>\n<li><strong>抛出异常：</strong><ul>\n<li>当队列满时,如果再往队列里插入元素,会抛出<code>IllegalStateException(&quot;Queuefull&quot;)</code>异常。</li>\n<li>当队列空时，从队列里获取元素会抛出<code>NoSuchElementException</code>异常。</li>\n</ul>\n</li>\n<li><strong>返回特殊值：</strong><ul>\n<li>当往队列插入元素时,会返回元素是否插入成功,成功则返回<code>true</code>。</li>\n<li>若是移除方法,则是从队列里取出一个元素,若没有则返回<code>null</code>。</li>\n</ul>\n</li>\n<li><strong>一直阻塞：</strong><ul>\n<li>当阻塞队列满时,如果生产者线程往队列里<code>put</code>元素,队列会一直阻塞生产者线程,直到队列有可用空间或响应中断退出。</li>\n<li>当队列空时,若消费者线程从队列里<code>take</code>元素,队列会阻塞住消费者线程,直到队列非空。</li>\n</ul>\n</li>\n<li><strong>超时退出：</strong><ul>\n<li>当阻塞队列满时,若生产者线程往队列里插入元素,队列会阻塞生产者线程一段时间,若超过指定的时间,生产者线程就会退出。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"阻塞队列使用\"><a href=\"#阻塞队列使用\" class=\"headerlink\" title=\"阻塞队列使用\"></a>阻塞队列使用</h2><h3 id=\"生产者-消费者（非阻塞版）\"><a href=\"#生产者-消费者（非阻塞版）\" class=\"headerlink\" title=\"生产者&#x2F;消费者（非阻塞版）\"></a>生产者&#x2F;消费者（非阻塞版）</h3><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.locks.Condition;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.locks.Lock;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.locks.ReentrantLock;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ProdConsumerTraditionDemo</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Product</span> <span class=\"variable\">product</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Product</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(() -&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; i++) &#123;</span><br><span class=\"line\">                product.increment();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;, <span class=\"string\">&quot;Producer&quot;</span>).start();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(() -&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; i++) &#123;</span><br><span class=\"line\">                product.decrement();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;, <span class=\"string\">&quot;Consumer&quot;</span>).start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Product</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">int</span> <span class=\"variable\">number</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">Lock</span> <span class=\"variable\">lock</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ReentrantLock</span>();</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">Condition</span> <span class=\"variable\">condition</span> <span class=\"operator\">=</span> lock.newCondition();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">increment</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        lock.lock();</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (number != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                condition.await();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            number++;</span><br><span class=\"line\">            System.out.println(Thread.currentThread().getName() + <span class=\"string\">&quot;\\t&quot;</span> + number);</span><br><span class=\"line\">            condition.signalAll();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            lock.unlock();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">decrement</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        lock.lock();</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (number == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                condition.await();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            number--;</span><br><span class=\"line\">            System.out.println(Thread.currentThread().getName() + <span class=\"string\">&quot;\\t&quot;</span> + number);</span><br><span class=\"line\">            condition.signalAll();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            lock.unlock();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"生产者-消费者（阻塞版）\"><a href=\"#生产者-消费者（阻塞版）\" class=\"headerlink\" title=\"生产者&#x2F;消费者（阻塞版）\"></a>生产者&#x2F;消费者（阻塞版）</h3><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.ArrayBlockingQueue;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.BlockingQueue;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.TimeUnit;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.atomic.AtomicInteger;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ProdConsumerBlockQueueDemo</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Product</span> <span class=\"variable\">product</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Product</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(() -&gt; &#123;</span><br><span class=\"line\">            product.producer();</span><br><span class=\"line\">        &#125;, <span class=\"string\">&quot;Producer&quot;</span>).start();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(() -&gt; &#123;</span><br><span class=\"line\">            product.consumer();</span><br><span class=\"line\">        &#125;, <span class=\"string\">&quot;Consumer&quot;</span>).start();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            TimeUnit.SECONDS.sleep(<span class=\"number\">5</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        product.setFlag(<span class=\"literal\">false</span>);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;程序停止！&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Product</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">volatile</span> <span class=\"type\">boolean</span> <span class=\"variable\">flag</span> <span class=\"operator\">=</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">AtomicInteger</span> <span class=\"variable\">atomicInteger</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">AtomicInteger</span>();</span><br><span class=\"line\">    <span class=\"keyword\">private</span> BlockingQueue&lt;Integer&gt; blockingQueue = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayBlockingQueue</span>&lt;&gt;(<span class=\"number\">3</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">producer</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (flag)&#123;</span><br><span class=\"line\">                <span class=\"type\">Integer</span> <span class=\"variable\">data</span> <span class=\"operator\">=</span> atomicInteger.incrementAndGet();</span><br><span class=\"line\">                blockingQueue.offer(data);</span><br><span class=\"line\">                System.out.println(Thread.currentThread().getName() + <span class=\"string\">&quot;\\t&quot;</span> + data);</span><br><span class=\"line\">                TimeUnit.SECONDS.sleep(<span class=\"number\">1</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">consumer</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (flag)&#123;</span><br><span class=\"line\">                <span class=\"type\">Integer</span> <span class=\"variable\">data</span> <span class=\"operator\">=</span> blockingQueue.poll(<span class=\"number\">2L</span>, TimeUnit.SECONDS);</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (data == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                    flag = <span class=\"literal\">false</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                System.out.println(Thread.currentThread().getName() + <span class=\"string\">&quot;\\t&quot;</span> + data);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setFlag</span><span class=\"params\">(<span class=\"type\">boolean</span> flag)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.flag = flag;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"阻塞队列源码\"><a href=\"#阻塞队列源码\" class=\"headerlink\" title=\"阻塞队列源码\"></a>阻塞队列源码</h2><ul>\n<li><a href=\"https://c-catnip.github.io/2019/07/15/%E5%90%8E%E7%AB%AF/JUC/JUC_%E9%98%BB%E5%A1%9E%E9%98%9F%E5%88%97_ArrayBlockingQueue/\">JUC_阻塞队列_ArrayBlockingQueue</a></li>\n<li><a href=\"https://c-catnip.github.io/2019/07/16/%E5%90%8E%E7%AB%AF/JUC/JUC_%E9%98%BB%E5%A1%9E%E9%98%9F%E5%88%97_LinkedBlockingQueue/\">JUC_阻塞队列_LinkedBlockingQueue</a></li>\n<li><a href=\"https://c-catnip.github.io/2019/07/17/%E5%90%8E%E7%AB%AF/JUC/JUC_%E9%98%BB%E5%A1%9E%E9%98%9F%E5%88%97_PriorityBlockingQueue/\">JUC_阻塞队列_PriorityBlockingQueue</a></li>\n<li><a href=\"https://c-catnip.github.io/2019/07/18/%E5%90%8E%E7%AB%AF/JUC/JUC_%E9%98%BB%E5%A1%9E%E9%98%9F%E5%88%97_DelayQueue/\">JUC_阻塞队列_DelayQueue</a></li>\n<li><a href=\"https://c-catnip.github.io/2019/07/19/%E5%90%8E%E7%AB%AF/JUC/JUC_%E9%98%BB%E5%A1%9E%E9%98%9F%E5%88%97_SynchronousQueue/\">JUC_阻塞队列_SynchronousQueue</a></li>\n<li><a href=\"https://c-catnip.github.io/2019/07/20/%E5%90%8E%E7%AB%AF/JUC/JUC_%E9%98%BB%E5%A1%9E%E9%98%9F%E5%88%97_LinkedTransferQueue/\">JUC_阻塞队列_LinkedTransferQueue</a></li>\n<li><a href=\"https://c-catnip.github.io/2019/07/21/%E5%90%8E%E7%AB%AF/JUC/JUC_%E9%98%BB%E5%A1%9E%E9%98%9F%E5%88%97_LinkedBlockingDeque/\">JUC_阻塞队列_LinkedBlockingDeque</a></li>\n</ul>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><ul>\n<li><a href=\"https://h2pl.github.io/2018/05/22/concurrent11/\">How 2 Play Life</a></li>\n<li><a href=\"https://www.zybuluo.com/adamhand/note/1370224\">adamhand</a></li>\n<li><a href=\"http://24suixinsuoyu.com/2019/02/10/Java%20%E5%B9%B6%E5%8F%91%E5%AE%B9%E5%99%A8%EF%BC%88%E5%9B%9B%EF%BC%89%EF%BC%9A%E5%B9%B6%E5%8F%91%E9%98%9F%E5%88%97/\">24隋心所欲’s Blog</a></li>\n</ul>\n","categories":["Java"],"tags":["后端","Java","集合"]},{"title":"Java_集合：集合类不安全问题解决","url":"/Java/Java_%E9%9B%86%E5%90%88%EF%BC%9A%E9%9B%86%E5%90%88%E7%B1%BB%E4%B8%8D%E5%AE%89%E5%85%A8%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/","content":"<h2 id=\"并发异常\"><a href=\"#并发异常\" class=\"headerlink\" title=\"并发异常\"></a>并发异常</h2><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.UUID;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ContainerNotSafeDemo</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        List&lt;String&gt; list = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(() -&gt; &#123;</span><br><span class=\"line\">                list.add(UUID.randomUUID().toString().substring(<span class=\"number\">0</span>, <span class=\"number\">8</span>));</span><br><span class=\"line\">                System.out.println(list);</span><br><span class=\"line\">            &#125;).start();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">[73f524a3]</span><br><span class=\"line\">[73f524a3, e0d338a7, e012d81a, 3fdce3b7, 785ded9a, ba996ac9]</span><br><span class=\"line\">[73f524a3, e0d338a7, e012d81a, 3fdce3b7, 785ded9a]</span><br><span class=\"line\">[73f524a3, e0d338a7, e012d81a, 3fdce3b7, 785ded9a, ba996ac9, c6effe23, cefaa367, 376dcfcd, <span class=\"number\">0e037259</span>]</span><br><span class=\"line\">[73f524a3, e0d338a7, e012d81a]</span><br><span class=\"line\">[73f524a3, e0d338a7]</span><br><span class=\"line\">[73f524a3, e0d338a7, e012d81a, 3fdce3b7, 785ded9a, ba996ac9, c6effe23, cefaa367, 376dcfcd]</span><br><span class=\"line\">[73f524a3, e0d338a7, e012d81a, 3fdce3b7, 785ded9a, ba996ac9, c6effe23, cefaa367]</span><br><span class=\"line\">[73f524a3, e0d338a7, e012d81a, 3fdce3b7, 785ded9a, ba996ac9, c6effe23]</span><br><span class=\"line\">Exception in thread <span class=\"string\">&quot;Thread-4&quot;</span> java.util.ConcurrentModificationException</span><br><span class=\"line\">\tat java.util.ArrayList$Itr.checkForComodification(ArrayList.java:<span class=\"number\">909</span>)</span><br><span class=\"line\">\tat java.util.ArrayList$Itr.next(ArrayList.java:<span class=\"number\">859</span>)</span><br><span class=\"line\">\tat java.util.AbstractCollection.toString(AbstractCollection.java:<span class=\"number\">461</span>)</span><br><span class=\"line\">\tat java.lang.String.valueOf(String.java:<span class=\"number\">2994</span>)</span><br><span class=\"line\">\tat java.io.PrintStream.println(PrintStream.java:<span class=\"number\">821</span>)</span><br><span class=\"line\">\tat com.example.demo.ContainerNotSafeDemo.lambda$main$<span class=\"number\">0</span>(ContainerNotSafeDemo.java:<span class=\"number\">14</span>)</span><br><span class=\"line\">\tat java.lang.Thread.run(Thread.java:<span class=\"number\">748</span>)</span><br></pre></td></tr></table></figure>\n\n<span id=\"more\"></span>\n\n<h2 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h2><h3 id=\"List\"><a href=\"#List\" class=\"headerlink\" title=\"List\"></a>List</h3><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 方式一</span></span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"title class_\">Vector</span>&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 方式二</span></span><br><span class=\"line\">Collections.synchronizedList(<span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;());</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 方式三</span></span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"title class_\">CopyOnWriteArrayList</span>&lt;&gt;();</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Set\"><a href=\"#Set\" class=\"headerlink\" title=\"Set\"></a>Set</h3><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 方式一</span></span><br><span class=\"line\">Collections.synchronizedSet(<span class=\"keyword\">new</span> <span class=\"title class_\">HashSet</span>&lt;&gt;());</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 方式二</span></span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"title class_\">CopyOnWriteArraySet</span>&lt;&gt;();</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Map\"><a href=\"#Map\" class=\"headerlink\" title=\"Map\"></a>Map</h3><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 方式一</span></span><br><span class=\"line\">Collections.synchronizedMap(<span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>&lt;&gt;());</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 方式二</span></span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"title class_\">ConcurrentHashMap</span>&lt;&gt;();</span><br></pre></td></tr></table></figure>\n\n","categories":["Java"],"tags":["后端","Java","集合"]},{"title":"Kafka","url":"/Kafka/Kafka/","content":"<h2 id=\"应用场景\"><a href=\"#应用场景\" class=\"headerlink\" title=\"应用场景\"></a>应用场景</h2><h3 id=\"异步\"><a href=\"#异步\" class=\"headerlink\" title=\"异步\"></a>异步</h3><img src=\"/Kafka/Kafka/%E5%BC%82%E6%AD%A5.png\" class=\"\" title=\"异步\">\n\n<span id=\"more\"></span>\n\n<h3 id=\"消峰\"><a href=\"#消峰\" class=\"headerlink\" title=\"消峰\"></a>消峰</h3><img src=\"/Kafka/Kafka/%E6%B6%88%E5%B3%B0.png\" class=\"\" title=\"消峰\">\n\n<h3 id=\"解耦\"><a href=\"#解耦\" class=\"headerlink\" title=\"解耦\"></a>解耦</h3><img src=\"/Kafka/Kafka/%E8%A7%A3%E8%80%A6.png\" class=\"\" title=\"解耦\">\n\n<h2 id=\"两种模式\"><a href=\"#两种模式\" class=\"headerlink\" title=\"两种模式\"></a>两种模式</h2><h3 id=\"点对点模式\"><a href=\"#点对点模式\" class=\"headerlink\" title=\"点对点模式\"></a>点对点模式</h3><img src=\"/Kafka/Kafka/%E7%82%B9%E5%AF%B9%E7%82%B9%E6%A8%A1%E5%BC%8F.png\" class=\"\" title=\"点对点模式\">\n\n<h3 id=\"发布-订阅模式\"><a href=\"#发布-订阅模式\" class=\"headerlink\" title=\"发布&#x2F;订阅模式\"></a>发布&#x2F;订阅模式</h3><img src=\"/Kafka/Kafka/%E5%8F%91%E5%B8%83%E8%AE%A2%E9%98%85%E6%A8%A1%E5%BC%8F.png\" class=\"\" title=\"发布订阅模式\">\n\n<h2 id=\"基础架构\"><a href=\"#基础架构\" class=\"headerlink\" title=\"基础架构\"></a>基础架构</h2><img src=\"/Kafka/Kafka/%E5%9F%BA%E7%A1%80%E6%9E%B6%E6%9E%84.png\" class=\"\" title=\"基础架构\">\n\n<ul>\n<li><code>Broker</code> 服务节点（集群）。</li>\n<li><code>Partition</code> 分区（编号）。</li>\n<li><code>Replica</code> Kafka 没有备份的概念，称之为副本，多个副本同时只能有一个提供数据的读写操作，其他副本只是用于备份。</li>\n<li><code>Leader</code> 具有读写能力的副本称之为 Leader 副本。</li>\n<li><code>Follower</code> 作为备份的副本称之为 Follower 副本。</li>\n<li><code>Topic</code> 主题。</li>\n<li><code>Producer</code> 消息生产者。</li>\n<li><code>Consumer</code> 消息消费者。</li>\n<li><code>Consumer Group（CG）</code> 消费者组，由多个 consumer 组成。</li>\n</ul>\n<h2 id=\"架构组件\"><a href=\"#架构组件\" class=\"headerlink\" title=\"架构组件\"></a>架构组件</h2><figure class=\"highlight text\"><table><tr><td class=\"code\"><pre><span class=\"line\">Kafka</span><br><span class=\"line\">├── 核心组件</span><br><span class=\"line\">│   ├── 生产者 (Producer)</span><br><span class=\"line\">│   │   ├── 功能: 发送消息到主题分区</span><br><span class=\"line\">│   │   ├── 流程: 序列化 -&gt; 缓冲区 -&gt; 分区选择 -&gt; 发送 -&gt; 确认</span><br><span class=\"line\">│   ├── 消费者 (Consumer)</span><br><span class=\"line\">│   │   ├── 功能: 从主题分区拉取消息</span><br><span class=\"line\">│   │   ├── 流程: 订阅 -&gt; 分区分配 -&gt; 拉取 -&gt; 反序列化 -&gt; 偏移量提交</span><br><span class=\"line\">│   ├── 主题 (Topic)</span><br><span class=\"line\">│   │   ├── 功能: 消息的逻辑分类</span><br><span class=\"line\">│   │   ├── 分区 (Partition)</span><br><span class=\"line\">│   │   │   ├── 功能: 物理存储单元</span><br><span class=\"line\">│   │   │   ├── 流程: 消息写入 -&gt; 偏移量管理</span><br><span class=\"line\">│   ├── Broker</span><br><span class=\"line\">│   │   ├── 控制器 (Controller) / KRaft 控制器</span><br><span class=\"line\">│   │   │   ├── 功能: 管理集群元数据、Leader 选举</span><br><span class=\"line\">│   │   │   ├── 流程: 监听 ZooKeeper/KRaft -&gt; 同步元数据 -&gt; 分配分区</span><br><span class=\"line\">│   │   ├── 副本管理器 (Replica Manager)</span><br><span class=\"line\">│   │   │   ├── 功能: 管理分区副本和同步</span><br><span class=\"line\">│   │   │   ├── 流程: Leader 写入 -&gt; Follower 拉取 -&gt; ISR 同步 -&gt; 高水位更新</span><br><span class=\"line\">│   │   ├── 组协调器 (Group Coordinator)</span><br><span class=\"line\">│   │   │   ├── 功能: 管理消费者组和分区分配</span><br><span class=\"line\">│   │   │   ├── 偏移量管理器 (Offset Manager)</span><br><span class=\"line\">│   │   │   │   ├── 功能: 管理消费者偏移量</span><br><span class=\"line\">│   │   │   │   ├── 存储: __consumer_offsets 主题</span><br><span class=\"line\">│   │   ├── 事务协调器 (Transaction Coordinator)</span><br><span class=\"line\">│   │   │   ├── 功能: 管理事务一致性</span><br><span class=\"line\">│   │   │   ├── 流程: 分配事务 ID -&gt; 记录事务状态 -&gt; 提交/中止</span><br><span class=\"line\">│   │   ├── 日志管理器 (Log Manager)</span><br><span class=\"line\">│   │   │   ├── 功能: 管理分区日志和清理</span><br><span class=\"line\">│   │   │   ├── 流程: 写入日志段 -&gt; 索引维护 -&gt; 清理（删除/压缩）</span><br><span class=\"line\">│   │   ├── 通信服务器 (Network Layer)</span><br><span class=\"line\">│   │   │   ├── 功能: 处理 Broker 与客户端/Broker 间通信</span><br><span class=\"line\">│   │   │   ├── 机制: Java NIO -&gt; Kafka 协议 -&gt; SSL/SASL</span><br><span class=\"line\">│   │   ├── 节点通信管理器 (Inter-Broker Communication)</span><br><span class=\"line\">│   │   │   ├── 功能: Broker 间元数据和副本同步</span><br><span class=\"line\">│   │   │   ├── 机制: FetchRequest -&gt; 零拷贝传输</span><br><span class=\"line\">│   │   ├── 元数据管理器 (Metadata Manager)</span><br><span class=\"line\">│   │   │   ├── 功能: 管理集群元数据</span><br><span class=\"line\">│   │   │   ├── 流程: 响应 MetadataRequest</span><br><span class=\"line\">│   │   ├── 配额管理器 (Quota Manager)</span><br><span class=\"line\">│   │   │   ├── 功能: 限制资源使用</span><br><span class=\"line\">│   │   │   ├── 配置: 带宽/请求速率</span><br><span class=\"line\">│   │   ├── 安全管理器 (Security Manager)</span><br><span class=\"line\">│   │   │   ├── 功能: 认证、授权、加密</span><br><span class=\"line\">│   │   │   ├── 机制: SSL/SASL -&gt; ACL</span><br><span class=\"line\">│   ├── 管理员对象 (Admin Client)</span><br><span class=\"line\">│   │   ├── 功能: 管理集群元数据（主题、配置等）</span><br><span class=\"line\">│   │   ├── 操作: 创建/删除主题 -&gt; 查询集群 -&gt; 修改配置</span><br><span class=\"line\">│</span><br><span class=\"line\">├── 数据存储</span><br><span class=\"line\">│   ├── 功能: 存储消息和元数据</span><br><span class=\"line\">│   ├── 流程: 日志段写入 -&gt; 索引记录 -&gt; 清理</span><br><span class=\"line\">│   ├── 结构: 日志目录 -&gt; 日志段 (.log) -&gt; 索引文件 (.index, .timeindex)</span><br><span class=\"line\">│</span><br><span class=\"line\">├── ZooKeeper / KRaft</span><br><span class=\"line\">│   ├── 功能: 分布式协调和元数据管理</span><br><span class=\"line\">│   ├── 管理客户端: ZooKeeper CLI, kafka-topics.sh</span><br><span class=\"line\">│</span><br><span class=\"line\">├── API 应用处理接口</span><br><span class=\"line\">│   ├── Producer API: 发送消息</span><br><span class=\"line\">│   ├── Consumer API: 消费消息</span><br><span class=\"line\">│   ├── Admin Client API: 管理集群</span><br><span class=\"line\">│   ├── Streams API</span><br><span class=\"line\">│   │   ├── Streams 处理器 (Streams Processor)</span><br><span class=\"line\">│   │   │   ├── 功能: 实时流处理</span><br><span class=\"line\">│   │   │   ├── 流程: 读取 -&gt; 处理 -&gt; 写入</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"生产者\"><a href=\"#生产者\" class=\"headerlink\" title=\"生产者\"></a>生产者</h3><img src=\"/Kafka/Kafka/%E6%9E%B6%E6%9E%84%E7%BB%84%E4%BB%B6_%E7%94%9F%E4%BA%A7%E8%80%85.png\" class=\"\" title=\"生产者\">\n\n<h3 id=\"消费者\"><a href=\"#消费者\" class=\"headerlink\" title=\"消费者\"></a>消费者</h3><img src=\"/Kafka/Kafka/%E6%9E%B6%E6%9E%84%E7%BB%84%E4%BB%B6_%E6%B6%88%E8%B4%B9%E8%80%85.png\" class=\"\" title=\"消费者\">\n\n<h3 id=\"消费者拉取数据基本流程\"><a href=\"#消费者拉取数据基本流程\" class=\"headerlink\" title=\"消费者拉取数据基本流程\"></a>消费者拉取数据基本流程</h3><img src=\"/Kafka/Kafka/%E6%9E%B6%E6%9E%84%E7%BB%84%E4%BB%B6_%E6%B6%88%E8%B4%B9%E8%80%85%E6%8B%89%E5%8F%96%E6%95%B0%E6%8D%AE%E5%9F%BA%E6%9C%AC%E6%B5%81%E7%A8%8B.png\" class=\"\" title=\"消费者拉取数据基本流程\">\n\n<h3 id=\"管理员对象\"><a href=\"#管理员对象\" class=\"headerlink\" title=\"管理员对象\"></a>管理员对象</h3><img src=\"/Kafka/Kafka/%E6%9E%B6%E6%9E%84%E7%BB%84%E4%BB%B6_%E7%AE%A1%E7%90%86%E5%91%98%E5%AF%B9%E8%B1%A1.png\" class=\"\" title=\"管理员对象\">\n\n<h3 id=\"控制器\"><a href=\"#控制器\" class=\"headerlink\" title=\"控制器\"></a>控制器</h3><img src=\"/Kafka/Kafka/%E6%9E%B6%E6%9E%84%E7%BB%84%E4%BB%B6_%E6%8E%A7%E5%88%B6%E5%99%A8.png\" class=\"\" title=\"控制器\">\n\n<h3 id=\"副本管理器\"><a href=\"#副本管理器\" class=\"headerlink\" title=\"副本管理器\"></a>副本管理器</h3><img src=\"/Kafka/Kafka/%E6%9E%B6%E6%9E%84%E7%BB%84%E4%BB%B6_%E5%89%AF%E6%9C%AC%E7%AE%A1%E7%90%86%E5%99%A8.png\" class=\"\" title=\"副本管理器\">\n\n<h3 id=\"副本同步数据基础流程\"><a href=\"#副本同步数据基础流程\" class=\"headerlink\" title=\"副本同步数据基础流程\"></a>副本同步数据基础流程</h3><img src=\"/Kafka/Kafka/%E6%9E%B6%E6%9E%84%E7%BB%84%E4%BB%B6_%E5%89%AF%E6%9C%AC%E5%90%8C%E6%AD%A5%E6%95%B0%E6%8D%AE%E5%9F%BA%E7%A1%80%E6%B5%81%E7%A8%8B.png\" class=\"\" title=\"副本同步数据基础流程\">\n\n<h3 id=\"通信服务器\"><a href=\"#通信服务器\" class=\"headerlink\" title=\"通信服务器\"></a>通信服务器</h3><img src=\"/Kafka/Kafka/%E6%9E%B6%E6%9E%84%E7%BB%84%E4%BB%B6_%E9%80%9A%E4%BF%A1%E6%9C%8D%E5%8A%A1%E5%99%A8.png\" class=\"\" title=\"通信服务器\">\n\n<h3 id=\"组协调器\"><a href=\"#组协调器\" class=\"headerlink\" title=\"组协调器\"></a>组协调器</h3><img src=\"/Kafka/Kafka/%E6%9E%B6%E6%9E%84%E7%BB%84%E4%BB%B6_%E7%BB%84%E5%8D%8F%E8%B0%83%E5%99%A8.png\" class=\"\" title=\"组协调器\">\n\n<h3 id=\"事务协调器\"><a href=\"#事务协调器\" class=\"headerlink\" title=\"事务协调器\"></a>事务协调器</h3><img src=\"/Kafka/Kafka/%E6%9E%B6%E6%9E%84%E7%BB%84%E4%BB%B6_%E4%BA%8B%E5%8A%A1%E5%8D%8F%E8%B0%83%E5%99%A8.png\" class=\"\" title=\"事务协调器\">\n\n<h3 id=\"日志管理器\"><a href=\"#日志管理器\" class=\"headerlink\" title=\"日志管理器\"></a>日志管理器</h3><img src=\"/Kafka/Kafka/%E6%9E%B6%E6%9E%84%E7%BB%84%E4%BB%B6_%E6%97%A5%E5%BF%97%E7%AE%A1%E7%90%86%E5%99%A8.png\" class=\"\" title=\"日志管理器\">\n\n<h3 id=\"节点通信管理器\"><a href=\"#节点通信管理器\" class=\"headerlink\" title=\"节点通信管理器\"></a>节点通信管理器</h3><img src=\"/Kafka/Kafka/%E6%9E%B6%E6%9E%84%E7%BB%84%E4%BB%B6_%E8%8A%82%E7%82%B9%E9%80%9A%E4%BF%A1%E7%AE%A1%E7%90%86%E5%99%A8.png\" class=\"\" title=\"节点通信管理器\">\n\n<h3 id=\"应用处理接口\"><a href=\"#应用处理接口\" class=\"headerlink\" title=\"应用处理接口\"></a>应用处理接口</h3><img src=\"/Kafka/Kafka/%E6%9E%B6%E6%9E%84%E7%BB%84%E4%BB%B6_API%E5%BA%94%E7%94%A8%E5%A4%84%E7%90%86%E6%8E%A5%E5%8F%A3.png\" class=\"\" title=\"应用处理接口\">\n\n<h3 id=\"数据存储基础流程\"><a href=\"#数据存储基础流程\" class=\"headerlink\" title=\"数据存储基础流程\"></a>数据存储基础流程</h3><img src=\"/Kafka/Kafka/%E6%9E%B6%E6%9E%84%E7%BB%84%E4%BB%B6_%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8%E5%9F%BA%E7%A1%80%E6%B5%81%E7%A8%8B.png\" class=\"\" title=\"数据存储基础流程\">\n\n<h3 id=\"ZooKeeper\"><a href=\"#ZooKeeper\" class=\"headerlink\" title=\"ZooKeeper\"></a>ZooKeeper</h3><img src=\"/Kafka/Kafka/%E6%9E%B6%E6%9E%84%E7%BB%84%E4%BB%B6_ZK.png\" class=\"\" title=\"ZooKeeper\">\n\n<h3 id=\"ZooKeeper-管理客户端\"><a href=\"#ZooKeeper-管理客户端\" class=\"headerlink\" title=\"ZooKeeper 管理客户端\"></a>ZooKeeper 管理客户端</h3><img src=\"/Kafka/Kafka/%E6%9E%B6%E6%9E%84%E7%BB%84%E4%BB%B6_ZK%E7%AE%A1%E7%90%86%E5%AE%A2%E6%88%B7%E7%AB%AF.png\" class=\"\" title=\"ZooKeeper 管理客户端\">\n\n\n<h2 id=\"常用命令\"><a href=\"#常用命令\" class=\"headerlink\" title=\"常用命令\"></a>常用命令</h2><h3 id=\"启动-停止-Kafka-服务\"><a href=\"#启动-停止-Kafka-服务\" class=\"headerlink\" title=\"启动&#x2F;停止 Kafka 服务\"></a>启动&#x2F;停止 Kafka 服务</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 启动 ZooKeeper（默认端口：2181）</span></span><br><span class=\"line\"><span class=\"variable\">$KAFKA_HOME</span>/bin/zookeeper-server-start.sh <span class=\"variable\">$KAFKA_HOME</span>/config/zookeeper.properties</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 启动 Kafka Broker（默认端口：9092）</span></span><br><span class=\"line\"><span class=\"variable\">$KAFKA_HOME</span>/bin/kafka-server-start.sh <span class=\"variable\">$KAFKA_HOME</span>/config/server.properties</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 停止 Kafka Broker</span></span><br><span class=\"line\"><span class=\"variable\">$KAFKA_HOME</span>/bin/kafka-server-stop.sh</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 停止 ZooKeeper</span></span><br><span class=\"line\"><span class=\"variable\">$KAFKA_HOME</span>/bin/zookeeper-server-stop.sh</span><br></pre></td></tr></table></figure>\n<h3 id=\"主题\"><a href=\"#主题\" class=\"headerlink\" title=\"主题\"></a>主题</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 创建主题 （&lt;topic_name&gt;主题名称；&lt;num_partitions&gt;分区数；&lt;replication_factor&gt;副本数；）</span></span><br><span class=\"line\"><span class=\"variable\">$KAFKA_HOME</span>/bin/kafka-topics.sh --create --topic &lt;topic_name&gt; --bootstrap-server localhost:9092 --partitions &lt;num_partitions&gt; --replication-factor &lt;replication_factor&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 列出所有主题</span></span><br><span class=\"line\"><span class=\"variable\">$KAFKA_HOME</span>/bin/kafka-topics.sh --list --bootstrap-server localhost:9092</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看主题详情</span></span><br><span class=\"line\"><span class=\"variable\">$KAFKA_HOME</span>/bin/kafka-topics.sh --describe --topic &lt;topic_name&gt; --bootstrap-server localhost:9092</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 删除主题（注：需在 server.properties 中启用 delete.topic.enable=true）</span></span><br><span class=\"line\"><span class=\"variable\">$KAFKA_HOME</span>/bin/kafka-topics.sh --delete --topic &lt;topic_name&gt; --bootstrap-server localhost:9092</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 修改主题（例如分区数）</span></span><br><span class=\"line\"><span class=\"variable\">$KAFKA_HOME</span>/bin/kafka-topics.sh --alter --topic &lt;topic_name&gt; --partitions &lt;new_num_partitions&gt; --bootstrap-server localhost:9092</span><br></pre></td></tr></table></figure>\n<h3 id=\"生产者-1\"><a href=\"#生产者-1\" class=\"headerlink\" title=\"生产者\"></a>生产者</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 发送消息到主题</span></span><br><span class=\"line\"><span class=\"variable\">$KAFKA_HOME</span>/bin/kafka-console-producer.sh --topic &lt;topic_name&gt; --bootstrap-server localhost:9092</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 指定 key 发送消息</span></span><br><span class=\"line\"><span class=\"variable\">$KAFKA_HOME</span>/bin/kafka-console-producer.sh --topic &lt;topic_name&gt; --bootstrap-server localhost:9092 --property <span class=\"string\">&quot;parse.key=true&quot;</span> --property <span class=\"string\">&quot;key.separator=:&quot;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"消费者-1\"><a href=\"#消费者-1\" class=\"headerlink\" title=\"消费者\"></a>消费者</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 从主题消费消息</span></span><br><span class=\"line\"><span class=\"variable\">$KAFKA_HOME</span>/bin/kafka-console-consumer.sh --topic &lt;topic_name&gt; --bootstrap-server localhost:9092</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 从头开始消费</span></span><br><span class=\"line\"><span class=\"variable\">$KAFKA_HOME</span>/bin/kafka-console-consumer.sh --topic &lt;topic_name&gt; --bootstrap-server localhost:9092 --from-beginning</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 指定消费者组</span></span><br><span class=\"line\"><span class=\"variable\">$KAFKA_HOME</span>/bin/kafka-console-consumer.sh --topic &lt;topic_name&gt; --bootstrap-server localhost:9092 --group &lt;group_name&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 显示 key 和 value</span></span><br><span class=\"line\"><span class=\"variable\">$KAFKA_HOME</span>/bin/kafka-console-consumer.sh --topic &lt;topic_name&gt; --bootstrap-server localhost:9092 --property print.key=<span class=\"literal\">true</span> --property key.separator=:</span><br></pre></td></tr></table></figure>\n<h3 id=\"消费者组\"><a href=\"#消费者组\" class=\"headerlink\" title=\"消费者组\"></a>消费者组</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 列出所有消费者组</span></span><br><span class=\"line\"><span class=\"variable\">$KAFKA_HOME</span>/bin/kafka-consumer-groups.sh --bootstrap-server localhost:9092 --list</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看消费者组详情</span></span><br><span class=\"line\"><span class=\"variable\">$KAFKA_HOME</span>/bin/kafka-consumer-groups.sh --bootstrap-server localhost:9092 --group &lt;group_name&gt; --describe</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 重置消费者组偏移量</span></span><br><span class=\"line\"><span class=\"variable\">$KAFKA_HOME</span>/bin/kafka-consumer-groups.sh --bootstrap-server localhost:9092 --group &lt;group_name&gt; --reset-offsets --to-earliest --execute --topic &lt;topic_name&gt;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"常用参数\"><a href=\"#常用参数\" class=\"headerlink\" title=\"常用参数\"></a>常用参数</h2><h3 id=\"消费者-2\"><a href=\"#消费者-2\" class=\"headerlink\" title=\"消费者\"></a>消费者</h3><h4 id=\"连接与基础配置\"><a href=\"#连接与基础配置\" class=\"headerlink\" title=\"连接与基础配置\"></a>连接与基础配置</h4><ul>\n<li><code>bootstrap.servers</code> 指定 Kafka 集群的 Broker 地址列表（如 localhost:9092,localhost:9093）。</li>\n<li><code>group.id</code> 消费者所属的消费者组标识，不同组独立消费同一主题的消息，组内消费者通过分区分配实现负载均衡。</li>\n<li><code>client.id</code> 消费者的唯一标识，便于日志追踪和监控。</li>\n</ul>\n<h4 id=\"消息拉取相关参数\"><a href=\"#消息拉取相关参数\" class=\"headerlink\" title=\"消息拉取相关参数\"></a>消息拉取相关参数</h4><ul>\n<li><code>fetch.max.bytes</code> 单次拉取（poll()）从 Broker 获取的最大字节数，默认 50MB。</li>\n<li><code>max.poll.records</code> 单次 poll() 返回的最大消息条数，默认 500。</li>\n<li><code>fetch.min.bytes</code> Broker 等待的最小返回字节数，控制拉取的效率，默认 1。</li>\n<li><code>fetch.max.wait.ms</code> Broker 等待消息达到 <code>fetch.min.bytes</code> 的最大时间，默认 500ms。</li>\n<li><code>max.partition.fetch.bytes</code> 从单个分区拉取的最大字节数，默认 1MB。</li>\n</ul>\n<h4 id=\"偏移量管理\"><a href=\"#偏移量管理\" class=\"headerlink\" title=\"偏移量管理\"></a>偏移量管理</h4><ul>\n<li><code>enable.auto.commit</code> 是否自动提交消费偏移量。默认 true。<ul>\n<li><code>true</code> 消费者定期自动提交偏移量（可能导致重复消费）。</li>\n<li><code>false</code> 需手动提交，适合高可靠性场景。</li>\n</ul>\n</li>\n<li><code>auto.commit.interval.ms</code> 自动提交偏移量的间隔时间。默认 5秒。</li>\n<li><code>auto.offset.reset</code> 当消费者找不到有效偏移量时（例如偏移量被删除或新消费者加入）的处理策略，默认 latest。<ul>\n<li><code>earliest</code> 从分区最早偏移量开始消费。</li>\n<li><code>latest</code> 从最新偏移量开始，只消费新消息。</li>\n<li><code>none</code> 找不到偏移量时抛出异常。</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"消费者组与心跳\"><a href=\"#消费者组与心跳\" class=\"headerlink\" title=\"消费者组与心跳\"></a>消费者组与心跳</h4><ul>\n<li><code>session.timeout.ms</code> 消费者与 Broker 之间的会话超时时间，超时后消费者被认为已断开，默认 10秒。</li>\n<li><code>heartbeat.interval.ms</code> 消费者向 Broker 发送心跳的间隔时间，用于检测消费者存活，默认 3秒。通常设置为 <code>session.timeout.ms</code> 的 1&#x2F;3，确保及时检测故障。</li>\n<li><code>max.poll.interval.ms</code> 两次 poll() 之间的最大间隔，超时会导致消费者被踢出组，默认 5分钟。</li>\n<li><code>partition.assignment.strategy</code> 消费者组内分区的分配策略，默认 RangeAssignor。<ul>\n<li><code>Range</code> 按分区顺序分配，可能不均。</li>\n<li><code>RoundRobin</code> 轮询分配，较均匀。</li>\n<li><code>Sticky</code> 尽量保留原有分配，减少重分配开销。</li>\n<li><code>CooperativeSticky</code> 增量分配，减少 Rebalance 停顿。</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"性能与可靠性\"><a href=\"#性能与可靠性\" class=\"headerlink\" title=\"性能与可靠性\"></a>性能与可靠性</h4><ul>\n<li><code>request.timeout.ms</code> 消费者请求 Broker 的最大等待时间，默认 5分钟。</li>\n<li><code>connections.max.idle.ms</code> 消费者与 Broker 连接的最大空闲时间，默认 9分钟。</li>\n<li><code>receive.buffer.bytes / send.buffer.bytes</code> TCP 接收&#x2F;发送缓冲区大小，默认 65536（64KB）&#x2F; 131072（128KB）。</li>\n</ul>\n<h4 id=\"其他重要参数\"><a href=\"#其他重要参数\" class=\"headerlink\" title=\"其他重要参数\"></a>其他重要参数</h4><ul>\n<li><code>key.deserializer / value.deserializer</code> 消息键和值的反序列化类。</li>\n<li><code>isolation.level</code> 控制消费者读取事务性消息的行为，默认 read_uncommitted。<ul>\n<li><code>read_uncommitted</code> 读取所有消息（包括未提交的事务消息）。</li>\n<li><code>read_committed</code> 仅读取已提交的事务消息。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"生产者-2\"><a href=\"#生产者-2\" class=\"headerlink\" title=\"生产者\"></a>生产者</h2><h3 id=\"同步发送流程\"><a href=\"#同步发送流程\" class=\"headerlink\" title=\"同步发送流程\"></a>同步发送流程</h3><img src=\"/Kafka/Kafka/%E5%90%8C%E6%AD%A5%E5%8F%91%E9%80%81%E6%B5%81%E7%A8%8B.png\" class=\"\" title=\"同步发送流程\">\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Properties</span> <span class=\"variable\">properties</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Properties</span>();</span><br><span class=\"line\"><span class=\"comment\">// 连接 kafka</span></span><br><span class=\"line\">properties.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, <span class=\"string\">&quot;127.0.0.1:9092&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 序列化</span></span><br><span class=\"line\">properties.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, <span class=\"string\">&quot;org.apache.kafka.common.serialization.StringSerializer&quot;</span>);</span><br><span class=\"line\">properties.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, <span class=\"string\">&quot;org.apache.kafka.common.serialization.StringSerializer&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 创建生产者</span></span><br><span class=\"line\">KafkaProducer&lt;String, String&gt; kafkaProducer = <span class=\"keyword\">new</span> <span class=\"title class_\">KafkaProducer</span>&lt;&gt;(properties);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 调用 send 方法,发送消息</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; i++) &#123;</span><br><span class=\"line\">\tkafkaProducer.send(<span class=\"keyword\">new</span> <span class=\"title class_\">ProducerRecord</span>&lt;&gt;(<span class=\"string\">&quot;test-topic&quot;</span>,<span class=\"string\">&quot;hello&quot;</span> + i)).get();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 关闭资源</span></span><br><span class=\"line\">kafkaProducer.close();</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"异步发送流程\"><a href=\"#异步发送流程\" class=\"headerlink\" title=\"异步发送流程\"></a>异步发送流程</h3><img src=\"/Kafka/Kafka/%E5%BC%82%E6%AD%A5%E5%8F%91%E9%80%81%E6%B5%81%E7%A8%8B%EF%BC%88%E5%B8%A6%E5%9B%9E%E8%B0%83%E5%87%BD%E6%95%B0%EF%BC%89.png\" class=\"\" title=\"异步发送流程\">\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Properties</span> <span class=\"variable\">properties</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Properties</span>();</span><br><span class=\"line\"><span class=\"comment\">// 连接 kafka</span></span><br><span class=\"line\">properties.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, <span class=\"string\">&quot;127.0.0.1:9092&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 序列化</span></span><br><span class=\"line\">properties.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, <span class=\"string\">&quot;org.apache.kafka.common.serialization.StringSerializer&quot;</span>);</span><br><span class=\"line\">properties.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, <span class=\"string\">&quot;org.apache.kafka.common.serialization.StringSerializer&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 创建生产者</span></span><br><span class=\"line\">KafkaProducer&lt;String, String&gt; kafkaProducer = <span class=\"keyword\">new</span> <span class=\"title class_\">KafkaProducer</span>&lt;&gt;(properties);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 调用 send 方法,发送消息</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; i++) &#123;</span><br><span class=\"line\">\tkafkaProducer.send(<span class=\"keyword\">new</span> <span class=\"title class_\">ProducerRecord</span>&lt;&gt;(<span class=\"string\">&quot;test-topic&quot;</span>, <span class=\"string\">&quot;hello &quot;</span> + i),</span><br><span class=\"line\">\t\t(metadata, exception) -&gt; &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (exception == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t\tSystem.out.println(<span class=\"string\">&quot; 主题： &quot;</span> + metadata.topic() + <span class=\"string\">&quot;-&gt;&quot;</span> + <span class=\"string\">&quot;分区：&quot;</span> + metadata.partition());</span><br><span class=\"line\">\t\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t\texception.printStackTrace();</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 关闭资源</span></span><br><span class=\"line\">kafkaProducer.close();</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"分区\"><a href=\"#分区\" class=\"headerlink\" title=\"分区\"></a>分区</h3><h4 id=\"分区好处\"><a href=\"#分区好处\" class=\"headerlink\" title=\"分区好处\"></a>分区好处</h4><img src=\"/Kafka/Kafka/%E5%88%86%E5%8C%BA%E5%A5%BD%E5%A4%84.png\" class=\"\" title=\"分区好处\">\n\n<h4 id=\"分区策略\"><a href=\"#分区策略\" class=\"headerlink\" title=\"分区策略\"></a>分区策略</h4><img src=\"/Kafka/Kafka/%E5%88%86%E5%8C%BA%E7%AD%96%E7%95%A5.png\" class=\"\" title=\"分区策略\">\n\n<h4 id=\"自定义分区策略\"><a href=\"#自定义分区策略\" class=\"headerlink\" title=\"自定义分区策略\"></a>自定义分区策略</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyPartitioner</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Partitioner</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">partition</span><span class=\"params\">(String topic, Object key, <span class=\"type\">byte</span>[] keyBytes, Object value, <span class=\"type\">byte</span>[] valueBytes, Cluster cluster)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 消息包含hello的返回0号分区，其他的返回1号分区</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> value.toString().contains(<span class=\"string\">&quot;hello&quot;</span>) ? <span class=\"number\">0</span> : <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">close</span><span class=\"params\">()</span> &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">configure</span><span class=\"params\">(Map&lt;String, ?&gt; map)</span> &#123;&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 添加自定义分区</span></span><br><span class=\"line\">properties.put(ProducerConfig.PARTITIONER_CLASS_CONFIG, <span class=\"string\">&quot;com.example.MyPartitioner&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"吞吐量\"><a href=\"#吞吐量\" class=\"headerlink\" title=\"吞吐量\"></a>吞吐量</h3><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// batch.size：批次大小，默认 16K</span></span><br><span class=\"line\">properties.put(ProducerConfig.BATCH_SIZE_CONFIG, <span class=\"number\">16384</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// linger.ms：等待时间，默认 0</span></span><br><span class=\"line\">properties.put(ProducerConfig.LINGER_MS_CONFIG, <span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// RecordAccumulator：缓冲区大小，默认 32M：buffer.memory</span></span><br><span class=\"line\">properties.put(ProducerConfig.BUFFER_MEMORY_CONFIG, <span class=\"number\">33554432</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// compression.type：压缩，默认 none，可配置值 gzip、snappy、lz4 和 zstd</span></span><br><span class=\"line\">properties.put(ProducerConfig.COMPRESSION_TYPE_CONFIG, <span class=\"string\">&quot;snappy&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"数据可靠\"><a href=\"#数据可靠\" class=\"headerlink\" title=\"数据可靠\"></a>数据可靠</h3><h4 id=\"ACK应答级别\"><a href=\"#ACK应答级别\" class=\"headerlink\" title=\"ACK应答级别\"></a>ACK应答级别</h4><img src=\"/Kafka/Kafka/ACK%E5%BA%94%E7%AD%94%E7%BA%A7%E5%88%AB.png\" class=\"\" title=\"ACK应答级别\">\n\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 设置 acks</span></span><br><span class=\"line\">properties.put(ProducerConfig.ACKS_CONFIG, <span class=\"string\">&quot;all&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 重试次数 retries，默认是 int 最大值，2147483647</span></span><br><span class=\"line\">properties.put(ProducerConfig.RETRIES_CONFIG, <span class=\"number\">3</span>);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"可靠性总结\"><a href=\"#可靠性总结\" class=\"headerlink\" title=\"可靠性总结\"></a>可靠性总结</h4><ul>\n<li><code>acks=0</code> 生产者发送过来数据就不管了，可靠性差，效率高；</li>\n<li><code>acks=1</code> 生产者发送过来数据 Leader 应答，可靠性中毒，效率中毒；</li>\n<li><code>acks=-1</code> 生产者发送过来数据 Leader 和 ISR 队列里面所有 Follwer 应答，可靠性高，效率低；</li>\n<li><strong>生产环境中：</strong><ul>\n<li><code>acks=0</code> 很少使用；</li>\n<li><code>acks=1</code> 一般用于传输普通日志，允许丢个别数据；</li>\n<li><code>acks=-1</code> 一般用于传输和钱相关的数据，对可靠性要求比较高的场景；</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"数据重复\"><a href=\"#数据重复\" class=\"headerlink\" title=\"数据重复\"></a>数据重复</h3><h4 id=\"数据传递语义\"><a href=\"#数据传递语义\" class=\"headerlink\" title=\"数据传递语义\"></a>数据传递语义</h4><ul>\n<li><strong>至少一次（At Least Once）</strong> 消息可能丢失，但不会重复。<ul>\n<li><code>ack=-1</code> + <code>分区副本数&gt;=2</code> + <code>ISR里应答的最小副本数量&gt;=2</code></li>\n</ul>\n</li>\n<li><strong>最多一次（At Most Once）</strong> 消息不会丢失，但可能重复消费。<ul>\n<li><code>ack=0</code></li>\n</ul>\n</li>\n<li><strong>精确一次（Exactly Once）</strong> 消息既不丢失也不重复。<ul>\n<li><code>幂等性</code> + <code>事务</code> + <code>至少一次（ack=-1 + 分区副本数&gt;=2 + ISR里应答的最小副本数量&gt;=2）</code> 。</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"幂等性\"><a href=\"#幂等性\" class=\"headerlink\" title=\"幂等性\"></a>幂等性</h4><ul>\n<li><strong>幂等性：</strong> 指 Producer 不论向 Broker 发送多少次重复数据，Broker 端都只会持久化一条，保证了不重复。</li>\n<li><strong>重复数据的判断标准：</strong> 具有<code>&lt;PID, Partition, SeqNumber&gt;</code>相同主键的消息提交时，Broker 只会持久化一条。其中<code>PID是Kafka每次重启都会分配一个新的；Partition 表示分区号；Sequence Number是单调自增的</code>。 所以幂等性<code>只能保证的是在单分区单会话内不重复</code>。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 幂等性，默认true</span></span><br><span class=\"line\">properties.put(ProducerConfig.ENABLE_IDEMPOTENCE_CONFIG, <span class=\"literal\">true</span>);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"生产者事务\"><a href=\"#生产者事务\" class=\"headerlink\" title=\"生产者事务\"></a>生产者事务</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 设置事务 id（必须），事务 id 任意起名</span></span><br><span class=\"line\">properties.put(ProducerConfig.TRANSACTIONAL_ID_CONFIG, <span class=\"string\">&quot;transaction_id_0&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 创建生产者</span></span><br><span class=\"line\">KafkaProducer&lt;String, String&gt; kafkaProducer = <span class=\"keyword\">new</span> <span class=\"title class_\">KafkaProducer</span>&lt;&gt;(properties);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 初始化事务</span></span><br><span class=\"line\">kafkaProducer.initTransactions();</span><br><span class=\"line\"><span class=\"comment\">// 开启事务</span></span><br><span class=\"line\">kafkaProducer.beginTransaction();</span><br><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; i++) &#123;</span><br><span class=\"line\">\t\tkafkaProducer.send(<span class=\"keyword\">new</span> <span class=\"title class_\">ProducerRecord</span>&lt;&gt;(<span class=\"string\">&quot;test-topic&quot;</span>, <span class=\"string\">&quot;hello &quot;</span> + i));</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">// 提交事务</span></span><br><span class=\"line\">\tkafkaProducer.commitTransaction();</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 终止事务</span></span><br><span class=\"line\">\tkafkaProducer.abortTransaction();</span><br><span class=\"line\">&#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">\tkafkaProducer.close();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"数据有序\"><a href=\"#数据有序\" class=\"headerlink\" title=\"数据有序\"></a>数据有序</h3><img src=\"/Kafka/Kafka/%E6%95%B0%E6%8D%AE%E6%9C%89%E5%BA%8F.png\" class=\"\" title=\"数据有序\">\n\n<h2 id=\"Broker\"><a href=\"#Broker\" class=\"headerlink\" title=\"Broker\"></a>Broker</h2><h3 id=\"Zookeeper-存储\"><a href=\"#Zookeeper-存储\" class=\"headerlink\" title=\"Zookeeper 存储\"></a>Zookeeper 存储</h3><img src=\"/Kafka/Kafka/Zookeeper%E5%AD%98%E5%82%A8.png\" class=\"\" title=\"Zookeeper存储\">\n\n<h3 id=\"工作流程\"><a href=\"#工作流程\" class=\"headerlink\" title=\"工作流程\"></a>工作流程</h3><img src=\"/Kafka/Kafka/%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B.png\" class=\"\" title=\"工作流程\">\n\n<h3 id=\"节点服役和退役\"><a href=\"#节点服役和退役\" class=\"headerlink\" title=\"节点服役和退役\"></a>节点服役和退役</h3><ul>\n<li><strong>topics.json</strong><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 重新分配的那些主题</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">&quot;topics&quot;</span>: [&#123;<span class=\"string\">&quot;topic&quot;</span>: <span class=\"string\">&quot;&lt;topic_name&gt;&quot;</span>&#125;],</span><br><span class=\"line\">  <span class=\"string\">&quot;version&quot;</span>: 1</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><strong>生成重新分配计划</strong><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">bin/kafka-reassign-partitions.sh --bootstrap-server localhost:9092 --topics-to-move-json-file topics.json --broker-list &lt;broker_ids&gt; --generate</span><br><span class=\"line\"><span class=\"comment\"># 示例：--broker-list 0,1,2</span></span><br></pre></td></tr></table></figure></li>\n<li><strong>reassignment.json</strong><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 生成重新分配计划输出的内容 Proposed partition reassignment configuration 部分</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">&quot;version&quot;</span>: 1,</span><br><span class=\"line\">  <span class=\"string\">&quot;partitions&quot;</span>: [</span><br><span class=\"line\">    &#123;<span class=\"string\">&quot;topic&quot;</span>: <span class=\"string\">&quot;&lt;topic_name&gt;&quot;</span>, <span class=\"string\">&quot;partition&quot;</span>: 0, <span class=\"string\">&quot;replicas&quot;</span>: [2, 3, 0],<span class=\"string\">&quot;log_dirs&quot;</span>:[<span class=\"string\">&quot;any&quot;</span>,<span class=\"string\">&quot;any&quot;</span>,<span class=\"string\">&quot;any&quot;</span>]&#125;,</span><br><span class=\"line\">    &#123;<span class=\"string\">&quot;topic&quot;</span>: <span class=\"string\">&quot;&lt;topic_name&gt;&quot;</span>, <span class=\"string\">&quot;partition&quot;</span>: 1, <span class=\"string\">&quot;replicas&quot;</span>: [3, 0, 1],<span class=\"string\">&quot;log_dirs&quot;</span>:[<span class=\"string\">&quot;any&quot;</span>,<span class=\"string\">&quot;any&quot;</span>,<span class=\"string\">&quot;any&quot;</span>]&#125;,</span><br><span class=\"line\">    &#123;<span class=\"string\">&quot;topic&quot;</span>: <span class=\"string\">&quot;&lt;topic_name&gt;&quot;</span>, <span class=\"string\">&quot;partition&quot;</span>: 2, <span class=\"string\">&quot;replicas&quot;</span>: [0, 1, 2],<span class=\"string\">&quot;log_dirs&quot;</span>:[<span class=\"string\">&quot;any&quot;</span>,<span class=\"string\">&quot;any&quot;</span>,<span class=\"string\">&quot;any&quot;</span>]&#125;</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><strong>执行重新分配</strong><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">bin/kafka-reassign-partitions.sh --bootstrap-server localhost:9092 --reassignment-json-file reassignment.json --execute</span><br></pre></td></tr></table></figure></li>\n<li><strong>验证重新分配</strong><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">bin/kafka-reassign-partitions.sh --bootstrap-server localhost:9092 --reassignment-json-file reassignment.json --verify</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"Kafka-副本\"><a href=\"#Kafka-副本\" class=\"headerlink\" title=\"Kafka 副本\"></a>Kafka 副本</h3><h4 id=\"副本基本信息\"><a href=\"#副本基本信息\" class=\"headerlink\" title=\"副本基本信息\"></a>副本基本信息</h4><ul>\n<li><strong>副本作用：</strong> 提高数据可靠性。</li>\n<li><strong>副本配置：</strong> 默认副本 1 个，生产环境一般配置为 2 个（副本数过多会增加磁盘存储和网络传输开销，降低效率）</li>\n<li><strong>副本类型：</strong><ul>\n<li><strong>Leader：</strong> 接收生产者的消息写入，负责处理客户端读写请求。</li>\n<li><strong>Follower：</strong> 从 Leader 同步数据，仅作为备份，不直接处理客户端请求。</li>\n<li><strong>工作机制：</strong> 生产者只向 Leader 发送消息。Follower 定期从 Leader 拉取数据进行同步。</li>\n</ul>\n</li>\n<li><strong>副本分类：（AR &#x3D; ISR + OSR）</strong><ul>\n<li><strong>AR：</strong> 分区所有副本（Leader + Follower）。</li>\n<li><strong>ISR：</strong> 与 Leader 保持同步的 Follower 集合。Follower 超期（默认 30s，replica.lag.time.max.ms）未通信或同步将被踢出 ISR。Leader 故障后从 ISR 选举新 Leader。</li>\n<li><strong>OSR：</strong> 表示 Follower 与 Leader 副本同步时，延迟过多的副本。</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"Leader-选举流程\"><a href=\"#Leader-选举流程\" class=\"headerlink\" title=\"Leader 选举流程\"></a>Leader 选举流程</h4><img src=\"/Kafka/Kafka/Leader%E9%80%89%E4%B8%BE%E6%B5%81%E7%A8%8B.png\" class=\"\" title=\"Leader选举流程\">\n\n<h5 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h5><ul>\n<li><strong>创建一个新的 topic，4 个分区，4 个副本</strong><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">bin/kafka-topics.sh --bootstrap-server kafka0:9092 --create --topic test-topic --partitions 4 --replication-factor 4</span><br></pre></td></tr></table></figure></li>\n<li><strong>查看 Leader 分布情况</strong><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">bin/kafka-topics.sh --bootstrap-server kafka0:9092 --describe --topic test-topic</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Topic: test-topic Partition: 0 Leader: 3 Replicas: 3,0,2,1 Isr: 3,0,2,1</span></span><br><span class=\"line\"><span class=\"comment\"># Topic: test-topic Partition: 1 Leader: 1 Replicas: 1,2,3,0 Isr: 1,2,3,0</span></span><br><span class=\"line\"><span class=\"comment\"># Topic: test-topic Partition: 2 Leader: 0 Replicas: 0,3,1,2 Isr: 0,3,1,2</span></span><br><span class=\"line\"><span class=\"comment\"># Topic: test-topic Partition: 3 Leader: 2 Replicas: 2,1,0,3 Isr: 2,1,0,3</span></span><br></pre></td></tr></table></figure></li>\n<li><strong>停止 kafka3 的进程，再查看 Leader 分区情况</strong><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Topic: test-topic Partition: 0 Leader: 0 Replicas: 3,0,2,1 Isr: 0,2,1</span></span><br><span class=\"line\"><span class=\"comment\"># Topic: test-topic Partition: 1 Leader: 1 Replicas: 1,2,3,0 Isr: 1,2,0</span></span><br><span class=\"line\"><span class=\"comment\"># Topic: test-topic Partition: 2 Leader: 0 Replicas: 0,3,1,2 Isr: 0,1,2</span></span><br><span class=\"line\"><span class=\"comment\"># Topic: test-topic Partition: 3 Leader: 2 Replicas: 2,1,0,3 Isr: 2,1,0</span></span><br></pre></td></tr></table></figure></li>\n<li><strong>停止 kafka2 的进程，再查看 Leader 分区情况</strong><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Topic: test-topic Partition: 0 Leader: 0 Replicas: 3,0,2,1 Isr: 0,1</span></span><br><span class=\"line\"><span class=\"comment\"># Topic: test-topic Partition: 1 Leader: 1 Replicas: 1,2,3,0 Isr: 1,0</span></span><br><span class=\"line\"><span class=\"comment\"># Topic: test-topic Partition: 2 Leader: 0 Replicas: 0,3,1,2 Isr: 0,1</span></span><br><span class=\"line\"><span class=\"comment\"># Topic: test-topic Partition: 3 Leader: 1 Replicas: 2,1,0,3 Isr: 1,0</span></span><br></pre></td></tr></table></figure></li>\n<li><strong>启动 kafka3 的进程，再查看 Leader 分区情况</strong><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Topic: test-topic Partition: 0 Leader: 0 Replicas: 3,0,2,1 Isr: 0,1,3</span></span><br><span class=\"line\"><span class=\"comment\"># Topic: test-topic Partition: 1 Leader: 1 Replicas: 1,2,3,0 Isr: 1,0,3</span></span><br><span class=\"line\"><span class=\"comment\"># Topic: test-topic Partition: 2 Leader: 0 Replicas: 0,3,1,2 Isr: 0,1,3</span></span><br><span class=\"line\"><span class=\"comment\"># Topic: test-topic Partition: 3 Leader: 1 Replicas: 2,1,0,3 Isr: 1,0,3</span></span><br></pre></td></tr></table></figure></li>\n<li><strong>启动 kafka2 的进程，再查看 Leader 分区情况</strong><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Topic: test-topic Partition: 0 Leader: 0 Replicas: 3,0,2,1 Isr: 0,1,3,2</span></span><br><span class=\"line\"><span class=\"comment\"># Topic: test-topic Partition: 1 Leader: 1 Replicas: 1,2,3,0 Isr: 1,0,3,2</span></span><br><span class=\"line\"><span class=\"comment\"># Topic: test-topic Partition: 2 Leader: 0 Replicas: 0,3,1,2 Isr: 0,1,3,2</span></span><br><span class=\"line\"><span class=\"comment\"># Topic: test-topic Partition: 3 Leader: 1 Replicas: 2,1,0,3 Isr: 1,0,3,2</span></span><br></pre></td></tr></table></figure></li>\n<li><strong>停止 kafka1 的进程，再查看 Leader 分区情况</strong><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Topic: test-topic Partition: 0 Leader: 0 Replicas: 3,0,2,1 Isr: 0,3,2</span></span><br><span class=\"line\"><span class=\"comment\"># Topic: test-topic Partition: 1 Leader: 2 Replicas: 1,2,3,0 Isr: 0,3,2</span></span><br><span class=\"line\"><span class=\"comment\"># Topic: test-topic Partition: 2 Leader: 0 Replicas: 0,3,1,2 Isr: 0,3,2</span></span><br><span class=\"line\"><span class=\"comment\"># Topic: test-topic Partition: 3 Leader: 2 Replicas: 2,1,0,3 Isr: 0,3,2</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<h5 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h5><ul>\n<li><code>Leader</code> 选举遵循 <code>ISR</code> 中存活副本，并优先选择 <code>Replicas</code> 列表中靠前的 Broker</li>\n</ul>\n<h4 id=\"Leader-故障处理\"><a href=\"#Leader-故障处理\" class=\"headerlink\" title=\"Leader 故障处理\"></a>Leader 故障处理</h4><img src=\"/Kafka/Kafka/Leader%E6%95%85%E9%9A%9C%E5%A4%84%E7%90%86.png\" class=\"\" title=\"Leader故障处理\">\n\n<h4 id=\"Follower-故障处理\"><a href=\"#Follower-故障处理\" class=\"headerlink\" title=\"Follower 故障处理\"></a>Follower 故障处理</h4><img src=\"/Kafka/Kafka/Follower%E6%95%85%E9%9A%9C%E5%A4%84%E7%90%86.png\" class=\"\" title=\"Follower故障处理\">\n\n<h4 id=\"分区副本分配\"><a href=\"#分区副本分配\" class=\"headerlink\" title=\"分区副本分配\"></a>分区副本分配</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 创建 16 分区，3 个副本</span></span><br><span class=\"line\">Topic: test-topic Partition: 0 Leader: 0 Replicas: 0,1,2 Isr: 0,1,2</span><br><span class=\"line\">Topic: test-topic Partition: 1 Leader: 1 Replicas: 1,2,3 Isr: 1,2,3</span><br><span class=\"line\">Topic: test-topic Partition: 2 Leader: 2 Replicas: 2,3,0 Isr: 2,3,0</span><br><span class=\"line\">Topic: test-topic Partition: 3 Leader: 3 Replicas: 3,0,1 Isr: 3,0,1</span><br><span class=\"line\"></span><br><span class=\"line\">Topic: test-topic Partition: 4 Leader: 0 Replicas: 0,2,3 Isr: 0,2,3</span><br><span class=\"line\">Topic: test-topic Partition: 5 Leader: 1 Replicas: 1,3,0 Isr: 1,3,0</span><br><span class=\"line\">Topic: test-topic Partition: 6 Leader: 2 Replicas: 2,0,1 Isr: 2,0,1</span><br><span class=\"line\">Topic: test-topic Partition: 7 Leader: 3 Replicas: 3,1,2 Isr: 3,1,2</span><br><span class=\"line\"></span><br><span class=\"line\">Topic: test-topic Partition: 8 Leader: 0 Replicas: 0,3,1 Isr: 0,3,1</span><br><span class=\"line\">Topic: test-topic Partition: 9 Leader: 1 Replicas: 1,0,2 Isr: 1,0,2</span><br><span class=\"line\">Topic: test-topic Partition: 10 Leader: 2 Replicas: 2,1,3 Isr: 2,1,3</span><br><span class=\"line\">Topic: test-topic Partition: 11 Leader: 3 Replicas: 3,2,0 Isr: 3,2,0</span><br><span class=\"line\"></span><br><span class=\"line\">Topic: test-topic Partition: 12 Leader: 0 Replicas: 0,1,2 Isr: 0,1,2</span><br><span class=\"line\">Topic: test-topic Partition: 13 Leader: 1 Replicas: 1,2,3 Isr: 1,2,3</span><br><span class=\"line\">Topic: test-topic Partition: 14 Leader: 2 Replicas: 2,3,0 Isr: 2,3,0</span><br><span class=\"line\">Topic: test-topic Partition: 15 Leader: 3 Replicas: 3,0,1 Isr: 3,0,1</span><br></pre></td></tr></table></figure>\n<h4 id=\"手动调整分区副本存储\"><a href=\"#手动调整分区副本存储\" class=\"headerlink\" title=\"手动调整分区副本存储\"></a>手动调整分区副本存储</h4><ul>\n<li><strong>当前分区副本存储</strong><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 创建一个新的topic，4个分区，2个副本</span></span><br><span class=\"line\">bin/kafka-topics.sh --bootstrap-server kafka0:9092 --create --topic test-topic --partitions 4 --replication-factor 2</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看分区副本存储情况</span></span><br><span class=\"line\">bin/kafka-topics.sh --bootstrap-server kafka0:9092 --describe --topic test-topic</span><br><span class=\"line\"><span class=\"comment\"># Topic: test-topic Partition: 0 Leader: 2 Replicas: 2,0 Isr: 2,0</span></span><br><span class=\"line\"><span class=\"comment\"># Topic: test-topic Partition: 1 Leader: 3 Replicas: 3,2 Isr: 3,2</span></span><br><span class=\"line\"><span class=\"comment\"># Topic: test-topic Partition: 2 Leader: 1 Replicas: 1,3 Isr: 1,3</span></span><br><span class=\"line\"><span class=\"comment\"># Topic: test-topic Partition: 3 Leader: 0 Replicas: 0,1 Isr: 0,1</span></span><br></pre></td></tr></table></figure></li>\n<li><strong>手动调整分区副本存储</strong><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># vim reassignment.json</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">&quot;version&quot;</span>: 1,</span><br><span class=\"line\">  <span class=\"string\">&quot;partitions&quot;</span>: [</span><br><span class=\"line\">    &#123;<span class=\"string\">&quot;topic&quot;</span>: <span class=\"string\">&quot;test-topic&quot;</span>, <span class=\"string\">&quot;partition&quot;</span>: 0, <span class=\"string\">&quot;replicas&quot;</span>: [0, 1]&#125;,</span><br><span class=\"line\">    &#123;<span class=\"string\">&quot;topic&quot;</span>: <span class=\"string\">&quot;test-topic&quot;</span>, <span class=\"string\">&quot;partition&quot;</span>: 1, <span class=\"string\">&quot;replicas&quot;</span>: [0, 1]&#125;,</span><br><span class=\"line\">    &#123;<span class=\"string\">&quot;topic&quot;</span>: <span class=\"string\">&quot;test-topic&quot;</span>, <span class=\"string\">&quot;partition&quot;</span>: 2, <span class=\"string\">&quot;replicas&quot;</span>: [1, 0]&#125;,</span><br><span class=\"line\">    &#123;<span class=\"string\">&quot;topic&quot;</span>: <span class=\"string\">&quot;test-topic&quot;</span>, <span class=\"string\">&quot;partition&quot;</span>: 3, <span class=\"string\">&quot;replicas&quot;</span>: [1, 0]&#125;,</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 执行重新分配</span></span><br><span class=\"line\">bin/kafka-reassign-partitions.sh --bootstrap-server kafka0:9092 --reassignment-json-file reassignment.json --execute</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 验证重新分配</span></span><br><span class=\"line\">bin/kafka-reassign-partitions.sh --bootstrap-server kafka0:9092 --reassignment-json-file reassignment.json --verify</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看分区副本存储情况</span></span><br><span class=\"line\">bin/kafka-topics.sh --bootstrap-server kafka0:9092 --describe --topic test-topic</span><br><span class=\"line\"><span class=\"comment\"># Topic: test-topic Partition: 0 Leader: 0 Replicas: 0,1 Isr: 0,1</span></span><br><span class=\"line\"><span class=\"comment\"># Topic: test-topic Partition: 1 Leader: 0 Replicas: 0,1 Isr: 1,0</span></span><br><span class=\"line\"><span class=\"comment\"># Topic: test-topic Partition: 2 Leader: 1 Replicas: 1,0 Isr: 1,0</span></span><br><span class=\"line\"><span class=\"comment\"># Topic: test-topic Partition: 3 Leader: 0 Replicas: 1,0 Isr: 0,1</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<h4 id=\"Leader-Partition-负载平衡\"><a href=\"#Leader-Partition-负载平衡\" class=\"headerlink\" title=\"Leader Partition 负载平衡\"></a>Leader Partition 负载平衡</h4><img src=\"/Kafka/Kafka/LeaderPartition%E8%87%AA%E5%8A%A8%E5%B9%B3%E8%A1%A1.png\" class=\"\" title=\"LeaderPartition自动平衡\">\n\n<h4 id=\"增加副本因子\"><a href=\"#增加副本因子\" class=\"headerlink\" title=\"增加副本因子\"></a>增加副本因子</h4><ul>\n<li><strong>当前分区副本存储</strong><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 创建一个新的topic，4个分区，2个副本</span></span><br><span class=\"line\">bin/kafka-topics.sh --bootstrap-server kafka0:9092 --create --topic test-topic --partitions 4 --replication-factor 2</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看分区副本存储情况</span></span><br><span class=\"line\">bin/kafka-topics.sh --bootstrap-server kafka0:9092 --describe --topic test-topic</span><br><span class=\"line\"><span class=\"comment\"># Topic: test-topic Partition: 0 Leader: 2 Replicas: 2,0 Isr: 2,0</span></span><br><span class=\"line\"><span class=\"comment\"># Topic: test-topic Partition: 1 Leader: 3 Replicas: 3,2 Isr: 3,2</span></span><br><span class=\"line\"><span class=\"comment\"># Topic: test-topic Partition: 2 Leader: 1 Replicas: 1,3 Isr: 1,3</span></span><br><span class=\"line\"><span class=\"comment\"># Topic: test-topic Partition: 3 Leader: 0 Replicas: 0,1 Isr: 0,1</span></span><br></pre></td></tr></table></figure></li>\n<li><strong>手动调整分区副本存储</strong><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># vim reassignment.json</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">&quot;version&quot;</span>: 1,</span><br><span class=\"line\">  <span class=\"string\">&quot;partitions&quot;</span>: [</span><br><span class=\"line\">    &#123;<span class=\"string\">&quot;topic&quot;</span>: <span class=\"string\">&quot;test-topic&quot;</span>, <span class=\"string\">&quot;partition&quot;</span>: 0, <span class=\"string\">&quot;replicas&quot;</span>: [2, 0, 1]&#125;,</span><br><span class=\"line\">    &#123;<span class=\"string\">&quot;topic&quot;</span>: <span class=\"string\">&quot;test-topic&quot;</span>, <span class=\"string\">&quot;partition&quot;</span>: 1, <span class=\"string\">&quot;replicas&quot;</span>: [3, 2, 0]&#125;,</span><br><span class=\"line\">    &#123;<span class=\"string\">&quot;topic&quot;</span>: <span class=\"string\">&quot;test-topic&quot;</span>, <span class=\"string\">&quot;partition&quot;</span>: 2, <span class=\"string\">&quot;replicas&quot;</span>: [1, 3, 2]&#125;,</span><br><span class=\"line\">    &#123;<span class=\"string\">&quot;topic&quot;</span>: <span class=\"string\">&quot;test-topic&quot;</span>, <span class=\"string\">&quot;partition&quot;</span>: 3, <span class=\"string\">&quot;replicas&quot;</span>: [0, 1, 3]&#125;</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 执行重新分配</span></span><br><span class=\"line\">bin/kafka-reassign-partitions.sh --bootstrap-server kafka0:9092 --reassignment-json-file reassignment.json --execute</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 验证重新分配</span></span><br><span class=\"line\">bin/kafka-reassign-partitions.sh --bootstrap-server kafka0:9092 --reassignment-json-file reassignment.json --verify</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看分区副本存储情况</span></span><br><span class=\"line\">bin/kafka-topics.sh --bootstrap-server kafka0:9092 --describe --topic test-topic</span><br><span class=\"line\"><span class=\"comment\"># Topic: test-topic Partition: 0 Leader: 2 Replicas: 2,0,1 Isr: 2,0,1</span></span><br><span class=\"line\"><span class=\"comment\"># Topic: test-topic Partition: 1 Leader: 3 Replicas: 3,2,0 Isr: 3,2,0</span></span><br><span class=\"line\"><span class=\"comment\"># Topic: test-topic Partition: 2 Leader: 1 Replicas: 1,3,2 Isr: 1,3,2</span></span><br><span class=\"line\"><span class=\"comment\"># Topic: test-topic Partition: 3 Leader: 0 Replicas: 0,1,3 Isr: 0,1,3</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"文件存储\"><a href=\"#文件存储\" class=\"headerlink\" title=\"文件存储\"></a>文件存储</h3><h4 id=\"文件存储机制\"><a href=\"#文件存储机制\" class=\"headerlink\" title=\"文件存储机制\"></a>文件存储机制</h4><img src=\"/Kafka/Kafka/%E6%96%87%E4%BB%B6%E5%AD%98%E5%82%A8%E6%9C%BA%E5%88%B6.png\" class=\"\" title=\"文件存储机制\">\n\n<h4 id=\"文件存储详解\"><a href=\"#文件存储详解\" class=\"headerlink\" title=\"文件存储详解\"></a>文件存储详解</h4><img src=\"/Kafka/Kafka/%E6%96%87%E4%BB%B6%E5%AD%98%E5%82%A8%E8%AF%A6%E8%A7%A3.png\" class=\"\" title=\"文件存储详解\">\n\n<h4 id=\"文件清理策略\"><a href=\"#文件清理策略\" class=\"headerlink\" title=\"文件清理策略\"></a>文件清理策略</h4><ul>\n<li><strong>日志保存时间：(默认 7 天)</strong><ul>\n<li><code>log.retention.hours</code> 以小时为单位，默认值为7天，最低优先级。</li>\n<li><code>log.retention.minutes</code> 以分钟为单位。</li>\n<li><code>log.retention.ms</code> 以毫秒为单位，最高优先级。</li>\n<li><code>log.retention.check.interval.ms</code> 日志清理检查周期，默认5分钟，用于定期检查日志是否需要清理。</li>\n</ul>\n</li>\n<li><strong>日志清理策略：</strong><ul>\n<li><code>log.cleanup.policy=delete</code> 日志删除，将过期数据删除。<ul>\n<li>基于时间：默认打开。以 segment 中所有记录中的最大时间戳作为该文件时间戳。</li>\n<li>基于大小：默认关闭。超过设置的所有日志总大小，删除最早的 segment。 <code>log.retention.bytes</code> 默认等于-1，表示无穷大。</li>\n</ul>\n</li>\n<li><code>log.cleanup.policy=compact</code> 日志压缩，针对相同key的不同value值，只保留最后一个版本。<img src=\"/Kafka/Kafka/compact%E6%97%A5%E5%BF%97%E5%8E%8B%E7%BC%A9.png\" class=\"\" title=\"compact日志压缩\"></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"高效读写数据\"><a href=\"#高效读写数据\" class=\"headerlink\" title=\"高效读写数据\"></a>高效读写数据</h3><ul>\n<li>Kafka 本身是分布式集群，可以采用分区技术，并行度高</li>\n<li>读数据采用稀疏索引，可以快速定位要消费的数据</li>\n<li>顺序写磁盘<img src=\"/Kafka/Kafka/%E9%A1%BA%E5%BA%8F%E5%86%99%E7%A3%81%E7%9B%98.png\" class=\"\" title=\"顺序写磁盘\"></li>\n<li>页缓存 + 零拷贝技术<img src=\"/Kafka/Kafka/%E9%A1%B5%E7%BC%93%E5%AD%98+%E9%9B%B6%E6%8B%B7%E8%B4%9D%E6%8A%80%E6%9C%AF.png\" class=\"\" title=\"页缓存+零拷贝技术\"></li>\n</ul>\n<h2 id=\"消费者-3\"><a href=\"#消费者-3\" class=\"headerlink\" title=\"消费者\"></a>消费者</h2><h3 id=\"消费方式\"><a href=\"#消费方式\" class=\"headerlink\" title=\"消费方式\"></a>消费方式</h3><img src=\"/Kafka/Kafka/%E6%B6%88%E8%B4%B9%E6%96%B9%E5%BC%8F.png\" class=\"\" title=\"消费方式\">\n\n<h3 id=\"工作流程-1\"><a href=\"#工作流程-1\" class=\"headerlink\" title=\"工作流程\"></a>工作流程</h3><img src=\"/Kafka/Kafka/%E6%B6%88%E8%B4%B9%E8%80%85%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B.png\" class=\"\" title=\"消费者工作流程\">\n\n<h3 id=\"消费者组原理\"><a href=\"#消费者组原理\" class=\"headerlink\" title=\"消费者组原理\"></a>消费者组原理</h3><h4 id=\"消费者组-1\"><a href=\"#消费者组-1\" class=\"headerlink\" title=\"消费者组\"></a>消费者组</h4><img src=\"/Kafka/Kafka/%E6%B6%88%E8%B4%B9%E8%80%85%E7%BB%84.png\" class=\"\" title=\"消费者组\">\n\n<h4 id=\"组初始化流程\"><a href=\"#组初始化流程\" class=\"headerlink\" title=\"组初始化流程\"></a>组初始化流程</h4><img src=\"/Kafka/Kafka/%E6%B6%88%E8%B4%B9%E8%80%85%E7%BB%84%E5%88%9D%E5%A7%8B%E5%8C%96%E6%B5%81%E7%A8%8B.png\" class=\"\" title=\"消费者组初始化流程\">\n\n<h4 id=\"组详细消费流程\"><a href=\"#组详细消费流程\" class=\"headerlink\" title=\"组详细消费流程\"></a>组详细消费流程</h4><img src=\"/Kafka/Kafka/%E6%B6%88%E8%B4%B9%E8%80%85%E7%BB%84%E8%AF%A6%E7%BB%86%E6%B6%88%E8%B4%B9%E6%B5%81%E7%A8%8B.png\" class=\"\" title=\"消费者组详细消费流程\">\n\n<h3 id=\"消费者-API\"><a href=\"#消费者-API\" class=\"headerlink\" title=\"消费者 API\"></a>消费者 API</h3><h4 id=\"订阅主题\"><a href=\"#订阅主题\" class=\"headerlink\" title=\"订阅主题\"></a>订阅主题</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Properties</span> <span class=\"variable\">properties</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Properties</span>();</span><br><span class=\"line\"><span class=\"comment\">// 给 kafka 配置对象添加配置信息：bootstrap.servers</span></span><br><span class=\"line\">properties.put(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG, <span class=\"string\">&quot;127.0.0.1:9092&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// key,value 序列化（必须）：key.serializer，value.serializer</span></span><br><span class=\"line\">properties.put(ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG, StringDeserializer.class.getName());</span><br><span class=\"line\">properties.put(ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG, StringDeserializer.class.getName());</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 配置消费者组（组名任意起名）</span></span><br><span class=\"line\">properties.put(ConsumerConfig.GROUP_ID_CONFIG, <span class=\"string\">&quot;test-group&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">KafkaConsumer&lt;String, String&gt; kafkaConsumer = <span class=\"keyword\">new</span> <span class=\"title class_\">KafkaConsumer</span>&lt;&gt;(properties);</span><br><span class=\"line\"><span class=\"comment\">// 注册要消费主题</span></span><br><span class=\"line\">ArrayList&lt;String&gt; topics = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">topics.add(<span class=\"string\">&quot;test-topic&quot;</span>);</span><br><span class=\"line\">kafkaConsumer.subscribe(topics);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 设置 1s 中消费一批数据</span></span><br><span class=\"line\">    ConsumerRecords&lt;String, String&gt; records = kafkaConsumer.poll(Duration.ofSeconds(<span class=\"number\">1</span>));</span><br><span class=\"line\">    records.forEach(System.out::println);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"订阅分区\"><a href=\"#订阅分区\" class=\"headerlink\" title=\"订阅分区\"></a>订阅分区</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Properties</span> <span class=\"variable\">properties</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Properties</span>();</span><br><span class=\"line\"><span class=\"comment\">// 给 kafka 配置对象添加配置信息：bootstrap.servers</span></span><br><span class=\"line\">properties.put(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG, <span class=\"string\">&quot;127.0.0.1:9092&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// key,value 序列化（必须）：key.serializer，value.serializer</span></span><br><span class=\"line\">properties.put(ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG, StringDeserializer.class.getName());</span><br><span class=\"line\">properties.put(ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG, StringDeserializer.class.getName());</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 配置消费者组（组名任意起名）</span></span><br><span class=\"line\">properties.put(ConsumerConfig.GROUP_ID_CONFIG, <span class=\"string\">&quot;test-group&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">KafkaConsumer&lt;String, String&gt; kafkaConsumer = <span class=\"keyword\">new</span> <span class=\"title class_\">KafkaConsumer</span>&lt;&gt;(properties);</span><br><span class=\"line\"><span class=\"comment\">// 消费某个主题的某个分区数据</span></span><br><span class=\"line\">ArrayList&lt;TopicPartition&gt; topicPartitions = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">topicPartitions.add(<span class=\"keyword\">new</span> <span class=\"title class_\">TopicPartition</span>(<span class=\"string\">&quot;test-topic&quot;</span>, <span class=\"number\">0</span>));</span><br><span class=\"line\">kafkaConsumer.assign(topicPartitions);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 设置 1s 中消费一批数据</span></span><br><span class=\"line\">    ConsumerRecords&lt;String, String&gt; records = kafkaConsumer.poll(Duration.ofSeconds(<span class=\"number\">1</span>));</span><br><span class=\"line\">    records.forEach(System.out::println);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"分区的分配以及再平衡\"><a href=\"#分区的分配以及再平衡\" class=\"headerlink\" title=\"分区的分配以及再平衡\"></a>分区的分配以及再平衡</h3><img src=\"/Kafka/Kafka/%E5%88%86%E5%8C%BA%E7%9A%84%E5%88%86%E9%85%8D%E4%BB%A5%E5%8F%8A%E5%86%8D%E5%B9%B3%E8%A1%A1.png\" class=\"\" title=\"分区的分配以及再平衡\">\n\n<h4 id=\"Range-范围分配\"><a href=\"#Range-范围分配\" class=\"headerlink\" title=\"Range 范围分配\"></a>Range 范围分配</h4><ul>\n<li><strong>描述：</strong> 将主题的分区按顺序分配给消费者。每个消费者负责一部分连续的分区。</li>\n<li><strong>场景：</strong> 7 个分区，3 个消费者，初始分配。<ul>\n<li><strong>分配逻辑：</strong> 分区按编号排序，平均分配给消费者。7 ÷ 3 &#x3D; 2 个分区余 1，余下的分区分配给前面的消费者。</li>\n<li><strong>分配结果：</strong><ul>\n<li>C1: [P0, P1, P2]（3 个分区）</li>\n<li>C2: [P3, P4]（2 个分区）</li>\n<li>C3: [P5, P6]（2 个分区）</li>\n</ul>\n</li>\n<li><strong>说明：</strong> 分区按顺序分成连续的块，C1 多分配一个分区以处理余数。</li>\n<li><strong>重新平衡（假设 C3 离开）：</strong><ul>\n<li>C1: [P0, P1, P2, P5]</li>\n<li>C2: [P3, P4, P6]</li>\n</ul>\n</li>\n<li><strong>说明：</strong> C3 的分区 [P5, P6] 被重新分配，C1 和 C2 的原有分区可能被调整，重新分配开销较大。</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"RoundRobin-轮询分配\"><a href=\"#RoundRobin-轮询分配\" class=\"headerlink\" title=\"RoundRobin 轮询分配\"></a>RoundRobin 轮询分配</h4><ul>\n<li><strong>描述：</strong> 按轮询方式将分区逐一分配给消费者。</li>\n<li><strong>场景：</strong> 7 个分区，3 个消费者，初始分配。<ul>\n<li><strong>分配逻辑：</strong> 分区按编号顺序逐一轮询分配给消费者。</li>\n<li><strong>分配结果：</strong><ul>\n<li>C1: [P0, P3, P6]</li>\n<li>C2: [P1, P4]</li>\n<li>C3: [P2, P5]</li>\n</ul>\n</li>\n<li><strong>说明：</strong> 分区被均匀分配，C1 多分配一个分区以处理余数，分区分配不连续。</li>\n<li><strong>重新平衡（假设 C3 离开）：</strong><ul>\n<li>C1: [P0, P3, P6, P2]</li>\n<li>C2: [P1, P4, P5]</li>\n</ul>\n</li>\n<li><strong>说明：</strong> C3 的分区 [P2, P5] 被重新分配，所有分区可能重新洗牌，开销较高。</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"Sticky-粘性分配\"><a href=\"#Sticky-粘性分配\" class=\"headerlink\" title=\"Sticky 粘性分配\"></a>Sticky 粘性分配</h4><ul>\n<li><strong>描述：</strong> 在保证分配均匀的基础上，尽量保留之前的分配结果，减少分区重新分配。</li>\n<li><strong>场景：</strong> 7 个分区，3 个消费者，初始分配。<ul>\n<li><strong>分配逻辑：</strong> 类似轮询分配，但记录分配状态，尽量保留之前的分配。</li>\n<li><strong>分配结果（假设随机初始分配）：</strong><ul>\n<li>C1: [P0, P3, P6]</li>\n<li>C2: [P1, P4]</li>\n<li>C3: [P2, P5]</li>\n</ul>\n</li>\n<li><strong>重新平衡（假设 C3 离开）：</strong><ul>\n<li>C1: [P0, P3, P6, P2]</li>\n<li>C2: [P1, P4, P5]</li>\n</ul>\n</li>\n<li><strong>说明：</strong> C3 的分区 [P2, P5] 被分配给 C1 和 C2，但 C1 的 [P0, P3, P6] 和 C2 的 [P1, P4] 保持不变，减少了重新分配的开销。</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"CooperativeSticky-协作粘性分配\"><a href=\"#CooperativeSticky-协作粘性分配\" class=\"headerlink\" title=\"CooperativeSticky 协作粘性分配\"></a>CooperativeSticky 协作粘性分配</h4><ul>\n<li><strong>描述：</strong> 粘性分配策略的改进版，采用协作式重新平衡机制，避免“停止世界”（stop-the-world）式重新分配。</li>\n<li><strong>场景：</strong> 7 个分区，3 个消费者，初始分配。<ul>\n<li><strong>分配逻辑：</strong> 与 Sticky 类似，但重新平衡时消费者通过协作逐步调整分区分配，避免一次性停止所有消费者。</li>\n<li><strong>分配结果（初始分配同 Sticky）：</strong><ul>\n<li>C1: [P0, P3, P6]</li>\n<li>C2: [P1, P4]</li>\n<li>C3: [P2, P5]</li>\n</ul>\n</li>\n<li><strong>重新平衡（假设 C3 离开）：</strong><ul>\n<li><strong>步骤 1：</strong> C3 释放 [P2, P5]，C1 和 C2 协商接收。</li>\n<li><strong>步骤 2：</strong> C1 接收 P2，C2 接收 P5。</li>\n<li><strong>最终结果：</strong><ul>\n<li>C1: [P0, P3, P6, P2]</li>\n<li>C2: [P1, P4, P5]</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><strong>说明：</strong> 与 Sticky 的结果相同，但重新平衡过程是增量的，C1 和 C2 在不停止消费的情况下逐步接管 C3 的分区，减少服务中断时间。</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"总结对比\"><a href=\"#总结对比\" class=\"headerlink\" title=\"总结对比\"></a>总结对比</h4><table>\n<thead>\n<tr>\n<th>策略</th>\n<th>负载均衡性</th>\n<th>重新分配开销</th>\n<th>稳定性</th>\n<th>适用场景</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Range</td>\n<td>一般</td>\n<td>高</td>\n<td>高</td>\n<td>简单场景，分区数固定</td>\n</tr>\n<tr>\n<td>RoundRobin</td>\n<td>好</td>\n<td>高</td>\n<td>低</td>\n<td>追求均匀分配，稳定性要求不高</td>\n</tr>\n<tr>\n<td>Sticky</td>\n<td>好</td>\n<td>低</td>\n<td>高</td>\n<td>负载均衡且需最小化重新分配</td>\n</tr>\n<tr>\n<td>CooperativeSticky</td>\n<td>好</td>\n<td>最低</td>\n<td>高</td>\n<td>高可用性，动态消费者组场景</td>\n</tr>\n</tbody></table>\n<h3 id=\"offset-位移\"><a href=\"#offset-位移\" class=\"headerlink\" title=\"offset 位移\"></a>offset 位移</h3><h4 id=\"offset-默认维护位置\"><a href=\"#offset-默认维护位置\" class=\"headerlink\" title=\"offset 默认维护位置\"></a>offset 默认维护位置</h4><img src=\"/Kafka/Kafka/offset%E9%BB%98%E8%AE%A4%E7%BB%B4%E6%8A%A4%E4%BD%8D%E7%BD%AE.png\" class=\"\" title=\"offset默认维护位置\">\n\n<h4 id=\"自动提交-Offset\"><a href=\"#自动提交-Offset\" class=\"headerlink\" title=\"自动提交 Offset\"></a>自动提交 Offset</h4><ul>\n<li><strong>描述：</strong> 消费者定期自动提交 offset 到 __consumer_offsets 主题。</li>\n<li><strong>配置：</strong> <code>enable.auto.commit=true, auto.commit.interval.ms=5000</code>（默认 5 秒）。</li>\n<li><strong>优点：</strong> 简单，无需手动代码。</li>\n<li><strong>缺点：</strong> 可能丢失消息（处理未完成但提交）或重复消费（崩溃后从旧 offset 消费）。</li>\n<li><strong>适用场景：</strong> 低可靠性要求，如日志收集。</li>\n</ul>\n<h4 id=\"手动提交-Offset\"><a href=\"#手动提交-Offset\" class=\"headerlink\" title=\"手动提交 Offset\"></a>手动提交 Offset</h4><ul>\n<li><strong>描述：</strong> 开发者手动调用 API 提交 offset，控制提交时机。</li>\n<li><strong>配置：</strong> <code>enable.auto.commit=false</code>。</li>\n<li><strong>方式：</strong><ul>\n<li>同步提交（<code>commitSync()</code>）：阻塞，确保持久化，高可靠性。</li>\n<li>异步提交（<code>commitAsync()</code>）：非阻塞，性能高，但可能失败导致重复消费。</li>\n</ul>\n</li>\n<li><strong>优点：</strong> 精确控制，适合高一致性场景。</li>\n<li><strong>缺点：</strong> 实现复杂，同步提交降低吞吐量。</li>\n<li><strong>适用场景：</strong> 金融、订单处理等需严格一致性。</li>\n</ul>\n<h4 id=\"指定-Offset-消费\"><a href=\"#指定-Offset-消费\" class=\"headerlink\" title=\"指定 Offset 消费\"></a>指定 Offset 消费</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Properties</span> <span class=\"variable\">properties</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Properties</span>();</span><br><span class=\"line\"><span class=\"comment\">// 配置 bootstrap.servers</span></span><br><span class=\"line\">properties.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, <span class=\"string\">&quot;127.0.0.1:9092&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 配置 key,value 序列化</span></span><br><span class=\"line\">properties.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, <span class=\"string\">&quot;org.apache.kafka.common.serialization.StringSerializer&quot;</span>);</span><br><span class=\"line\">properties.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, <span class=\"string\">&quot;org.apache.kafka.common.serialization.StringSerializer&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 配置消费者组</span></span><br><span class=\"line\">properties.put(ConsumerConfig.GROUP_ID_CONFIG, <span class=\"string\">&quot;test-group&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">KafkaConsumer&lt;String, String&gt; kafkaConsumer = <span class=\"keyword\">new</span> <span class=\"title class_\">KafkaConsumer</span>&lt;&gt;(properties);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 订阅主题</span></span><br><span class=\"line\">ArrayList&lt;String&gt; topics = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">topics.add(<span class=\"string\">&quot;test-topic&quot;</span>);</span><br><span class=\"line\">kafkaConsumer.subscribe(topics);</span><br><span class=\"line\"></span><br><span class=\"line\">Set&lt;TopicPartition&gt; assignment = kafkaConsumer.assignment();</span><br><span class=\"line\"><span class=\"comment\">// 保证分区分配方案已经制定完毕</span></span><br><span class=\"line\"><span class=\"keyword\">while</span> (assignment.size() == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    kafkaConsumer.poll(Duration.ofSeconds(<span class=\"number\">1</span>));</span><br><span class=\"line\">    assignment = kafkaConsumer.assignment();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 指定消费的 offset</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (TopicPartition partition: assignment) &#123;</span><br><span class=\"line\">    kafkaConsumer.seek(partition, <span class=\"number\">600</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">    ConsumerRecords&lt;String, String&gt; records = kafkaConsumer.poll(Duration.ofSeconds(<span class=\"number\">1</span>));</span><br><span class=\"line\">    records.forEach(System.out::println);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"指定时间消费\"><a href=\"#指定时间消费\" class=\"headerlink\" title=\"指定时间消费\"></a>指定时间消费</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Properties</span> <span class=\"variable\">properties</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Properties</span>();</span><br><span class=\"line\"><span class=\"comment\">// 给 kafka 配置对象添加配置信息：bootstrap.servers</span></span><br><span class=\"line\">properties.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, <span class=\"string\">&quot;127.0.0.1:9092&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// key,value 序列化（必须）：key.serializer，value.serializer</span></span><br><span class=\"line\">properties.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, <span class=\"string\">&quot;org.apache.kafka.common.serialization.StringSerializer&quot;</span>);</span><br><span class=\"line\">properties.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, <span class=\"string\">&quot;org.apache.kafka.common.serialization.StringSerializer&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 配置消费者组</span></span><br><span class=\"line\">properties.put(ConsumerConfig.GROUP_ID_CONFIG, <span class=\"string\">&quot;test-group&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">KafkaConsumer&lt;String, String&gt; kafkaConsumer = <span class=\"keyword\">new</span> <span class=\"title class_\">KafkaConsumer</span>&lt;&gt;(properties);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 订阅主题</span></span><br><span class=\"line\">ArrayList&lt;String&gt; topics = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">topics.add(<span class=\"string\">&quot;test-topic&quot;</span>);</span><br><span class=\"line\">kafkaConsumer.subscribe(topics);</span><br><span class=\"line\"></span><br><span class=\"line\">Set&lt;TopicPartition&gt; assignment = <span class=\"keyword\">new</span> <span class=\"title class_\">HashSet</span>&lt;&gt;();</span><br><span class=\"line\"><span class=\"comment\">// 保证分区分配方案已经制定完毕</span></span><br><span class=\"line\"><span class=\"keyword\">while</span> (assignment.size() == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    kafkaConsumer.poll(Duration.ofSeconds(<span class=\"number\">1</span>));</span><br><span class=\"line\">    assignment = kafkaConsumer.assignment();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 获取 1 天前开始消费的每个分区的 offset</span></span><br><span class=\"line\">HashMap&lt;TopicPartition, Long&gt; timestampToSearch = <span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>&lt;&gt;();</span><br><span class=\"line\"><span class=\"keyword\">for</span> (TopicPartition partition : assignment) &#123;</span><br><span class=\"line\">    timestampToSearch.put(partition, System.currentTimeMillis() - <span class=\"number\">1</span> * <span class=\"number\">24</span> * <span class=\"number\">3600</span> * <span class=\"number\">1000</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Map&lt;TopicPartition, OffsetAndTimestamp&gt; offsets = kafkaConsumer.offsetsForTimes(timestampToSearch);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 根据时间指定开始消费的位置</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (TopicPartition partition : assignment) &#123;</span><br><span class=\"line\">    <span class=\"type\">OffsetAndTimestamp</span> <span class=\"variable\">offsetAndTimestamp</span> <span class=\"operator\">=</span> offsets.get(partition);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (offsetAndTimestamp != <span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">        kafkaConsumer.seek(partition, offsetAndTimestamp.offset());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">    ConsumerRecords&lt;String, String&gt; records = kafkaConsumer.poll(Duration.ofSeconds(<span class=\"number\">1</span>));</span><br><span class=\"line\">    records.forEach(System.out::println);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"重复消费和漏消费\"><a href=\"#重复消费和漏消费\" class=\"headerlink\" title=\"重复消费和漏消费\"></a>重复消费和漏消费</h4><img src=\"/Kafka/Kafka/%E9%87%8D%E5%A4%8D%E6%B6%88%E8%B4%B9%E4%B8%8E%E6%BC%8F%E6%B6%88%E8%B4%B9.png\" class=\"\" title=\"重复消费与漏消费\">\n\n<h3 id=\"数据积压\"><a href=\"#数据积压\" class=\"headerlink\" title=\"数据积压\"></a>数据积压</h3><img src=\"/Kafka/Kafka/%E6%95%B0%E6%8D%AE%E7%A7%AF%E5%8E%8B.png\" class=\"\" title=\"数据积压\">\n\n\n<h2 id=\"配置及调优\"><a href=\"#配置及调优\" class=\"headerlink\" title=\"配置及调优\"></a>配置及调优</h2><h3 id=\"硬件配置选择\"><a href=\"#硬件配置选择\" class=\"headerlink\" title=\"硬件配置选择\"></a>硬件配置选择</h3><ul>\n<li><p><strong>场景</strong></p>\n<blockquote>\n<p>100万日活 * 每人每天产生100条日志 &#x3D; 1亿条 （中型公司）<br>每秒处理日志速度：1亿条 &#x2F; (24 * 3600s) &#x3D; 1150条&#x2F;s<br>每秒处理日志大小：1条日志1KB，1150条 * 1KB&#x2F;s &#x3D; 1MB&#x2F;s<br>高峰期：20倍-40倍，1MB&#x2F;s * 20倍 &#x3D; 20MB&#x2F;s</p>\n</blockquote>\n</li>\n<li><p><strong>服务器数量选择</strong><br>公式：<code>2 * (峰值吞吐量 * 副本数 / 100) + 1 = 服务器台数</code></p>\n<blockquote>\n<p>2 * (20MB&#x2F;s * 2 &#x2F; 100) + 1 &#x3D; 3台</p>\n<p>注：(20MB&#x2F;s * 2 &#x2F; 100) &#x3D; 0.4，小于1的都算1</p>\n</blockquote>\n</li>\n<li><p><strong>磁盘选择</strong></p>\n<blockquote>\n<p>1亿条 * 1KB &#x3D; 100GB<br>100GB * 2(副本数) * 3天(保存天数) &#x2F; 0.7(预留30%的内存) ≈ 1TB<br>建议3台服务器总的磁盘大小 &gt;&#x3D; 1TB</p>\n</blockquote>\n</li>\n<li><p><strong>内存选择</strong><br>公式：<code>kafka内存  = 堆内存(kafka内部配置) + 页缓存(服务器内存)</code></p>\n<blockquote>\n<p>堆内存：一般10GB - 15GB，（可 jmap 命令查看内存使用再调整）<br>页缓存：segment(默认1GB)，(分区数Leader * 1GB * 25%) &#x2F; 服务器台数</p>\n<p>10个分区 * 1GB * 25% &#x3D; 2.5GB；2.5GB &#x2F; 服务器台数 ≈ 1GB<br>建议每台服务器内存大小 &#x3D; 堆内存10GB + 页缓存1GB</p>\n</blockquote>\n</li>\n<li><p><strong>CPU选择</strong><br><code>num.io.threads</code> 负责写磁盘的线程数，核数的50%。<br><code>num.replica.fetchers</code> 副本拉取线程数，核数的50%的1&#x2F;3。<br><code>num.network.threads</code> 数据传输线程数，核数的50%的2&#x2F;3。</p>\n<blockquote>\n<p>num.io.threads 占50% &#x3D; 12个CPU<br>num.replica.fetchers 占50%的1&#x2F;3 &#x3D; 4个CPU<br>num.network.threads 占50%的2&#x2F;3 &#x3D; 8个CPU<br>建议32个CPU核数 &#x3D; 以上3个线程数（24个CPU） + 其他线程数（8个CPU）</p>\n</blockquote>\n</li>\n<li><p><strong>网络选择</strong></p>\n<blockquote>\n<p>100Mbps单位是bit；10M&#x2F;s单位是byte; 1byte &#x3D; 8bit，100Mbps&#x2F;8 &#x3D; 12.5M&#x2F;s<br>一般百兆网卡（100Mbps）、千兆网卡（1000Mbps）、万兆网卡（10000Mbps）<br>建议千兆网卡 &gt; 峰值吞吐量20MB&#x2F;s</p>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"合理设置分区数\"><a href=\"#合理设置分区数\" class=\"headerlink\" title=\"合理设置分区数\"></a>合理设置分区数</h3><blockquote>\n<p>创建一个只有 1 个分区的 Topic。<br>测试 Topic 的 Producer 吞吐量 (Tp) 和 Consumer 吞吐量 (Tc)，单位为 MB&#x2F;s。<br>根据目标总吞吐量 Tt（单位：MB&#x2F;s），计算所需分区数：<code>分区数 = Tt / min(Tp, Tc)</code>。<br>分区数一般设置为：3 - 10个，而不是越多或越少越好，需要搭建完集群，进行压测，再灵活调整分区个数。</p>\n</blockquote>\n<figure class=\"highlight text\"><table><tr><td class=\"code\"><pre><span class=\"line\">如：</span><br><span class=\"line\">Producer 吞吐量 (Tp) = 20 MB/s</span><br><span class=\"line\">Consumer 吞吐量 (Tc) = 50 MB/s</span><br><span class=\"line\">目标吞吐量 (Tt) = 100 MB/s</span><br><span class=\"line\"></span><br><span class=\"line\">分区数 = 100 / min(20, 50) = 100 / 20 = 5 个分区</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"压力测试（官方自带脚本）\"><a href=\"#压力测试（官方自带脚本）\" class=\"headerlink\" title=\"压力测试（官方自带脚本）\"></a>压力测试（官方自带脚本）</h3><h4 id=\"kafka-producer-perf-test-sh\"><a href=\"#kafka-producer-perf-test-sh\" class=\"headerlink\" title=\"kafka-producer-perf-test.sh\"></a>kafka-producer-perf-test.sh</h4><ul>\n<li><strong>常用参数：</strong> <ul>\n<li><code>--topic &lt;TOPIC&gt;</code> 指定发送消息的目标 Kafka 主题（必填）。</li>\n<li><code>--num-records &lt;Long&gt;</code> 指定发送的总消息数，默认值为 Long.MAX_VALUE。</li>\n<li><code>--record-size &lt;Integer&gt;</code> 每条消息的大小（字节），默认值为 100。</li>\n<li><code>--throughput &lt;Integer&gt;</code> 最大吞吐量（消息&#x2F;秒），用于限制发送速率，-1 表示无限制（默认）。</li>\n<li><code>--producer-props &lt;PROP-NAME=PROP-VALUE ...&gt;</code> 生产者配置项（如 bootstrap.servers、acks、compression.type 等）。</li>\n<li><code>--producer.config &lt;CONFIG-FILE&gt;</code> 指定生产者配置文件路径（如 producer.properties），包含生产者配置。</li>\n<li><code>--payload-file &lt;PAYLOAD-FILE&gt;</code> 指定包含消息内容的 UTF-8 编码文本文件，消息从文件中随机选取。不能与 –record-size 同时使用。</li>\n<li><code>--payload-delimiter &lt;DELIMITER&gt;</code> 指定消息文件的分隔符，默认值为换行符 \\n。仅在 –payload-file 提供时有效。</li>\n<li><code>--initial-message-id &lt;Integer&gt;</code> 为生成的消息设置起始 ID，消息内容为字符串形式（如 Message:000…1:xxx…）。</li>\n<li><code>--message-send-gap-ms &lt;Integer&gt;</code> 两次消息发送之间的时间间隔（毫秒），默认值为 0。</li>\n<li><code>--csv-reporter-enabled</code> 启用 CSV 格式的指标输出，需配合 –metrics-dir 指定输出目录。</li>\n<li><code>--metrics-dir &lt;DIRECTORY&gt;</code> 指定 CSV 指标的输出目录，仅在启用 CSV 报告时有效。</li>\n</ul>\n</li>\n<li><strong>输出指标：</strong><ul>\n<li><code>start.time/end.time</code> 测试开始和结束时间。</li>\n<li><code>total.data.sent.in.MB</code> 发送的总数据量（MB）。</li>\n<li><code>MB.sec</code> 数据吞吐量（MB&#x2F;秒）。</li>\n<li><code>total.data.sent.in.nMsg</code> 发送的总消息数。</li>\n<li><code>nMsg.sec</code> 消息吞吐量（消息&#x2F;秒）。</li>\n<li><code>avg/max latency</code> 平均&#x2F;最大延迟（毫秒）。</li>\n<li><code>percentiles</code> 延迟分位数（如 50th、95th、99th、99.9th）。</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"kafka-consumer-perf-test-sh\"><a href=\"#kafka-consumer-perf-test-sh\" class=\"headerlink\" title=\"kafka-consumer-perf-test.sh\"></a>kafka-consumer-perf-test.sh</h4><ul>\n<li><strong>常用参数：</strong><ul>\n<li><code>--topic &lt;TOPIC&gt;</code> 指定消费的 Kafka 主题（必填）。</li>\n<li><code>--broker-list &lt;HOST1:PORT1,HOST2:PORT2,...&gt;</code> 指定 Kafka 集群的 broker 列表，用于连接 Kafka。</li>\n<li><code>--zookeeper &lt;ZK1:PORT1,ZK2:PORT2,...&gt;</code> 指定 ZooKeeper 连接字符串，用于获取元数据（较老版本使用）。</li>\n<li><code>--messages &lt;Long&gt;</code> 指定消费的总消息数，默认值为 Long.MAX_VALUE（即无限消费，直到手动停止）。</li>\n<li><code>--group &lt;GID&gt;</code> 指定消费者组 ID，运行多个测试实例时需设置不同的 ID。</li>\n<li><code>--threads &lt;Integer&gt;</code> 指定消费者线程数，默认值为 1。</li>\n<li><code>--consumer.config &lt;CONFIG-FILE&gt;</code> 指定消费者配置文件路径（如 consumer.properties）。</li>\n<li><code>--timeout &lt;Long&gt;</code> 指定测试的最大超时时间（毫秒），默认值为 Long.MAX_VALUE。</li>\n<li><code>--fetch-size &lt;Integer&gt;</code> 指定每次拉取的最大字节数，默认值为 1048576（1MB）。</li>\n<li><code>--csv-reporter-enabled</code> 启用 CSV 格式的指标输出，需配合 –metrics-dir 指定输出目录。</li>\n<li><code>--metrics-dir &lt;DIRECTORY&gt;</code> 指定 CSV 指标的输出目录，仅在启用 CSV 报告时有效。</li>\n</ul>\n</li>\n<li><strong>输出指标：</strong><ul>\n<li><code>start.time/end.time</code> 测试开始和结束时间。</li>\n<li><code>data.consumed.in.MB</code> 消费的总数据量（MB）。</li>\n<li><code>MB.sec</code> 数据吞吐量（MB&#x2F;秒）。</li>\n<li><code>data.consumed.in.nMsg</code> 消费的总消息数。</li>\n<li><code>nMsg.sec</code> 消息吞吐量（消息&#x2F;秒）。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><ul>\n<li><a href=\"https://kafka.apache.org/\">Kafka 官网</a></li>\n</ul>\n","categories":["Kafka"],"tags":["后端","消息队列","Kafka"]},{"title":"RocketMQ","url":"/RocketMQ/RocketMQ/","content":"<h2 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h2><span id=\"more\"></span>\n\n\n","categories":["RocketMQ"],"tags":["后端","消息队列","RocketMQ"]},{"title":"RabbitMQ","url":"/RabbitMQ/RabbitMQ/","content":"<h2 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h2><span id=\"more\"></span>","categories":["RabbitMQ"],"tags":["后端","消息队列","RabbitMQ"]}]